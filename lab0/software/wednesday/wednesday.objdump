
wednesday.elf:     file format elf32-littlenios2
wednesday.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001534c memsz 0x0001534c flags r-x
    LOAD off    0x0001636c vaddr 0x0081536c paddr 0x00816f28 align 2**12
         filesz 0x00001bbc memsz 0x00001bbc flags rw-
    LOAD off    0x00018ae4 vaddr 0x00818ae4 paddr 0x00818ae4 align 2**12
         filesz 0x00000000 memsz 0x00000404 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014670  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b48  00814824  00814824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bbc  0081536c  00816f28  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000404  00818ae4  00818ae4  00018ae4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00017f28  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  00017f50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a5e  00000000  00000000  00019148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00037290  00000000  00000000  0001aba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b9d3  00000000  00000000  00051e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d362  00000000  00000000  0005d809  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024f8  00000000  00000000  0007ab6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ea9  00000000  00000000  0007d064  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012bdf  00000000  00000000  0007ff0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00092aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  00092b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000975c0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000975c3  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000975c8  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000975c9  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000975cd  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000975d1  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000975d5  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000975e0  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000975eb  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  000975f6  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000000e  00000000  00000000  00097603  2**0
                  CONTENTS, READONLY
 28 .jdi          00004111  00000000  00000000  00097611  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814824 l    d  .rodata	00000000 .rodata
0081536c l    d  .rwdata	00000000 .rwdata
00818ae4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 board_diag.c
008001f0 l     F .text	00000068 MenuBegin
00800258 l     F .text	00000040 MenuItem
00818ae4 l     O .bss	00000001 ch.2455
00818ae5 l     O .bss	00000004 entry.2454
00800328 l     F .text	000000fc MenuEnd
00818ae9 l     O .bss	00000001 ch.2482
00800424 l     F .text	000000b8 DoSevenSegMenu
00800b2c l     F .text	00000058 SevenSegCount
00800b84 l     F .text	0000022c SevenSegControl
00818aea l     O .bss	00000001 ch.2498
008004dc l     F .text	00000174 TopMenu
00800650 l     F .text	000000c4 TestLEDs
00800714 l     F .text	00000108 TestLCD
0080091c l     F .text	00000194 TestButtons
00818aeb l     O .bss	00000004 entry.2524
00818aef l     O .bss	00000001 ch.2523
00818af0 l     O .bss	00000004 entry.2539
00818af4 l     O .bss	00000001 ch.2538
0080081c l     F .text	00000054 handle_button_interrupts
00800870 l     F .text	00000064 init_button_pio
008008d4 l     F .text	00000048 disable_button_pio
0081536c l     O .rwdata	00000010 segments.2597
00800ab0 l     F .text	0000007c sevenseg_set_hex
00818af5 l     O .bss	00000001 ch.2626
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00801160 l     F .text	00000058 std
0080126c l     F .text	00000008 __fp_lock
00801274 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0081537c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00802f64 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00803050 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803324 l     F .text	00000058 __sprint_r
00814d8a l     O .rodata	00000010 blanks.3452
00814d7a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814da2 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00814ec5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00806c10 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00816ef8 l     O .rwdata	00000004 charset
00815068 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008151b0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080ac78 l     F .text	00000048 match
00815ba4 l     O .rwdata	00000014 fpi.1950
008151cc l     O .rodata	00000028 tinytens
00815b90 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080d354 l     F .text	00000024 htinit
0080d3e0 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080dc8c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080ef1c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00810144 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00810c58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810cb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810dbc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008111ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0081128c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008113ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
008114f8 l     F .text	000000f8 alt_file_locked
0081177c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00811900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816f18 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00811be8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815d60 l     O .rwdata	00001060 jtag_uart_0
00816dc0 l     O .rwdata	00000120 lcd_display
00811cf0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811f30 l     F .text	00000228 altera_avalon_jtag_uart_irq
00812158 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00816f1c l     O .rwdata	00000004 colstart
008127d4 l     F .text	000000b8 lcd_write_command
0081288c l     F .text	000000d4 lcd_write_data
00812960 l     F .text	000000d8 lcd_clear_screen
00812a38 l     F .text	00000214 lcd_repaint_screen
00812c4c l     F .text	000000e0 lcd_scroll_up
00812d2c l     F .text	000002e4 lcd_handle_escape
0081354c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008137ac l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813c2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814008 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008145a0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814754 l     F .text	00000040 alt_sim_halt
00802cc8 g     F .text	0000001c putchar
008094d8 g     F .text	00000094 _mprec_log10
008095c4 g     F .text	00000088 __any_on
00808b90 g     F .text	00000070 _isatty_r
00815188 g     O .rodata	00000028 __mprec_tinytens
0081144c g     F .text	0000006c alt_main
00802cec g     F .text	000000a0 _puts_r
00818c58 g     O .bss	00000100 alt_irq
00808cf0 g     F .text	00000078 _lseek_r
00816f28 g       *ABS*	00000000 __flash_rwdata_start
00808408 g     F .text	000000a0 __sflags
0080fa3c g     F .text	00000088 __eqdf2
00818ee8 g       *ABS*	00000000 __alt_heap_start
00802c50 g     F .text	00000044 printf
0080316c g     F .text	00000068 __sseek
008011c8 g     F .text	000000a4 __sinit
0080d140 g     F .text	00000130 __swbuf_r
00808c50 g     F .text	00000084 _setlocale_r
008012c8 g     F .text	0000009c __sfmoreglue
0080d124 g     F .text	0000001c ungetc
008114d8 g     F .text	00000020 __malloc_unlock
0080acc0 g     F .text	000015cc _strtod_r
00800298 g     F .text	00000090 GetInputString
00808fec g     F .text	000000e0 memmove
008012b8 g     F .text	00000010 _cleanup
0080964c g     F .text	000000bc _Balloc
0080fb4c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00818af8 g     O .bss	00000004 edge_capture
00800020 g       *ABS*	00000000 __flash_exceptions_start
00801e64 g     F .text	00000074 _fstat_r
00818afc g     O .bss	00000004 errno
00802fcc g     F .text	00000014 __srget
008068ec g     F .text	00000024 __svfscanf
008104b8 g     F .text	0000002c __make_fp
00818b20 g     O .bss	00000004 alt_argv
0081eee0 g       *ABS*	00000000 _gp
00811a94 g     F .text	00000030 usleep
00815be0 g     O .rwdata	00000180 alt_fd_list
008021dc g     F .text	00000090 _getc_r
00802144 g     F .text	00000098 getc
00802ce4 g     F .text	00000008 _putchar_r
00813d54 g     F .text	00000094 alt_find_dev
00808f4c g     F .text	000000a0 memcpy
0080dcd8 g     F .text	00000248 __hexnan
008012ac g     F .text	0000000c _cleanup_r
0080fd6c g     F .text	000000f8 __floatsidf
008140e0 g     F .text	00000078 alt_io_redirect
0080fc5c g     F .text	00000088 __ltdf2
00814824 g       *ABS*	00000000 __DTOR_END__
00802d8c g     F .text	00000014 puts
00808de8 g     F .text	00000040 mbrtowc
008142fc g     F .text	00000020 altera_nios2_irq_init
00806910 g     F .text	00000068 _vfscanf_r
00809428 g     F .text	000000b0 __ratio
00812370 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00802c94 g     F .text	00000034 _printf_r
00810280 g     F .text	00000008 __udivsi3
008110e8 g     F .text	000000c4 isatty
00808c00 g     F .text	0000002c iswspace
00815098 g     O .rodata	000000c8 __mprec_tens
00808c2c g     F .text	00000008 __locale_charset
0080e044 g     F .text	000000a4 __fixunsdfsi
0081431c g     F .text	00000090 alt_icache_flush
00818b00 g     O .bss	00000004 __malloc_top_pad
0080cb98 g     F .text	00000024 strtoul
00816ef4 g     O .rwdata	00000004 __mb_cur_max
00808c34 g     F .text	0000000c _localeconv_r
0080cbbc g     F .text	000002f0 _strtoull_r
00809db0 g     F .text	0000003c __i2b
008086f4 g     F .text	0000049c __sfvwrite_r
00802fe0 g     F .text	00000070 _sbrk_r
0080a344 g     F .text	00000078 _read_r
00815b84 g     O .rwdata	0000000c __lc_ctype
00816f0c g     O .rwdata	00000004 alt_max_fd
008107f8 g     F .text	00000138 __unpack_d
00800e0c g     F .text	00000110 _fclose_r
0080112c g     F .text	00000034 fflush
00818b04 g     O .bss	00000004 __malloc_max_sbrked_mem
0080f3ac g     F .text	00000074 __adddf3
0080edb4 g     F .text	00000078 __nesf2
00809308 g     F .text	00000120 __b2d
0080e754 g     F .text	00000660 __umoddi3
008112f8 g     F .text	000000f4 lseek
00816ee4 g     O .rwdata	00000004 _global_impure_ptr
0080a3bc g     F .text	000005f4 _realloc_r
00818ee8 g       *ABS*	00000000 __bss_end
00810ff0 g     F .text	000000f8 alt_iic_isr_register
008141f0 g     F .text	0000010c alt_tick
00818b58 g     O .bss	00000100 __hexdig
0080e0e8 g     F .text	0000066c __udivdi3
00815160 g     O .rodata	00000028 __mprec_bigtens
0080a038 g     F .text	00000120 __s2b
0080ffb0 g     F .text	00000194 __floatunsidf
00809228 g     F .text	00000060 __mcmp
00816ef0 g     O .rwdata	00000004 __ctype_ptr
00801294 g     F .text	00000018 __fp_lock_all
00810fa8 g     F .text	00000048 alt_ic_irq_enabled
00814158 g     F .text	00000098 alt_alarm_stop
0080c61c g     F .text	00000024 strtol
00818b18 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815bb8 g     O .rwdata	00000028 alt_dev_null
00810348 g     F .text	000000c8 __unpack_f
00813b5c g     F .text	0000001c alt_dcache_flush_all
008090f4 g     F .text	00000070 __hi0bits
0080fe64 g     F .text	000000d8 __fixdfsi
0080c3b0 g     F .text	0000001c strtod
00816f28 g       *ABS*	00000000 __ram_rwdata_end
00816f04 g     O .rwdata	00000008 alt_dev_list
00811ac4 g     F .text	00000124 write
0080a25c g     F .text	000000e8 _putc_r
0080ee2c g     F .text	00000078 __gtsf2
0081536c g       *ABS*	00000000 __ram_rodata_end
00810ce4 g     F .text	000000d8 fstat
00801564 g     F .text	0000002c fprintf
0080fce4 g     F .text	00000088 __ledf2
00809f18 g     F .text	00000120 __pow5mult
00818b0c g     O .bss	00000004 __nlocale_changed
00810288 g     F .text	00000008 __umodsi3
00818ee8 g       *ABS*	00000000 end
008109f8 g     F .text	00000160 __pack_f
00813010 g     F .text	0000053c altera_avalon_lcd_16207_write
00801e40 g     F .text	00000024 fseek
00811e70 g     F .text	000000c0 altera_avalon_jtag_uart_init
00814820 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081381c g     F .text	00000090 alt_avalon_timer_sc_init
008102c8 g     F .text	00000080 __clzsi2
00812594 g     F .text	00000240 altera_avalon_jtag_uart_write
008011b8 g     F .text	00000004 __sfp_lock_acquire
00808e68 g     F .text	000000e4 memchr
0080337c g     F .text	00001ec4 ___vfprintf_internal_r
0080ab5c g     F .text	00000060 _sprintf_r
008016f0 g     F .text	00000314 _free_r
008145a4 g     F .text	000001b0 __call_exitprocs
00802f80 g     F .text	0000004c __srget_r
00818b10 g     O .bss	00000004 __mlocale_changed
00816eec g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00818b28 g     O .bss	00000004 _alt_tick_rate
0080c640 g     F .text	00000318 _strtoll_r
00809a10 g     F .text	0000014c __lshift
00818b2c g     O .bss	00000004 _alt_nticks
008117dc g     F .text	00000124 read
00811c7c g     F .text	00000074 alt_sys_init
00802bd8 g     F .text	00000078 _open_r
0081446c g     F .text	00000134 __register_exitproc
00809b5c g     F .text	00000254 __multiply
00812208 g     F .text	00000074 altera_avalon_jtag_uart_close
00810290 g     F .text	00000038 __mulsi3
0081536c g       *ABS*	00000000 __ram_rwdata_start
00814824 g       *ABS*	00000000 __ram_rodata_start
00818b30 g     O .bss	00000028 __malloc_current_mallinfo
00809708 g     F .text	0000017c __d2b
00811d28 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c958 g     F .text	00000240 _strtoul_r
00813f08 g     F .text	000000d0 alt_get_fd
00813a00 g     F .text	0000015c alt_busy_sleep
00810930 g     F .text	000000c8 __fpcmp_parts_d
00806ba0 g     F .text	00000070 _close_r
008143f8 g     F .text	00000074 memcmp
00811dd8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00818ee8 g       *ABS*	00000000 __alt_stack_base
00811e20 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802058 g     F .text	000000ac _fwrite_r
008030e0 g     F .text	00000084 sscanf
00806a64 g     F .text	0000013c __swsetup_r
0080f7e4 g     F .text	00000258 __divdf3
00801364 g     F .text	000000f0 __sfp
0080956c g     F .text	00000058 __copybits
0081577c g     O .rwdata	00000408 __malloc_av_
008011c4 g     F .text	00000004 __sinit_lock_release
0080f420 g     F .text	000003c4 __muldf3
00803250 g     F .text	00000060 __sread
008086b4 g     F .text	00000040 fread
00813de8 g     F .text	00000120 alt_find_file
00813b78 g     F .text	000000b4 alt_dev_llist_insert
008114b8 g     F .text	00000020 __malloc_lock
00801590 g     F .text	00000034 _fprintf_r
008119d8 g     F .text	000000bc sbrk
00800f30 g     F .text	000001fc _fflush_r
0080d28c g     F .text	000000c8 _calloc_r
00801548 g     F .text	0000001c fopen
00818ae4 g       *ABS*	00000000 __bss_start
00802b40 g     F .text	00000098 memset
00800db0 g     F .text	0000005c main
00818b24 g     O .bss	00000004 alt_envp
00818b08 g     O .bss	00000004 __malloc_max_total_mem
00811d80 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080d270 g     F .text	0000001c __swbuf
0080eea4 g     F .text	00000078 __ltsf2
008084a8 g     F .text	0000020c _fread_r
00813618 g     F .text	0000013c altera_avalon_lcd_16207_init
00803164 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00800f1c g     F .text	00000014 fclose
0080c3cc g     F .text	00000250 _strtol_r
0080ff3c g     F .text	00000074 __truncdfsf2
00818d58 g     O .bss	00000190 _atexit0
00806e54 g     F .text	000015b4 _dtoa_r
00802400 g     F .text	00000740 _malloc_r
00816f10 g     O .rwdata	00000004 alt_errno
0080ceac g     F .text	000000dc __submore
00801fa0 g     F .text	000000b8 _fwalk
00808e28 g     F .text	00000040 _mbtowc_r
0080a158 g     F .text	00000104 putc
008101c0 g     F .text	00000060 __divsi3
00815210 g     O .rodata	00000014 __thenan_df
008015c4 g     F .text	0000012c _malloc_trim_r
00814824 g       *ABS*	00000000 __CTOR_END__
0080abbc g     F .text	000000bc strcmp
00814824 g       *ABS*	00000000 __flash_rodata_start
00814824 g       *ABS*	00000000 __DTOR_LIST__
0080fac4 g     F .text	00000088 __nedf2
00811c48 g     F .text	00000034 alt_irq_init
00811960 g     F .text	00000078 alt_release_fd
0080aae8 g     F .text	00000074 sprintf
00815224 g     O .rodata	00000100 __clz_tab
00818b14 g     O .bss	00000004 _PathLocale
0080c28c g     F .text	00000124 strtof
008143ac g     F .text	00000014 atexit
008069ec g     F .text	00000078 _write_r
00808cd4 g     F .text	0000001c setlocale
0080aae0 g     F .text	00000008 nanf
00816ee0 g     O .rwdata	00000004 _impure_ptr
00818b1c g     O .bss	00000004 alt_argc
00808d68 g     F .text	00000080 _mbrtowc_r
00813cf0 g     F .text	00000064 _do_dtors
00801a04 g     F .text	0000043c _fseek_r
00802da0 g     F .text	000001c4 __srefill_r
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00809288 g     F .text	00000080 __ulp
0080a9b0 g     F .text	00000040 __isinfd
0080127c g     F .text	00000018 __fp_unlock_all
00813754 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00816efc g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808c40 g     F .text	00000010 localeconv
00810e1c g     F .text	00000050 alt_ic_isr_register
00802104 g     F .text	00000040 fwrite
0080d378 g     F .text	00000068 __hexdig_init
00803058 g     F .text	00000088 _sscanf_r
00816f28 g       *ABS*	00000000 _edata
00818ee8 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00806978 g     F .text	00000074 vfscanf
0081227c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00810f08 g     F .text	000000a0 alt_ic_irq_disable
008031d4 g     F .text	0000007c __swrite
00816ee8 g     O .rwdata	00000004 __malloc_trim_threshold
008143c0 g     F .text	00000038 exit
00801ed8 g     F .text	000000c8 _fwalk_reent
00809884 g     F .text	0000018c __mdiff
00810220 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008011bc g     F .text	00000004 __sfp_lock_release
0080aa20 g     F .text	000000c0 __sccl
00814dc4 g     O .rodata	00000101 _ctype_
00810410 g     F .text	000000a8 __fpcmp_parts_f
00801454 g     F .text	000000f4 _fopen_r
00814794 g     F .text	00000020 _exit
0080a9f0 g     F .text	00000030 __isnand
008138ac g     F .text	00000154 alt_alarm_start
0080df20 g     F .text	00000124 __muldi3
0080226c g     F .text	00000194 __smakebuf_r
008032b0 g     F .text	00000074 strlen
008115f0 g     F .text	0000018c open
0080fbd4 g     F .text	00000088 __gedf2
0080d490 g     F .text	000007fc __gethex
00813fd8 g     F .text	00000030 alt_icache_flush_all
00816f14 g     O .rwdata	00000004 alt_priority_mask
00810e6c g     F .text	0000009c alt_ic_irq_enable
00805240 g     F .text	00000024 __vfprintf_internal
0080f32c g     F .text	00000080 __subdf3
00809164 g     F .text	000000c4 __lo0bits
00805264 g     F .text	00001688 __svfscanf_r
00816f20 g     O .rwdata	00000008 alt_alarm_list
0080cf88 g     F .text	0000019c _ungetc_r
00813c8c g     F .text	00000064 _do_ctors
00810b58 g     F .text	00000100 close
0081120c g     F .text	00000080 alt_load
008104e4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
008011c0 g     F .text	00000004 __sinit_lock_acquire
00809dec g     F .text	0000012c __multadd
008090cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e31604 	addi	r3,r3,-29608
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e31604 	addi	r3,r3,-29608
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6bbb814 	ori	gp,gp,61152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10a2b914 	ori	r2,r2,35556

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18e3ba14 	ori	r3,r3,36584

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	081120c0 	call	81120c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	081144c0 	call	81144c <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <MenuBegin>:
 * 
 * Function to set the Menu "header".
 */

static void MenuBegin( char *title )
{
  8001f0:	defffd04 	addi	sp,sp,-12
  8001f4:	dfc00215 	stw	ra,8(sp)
  8001f8:	df000115 	stw	fp,4(sp)
  8001fc:	df000104 	addi	fp,sp,4
  800200:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
  800204:	01002074 	movhi	r4,129
  800208:	21120904 	addi	r4,r4,18468
  80020c:	0802d8c0 	call	802d8c <puts>
  printf("----------------------------------\n");
  800210:	01002074 	movhi	r4,129
  800214:	21120a04 	addi	r4,r4,18472
  800218:	0802d8c0 	call	802d8c <puts>
  printf("Nios II Board Diagnostics\n");
  80021c:	01002074 	movhi	r4,129
  800220:	21121304 	addi	r4,r4,18508
  800224:	0802d8c0 	call	802d8c <puts>
  printf("----------------------------------\n");
  800228:	01002074 	movhi	r4,129
  80022c:	21120a04 	addi	r4,r4,18472
  800230:	0802d8c0 	call	802d8c <puts>
  printf(" %s\n",title);
  800234:	01002074 	movhi	r4,129
  800238:	21121a04 	addi	r4,r4,18536
  80023c:	e17fff17 	ldw	r5,-4(fp)
  800240:	0802c500 	call	802c50 <printf>
}
  800244:	e037883a 	mov	sp,fp
  800248:	dfc00117 	ldw	ra,4(sp)
  80024c:	df000017 	ldw	fp,0(sp)
  800250:	dec00204 	addi	sp,sp,8
  800254:	f800283a 	ret

00800258 <MenuItem>:
 *    (defined by 'string').
 *
 **********************************************************************/

static void MenuItem( char letter, char *name )
{
  800258:	defffc04 	addi	sp,sp,-16
  80025c:	dfc00315 	stw	ra,12(sp)
  800260:	df000215 	stw	fp,8(sp)
  800264:	df000204 	addi	fp,sp,8
  800268:	e17fff15 	stw	r5,-4(fp)
  80026c:	e13ffe05 	stb	r4,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
  800270:	e17ffe07 	ldb	r5,-8(fp)
  800274:	01002074 	movhi	r4,129
  800278:	21121c04 	addi	r4,r4,18544
  80027c:	e1bfff17 	ldw	r6,-4(fp)
  800280:	0802c500 	call	802c50 <printf>
}
  800284:	e037883a 	mov	sp,fp
  800288:	dfc00117 	ldw	ra,4(sp)
  80028c:	df000017 	ldw	fp,0(sp)
  800290:	dec00204 	addi	sp,sp,8
  800294:	f800283a 	ret

00800298 <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
  800298:	defff904 	addi	sp,sp,-28
  80029c:	dfc00615 	stw	ra,24(sp)
  8002a0:	df000515 	stw	fp,20(sp)
  8002a4:	df000504 	addi	fp,sp,20
  8002a8:	e13ffd15 	stw	r4,-12(fp)
  8002ac:	e17ffe15 	stw	r5,-8(fp)
  8002b0:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
  8002b4:	e03ffb15 	stw	zero,-20(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
  8002b8:	e03ffc15 	stw	zero,-16(fp)
  8002bc:	00000f06 	br	8002fc <GetInputString+0x64>
  {
    if( (ch = getc(stream)) != '\r')
  8002c0:	e13fff17 	ldw	r4,-4(fp)
  8002c4:	08021440 	call	802144 <getc>
  8002c8:	e0bffb15 	stw	r2,-20(fp)
  8002cc:	e0bffb17 	ldw	r2,-20(fp)
  8002d0:	10800360 	cmpeqi	r2,r2,13
  8002d4:	1000091e 	bne	r2,zero,8002fc <GetInputString+0x64>
    {
      entry[i] = ch;
  8002d8:	e0bffc17 	ldw	r2,-16(fp)
  8002dc:	1007883a 	mov	r3,r2
  8002e0:	e0bffd17 	ldw	r2,-12(fp)
  8002e4:	1887883a 	add	r3,r3,r2
  8002e8:	e0bffb17 	ldw	r2,-20(fp)
  8002ec:	18800005 	stb	r2,0(r3)
      i++;
  8002f0:	e0bffc17 	ldw	r2,-16(fp)
  8002f4:	10800044 	addi	r2,r2,1
  8002f8:	e0bffc15 	stw	r2,-16(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
  8002fc:	e0bffb17 	ldw	r2,-20(fp)
  800300:	108002a0 	cmpeqi	r2,r2,10
  800304:	1000031e 	bne	r2,zero,800314 <GetInputString+0x7c>
  800308:	e0fffc17 	ldw	r3,-16(fp)
  80030c:	e0bffe17 	ldw	r2,-8(fp)
  800310:	18bfeb16 	blt	r3,r2,8002c0 <GetInputString+0x28>
    {
      entry[i] = ch;
      i++;
    }
  }
}
  800314:	e037883a 	mov	sp,fp
  800318:	dfc00117 	ldw	ra,4(sp)
  80031c:	df000017 	ldw	fp,0(sp)
  800320:	dec00204 	addi	sp,sp,8
  800324:	f800283a 	ret

00800328 <MenuEnd>:
 *    and continues until either a 'q' or a character outside of the 
 *    range, enclosed by 'lowLetter' and 'highLetter', is reached.
 */

static int MenuEnd( char lowLetter, char highLetter )
{
  800328:	defffc04 	addi	sp,sp,-16
  80032c:	dfc00315 	stw	ra,12(sp)
  800330:	df000215 	stw	fp,8(sp)
  800334:	df000204 	addi	fp,sp,8
  800338:	e13ffe05 	stb	r4,-8(fp)
  80033c:	e17fff05 	stb	r5,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
  800340:	01002074 	movhi	r4,129
  800344:	21122004 	addi	r4,r4,18560
  800348:	0802d8c0 	call	802d8c <puts>
  printf("----------------------------------\n");
  80034c:	01002074 	movhi	r4,129
  800350:	21120a04 	addi	r4,r4,18472
  800354:	0802d8c0 	call	802d8c <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
  800358:	e17ffe07 	ldb	r5,-8(fp)
  80035c:	e1bfff07 	ldb	r6,-4(fp)
  800360:	01002074 	movhi	r4,129
  800364:	21122404 	addi	r4,r4,18576
  800368:	0802c500 	call	802c50 <printf>
  
  GetInputString( entry, sizeof(entry), stdin );
  80036c:	00802074 	movhi	r2,129
  800370:	109bb804 	addi	r2,r2,28384
  800374:	10800017 	ldw	r2,0(r2)
  800378:	11800117 	ldw	r6,4(r2)
  80037c:	d1270144 	addi	r4,gp,-25595
  800380:	01400104 	movi	r5,4
  800384:	08002980 	call	800298 <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
  800388:	d1270144 	addi	r4,gp,-25595
  80038c:	01402074 	movhi	r5,129
  800390:	29523004 	addi	r5,r5,18624
  800394:	d1a70104 	addi	r6,gp,-25596
  800398:	08030e00 	call	8030e0 <sscanf>
  80039c:	1005003a 	cmpeq	r2,r2,zero
  8003a0:	1000171e 	bne	r2,zero,800400 <MenuEnd+0xd8>
  {
    if( ch >= 'A' && ch <= 'Z' )
  8003a4:	d0a70103 	ldbu	r2,-25596(gp)
  8003a8:	10803fcc 	andi	r2,r2,255
  8003ac:	1080201c 	xori	r2,r2,128
  8003b0:	10bfe004 	addi	r2,r2,-128
  8003b4:	10801050 	cmplti	r2,r2,65
  8003b8:	1000091e 	bne	r2,zero,8003e0 <MenuEnd+0xb8>
  8003bc:	d0a70103 	ldbu	r2,-25596(gp)
  8003c0:	10803fcc 	andi	r2,r2,255
  8003c4:	1080201c 	xori	r2,r2,128
  8003c8:	10bfe004 	addi	r2,r2,-128
  8003cc:	108016c8 	cmpgei	r2,r2,91
  8003d0:	1000031e 	bne	r2,zero,8003e0 <MenuEnd+0xb8>
      ch += 'a' - 'A';
  8003d4:	d0a70103 	ldbu	r2,-25596(gp)
  8003d8:	10800804 	addi	r2,r2,32
  8003dc:	d0a70105 	stb	r2,-25596(gp)
    if( ch == 27 )
  8003e0:	d0a70103 	ldbu	r2,-25596(gp)
  8003e4:	10803fcc 	andi	r2,r2,255
  8003e8:	1080201c 	xori	r2,r2,128
  8003ec:	10bfe004 	addi	r2,r2,-128
  8003f0:	108006d8 	cmpnei	r2,r2,27
  8003f4:	1000021e 	bne	r2,zero,800400 <MenuEnd+0xd8>
      ch = 'q';        
  8003f8:	00801c44 	movi	r2,113
  8003fc:	d0a70105 	stb	r2,-25596(gp)
  }
  return ch;
  800400:	d0a70103 	ldbu	r2,-25596(gp)
  800404:	10803fcc 	andi	r2,r2,255
  800408:	1080201c 	xori	r2,r2,128
  80040c:	10bfe004 	addi	r2,r2,-128
}
  800410:	e037883a 	mov	sp,fp
  800414:	dfc00117 	ldw	ra,4(sp)
  800418:	df000017 	ldw	fp,0(sp)
  80041c:	dec00204 	addi	sp,sp,8
  800420:	f800283a 	ret

00800424 <DoSevenSegMenu>:
 * Generates the Seven Segment Display menu.
 * 
 ******************************************************************************/

static void DoSevenSegMenu( void )
{
  800424:	defffd04 	addi	sp,sp,-12
  800428:	dfc00215 	stw	ra,8(sp)
  80042c:	df000115 	stw	fp,4(sp)
  800430:	df000104 	addi	fp,sp,4
  static char ch;

  while(1)
  {
    MenuBegin("Seven Segment Menu");
  800434:	01002074 	movhi	r4,129
  800438:	21123104 	addi	r4,r4,18628
  80043c:	08001f00 	call	8001f0 <MenuBegin>
    MenuItem('a', "Count From 0 to FF.");
  800440:	01001844 	movi	r4,97
  800444:	01402074 	movhi	r5,129
  800448:	29523604 	addi	r5,r5,18648
  80044c:	08002580 	call	800258 <MenuItem>
    MenuItem('b', "Control Individual Segments.");
  800450:	01001884 	movi	r4,98
  800454:	01402074 	movhi	r5,129
  800458:	29523b04 	addi	r5,r5,18668
  80045c:	08002580 	call	800258 <MenuItem>
    ch = MenuEnd('a', 'b');
  800460:	01001844 	movi	r4,97
  800464:	01401884 	movi	r5,98
  800468:	08003280 	call	800328 <MenuEnd>
  80046c:	d0a70245 	stb	r2,-25591(gp)
  
    switch(ch)
  800470:	d0a70243 	ldbu	r2,-25591(gp)
  800474:	10803fcc 	andi	r2,r2,255
  800478:	1080201c 	xori	r2,r2,128
  80047c:	10bfe004 	addi	r2,r2,-128
  800480:	e0bfff15 	stw	r2,-4(fp)
  800484:	e0ffff17 	ldw	r3,-4(fp)
  800488:	18801860 	cmpeqi	r2,r3,97
  80048c:	1000041e 	bne	r2,zero,8004a0 <DoSevenSegMenu+0x7c>
  800490:	e0ffff17 	ldw	r3,-4(fp)
  800494:	188018a0 	cmpeqi	r2,r3,98
  800498:	1000031e 	bne	r2,zero,8004a8 <DoSevenSegMenu+0x84>
  80049c:	00000306 	br	8004ac <DoSevenSegMenu+0x88>
    {
      MenuCase('a', SevenSegCount);
  8004a0:	0800b2c0 	call	800b2c <SevenSegCount>
  8004a4:	00000106 	br	8004ac <DoSevenSegMenu+0x88>
      MenuCase('b', SevenSegControl);
  8004a8:	0800b840 	call	800b84 <SevenSegControl>
    }
    
    if ( ch == 'q' )
  8004ac:	d0a70243 	ldbu	r2,-25591(gp)
  8004b0:	10803fcc 	andi	r2,r2,255
  8004b4:	1080201c 	xori	r2,r2,128
  8004b8:	10bfe004 	addi	r2,r2,-128
  8004bc:	10801c60 	cmpeqi	r2,r2,113
  8004c0:	1000011e 	bne	r2,zero,8004c8 <DoSevenSegMenu+0xa4>
    {
      break;
    }
  }
  8004c4:	003fdb06 	br	800434 <DoSevenSegMenu+0x10>
}
  8004c8:	e037883a 	mov	sp,fp
  8004cc:	dfc00117 	ldw	ra,4(sp)
  8004d0:	df000017 	ldw	fp,0(sp)
  8004d4:	dec00204 	addi	sp,sp,8
  8004d8:	f800283a 	ret

008004dc <TopMenu>:
 * Generates the top level menu for this diagnostics program.
 * 
 ******************************************************************************/

static char TopMenu( void )
{
  8004dc:	defffd04 	addi	sp,sp,-12
  8004e0:	dfc00215 	stw	ra,8(sp)
  8004e4:	df000115 	stw	fp,4(sp)
  8004e8:	df000104 	addi	fp,sp,4
  
  /* Output the top-level menu to STDOUT */

  while (1)
  {
    MenuBegin("Main Menu");
  8004ec:	01002074 	movhi	r4,129
  8004f0:	21124304 	addi	r4,r4,18700
  8004f4:	08001f00 	call	8001f0 <MenuBegin>
#ifdef LED_PIO_NAME
    MenuItem( 'a', "Test LEDs" );
  8004f8:	01001844 	movi	r4,97
  8004fc:	01402074 	movhi	r5,129
  800500:	29524604 	addi	r5,r5,18712
  800504:	08002580 	call	800258 <MenuItem>
#endif
#ifdef LCD_DISPLAY_NAME
    MenuItem( 'b', "LCD Display Test");
  800508:	01001884 	movi	r4,98
  80050c:	01402074 	movhi	r5,129
  800510:	29524904 	addi	r5,r5,18724
  800514:	08002580 	call	800258 <MenuItem>
#endif
#ifdef BUTTON_PIO_NAME
    MenuItem( 'c', "Button/Switch Test");
  800518:	010018c4 	movi	r4,99
  80051c:	01402074 	movhi	r5,129
  800520:	29524e04 	addi	r5,r5,18744
  800524:	08002580 	call	800258 <MenuItem>
#endif
#ifdef SEVEN_SEG_PIO_NAME
    MenuItem( 'd', "Seven Segment Menu" );
  800528:	01001904 	movi	r4,100
  80052c:	01402074 	movhi	r5,129
  800530:	29523104 	addi	r5,r5,18628
  800534:	08002580 	call	800258 <MenuItem>
#endif
#ifdef JTAG_UART_NAME
    MenuItem( 'e', "JTAG UART Menu" );
#endif  
    ch = MenuEnd('a', 'e');
  800538:	01001844 	movi	r4,97
  80053c:	01401944 	movi	r5,101
  800540:	08003280 	call	800328 <MenuEnd>
  800544:	d0a70285 	stb	r2,-25590(gp)

  
    switch(ch)
  800548:	d0a70283 	ldbu	r2,-25590(gp)
  80054c:	10803fcc 	andi	r2,r2,255
  800550:	1080201c 	xori	r2,r2,128
  800554:	10bfe004 	addi	r2,r2,-128
  800558:	10bfe7c4 	addi	r2,r2,-97
  80055c:	e0bfff15 	stw	r2,-4(fp)
  800560:	e0ffff17 	ldw	r3,-4(fp)
  800564:	18800468 	cmpgeui	r2,r3,17
  800568:	1000221e 	bne	r2,zero,8005f4 <TopMenu+0x118>
  80056c:	e13fff17 	ldw	r4,-4(fp)
  800570:	e13fff17 	ldw	r4,-4(fp)
  800574:	2105883a 	add	r2,r4,r4
  800578:	1087883a 	add	r3,r2,r2
  80057c:	00802034 	movhi	r2,128
  800580:	10816404 	addi	r2,r2,1424
  800584:	1885883a 	add	r2,r3,r2
  800588:	10800017 	ldw	r2,0(r2)
  80058c:	1000683a 	jmp	r2
  800590:	008005d4 	movui	r2,23
  800594:	008005dc 	xori	r2,zero,23
  800598:	008005e4 	muli	r2,zero,23
  80059c:	008005ec 	andhi	r2,zero,23
  8005a0:	008005f4 	movhi	r2,23
  8005a4:	008005f4 	movhi	r2,23
  8005a8:	008005f4 	movhi	r2,23
  8005ac:	008005f4 	movhi	r2,23
  8005b0:	008005f4 	movhi	r2,23
  8005b4:	008005f4 	movhi	r2,23
  8005b8:	008005f4 	movhi	r2,23
  8005bc:	008005f4 	movhi	r2,23
  8005c0:	008005f4 	movhi	r2,23
  8005c4:	008005f4 	movhi	r2,23
  8005c8:	008005f4 	movhi	r2,23
  8005cc:	008005f4 	movhi	r2,23
  8005d0:	00800610 	cmplti	r2,zero,24
    {
#ifdef LED_PIO_NAME
      MenuCase('a',TestLEDs);
  8005d4:	08006500 	call	800650 <TestLEDs>
  8005d8:	00000d06 	br	800610 <TopMenu+0x134>
#endif
#ifdef LCD_DISPLAY_NAME
      MenuCase('b',TestLCD);
  8005dc:	08007140 	call	800714 <TestLCD>
  8005e0:	00000b06 	br	800610 <TopMenu+0x134>
#endif
#ifdef BUTTON_PIO_NAME
      MenuCase('c',TestButtons);
  8005e4:	080091c0 	call	80091c <TestButtons>
  8005e8:	00000906 	br	800610 <TopMenu+0x134>
#endif
#ifdef SEVEN_SEG_PIO_NAME
      MenuCase('d',DoSevenSegMenu);
  8005ec:	08004240 	call	800424 <DoSevenSegMenu>
  8005f0:	00000706 	br	800610 <TopMenu+0x134>
#endif
#ifdef JTAG_UART_NAME
      MenuCase('e',DoJTAGUARTMenu);
#endif
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
  8005f4:	d0a70283 	ldbu	r2,-25590(gp)
  8005f8:	11403fcc 	andi	r5,r2,255
  8005fc:	2940201c 	xori	r5,r5,128
  800600:	297fe004 	addi	r5,r5,-128
  800604:	01002074 	movhi	r4,129
  800608:	21125304 	addi	r4,r4,18764
  80060c:	0802c500 	call	802c50 <printf>
    }
    
    if (ch == 'q' )
  800610:	d0a70283 	ldbu	r2,-25590(gp)
  800614:	10803fcc 	andi	r2,r2,255
  800618:	1080201c 	xori	r2,r2,128
  80061c:	10bfe004 	addi	r2,r2,-128
  800620:	10801c60 	cmpeqi	r2,r2,113
  800624:	1000011e 	bne	r2,zero,80062c <TopMenu+0x150>
      break;
  }
  800628:	003fb006 	br	8004ec <TopMenu+0x10>
  return( ch );
  80062c:	d0a70283 	ldbu	r2,-25590(gp)
  800630:	10803fcc 	andi	r2,r2,255
  800634:	1080201c 	xori	r2,r2,128
  800638:	10bfe004 	addi	r2,r2,-128
}
  80063c:	e037883a 	mov	sp,fp
  800640:	dfc00117 	ldw	ra,4(sp)
  800644:	df000017 	ldw	fp,0(sp)
  800648:	dec00204 	addi	sp,sp,8
  80064c:	f800283a 	ret

00800650 <TestLEDs>:
 * This function tests LED functionality.
 * It exits when the user types a 'q'.
 */

static void TestLEDs(void)
{
  800650:	defffd04 	addi	sp,sp,-12
  800654:	dfc00215 	stw	ra,8(sp)
  800658:	df000115 	stw	fp,4(sp)
  80065c:	df000104 	addi	fp,sp,4
  volatile alt_u8 led;
  static char ch;
  static char entry[4];
  
  /* Turn the LEDs on. */
  led = 0xff;
  800660:	00bfffc4 	movi	r2,-1
  800664:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led);
  800668:	e0bfff03 	ldbu	r2,-4(fp)
  80066c:	10c03fcc 	andi	r3,r2,255
  800670:	00804034 	movhi	r2,256
  800674:	10841404 	addi	r2,r2,4176
  800678:	10c00035 	stwio	r3,0(r2)
  printf( "\nAll LEDs should now be on.\n" );
  80067c:	01002074 	movhi	r4,129
  800680:	21126104 	addi	r4,r4,18820
  800684:	0802d8c0 	call	802d8c <puts>
  printf( "\tPlease press 'q' [Followed by <enter>] to exit this test.\n" );
  800688:	01002074 	movhi	r4,129
  80068c:	21126804 	addi	r4,r4,18848
  800690:	0802d8c0 	call	802d8c <puts>
  
  /* Get the input string for exiting this test. */
  do {
    GetInputString( entry, sizeof(entry), stdin);
  800694:	00802074 	movhi	r2,129
  800698:	109bb804 	addi	r2,r2,28384
  80069c:	10800017 	ldw	r2,0(r2)
  8006a0:	11800117 	ldw	r6,4(r2)
  8006a4:	d12702c4 	addi	r4,gp,-25589
  8006a8:	01400104 	movi	r5,4
  8006ac:	08002980 	call	800298 <GetInputString>
    sscanf( entry, "%c\n", &ch );
  8006b0:	d12702c4 	addi	r4,gp,-25589
  8006b4:	01402074 	movhi	r5,129
  8006b8:	29523004 	addi	r5,r5,18624
  8006bc:	d1a703c4 	addi	r6,gp,-25585
  8006c0:	08030e00 	call	8030e0 <sscanf>
  } while ( ch != 'q' );
  8006c4:	d0a703c3 	ldbu	r2,-25585(gp)
  8006c8:	10803fcc 	andi	r2,r2,255
  8006cc:	1080201c 	xori	r2,r2,128
  8006d0:	10bfe004 	addi	r2,r2,-128
  8006d4:	10801c58 	cmpnei	r2,r2,113
  8006d8:	103fee1e 	bne	r2,zero,800694 <TestLEDs+0x44>
  
  /* Turn the LEDs off and exit. */
  led = 0x0;
  8006dc:	e03fff05 	stb	zero,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led);
  8006e0:	e0bfff03 	ldbu	r2,-4(fp)
  8006e4:	10c03fcc 	andi	r3,r2,255
  8006e8:	00804034 	movhi	r2,256
  8006ec:	10841404 	addi	r2,r2,4176
  8006f0:	10c00035 	stwio	r3,0(r2)
  printf(".....Exiting LED Test.\n");
  8006f4:	01002074 	movhi	r4,129
  8006f8:	21127704 	addi	r4,r4,18908
  8006fc:	0802d8c0 	call	802d8c <puts>
}
  800700:	e037883a 	mov	sp,fp
  800704:	dfc00117 	ldw	ra,4(sp)
  800708:	df000017 	ldw	fp,0(sp)
  80070c:	dec00204 	addi	sp,sp,8
  800710:	f800283a 	ret

00800714 <TestLCD>:
 * Tests the LCD by printing some simple output to each line.
 * 
 ******************************************************************************/

static void TestLCD( void )
{
  800714:	defffd04 	addi	sp,sp,-12
  800718:	dfc00215 	stw	ra,8(sp)
  80071c:	df000115 	stw	fp,4(sp)
  800720:	df000104 	addi	fp,sp,4
  FILE *lcd;
  static char ch;
  static char entry[4];
  
  lcd = fopen("/dev/lcd_display", "w");
  800724:	01002074 	movhi	r4,129
  800728:	21127d04 	addi	r4,r4,18932
  80072c:	01402074 	movhi	r5,129
  800730:	29528204 	addi	r5,r5,18952
  800734:	08015480 	call	801548 <fopen>
  800738:	e0bfff15 	stw	r2,-4(fp)
  
  /* Write some simple text to the LCD. */
  if (lcd != NULL )
  80073c:	e0bfff17 	ldw	r2,-4(fp)
  800740:	1005003a 	cmpeq	r2,r2,zero
  800744:	10000c1e 	bne	r2,zero,800778 <TestLCD+0x64>
  {
    fprintf(lcd, "\nThis is the LCD Display.\n");
  800748:	01002074 	movhi	r4,129
  80074c:	21128304 	addi	r4,r4,18956
  800750:	01400044 	movi	r5,1
  800754:	01800684 	movi	r6,26
  800758:	e1ffff17 	ldw	r7,-4(fp)
  80075c:	08021040 	call	802104 <fwrite>
    fprintf(lcd, "If you can see this, your LCD is functional.\n");
  800760:	01002074 	movhi	r4,129
  800764:	21128a04 	addi	r4,r4,18984
  800768:	01400044 	movi	r5,1
  80076c:	01800b44 	movi	r6,45
  800770:	e1ffff17 	ldw	r7,-4(fp)
  800774:	08021040 	call	802104 <fwrite>
  }
  printf("\nIf you can see messages scrolling on the LCD Display, then it is functional!\n");
  800778:	01002074 	movhi	r4,129
  80077c:	21129604 	addi	r4,r4,19032
  800780:	0802d8c0 	call	802d8c <puts>
  printf( "\tPlease press 'q' [Followed by <enter>] to exit this test.\n" );
  800784:	01002074 	movhi	r4,129
  800788:	21126804 	addi	r4,r4,18848
  80078c:	0802d8c0 	call	802d8c <puts>
  
  /* Get the input string for exiting this test. */
  do {
    GetInputString( entry, sizeof(entry), stdin);
  800790:	00802074 	movhi	r2,129
  800794:	109bb804 	addi	r2,r2,28384
  800798:	10800017 	ldw	r2,0(r2)
  80079c:	11800117 	ldw	r6,4(r2)
  8007a0:	d1270404 	addi	r4,gp,-25584
  8007a4:	01400104 	movi	r5,4
  8007a8:	08002980 	call	800298 <GetInputString>
    sscanf( entry, "%c\n", &ch );
  8007ac:	d1270404 	addi	r4,gp,-25584
  8007b0:	01402074 	movhi	r5,129
  8007b4:	29523004 	addi	r5,r5,18624
  8007b8:	d1a70504 	addi	r6,gp,-25580
  8007bc:	08030e00 	call	8030e0 <sscanf>
  } while ( ch != 'q' );
  8007c0:	d0a70503 	ldbu	r2,-25580(gp)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	1080201c 	xori	r2,r2,128
  8007cc:	10bfe004 	addi	r2,r2,-128
  8007d0:	10801c58 	cmpnei	r2,r2,113
  8007d4:	103fee1e 	bne	r2,zero,800790 <TestLCD+0x7c>

  /* Send the command sequence to clear the LCD. */
  if (lcd != NULL )
  8007d8:	e0bfff17 	ldw	r2,-4(fp)
  8007dc:	1005003a 	cmpeq	r2,r2,zero
  8007e0:	1000071e 	bne	r2,zero,800800 <TestLCD+0xec>
  {
    fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8007e4:	e13fff17 	ldw	r4,-4(fp)
  8007e8:	01402074 	movhi	r5,129
  8007ec:	2952aa04 	addi	r5,r5,19112
  8007f0:	018006c4 	movi	r6,27
  8007f4:	01c02074 	movhi	r7,129
  8007f8:	39d2ac04 	addi	r7,r7,19120
  8007fc:	08015640 	call	801564 <fprintf>
  }
  fclose( lcd );
  800800:	e13fff17 	ldw	r4,-4(fp)
  800804:	0800f1c0 	call	800f1c <fclose>

  return;
}
  800808:	e037883a 	mov	sp,fp
  80080c:	dfc00117 	ldw	ra,4(sp)
  800810:	df000017 	ldw	fp,0(sp)
  800814:	dec00204 	addi	sp,sp,8
  800818:	f800283a 	ret

0080081c <handle_button_interrupts>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_button_interrupts(void* context)
#else
static void handle_button_interrupts(void* context, alt_u32 id)
#endif
{
  80081c:	defffd04 	addi	sp,sp,-12
  800820:	df000215 	stw	fp,8(sp)
  800824:	df000204 	addi	fp,sp,8
  800828:	e13fff15 	stw	r4,-4(fp)
  /* Cast context to edge_capture's type.
   * It is important to keep this volatile,
   * to avoid compiler optimization issues.
   */
  volatile int* edge_capture_ptr = (volatile int*) context;
  80082c:	e0bfff17 	ldw	r2,-4(fp)
  800830:	e0bffe15 	stw	r2,-8(fp)
  /* Store the value in the Button's edge capture register in *context. */
  *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
  800834:	00804034 	movhi	r2,256
  800838:	10841f04 	addi	r2,r2,4220
  80083c:	10c00037 	ldwio	r3,0(r2)
  800840:	e0bffe17 	ldw	r2,-8(fp)
  800844:	10c00015 	stw	r3,0(r2)
  /* Reset the Button's edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0);
  800848:	00804034 	movhi	r2,256
  80084c:	10841f04 	addi	r2,r2,4220
  800850:	10000035 	stwio	zero,0(r2)
  /* 
   * Read the PIO to delay ISR exit. This is done to prevent a spurious
   * interrupt in systems with high processor -> pio latency and fast
   * interrupts.
   */
  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
  800854:	00804034 	movhi	r2,256
  800858:	10841f04 	addi	r2,r2,4220
  80085c:	10800037 	ldwio	r2,0(r2)
}
  800860:	e037883a 	mov	sp,fp
  800864:	df000017 	ldw	fp,0(sp)
  800868:	dec00104 	addi	sp,sp,4
  80086c:	f800283a 	ret

00800870 <init_button_pio>:

/* Initialize the button_pio. */

static void init_button_pio()
{
  800870:	defffc04 	addi	sp,sp,-16
  800874:	dfc00315 	stw	ra,12(sp)
  800878:	df000215 	stw	fp,8(sp)
  80087c:	df000204 	addi	fp,sp,8
  /* Recast the edge_capture pointer to match the alt_irq_register() function
  * prototype. */
  void* edge_capture_ptr = (void*) &edge_capture;
  800880:	d0a70604 	addi	r2,gp,-25576
  800884:	e0bfff15 	stw	r2,-4(fp)
  /* Enable all 4 button interrupts. */
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0xf);
  800888:	00c04034 	movhi	r3,256
  80088c:	18c41e04 	addi	r3,r3,4216
  800890:	008003c4 	movi	r2,15
  800894:	18800035 	stwio	r2,0(r3)
  /* Reset the edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0x0);
  800898:	00804034 	movhi	r2,256
  80089c:	10841f04 	addi	r2,r2,4220
  8008a0:	10000035 	stwio	zero,0(r2)
   * which does not support enhanced interrupts. For systems created using
   * the Nios II softawre build tools, the enhanced API is recommended
   * for new designs.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ, 
  8008a4:	d8000015 	stw	zero,0(sp)
  8008a8:	0009883a 	mov	r4,zero
  8008ac:	01400044 	movi	r5,1
  8008b0:	01802034 	movhi	r6,128
  8008b4:	31820704 	addi	r6,r6,2076
  8008b8:	e1ffff17 	ldw	r7,-4(fp)
  8008bc:	0810e1c0 	call	810e1c <alt_ic_isr_register>
    handle_button_interrupts, edge_capture_ptr, 0x0);
#else
  alt_irq_register( BUTTON_PIO_IRQ, edge_capture_ptr, 
    handle_button_interrupts);
#endif
}
  8008c0:	e037883a 	mov	sp,fp
  8008c4:	dfc00117 	ldw	ra,4(sp)
  8008c8:	df000017 	ldw	fp,0(sp)
  8008cc:	dec00204 	addi	sp,sp,8
  8008d0:	f800283a 	ret

008008d4 <disable_button_pio>:

/* Tear down the button_pio. */

static void disable_button_pio()
{
  8008d4:	defffd04 	addi	sp,sp,-12
  8008d8:	dfc00215 	stw	ra,8(sp)
  8008dc:	df000115 	stw	fp,4(sp)
  8008e0:	df000104 	addi	fp,sp,4
  /* Disable interrupts from the button_pio PIO component. */
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0x0);
  8008e4:	00804034 	movhi	r2,256
  8008e8:	10841e04 	addi	r2,r2,4216
  8008ec:	10000035 	stwio	zero,0(r2)
  /* Un-register the IRQ handler by passing a null handler. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ, 
  8008f0:	d8000015 	stw	zero,0(sp)
  8008f4:	0009883a 	mov	r4,zero
  8008f8:	01400044 	movi	r5,1
  8008fc:	000d883a 	mov	r6,zero
  800900:	000f883a 	mov	r7,zero
  800904:	0810e1c0 	call	810e1c <alt_ic_isr_register>
    NULL, NULL, NULL);
#else
  alt_irq_register( BUTTON_PIO_IRQ, NULL, NULL );
#endif
}
  800908:	e037883a 	mov	sp,fp
  80090c:	dfc00117 	ldw	ra,4(sp)
  800910:	df000017 	ldw	fp,0(sp)
  800914:	dec00204 	addi	sp,sp,8
  800918:	f800283a 	ret

0080091c <TestButtons>:
 * 
 ******************************************************************************/


static void TestButtons( void )
{
  80091c:	defffb04 	addi	sp,sp,-20
  800920:	dfc00415 	stw	ra,16(sp)
  800924:	df000315 	stw	fp,12(sp)
  800928:	df000304 	addi	fp,sp,12
  /* Variable which holds the last value of edge_capture to avoid 
   * "double counting" button/switch presses
   */
  int last_tested;
  /* Initialize the Buttons/Switches (SW0-SW3) */
  init_button_pio();
  80092c:	08008700 	call	800870 <init_button_pio>
  /* Initialize the variables which keep track of which buttons have been tested. */
  buttons_tested = 0x0;
  800930:	e03ffe45 	stb	zero,-7(fp)
  all_tested = 0xf;
  800934:	008003c4 	movi	r2,15
  800938:	e0bffe05 	stb	r2,-8(fp)

  /* Initialize edge_capture to avoid any "false" triggers from
   * a previous run.
   */
   
  edge_capture = 0;
  80093c:	d0270615 	stw	zero,-25576(gp)
  
  /* Set last_tested to a value that edge_capture can never equal
   * to avoid accidental equalities in the while() loop below.
   */
    
  last_tested = 0xffff;
  800940:	00bfffd4 	movui	r2,65535
  800944:	e0bffd15 	stw	r2,-12(fp)

  /* Print a quick message stating what is happening */
  
  printf("\nA loop will be run until all buttons/switches have been pressed.\n\n");
  800948:	01002074 	movhi	r4,129
  80094c:	2112ad04 	addi	r4,r4,19124
  800950:	0802d8c0 	call	802d8c <puts>
  printf("\n\tNOTE:  Once a button press has been detected, for a particular button,\n\tany further presses will be ignored!\n\n");
  800954:	01002074 	movhi	r4,129
  800958:	2112be04 	addi	r4,r4,19192
  80095c:	0802d8c0 	call	802d8c <puts>
  
  /* Loop until all buttons have been pressed.
   * This happens when buttons_tested == all_tested.
   */
  
  while (  buttons_tested != all_tested )
  800960:	00004406 	br	800a74 <TestButtons+0x158>
  { 
    if (last_tested == edge_capture)
  800964:	d0e70617 	ldw	r3,-25576(gp)
  800968:	e0bffd17 	ldw	r2,-12(fp)
  80096c:	10c04126 	beq	r2,r3,800a74 <TestButtons+0x158>
    {
      continue;
    }
    else
    {
      last_tested = edge_capture;
  800970:	d0a70617 	ldw	r2,-25576(gp)
  800974:	e0bffd15 	stw	r2,-12(fp)
      switch (edge_capture)
  800978:	d0a70617 	ldw	r2,-25576(gp)
  80097c:	e0bfff15 	stw	r2,-4(fp)
  800980:	e0ffff17 	ldw	r3,-4(fp)
  800984:	188000a0 	cmpeqi	r2,r3,2
  800988:	10001a1e 	bne	r2,zero,8009f4 <TestButtons+0xd8>
  80098c:	e0ffff17 	ldw	r3,-4(fp)
  800990:	188000c8 	cmpgei	r2,r3,3
  800994:	1000041e 	bne	r2,zero,8009a8 <TestButtons+0x8c>
  800998:	e0ffff17 	ldw	r3,-4(fp)
  80099c:	18800060 	cmpeqi	r2,r3,1
  8009a0:	1000081e 	bne	r2,zero,8009c4 <TestButtons+0xa8>
  8009a4:	00003306 	br	800a74 <TestButtons+0x158>
  8009a8:	e0ffff17 	ldw	r3,-4(fp)
  8009ac:	18800120 	cmpeqi	r2,r3,4
  8009b0:	10001b1e 	bne	r2,zero,800a20 <TestButtons+0x104>
  8009b4:	e0ffff17 	ldw	r3,-4(fp)
  8009b8:	18800220 	cmpeqi	r2,r3,8
  8009bc:	1000231e 	bne	r2,zero,800a4c <TestButtons+0x130>
  8009c0:	00002c06 	br	800a74 <TestButtons+0x158>
      {
        case 0x1:
          if (buttons_tested & 0x1)
  8009c4:	e0bffe43 	ldbu	r2,-7(fp)
  8009c8:	1080004c 	andi	r2,r2,1
  8009cc:	10803fcc 	andi	r2,r2,255
  8009d0:	1004c03a 	cmpne	r2,r2,zero
  8009d4:	1000271e 	bne	r2,zero,800a74 <TestButtons+0x158>
          {
            continue;
          }
          else
          {
            printf("\nButton 1 (SW0) Pressed.\n");
  8009d8:	01002074 	movhi	r4,129
  8009dc:	2112da04 	addi	r4,r4,19304
  8009e0:	0802d8c0 	call	802d8c <puts>
            buttons_tested = buttons_tested | 0x1;
  8009e4:	e0bffe43 	ldbu	r2,-7(fp)
  8009e8:	10800054 	ori	r2,r2,1
  8009ec:	e0bffe45 	stb	r2,-7(fp)
          } 
          break;
  8009f0:	00002006 	br	800a74 <TestButtons+0x158>
        case 0x2:
          if (buttons_tested & 0x2)
  8009f4:	e0bffe43 	ldbu	r2,-7(fp)
  8009f8:	1080008c 	andi	r2,r2,2
  8009fc:	1004c03a 	cmpne	r2,r2,zero
  800a00:	10001c1e 	bne	r2,zero,800a74 <TestButtons+0x158>
          {
            continue;
          } 
          else
          {
            printf("\nButton 2 (SW1) Pressed.\n");
  800a04:	01002074 	movhi	r4,129
  800a08:	2112e104 	addi	r4,r4,19332
  800a0c:	0802d8c0 	call	802d8c <puts>
            buttons_tested = buttons_tested | 0x2;
  800a10:	e0bffe43 	ldbu	r2,-7(fp)
  800a14:	10800094 	ori	r2,r2,2
  800a18:	e0bffe45 	stb	r2,-7(fp)
          }
          break;
  800a1c:	00001506 	br	800a74 <TestButtons+0x158>
        case 0x4:
          if (buttons_tested & 0x4)
  800a20:	e0bffe43 	ldbu	r2,-7(fp)
  800a24:	1080010c 	andi	r2,r2,4
  800a28:	1004c03a 	cmpne	r2,r2,zero
  800a2c:	1000111e 	bne	r2,zero,800a74 <TestButtons+0x158>
          {
            continue;
          }
          else
          {
            printf("\nButton 3 (SW2) Pressed.\n");
  800a30:	01002074 	movhi	r4,129
  800a34:	2112e804 	addi	r4,r4,19360
  800a38:	0802d8c0 	call	802d8c <puts>
            buttons_tested = buttons_tested | 0x4;
  800a3c:	e0bffe43 	ldbu	r2,-7(fp)
  800a40:	10800114 	ori	r2,r2,4
  800a44:	e0bffe45 	stb	r2,-7(fp)
          }
          break;
  800a48:	00000a06 	br	800a74 <TestButtons+0x158>
        case 0x8:
          if (buttons_tested & 0x8)
  800a4c:	e0bffe43 	ldbu	r2,-7(fp)
  800a50:	1080020c 	andi	r2,r2,8
  800a54:	1004c03a 	cmpne	r2,r2,zero
  800a58:	1000061e 	bne	r2,zero,800a74 <TestButtons+0x158>
          {
            continue;
          }
          else
          {
            printf("\nButton 4 (SW3) Pressed.\n");
  800a5c:	01002074 	movhi	r4,129
  800a60:	2112ef04 	addi	r4,r4,19388
  800a64:	0802d8c0 	call	802d8c <puts>
            buttons_tested = buttons_tested | 0x8;
  800a68:	e0bffe43 	ldbu	r2,-7(fp)
  800a6c:	10800214 	ori	r2,r2,8
  800a70:	e0bffe45 	stb	r2,-7(fp)
  
  /* Loop until all buttons have been pressed.
   * This happens when buttons_tested == all_tested.
   */
  
  while (  buttons_tested != all_tested )
  800a74:	e0fffe43 	ldbu	r3,-7(fp)
  800a78:	e0bffe03 	ldbu	r2,-8(fp)
  800a7c:	18bfb91e 	bne	r3,r2,800964 <TestButtons+0x48>
          break;
      }
    }
  }
  /* Disable the button pio. */
  disable_button_pio();
  800a80:	08008d40 	call	8008d4 <disable_button_pio>

  printf ("\nAll Buttons (SW0-SW3) were pressed, at least, once.\n");
  800a84:	01002074 	movhi	r4,129
  800a88:	2112f604 	addi	r4,r4,19416
  800a8c:	0802d8c0 	call	802d8c <puts>
  usleep(2000000);
  800a90:	010007f4 	movhi	r4,31
  800a94:	21212004 	addi	r4,r4,-31616
  800a98:	0811a940 	call	811a94 <usleep>
  return;
}
  800a9c:	e037883a 	mov	sp,fp
  800aa0:	dfc00117 	ldw	ra,4(sp)
  800aa4:	df000017 	ldw	fp,0(sp)
  800aa8:	dec00204 	addi	sp,sp,8
  800aac:	f800283a 	ret

00800ab0 <sevenseg_set_hex>:
 * the variable 'hex' into what is displayed on
 * the Seven Segment Display.
 *********************************************/
 
static void sevenseg_set_hex(alt_u8 hex)
{
  800ab0:	defffd04 	addi	sp,sp,-12
  800ab4:	df000215 	stw	fp,8(sp)
  800ab8:	df000204 	addi	fp,sp,8
  800abc:	e13fff05 	stb	r4,-4(fp)
  static alt_u8 segments[16] = {
    0x81, 0xCF, 0x92, 0x86, 0xCC, 0xA4, 0xA0, 0x8F, 0x80, 0x84, /* 0-9 */
    0x88, 0xE0, 0xF2, 0xC2, 0xB0, 0xB8 };                       /* a-f */

  alt_u32 data = segments[hex & 15] | (segments[(hex >> 4) & 15] << 8);
  800ac0:	e0bfff03 	ldbu	r2,-4(fp)
  800ac4:	10c003cc 	andi	r3,r2,15
  800ac8:	00802074 	movhi	r2,129
  800acc:	1094db04 	addi	r2,r2,21356
  800ad0:	10c5883a 	add	r2,r2,r3
  800ad4:	10800003 	ldbu	r2,0(r2)
  800ad8:	11003fcc 	andi	r4,r2,255
  800adc:	e0bfff03 	ldbu	r2,-4(fp)
  800ae0:	1004d13a 	srli	r2,r2,4
  800ae4:	10803fcc 	andi	r2,r2,255
  800ae8:	10c003cc 	andi	r3,r2,15
  800aec:	00802074 	movhi	r2,129
  800af0:	1094db04 	addi	r2,r2,21356
  800af4:	10c5883a 	add	r2,r2,r3
  800af8:	10800003 	ldbu	r2,0(r2)
  800afc:	10803fcc 	andi	r2,r2,255
  800b00:	1004923a 	slli	r2,r2,8
  800b04:	2084b03a 	or	r2,r4,r2
  800b08:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, data);
  800b0c:	e0fffe17 	ldw	r3,-8(fp)
  800b10:	00804034 	movhi	r2,256
  800b14:	10841804 	addi	r2,r2,4192
  800b18:	10c00035 	stwio	r3,0(r2)
}
  800b1c:	e037883a 	mov	sp,fp
  800b20:	df000017 	ldw	fp,0(sp)
  800b24:	dec00104 	addi	sp,sp,4
  800b28:	f800283a 	ret

00800b2c <SevenSegCount>:
 * Displays from 0 to FF on the Seven Segment Display with
 * a 0.25s count delay implemented in a for loop.
 *******************************************/
 
static void SevenSegCount( void )
{
  800b2c:	defffd04 	addi	sp,sp,-12
  800b30:	dfc00215 	stw	ra,8(sp)
  800b34:	df000115 	stw	fp,4(sp)
  800b38:	df000104 	addi	fp,sp,4
  alt_u32 count;
  for (count = 0; count <= 0xff; count++)
  800b3c:	e03fff15 	stw	zero,-4(fp)
  800b40:	00000806 	br	800b64 <SevenSegCount+0x38>
  {
    sevenseg_set_hex( count );
  800b44:	e0bfff17 	ldw	r2,-4(fp)
  800b48:	11003fcc 	andi	r4,r2,255
  800b4c:	0800ab00 	call	800ab0 <sevenseg_set_hex>
    usleep(50000);
  800b50:	0130d414 	movui	r4,50000
  800b54:	0811a940 	call	811a94 <usleep>
 *******************************************/
 
static void SevenSegCount( void )
{
  alt_u32 count;
  for (count = 0; count <= 0xff; count++)
  800b58:	e0bfff17 	ldw	r2,-4(fp)
  800b5c:	10800044 	addi	r2,r2,1
  800b60:	e0bfff15 	stw	r2,-4(fp)
  800b64:	e0bfff17 	ldw	r2,-4(fp)
  800b68:	10804030 	cmpltui	r2,r2,256
  800b6c:	103ff51e 	bne	r2,zero,800b44 <SevenSegCount+0x18>
  {
    sevenseg_set_hex( count );
    usleep(50000);
  }
}
  800b70:	e037883a 	mov	sp,fp
  800b74:	dfc00117 	ldw	ra,4(sp)
  800b78:	df000017 	ldw	fp,0(sp)
  800b7c:	dec00204 	addi	sp,sp,8
  800b80:	f800283a 	ret

00800b84 <SevenSegControl>:
 * Displays selected Seven Segment segments.
 * 
 ******************************************/

static void SevenSegControl(void)
{
  800b84:	defffb04 	addi	sp,sp,-20
  800b88:	dfc00415 	stw	ra,16(sp)
  800b8c:	df000315 	stw	fp,12(sp)
  800b90:	df000304 	addi	fp,sp,12
  alt_32 bits;
  alt_32 keyBit;
  static char ch;
  
  /* Turn all segments off at start of test. */
  bits = 0xffff;
  800b94:	00bfffd4 	movui	r2,65535
  800b98:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, bits);
  800b9c:	00c04034 	movhi	r3,256
  800ba0:	18c41804 	addi	r3,r3,4192
  800ba4:	e0bffe17 	ldw	r2,-8(fp)
  800ba8:	18800035 	stwio	r2,0(r3)

  printf("\n");
  800bac:	01000284 	movi	r4,10
  800bb0:	0802cc80 	call	802cc8 <putchar>
  printf("\n");
  800bb4:	01000284 	movi	r4,10
  800bb8:	0802cc80 	call	802cc8 <putchar>
  printf("         +-A--+     +-a--+\n");
  800bbc:	01002074 	movhi	r4,129
  800bc0:	21130404 	addi	r4,r4,19472
  800bc4:	0802d8c0 	call	802d8c <puts>
  printf("         |    |     |    |\n");
  800bc8:	01002074 	movhi	r4,129
  800bcc:	21130b04 	addi	r4,r4,19500
  800bd0:	0802d8c0 	call	802d8c <puts>
  printf("         F    B     f    b\n");
  800bd4:	01002074 	movhi	r4,129
  800bd8:	21131204 	addi	r4,r4,19528
  800bdc:	0802d8c0 	call	802d8c <puts>
  printf("         |    |     |    |\n");
  800be0:	01002074 	movhi	r4,129
  800be4:	21130b04 	addi	r4,r4,19500
  800be8:	0802d8c0 	call	802d8c <puts>
  printf("         +-G--+     +-g--+\n");
  800bec:	01002074 	movhi	r4,129
  800bf0:	21131904 	addi	r4,r4,19556
  800bf4:	0802d8c0 	call	802d8c <puts>
  printf("         |    |     |    |\n");
  800bf8:	01002074 	movhi	r4,129
  800bfc:	21130b04 	addi	r4,r4,19500
  800c00:	0802d8c0 	call	802d8c <puts>
  printf("         E    C     e    c\n");
  800c04:	01002074 	movhi	r4,129
  800c08:	21132004 	addi	r4,r4,19584
  800c0c:	0802d8c0 	call	802d8c <puts>
  printf("         |    |     |    |\n");
  800c10:	01002074 	movhi	r4,129
  800c14:	21130b04 	addi	r4,r4,19500
  800c18:	0802d8c0 	call	802d8c <puts>
  printf("         +-D--+ (H) +-d--+ (h)\n");
  800c1c:	01002074 	movhi	r4,129
  800c20:	21132704 	addi	r4,r4,19612
  800c24:	0802d8c0 	call	802d8c <puts>
  printf("\n");
  800c28:	01000284 	movi	r4,10
  800c2c:	0802cc80 	call	802cc8 <putchar>
  printf("Press 'q' [Followed by <enter>] to exit this test.\n");
  800c30:	01002074 	movhi	r4,129
  800c34:	21132f04 	addi	r4,r4,19644
  800c38:	0802d8c0 	call	802d8c <puts>
  
  do
  {
    /* Get terminal input. */
    GetInputString( entry, sizeof(entry), stdin);
  800c3c:	00802074 	movhi	r2,129
  800c40:	109bb804 	addi	r2,r2,28384
  800c44:	10800017 	ldw	r2,0(r2)
  800c48:	11800117 	ldw	r6,4(r2)
  800c4c:	e13fff04 	addi	r4,fp,-4
  800c50:	01400104 	movi	r5,4
  800c54:	08002980 	call	800298 <GetInputString>
    sscanf( entry, "%c\n", &ch );
  800c58:	e13fff04 	addi	r4,fp,-4
  800c5c:	01402074 	movhi	r5,129
  800c60:	29523004 	addi	r5,r5,18624
  800c64:	d1a70544 	addi	r6,gp,-25579
  800c68:	08030e00 	call	8030e0 <sscanf>
    /* SSD pattern algorithm. */
    keyBit = 0;
  800c6c:	e03ffd15 	stw	zero,-12(fp)
    if(ch >= 'a' && ch <= 'g')
  800c70:	d0a70543 	ldbu	r2,-25579(gp)
  800c74:	10803fcc 	andi	r2,r2,255
  800c78:	1080201c 	xori	r2,r2,128
  800c7c:	10bfe004 	addi	r2,r2,-128
  800c80:	10801850 	cmplti	r2,r2,97
  800c84:	1000101e 	bne	r2,zero,800cc8 <SevenSegControl+0x144>
  800c88:	d0a70543 	ldbu	r2,-25579(gp)
  800c8c:	10803fcc 	andi	r2,r2,255
  800c90:	1080201c 	xori	r2,r2,128
  800c94:	10bfe004 	addi	r2,r2,-128
  800c98:	10801a08 	cmpgei	r2,r2,104
  800c9c:	10000a1e 	bne	r2,zero,800cc8 <SevenSegControl+0x144>
      keyBit = 1 << ('g' - ch);
  800ca0:	d0a70543 	ldbu	r2,-25579(gp)
  800ca4:	10c03fcc 	andi	r3,r2,255
  800ca8:	18c0201c 	xori	r3,r3,128
  800cac:	18ffe004 	addi	r3,r3,-128
  800cb0:	008019c4 	movi	r2,103
  800cb4:	10c7c83a 	sub	r3,r2,r3
  800cb8:	00800044 	movi	r2,1
  800cbc:	10c4983a 	sll	r2,r2,r3
  800cc0:	e0bffd15 	stw	r2,-12(fp)
    /* Get terminal input. */
    GetInputString( entry, sizeof(entry), stdin);
    sscanf( entry, "%c\n", &ch );
    /* SSD pattern algorithm. */
    keyBit = 0;
    if(ch >= 'a' && ch <= 'g')
  800cc4:	00002706 	br	800d64 <SevenSegControl+0x1e0>
      keyBit = 1 << ('g' - ch);
    else if(ch == 'h')
  800cc8:	d0a70543 	ldbu	r2,-25579(gp)
  800ccc:	10803fcc 	andi	r2,r2,255
  800cd0:	1080201c 	xori	r2,r2,128
  800cd4:	10bfe004 	addi	r2,r2,-128
  800cd8:	10801a18 	cmpnei	r2,r2,104
  800cdc:	1000031e 	bne	r2,zero,800cec <SevenSegControl+0x168>
      keyBit = 1 << 7;
  800ce0:	00802004 	movi	r2,128
  800ce4:	e0bffd15 	stw	r2,-12(fp)
  800ce8:	00001e06 	br	800d64 <SevenSegControl+0x1e0>
    else if(ch >= 'A' && ch <= 'G')
  800cec:	d0a70543 	ldbu	r2,-25579(gp)
  800cf0:	10803fcc 	andi	r2,r2,255
  800cf4:	1080201c 	xori	r2,r2,128
  800cf8:	10bfe004 	addi	r2,r2,-128
  800cfc:	10801050 	cmplti	r2,r2,65
  800d00:	1000101e 	bne	r2,zero,800d44 <SevenSegControl+0x1c0>
  800d04:	d0a70543 	ldbu	r2,-25579(gp)
  800d08:	10803fcc 	andi	r2,r2,255
  800d0c:	1080201c 	xori	r2,r2,128
  800d10:	10bfe004 	addi	r2,r2,-128
  800d14:	10801208 	cmpgei	r2,r2,72
  800d18:	10000a1e 	bne	r2,zero,800d44 <SevenSegControl+0x1c0>
      keyBit = 1 << ('G' - ch + 8);
  800d1c:	d0a70543 	ldbu	r2,-25579(gp)
  800d20:	10c03fcc 	andi	r3,r2,255
  800d24:	18c0201c 	xori	r3,r3,128
  800d28:	18ffe004 	addi	r3,r3,-128
  800d2c:	008013c4 	movi	r2,79
  800d30:	10c7c83a 	sub	r3,r2,r3
  800d34:	00800044 	movi	r2,1
  800d38:	10c4983a 	sll	r2,r2,r3
  800d3c:	e0bffd15 	stw	r2,-12(fp)
    keyBit = 0;
    if(ch >= 'a' && ch <= 'g')
      keyBit = 1 << ('g' - ch);
    else if(ch == 'h')
      keyBit = 1 << 7;
    else if(ch >= 'A' && ch <= 'G')
  800d40:	00000806 	br	800d64 <SevenSegControl+0x1e0>
      keyBit = 1 << ('G' - ch + 8);
    else if(ch == 'H')
  800d44:	d0a70543 	ldbu	r2,-25579(gp)
  800d48:	10803fcc 	andi	r2,r2,255
  800d4c:	1080201c 	xori	r2,r2,128
  800d50:	10bfe004 	addi	r2,r2,-128
  800d54:	10801218 	cmpnei	r2,r2,72
  800d58:	1000021e 	bne	r2,zero,800d64 <SevenSegControl+0x1e0>
      keyBit = 1 << 15;
  800d5c:	00a00014 	movui	r2,32768
  800d60:	e0bffd15 	stw	r2,-12(fp)
    bits ^= keyBit;
  800d64:	e0fffe17 	ldw	r3,-8(fp)
  800d68:	e0bffd17 	ldw	r2,-12(fp)
  800d6c:	1884f03a 	xor	r2,r3,r2
  800d70:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, bits);
  800d74:	00c04034 	movhi	r3,256
  800d78:	18c41804 	addi	r3,r3,4192
  800d7c:	e0bffe17 	ldw	r2,-8(fp)
  800d80:	18800035 	stwio	r2,0(r3)
  }
  while( ch != 'q' );
  800d84:	d0a70543 	ldbu	r2,-25579(gp)
  800d88:	10803fcc 	andi	r2,r2,255
  800d8c:	1080201c 	xori	r2,r2,128
  800d90:	10bfe004 	addi	r2,r2,-128
  800d94:	10801c58 	cmpnei	r2,r2,113
  800d98:	103fa81e 	bne	r2,zero,800c3c <SevenSegControl+0xb8>
}
  800d9c:	e037883a 	mov	sp,fp
  800da0:	dfc00117 	ldw	ra,4(sp)
  800da4:	df000017 	ldw	fp,0(sp)
  800da8:	dec00204 	addi	sp,sp,8
  800dac:	f800283a 	ret

00800db0 <main>:
}

#endif

int main()
{
  800db0:	defffd04 	addi	sp,sp,-12
  800db4:	dfc00215 	stw	ra,8(sp)
  800db8:	df000115 	stw	fp,4(sp)
  800dbc:	df000104 	addi	fp,sp,4
  /* Declare variable for received character. */
  int ch;
  
  while (1)
  {
    ch = TopMenu();
  800dc0:	08004dc0 	call	8004dc <TopMenu>
  800dc4:	10803fcc 	andi	r2,r2,255
  800dc8:	1080201c 	xori	r2,r2,128
  800dcc:	10bfe004 	addi	r2,r2,-128
  800dd0:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
  800dd4:	e0bfff17 	ldw	r2,-4(fp)
  800dd8:	10801c58 	cmpnei	r2,r2,113
  800ddc:	103ff81e 	bne	r2,zero,800dc0 <main+0x10>
    {
      printf( "\nExiting from Board Diagnostics.\n");
  800de0:	01002074 	movhi	r4,129
  800de4:	21133c04 	addi	r4,r4,19696
  800de8:	0802d8c0 	call	802d8c <puts>
      /* Send EOT to nios2-terminal on the other side of the link. */
      printf( "%c", EOT );
  800dec:	01000104 	movi	r4,4
  800df0:	0802cc80 	call	802cc8 <putchar>
      break;
    }
  }
  return( 0 );
  800df4:	0005883a 	mov	r2,zero
}
  800df8:	e037883a 	mov	sp,fp
  800dfc:	dfc00117 	ldw	ra,4(sp)
  800e00:	df000017 	ldw	fp,0(sp)
  800e04:	dec00204 	addi	sp,sp,8
  800e08:	f800283a 	ret

00800e0c <_fclose_r>:
  800e0c:	defffc04 	addi	sp,sp,-16
  800e10:	dc400115 	stw	r17,4(sp)
  800e14:	dc000015 	stw	r16,0(sp)
  800e18:	dfc00315 	stw	ra,12(sp)
  800e1c:	dc800215 	stw	r18,8(sp)
  800e20:	2821883a 	mov	r16,r5
  800e24:	2023883a 	mov	r17,r4
  800e28:	28002926 	beq	r5,zero,800ed0 <_fclose_r+0xc4>
  800e2c:	08011b80 	call	8011b8 <__sfp_lock_acquire>
  800e30:	88000226 	beq	r17,zero,800e3c <_fclose_r+0x30>
  800e34:	88800e17 	ldw	r2,56(r17)
  800e38:	10002d26 	beq	r2,zero,800ef0 <_fclose_r+0xe4>
  800e3c:	8080030f 	ldh	r2,12(r16)
  800e40:	10002226 	beq	r2,zero,800ecc <_fclose_r+0xc0>
  800e44:	8809883a 	mov	r4,r17
  800e48:	800b883a 	mov	r5,r16
  800e4c:	0800f300 	call	800f30 <_fflush_r>
  800e50:	1025883a 	mov	r18,r2
  800e54:	80800b17 	ldw	r2,44(r16)
  800e58:	10000426 	beq	r2,zero,800e6c <_fclose_r+0x60>
  800e5c:	81400717 	ldw	r5,28(r16)
  800e60:	8809883a 	mov	r4,r17
  800e64:	103ee83a 	callr	r2
  800e68:	10002a16 	blt	r2,zero,800f14 <_fclose_r+0x108>
  800e6c:	8080030b 	ldhu	r2,12(r16)
  800e70:	1080200c 	andi	r2,r2,128
  800e74:	1000231e 	bne	r2,zero,800f04 <_fclose_r+0xf8>
  800e78:	81400c17 	ldw	r5,48(r16)
  800e7c:	28000526 	beq	r5,zero,800e94 <_fclose_r+0x88>
  800e80:	80801004 	addi	r2,r16,64
  800e84:	28800226 	beq	r5,r2,800e90 <_fclose_r+0x84>
  800e88:	8809883a 	mov	r4,r17
  800e8c:	08016f00 	call	8016f0 <_free_r>
  800e90:	80000c15 	stw	zero,48(r16)
  800e94:	81401117 	ldw	r5,68(r16)
  800e98:	28000326 	beq	r5,zero,800ea8 <_fclose_r+0x9c>
  800e9c:	8809883a 	mov	r4,r17
  800ea0:	08016f00 	call	8016f0 <_free_r>
  800ea4:	80001115 	stw	zero,68(r16)
  800ea8:	8000030d 	sth	zero,12(r16)
  800eac:	08011bc0 	call	8011bc <__sfp_lock_release>
  800eb0:	9005883a 	mov	r2,r18
  800eb4:	dfc00317 	ldw	ra,12(sp)
  800eb8:	dc800217 	ldw	r18,8(sp)
  800ebc:	dc400117 	ldw	r17,4(sp)
  800ec0:	dc000017 	ldw	r16,0(sp)
  800ec4:	dec00404 	addi	sp,sp,16
  800ec8:	f800283a 	ret
  800ecc:	08011bc0 	call	8011bc <__sfp_lock_release>
  800ed0:	0025883a 	mov	r18,zero
  800ed4:	9005883a 	mov	r2,r18
  800ed8:	dfc00317 	ldw	ra,12(sp)
  800edc:	dc800217 	ldw	r18,8(sp)
  800ee0:	dc400117 	ldw	r17,4(sp)
  800ee4:	dc000017 	ldw	r16,0(sp)
  800ee8:	dec00404 	addi	sp,sp,16
  800eec:	f800283a 	ret
  800ef0:	8809883a 	mov	r4,r17
  800ef4:	08011c80 	call	8011c8 <__sinit>
  800ef8:	8080030f 	ldh	r2,12(r16)
  800efc:	103fd11e 	bne	r2,zero,800e44 <_fclose_r+0x38>
  800f00:	003ff206 	br	800ecc <_fclose_r+0xc0>
  800f04:	81400417 	ldw	r5,16(r16)
  800f08:	8809883a 	mov	r4,r17
  800f0c:	08016f00 	call	8016f0 <_free_r>
  800f10:	003fd906 	br	800e78 <_fclose_r+0x6c>
  800f14:	04bfffc4 	movi	r18,-1
  800f18:	003fd406 	br	800e6c <_fclose_r+0x60>

00800f1c <fclose>:
  800f1c:	00802074 	movhi	r2,129
  800f20:	109bb804 	addi	r2,r2,28384
  800f24:	200b883a 	mov	r5,r4
  800f28:	11000017 	ldw	r4,0(r2)
  800f2c:	0800e0c1 	jmpi	800e0c <_fclose_r>

00800f30 <_fflush_r>:
  800f30:	defffb04 	addi	sp,sp,-20
  800f34:	dcc00315 	stw	r19,12(sp)
  800f38:	dc800215 	stw	r18,8(sp)
  800f3c:	dfc00415 	stw	ra,16(sp)
  800f40:	dc400115 	stw	r17,4(sp)
  800f44:	dc000015 	stw	r16,0(sp)
  800f48:	2027883a 	mov	r19,r4
  800f4c:	2825883a 	mov	r18,r5
  800f50:	20000226 	beq	r4,zero,800f5c <_fflush_r+0x2c>
  800f54:	20800e17 	ldw	r2,56(r4)
  800f58:	10005626 	beq	r2,zero,8010b4 <_fflush_r+0x184>
  800f5c:	9100030b 	ldhu	r4,12(r18)
  800f60:	20ffffcc 	andi	r3,r4,65535
  800f64:	18e0001c 	xori	r3,r3,32768
  800f68:	18e00004 	addi	r3,r3,-32768
  800f6c:	1880020c 	andi	r2,r3,8
  800f70:	1000261e 	bne	r2,zero,80100c <_fflush_r+0xdc>
  800f74:	90c00117 	ldw	r3,4(r18)
  800f78:	20820014 	ori	r2,r4,2048
  800f7c:	9080030d 	sth	r2,12(r18)
  800f80:	1009883a 	mov	r4,r2
  800f84:	00c0400e 	bge	zero,r3,801088 <_fflush_r+0x158>
  800f88:	92000a17 	ldw	r8,40(r18)
  800f8c:	40004026 	beq	r8,zero,801090 <_fflush_r+0x160>
  800f90:	2084000c 	andi	r2,r4,4096
  800f94:	10005326 	beq	r2,zero,8010e4 <_fflush_r+0x1b4>
  800f98:	94001417 	ldw	r16,80(r18)
  800f9c:	9080030b 	ldhu	r2,12(r18)
  800fa0:	1080010c 	andi	r2,r2,4
  800fa4:	1000481e 	bne	r2,zero,8010c8 <_fflush_r+0x198>
  800fa8:	91400717 	ldw	r5,28(r18)
  800fac:	9809883a 	mov	r4,r19
  800fb0:	800d883a 	mov	r6,r16
  800fb4:	000f883a 	mov	r7,zero
  800fb8:	403ee83a 	callr	r8
  800fbc:	8080261e 	bne	r16,r2,801058 <_fflush_r+0x128>
  800fc0:	9080030b 	ldhu	r2,12(r18)
  800fc4:	91000417 	ldw	r4,16(r18)
  800fc8:	90000115 	stw	zero,4(r18)
  800fcc:	10bdffcc 	andi	r2,r2,63487
  800fd0:	10ffffcc 	andi	r3,r2,65535
  800fd4:	18c4000c 	andi	r3,r3,4096
  800fd8:	9080030d 	sth	r2,12(r18)
  800fdc:	91000015 	stw	r4,0(r18)
  800fe0:	18002b26 	beq	r3,zero,801090 <_fflush_r+0x160>
  800fe4:	0007883a 	mov	r3,zero
  800fe8:	1805883a 	mov	r2,r3
  800fec:	94001415 	stw	r16,80(r18)
  800ff0:	dfc00417 	ldw	ra,16(sp)
  800ff4:	dcc00317 	ldw	r19,12(sp)
  800ff8:	dc800217 	ldw	r18,8(sp)
  800ffc:	dc400117 	ldw	r17,4(sp)
  801000:	dc000017 	ldw	r16,0(sp)
  801004:	dec00504 	addi	sp,sp,20
  801008:	f800283a 	ret
  80100c:	94400417 	ldw	r17,16(r18)
  801010:	88001f26 	beq	r17,zero,801090 <_fflush_r+0x160>
  801014:	90800017 	ldw	r2,0(r18)
  801018:	18c000cc 	andi	r3,r3,3
  80101c:	94400015 	stw	r17,0(r18)
  801020:	1461c83a 	sub	r16,r2,r17
  801024:	18002526 	beq	r3,zero,8010bc <_fflush_r+0x18c>
  801028:	0005883a 	mov	r2,zero
  80102c:	90800215 	stw	r2,8(r18)
  801030:	0400170e 	bge	zero,r16,801090 <_fflush_r+0x160>
  801034:	90c00917 	ldw	r3,36(r18)
  801038:	91400717 	ldw	r5,28(r18)
  80103c:	880d883a 	mov	r6,r17
  801040:	800f883a 	mov	r7,r16
  801044:	9809883a 	mov	r4,r19
  801048:	183ee83a 	callr	r3
  80104c:	88a3883a 	add	r17,r17,r2
  801050:	80a1c83a 	sub	r16,r16,r2
  801054:	00bff616 	blt	zero,r2,801030 <_fflush_r+0x100>
  801058:	9080030b 	ldhu	r2,12(r18)
  80105c:	00ffffc4 	movi	r3,-1
  801060:	10801014 	ori	r2,r2,64
  801064:	9080030d 	sth	r2,12(r18)
  801068:	1805883a 	mov	r2,r3
  80106c:	dfc00417 	ldw	ra,16(sp)
  801070:	dcc00317 	ldw	r19,12(sp)
  801074:	dc800217 	ldw	r18,8(sp)
  801078:	dc400117 	ldw	r17,4(sp)
  80107c:	dc000017 	ldw	r16,0(sp)
  801080:	dec00504 	addi	sp,sp,20
  801084:	f800283a 	ret
  801088:	90800f17 	ldw	r2,60(r18)
  80108c:	00bfbe16 	blt	zero,r2,800f88 <_fflush_r+0x58>
  801090:	0007883a 	mov	r3,zero
  801094:	1805883a 	mov	r2,r3
  801098:	dfc00417 	ldw	ra,16(sp)
  80109c:	dcc00317 	ldw	r19,12(sp)
  8010a0:	dc800217 	ldw	r18,8(sp)
  8010a4:	dc400117 	ldw	r17,4(sp)
  8010a8:	dc000017 	ldw	r16,0(sp)
  8010ac:	dec00504 	addi	sp,sp,20
  8010b0:	f800283a 	ret
  8010b4:	08011c80 	call	8011c8 <__sinit>
  8010b8:	003fa806 	br	800f5c <_fflush_r+0x2c>
  8010bc:	90800517 	ldw	r2,20(r18)
  8010c0:	90800215 	stw	r2,8(r18)
  8010c4:	003fda06 	br	801030 <_fflush_r+0x100>
  8010c8:	90800117 	ldw	r2,4(r18)
  8010cc:	90c00c17 	ldw	r3,48(r18)
  8010d0:	80a1c83a 	sub	r16,r16,r2
  8010d4:	183fb426 	beq	r3,zero,800fa8 <_fflush_r+0x78>
  8010d8:	90800f17 	ldw	r2,60(r18)
  8010dc:	80a1c83a 	sub	r16,r16,r2
  8010e0:	003fb106 	br	800fa8 <_fflush_r+0x78>
  8010e4:	91400717 	ldw	r5,28(r18)
  8010e8:	9809883a 	mov	r4,r19
  8010ec:	000d883a 	mov	r6,zero
  8010f0:	01c00044 	movi	r7,1
  8010f4:	403ee83a 	callr	r8
  8010f8:	1021883a 	mov	r16,r2
  8010fc:	00bfffc4 	movi	r2,-1
  801100:	80800226 	beq	r16,r2,80110c <_fflush_r+0x1dc>
  801104:	92000a17 	ldw	r8,40(r18)
  801108:	003fa406 	br	800f9c <_fflush_r+0x6c>
  80110c:	98c00017 	ldw	r3,0(r19)
  801110:	00800744 	movi	r2,29
  801114:	18bfde26 	beq	r3,r2,801090 <_fflush_r+0x160>
  801118:	9080030b 	ldhu	r2,12(r18)
  80111c:	8007883a 	mov	r3,r16
  801120:	10801014 	ori	r2,r2,64
  801124:	9080030d 	sth	r2,12(r18)
  801128:	003fcf06 	br	801068 <_fflush_r+0x138>

0080112c <fflush>:
  80112c:	01402034 	movhi	r5,128
  801130:	2943cc04 	addi	r5,r5,3888
  801134:	2007883a 	mov	r3,r4
  801138:	20000526 	beq	r4,zero,801150 <fflush+0x24>
  80113c:	00802074 	movhi	r2,129
  801140:	109bb804 	addi	r2,r2,28384
  801144:	11000017 	ldw	r4,0(r2)
  801148:	180b883a 	mov	r5,r3
  80114c:	0800f301 	jmpi	800f30 <_fflush_r>
  801150:	00802074 	movhi	r2,129
  801154:	109bb904 	addi	r2,r2,28388
  801158:	11000017 	ldw	r4,0(r2)
  80115c:	0801ed81 	jmpi	801ed8 <_fwalk_reent>

00801160 <std>:
  801160:	00802034 	movhi	r2,128
  801164:	108c5904 	addi	r2,r2,12644
  801168:	20800b15 	stw	r2,44(r4)
  80116c:	00802034 	movhi	r2,128
  801170:	108c9404 	addi	r2,r2,12880
  801174:	20800815 	stw	r2,32(r4)
  801178:	00c02034 	movhi	r3,128
  80117c:	18cc7504 	addi	r3,r3,12756
  801180:	00802034 	movhi	r2,128
  801184:	108c5b04 	addi	r2,r2,12652
  801188:	2140030d 	sth	r5,12(r4)
  80118c:	2180038d 	sth	r6,14(r4)
  801190:	20c00915 	stw	r3,36(r4)
  801194:	20800a15 	stw	r2,40(r4)
  801198:	20000015 	stw	zero,0(r4)
  80119c:	20000115 	stw	zero,4(r4)
  8011a0:	20000215 	stw	zero,8(r4)
  8011a4:	20000415 	stw	zero,16(r4)
  8011a8:	20000515 	stw	zero,20(r4)
  8011ac:	20000615 	stw	zero,24(r4)
  8011b0:	21000715 	stw	r4,28(r4)
  8011b4:	f800283a 	ret

008011b8 <__sfp_lock_acquire>:
  8011b8:	f800283a 	ret

008011bc <__sfp_lock_release>:
  8011bc:	f800283a 	ret

008011c0 <__sinit_lock_acquire>:
  8011c0:	f800283a 	ret

008011c4 <__sinit_lock_release>:
  8011c4:	f800283a 	ret

008011c8 <__sinit>:
  8011c8:	20800e17 	ldw	r2,56(r4)
  8011cc:	defffd04 	addi	sp,sp,-12
  8011d0:	dc400115 	stw	r17,4(sp)
  8011d4:	dc000015 	stw	r16,0(sp)
  8011d8:	dfc00215 	stw	ra,8(sp)
  8011dc:	04400044 	movi	r17,1
  8011e0:	01400104 	movi	r5,4
  8011e4:	000d883a 	mov	r6,zero
  8011e8:	2021883a 	mov	r16,r4
  8011ec:	2200bb04 	addi	r8,r4,748
  8011f0:	200f883a 	mov	r7,r4
  8011f4:	10000526 	beq	r2,zero,80120c <__sinit+0x44>
  8011f8:	dfc00217 	ldw	ra,8(sp)
  8011fc:	dc400117 	ldw	r17,4(sp)
  801200:	dc000017 	ldw	r16,0(sp)
  801204:	dec00304 	addi	sp,sp,12
  801208:	f800283a 	ret
  80120c:	21000117 	ldw	r4,4(r4)
  801210:	00802034 	movhi	r2,128
  801214:	1084ab04 	addi	r2,r2,4780
  801218:	00c000c4 	movi	r3,3
  80121c:	80800f15 	stw	r2,60(r16)
  801220:	80c0b915 	stw	r3,740(r16)
  801224:	8200ba15 	stw	r8,744(r16)
  801228:	84400e15 	stw	r17,56(r16)
  80122c:	8000b815 	stw	zero,736(r16)
  801230:	08011600 	call	801160 <std>
  801234:	81000217 	ldw	r4,8(r16)
  801238:	880d883a 	mov	r6,r17
  80123c:	800f883a 	mov	r7,r16
  801240:	01400284 	movi	r5,10
  801244:	08011600 	call	801160 <std>
  801248:	81000317 	ldw	r4,12(r16)
  80124c:	800f883a 	mov	r7,r16
  801250:	01400484 	movi	r5,18
  801254:	01800084 	movi	r6,2
  801258:	dfc00217 	ldw	ra,8(sp)
  80125c:	dc400117 	ldw	r17,4(sp)
  801260:	dc000017 	ldw	r16,0(sp)
  801264:	dec00304 	addi	sp,sp,12
  801268:	08011601 	jmpi	801160 <std>

0080126c <__fp_lock>:
  80126c:	0005883a 	mov	r2,zero
  801270:	f800283a 	ret

00801274 <__fp_unlock>:
  801274:	0005883a 	mov	r2,zero
  801278:	f800283a 	ret

0080127c <__fp_unlock_all>:
  80127c:	00802074 	movhi	r2,129
  801280:	109bb804 	addi	r2,r2,28384
  801284:	11000017 	ldw	r4,0(r2)
  801288:	01402034 	movhi	r5,128
  80128c:	29449d04 	addi	r5,r5,4724
  801290:	0801fa01 	jmpi	801fa0 <_fwalk>

00801294 <__fp_lock_all>:
  801294:	00802074 	movhi	r2,129
  801298:	109bb804 	addi	r2,r2,28384
  80129c:	11000017 	ldw	r4,0(r2)
  8012a0:	01402034 	movhi	r5,128
  8012a4:	29449b04 	addi	r5,r5,4716
  8012a8:	0801fa01 	jmpi	801fa0 <_fwalk>

008012ac <_cleanup_r>:
  8012ac:	01402034 	movhi	r5,128
  8012b0:	2943c704 	addi	r5,r5,3868
  8012b4:	0801fa01 	jmpi	801fa0 <_fwalk>

008012b8 <_cleanup>:
  8012b8:	00802074 	movhi	r2,129
  8012bc:	109bb904 	addi	r2,r2,28388
  8012c0:	11000017 	ldw	r4,0(r2)
  8012c4:	08012ac1 	jmpi	8012ac <_cleanup_r>

008012c8 <__sfmoreglue>:
  8012c8:	defffc04 	addi	sp,sp,-16
  8012cc:	dc000015 	stw	r16,0(sp)
  8012d0:	2821883a 	mov	r16,r5
  8012d4:	dc400115 	stw	r17,4(sp)
  8012d8:	01401704 	movi	r5,92
  8012dc:	2023883a 	mov	r17,r4
  8012e0:	8009883a 	mov	r4,r16
  8012e4:	dfc00315 	stw	ra,12(sp)
  8012e8:	dcc00215 	stw	r19,8(sp)
  8012ec:	08102900 	call	810290 <__mulsi3>
  8012f0:	11400304 	addi	r5,r2,12
  8012f4:	8809883a 	mov	r4,r17
  8012f8:	1027883a 	mov	r19,r2
  8012fc:	08024000 	call	802400 <_malloc_r>
  801300:	10c00304 	addi	r3,r2,12
  801304:	1023883a 	mov	r17,r2
  801308:	1809883a 	mov	r4,r3
  80130c:	980d883a 	mov	r6,r19
  801310:	000b883a 	mov	r5,zero
  801314:	10000b26 	beq	r2,zero,801344 <__sfmoreglue+0x7c>
  801318:	14000115 	stw	r16,4(r2)
  80131c:	10c00215 	stw	r3,8(r2)
  801320:	10000015 	stw	zero,0(r2)
  801324:	0802b400 	call	802b40 <memset>
  801328:	8805883a 	mov	r2,r17
  80132c:	dfc00317 	ldw	ra,12(sp)
  801330:	dcc00217 	ldw	r19,8(sp)
  801334:	dc400117 	ldw	r17,4(sp)
  801338:	dc000017 	ldw	r16,0(sp)
  80133c:	dec00404 	addi	sp,sp,16
  801340:	f800283a 	ret
  801344:	0023883a 	mov	r17,zero
  801348:	8805883a 	mov	r2,r17
  80134c:	dfc00317 	ldw	ra,12(sp)
  801350:	dcc00217 	ldw	r19,8(sp)
  801354:	dc400117 	ldw	r17,4(sp)
  801358:	dc000017 	ldw	r16,0(sp)
  80135c:	dec00404 	addi	sp,sp,16
  801360:	f800283a 	ret

00801364 <__sfp>:
  801364:	defffd04 	addi	sp,sp,-12
  801368:	00802074 	movhi	r2,129
  80136c:	109bb904 	addi	r2,r2,28388
  801370:	dc000015 	stw	r16,0(sp)
  801374:	14000017 	ldw	r16,0(r2)
  801378:	dc400115 	stw	r17,4(sp)
  80137c:	dfc00215 	stw	ra,8(sp)
  801380:	80800e17 	ldw	r2,56(r16)
  801384:	2023883a 	mov	r17,r4
  801388:	10002626 	beq	r2,zero,801424 <__sfp+0xc0>
  80138c:	8400b804 	addi	r16,r16,736
  801390:	80800117 	ldw	r2,4(r16)
  801394:	81000217 	ldw	r4,8(r16)
  801398:	10ffffc4 	addi	r3,r2,-1
  80139c:	18000916 	blt	r3,zero,8013c4 <__sfp+0x60>
  8013a0:	2080030f 	ldh	r2,12(r4)
  8013a4:	10000b26 	beq	r2,zero,8013d4 <__sfp+0x70>
  8013a8:	017fffc4 	movi	r5,-1
  8013ac:	00000206 	br	8013b8 <__sfp+0x54>
  8013b0:	2080030f 	ldh	r2,12(r4)
  8013b4:	10000726 	beq	r2,zero,8013d4 <__sfp+0x70>
  8013b8:	18ffffc4 	addi	r3,r3,-1
  8013bc:	21001704 	addi	r4,r4,92
  8013c0:	197ffb1e 	bne	r3,r5,8013b0 <__sfp+0x4c>
  8013c4:	80800017 	ldw	r2,0(r16)
  8013c8:	10001926 	beq	r2,zero,801430 <__sfp+0xcc>
  8013cc:	1021883a 	mov	r16,r2
  8013d0:	003fef06 	br	801390 <__sfp+0x2c>
  8013d4:	00bfffc4 	movi	r2,-1
  8013d8:	00c00044 	movi	r3,1
  8013dc:	2080038d 	sth	r2,14(r4)
  8013e0:	20c0030d 	sth	r3,12(r4)
  8013e4:	20000015 	stw	zero,0(r4)
  8013e8:	20000215 	stw	zero,8(r4)
  8013ec:	20000115 	stw	zero,4(r4)
  8013f0:	20000415 	stw	zero,16(r4)
  8013f4:	20000515 	stw	zero,20(r4)
  8013f8:	20000615 	stw	zero,24(r4)
  8013fc:	20000c15 	stw	zero,48(r4)
  801400:	20000d15 	stw	zero,52(r4)
  801404:	20001115 	stw	zero,68(r4)
  801408:	20001215 	stw	zero,72(r4)
  80140c:	2005883a 	mov	r2,r4
  801410:	dfc00217 	ldw	ra,8(sp)
  801414:	dc400117 	ldw	r17,4(sp)
  801418:	dc000017 	ldw	r16,0(sp)
  80141c:	dec00304 	addi	sp,sp,12
  801420:	f800283a 	ret
  801424:	8009883a 	mov	r4,r16
  801428:	08011c80 	call	8011c8 <__sinit>
  80142c:	003fd706 	br	80138c <__sfp+0x28>
  801430:	8809883a 	mov	r4,r17
  801434:	01400104 	movi	r5,4
  801438:	08012c80 	call	8012c8 <__sfmoreglue>
  80143c:	80800015 	stw	r2,0(r16)
  801440:	103fe21e 	bne	r2,zero,8013cc <__sfp+0x68>
  801444:	00800304 	movi	r2,12
  801448:	0009883a 	mov	r4,zero
  80144c:	88800015 	stw	r2,0(r17)
  801450:	003fee06 	br	80140c <__sfp+0xa8>

00801454 <_fopen_r>:
  801454:	defffa04 	addi	sp,sp,-24
  801458:	dcc00415 	stw	r19,16(sp)
  80145c:	2827883a 	mov	r19,r5
  801460:	300b883a 	mov	r5,r6
  801464:	d80d883a 	mov	r6,sp
  801468:	dc800315 	stw	r18,12(sp)
  80146c:	dc400215 	stw	r17,8(sp)
  801470:	dc000115 	stw	r16,4(sp)
  801474:	dfc00515 	stw	ra,20(sp)
  801478:	2021883a 	mov	r16,r4
  80147c:	08084080 	call	808408 <__sflags>
  801480:	1025883a 	mov	r18,r2
  801484:	8009883a 	mov	r4,r16
  801488:	0023883a 	mov	r17,zero
  80148c:	1000081e 	bne	r2,zero,8014b0 <_fopen_r+0x5c>
  801490:	8805883a 	mov	r2,r17
  801494:	dfc00517 	ldw	ra,20(sp)
  801498:	dcc00417 	ldw	r19,16(sp)
  80149c:	dc800317 	ldw	r18,12(sp)
  8014a0:	dc400217 	ldw	r17,8(sp)
  8014a4:	dc000117 	ldw	r16,4(sp)
  8014a8:	dec00604 	addi	sp,sp,24
  8014ac:	f800283a 	ret
  8014b0:	08013640 	call	801364 <__sfp>
  8014b4:	1023883a 	mov	r17,r2
  8014b8:	980b883a 	mov	r5,r19
  8014bc:	8009883a 	mov	r4,r16
  8014c0:	01c06d84 	movi	r7,438
  8014c4:	103ff226 	beq	r2,zero,801490 <_fopen_r+0x3c>
  8014c8:	d9800017 	ldw	r6,0(sp)
  8014cc:	0802bd80 	call	802bd8 <_open_r>
  8014d0:	10001816 	blt	r2,zero,801534 <_fopen_r+0xe0>
  8014d4:	00c02034 	movhi	r3,128
  8014d8:	18cc7504 	addi	r3,r3,12756
  8014dc:	923fffcc 	andi	r8,r18,65535
  8014e0:	8880038d 	sth	r2,14(r17)
  8014e4:	00802034 	movhi	r2,128
  8014e8:	108c9404 	addi	r2,r2,12880
  8014ec:	88800815 	stw	r2,32(r17)
  8014f0:	88c00915 	stw	r3,36(r17)
  8014f4:	00802034 	movhi	r2,128
  8014f8:	108c5b04 	addi	r2,r2,12652
  8014fc:	00c02034 	movhi	r3,128
  801500:	18cc5904 	addi	r3,r3,12644
  801504:	4200400c 	andi	r8,r8,256
  801508:	8c80030d 	sth	r18,12(r17)
  80150c:	8009883a 	mov	r4,r16
  801510:	880b883a 	mov	r5,r17
  801514:	000d883a 	mov	r6,zero
  801518:	01c00084 	movi	r7,2
  80151c:	88800a15 	stw	r2,40(r17)
  801520:	88c00b15 	stw	r3,44(r17)
  801524:	8c400715 	stw	r17,28(r17)
  801528:	403fd926 	beq	r8,zero,801490 <_fopen_r+0x3c>
  80152c:	0801a040 	call	801a04 <_fseek_r>
  801530:	003fd706 	br	801490 <_fopen_r+0x3c>
  801534:	08011b80 	call	8011b8 <__sfp_lock_acquire>
  801538:	8800030d 	sth	zero,12(r17)
  80153c:	08011bc0 	call	8011bc <__sfp_lock_release>
  801540:	0023883a 	mov	r17,zero
  801544:	003fd206 	br	801490 <_fopen_r+0x3c>

00801548 <fopen>:
  801548:	01802074 	movhi	r6,129
  80154c:	319bb804 	addi	r6,r6,28384
  801550:	2007883a 	mov	r3,r4
  801554:	31000017 	ldw	r4,0(r6)
  801558:	280d883a 	mov	r6,r5
  80155c:	180b883a 	mov	r5,r3
  801560:	08014541 	jmpi	801454 <_fopen_r>

00801564 <fprintf>:
  801564:	defffc04 	addi	sp,sp,-16
  801568:	dfc00115 	stw	ra,4(sp)
  80156c:	d9800215 	stw	r6,8(sp)
  801570:	d9c00315 	stw	r7,12(sp)
  801574:	d8800204 	addi	r2,sp,8
  801578:	100d883a 	mov	r6,r2
  80157c:	d8800015 	stw	r2,0(sp)
  801580:	08052400 	call	805240 <__vfprintf_internal>
  801584:	dfc00117 	ldw	ra,4(sp)
  801588:	dec00404 	addi	sp,sp,16
  80158c:	f800283a 	ret

00801590 <_fprintf_r>:
  801590:	defffd04 	addi	sp,sp,-12
  801594:	2807883a 	mov	r3,r5
  801598:	dfc00115 	stw	ra,4(sp)
  80159c:	d9c00215 	stw	r7,8(sp)
  8015a0:	d8800204 	addi	r2,sp,8
  8015a4:	300b883a 	mov	r5,r6
  8015a8:	1809883a 	mov	r4,r3
  8015ac:	100d883a 	mov	r6,r2
  8015b0:	d8800015 	stw	r2,0(sp)
  8015b4:	08052400 	call	805240 <__vfprintf_internal>
  8015b8:	dfc00117 	ldw	ra,4(sp)
  8015bc:	dec00304 	addi	sp,sp,12
  8015c0:	f800283a 	ret

008015c4 <_malloc_trim_r>:
  8015c4:	defffb04 	addi	sp,sp,-20
  8015c8:	dcc00315 	stw	r19,12(sp)
  8015cc:	04c02074 	movhi	r19,129
  8015d0:	9cd5df04 	addi	r19,r19,22396
  8015d4:	dc800215 	stw	r18,8(sp)
  8015d8:	dc400115 	stw	r17,4(sp)
  8015dc:	dc000015 	stw	r16,0(sp)
  8015e0:	2823883a 	mov	r17,r5
  8015e4:	2025883a 	mov	r18,r4
  8015e8:	dfc00415 	stw	ra,16(sp)
  8015ec:	08114b80 	call	8114b8 <__malloc_lock>
  8015f0:	98800217 	ldw	r2,8(r19)
  8015f4:	9009883a 	mov	r4,r18
  8015f8:	000b883a 	mov	r5,zero
  8015fc:	10c00117 	ldw	r3,4(r2)
  801600:	00bfff04 	movi	r2,-4
  801604:	18a0703a 	and	r16,r3,r2
  801608:	8463c83a 	sub	r17,r16,r17
  80160c:	8c43fbc4 	addi	r17,r17,4079
  801610:	8822d33a 	srli	r17,r17,12
  801614:	0083ffc4 	movi	r2,4095
  801618:	8c7fffc4 	addi	r17,r17,-1
  80161c:	8822933a 	slli	r17,r17,12
  801620:	1440060e 	bge	r2,r17,80163c <_malloc_trim_r+0x78>
  801624:	0802fe00 	call	802fe0 <_sbrk_r>
  801628:	98c00217 	ldw	r3,8(r19)
  80162c:	9009883a 	mov	r4,r18
  801630:	044bc83a 	sub	r5,zero,r17
  801634:	80c7883a 	add	r3,r16,r3
  801638:	10c00926 	beq	r2,r3,801660 <_malloc_trim_r+0x9c>
  80163c:	08114d80 	call	8114d8 <__malloc_unlock>
  801640:	0005883a 	mov	r2,zero
  801644:	dfc00417 	ldw	ra,16(sp)
  801648:	dcc00317 	ldw	r19,12(sp)
  80164c:	dc800217 	ldw	r18,8(sp)
  801650:	dc400117 	ldw	r17,4(sp)
  801654:	dc000017 	ldw	r16,0(sp)
  801658:	dec00504 	addi	sp,sp,20
  80165c:	f800283a 	ret
  801660:	9009883a 	mov	r4,r18
  801664:	0802fe00 	call	802fe0 <_sbrk_r>
  801668:	844dc83a 	sub	r6,r16,r17
  80166c:	00ffffc4 	movi	r3,-1
  801670:	9009883a 	mov	r4,r18
  801674:	000b883a 	mov	r5,zero
  801678:	01c020b4 	movhi	r7,130
  80167c:	39e2cc04 	addi	r7,r7,-29904
  801680:	31800054 	ori	r6,r6,1
  801684:	10c00926 	beq	r2,r3,8016ac <_malloc_trim_r+0xe8>
  801688:	38800017 	ldw	r2,0(r7)
  80168c:	98c00217 	ldw	r3,8(r19)
  801690:	9009883a 	mov	r4,r18
  801694:	1445c83a 	sub	r2,r2,r17
  801698:	38800015 	stw	r2,0(r7)
  80169c:	19800115 	stw	r6,4(r3)
  8016a0:	08114d80 	call	8114d8 <__malloc_unlock>
  8016a4:	00800044 	movi	r2,1
  8016a8:	003fe606 	br	801644 <_malloc_trim_r+0x80>
  8016ac:	0802fe00 	call	802fe0 <_sbrk_r>
  8016b0:	99800217 	ldw	r6,8(r19)
  8016b4:	100f883a 	mov	r7,r2
  8016b8:	9009883a 	mov	r4,r18
  8016bc:	1187c83a 	sub	r3,r2,r6
  8016c0:	008003c4 	movi	r2,15
  8016c4:	19400054 	ori	r5,r3,1
  8016c8:	10ffdc0e 	bge	r2,r3,80163c <_malloc_trim_r+0x78>
  8016cc:	00802074 	movhi	r2,129
  8016d0:	109bbb04 	addi	r2,r2,28396
  8016d4:	10c00017 	ldw	r3,0(r2)
  8016d8:	008020b4 	movhi	r2,130
  8016dc:	10a2cc04 	addi	r2,r2,-29904
  8016e0:	31400115 	stw	r5,4(r6)
  8016e4:	38c7c83a 	sub	r3,r7,r3
  8016e8:	10c00015 	stw	r3,0(r2)
  8016ec:	003fd306 	br	80163c <_malloc_trim_r+0x78>

008016f0 <_free_r>:
  8016f0:	defffd04 	addi	sp,sp,-12
  8016f4:	dc400115 	stw	r17,4(sp)
  8016f8:	dc000015 	stw	r16,0(sp)
  8016fc:	dfc00215 	stw	ra,8(sp)
  801700:	2821883a 	mov	r16,r5
  801704:	2023883a 	mov	r17,r4
  801708:	28005a26 	beq	r5,zero,801874 <_free_r+0x184>
  80170c:	08114b80 	call	8114b8 <__malloc_lock>
  801710:	823ffe04 	addi	r8,r16,-8
  801714:	41400117 	ldw	r5,4(r8)
  801718:	00bfff84 	movi	r2,-2
  80171c:	02802074 	movhi	r10,129
  801720:	5295df04 	addi	r10,r10,22396
  801724:	288e703a 	and	r7,r5,r2
  801728:	41cd883a 	add	r6,r8,r7
  80172c:	30c00117 	ldw	r3,4(r6)
  801730:	51000217 	ldw	r4,8(r10)
  801734:	00bfff04 	movi	r2,-4
  801738:	1892703a 	and	r9,r3,r2
  80173c:	5017883a 	mov	r11,r10
  801740:	31006726 	beq	r6,r4,8018e0 <_free_r+0x1f0>
  801744:	2880004c 	andi	r2,r5,1
  801748:	1005003a 	cmpeq	r2,r2,zero
  80174c:	32400115 	stw	r9,4(r6)
  801750:	10001a1e 	bne	r2,zero,8017bc <_free_r+0xcc>
  801754:	000b883a 	mov	r5,zero
  801758:	3247883a 	add	r3,r6,r9
  80175c:	18800117 	ldw	r2,4(r3)
  801760:	1080004c 	andi	r2,r2,1
  801764:	1000231e 	bne	r2,zero,8017f4 <_free_r+0x104>
  801768:	280ac03a 	cmpne	r5,r5,zero
  80176c:	3a4f883a 	add	r7,r7,r9
  801770:	2800451e 	bne	r5,zero,801888 <_free_r+0x198>
  801774:	31000217 	ldw	r4,8(r6)
  801778:	00802074 	movhi	r2,129
  80177c:	1095e104 	addi	r2,r2,22404
  801780:	20807b26 	beq	r4,r2,801970 <_free_r+0x280>
  801784:	30800317 	ldw	r2,12(r6)
  801788:	3a07883a 	add	r3,r7,r8
  80178c:	19c00015 	stw	r7,0(r3)
  801790:	11000215 	stw	r4,8(r2)
  801794:	20800315 	stw	r2,12(r4)
  801798:	38800054 	ori	r2,r7,1
  80179c:	40800115 	stw	r2,4(r8)
  8017a0:	28001a26 	beq	r5,zero,80180c <_free_r+0x11c>
  8017a4:	8809883a 	mov	r4,r17
  8017a8:	dfc00217 	ldw	ra,8(sp)
  8017ac:	dc400117 	ldw	r17,4(sp)
  8017b0:	dc000017 	ldw	r16,0(sp)
  8017b4:	dec00304 	addi	sp,sp,12
  8017b8:	08114d81 	jmpi	8114d8 <__malloc_unlock>
  8017bc:	80bffe17 	ldw	r2,-8(r16)
  8017c0:	50c00204 	addi	r3,r10,8
  8017c4:	4091c83a 	sub	r8,r8,r2
  8017c8:	41000217 	ldw	r4,8(r8)
  8017cc:	388f883a 	add	r7,r7,r2
  8017d0:	20c06126 	beq	r4,r3,801958 <_free_r+0x268>
  8017d4:	40800317 	ldw	r2,12(r8)
  8017d8:	3247883a 	add	r3,r6,r9
  8017dc:	000b883a 	mov	r5,zero
  8017e0:	11000215 	stw	r4,8(r2)
  8017e4:	20800315 	stw	r2,12(r4)
  8017e8:	18800117 	ldw	r2,4(r3)
  8017ec:	1080004c 	andi	r2,r2,1
  8017f0:	103fdd26 	beq	r2,zero,801768 <_free_r+0x78>
  8017f4:	38800054 	ori	r2,r7,1
  8017f8:	3a07883a 	add	r3,r7,r8
  8017fc:	280ac03a 	cmpne	r5,r5,zero
  801800:	40800115 	stw	r2,4(r8)
  801804:	19c00015 	stw	r7,0(r3)
  801808:	283fe61e 	bne	r5,zero,8017a4 <_free_r+0xb4>
  80180c:	00807fc4 	movi	r2,511
  801810:	11c01f2e 	bgeu	r2,r7,801890 <_free_r+0x1a0>
  801814:	3806d27a 	srli	r3,r7,9
  801818:	1800481e 	bne	r3,zero,80193c <_free_r+0x24c>
  80181c:	3804d0fa 	srli	r2,r7,3
  801820:	100690fa 	slli	r3,r2,3
  801824:	1acd883a 	add	r6,r3,r11
  801828:	31400217 	ldw	r5,8(r6)
  80182c:	31405926 	beq	r6,r5,801994 <_free_r+0x2a4>
  801830:	28800117 	ldw	r2,4(r5)
  801834:	00ffff04 	movi	r3,-4
  801838:	10c4703a 	and	r2,r2,r3
  80183c:	3880022e 	bgeu	r7,r2,801848 <_free_r+0x158>
  801840:	29400217 	ldw	r5,8(r5)
  801844:	317ffa1e 	bne	r6,r5,801830 <_free_r+0x140>
  801848:	29800317 	ldw	r6,12(r5)
  80184c:	41800315 	stw	r6,12(r8)
  801850:	41400215 	stw	r5,8(r8)
  801854:	8809883a 	mov	r4,r17
  801858:	2a000315 	stw	r8,12(r5)
  80185c:	32000215 	stw	r8,8(r6)
  801860:	dfc00217 	ldw	ra,8(sp)
  801864:	dc400117 	ldw	r17,4(sp)
  801868:	dc000017 	ldw	r16,0(sp)
  80186c:	dec00304 	addi	sp,sp,12
  801870:	08114d81 	jmpi	8114d8 <__malloc_unlock>
  801874:	dfc00217 	ldw	ra,8(sp)
  801878:	dc400117 	ldw	r17,4(sp)
  80187c:	dc000017 	ldw	r16,0(sp)
  801880:	dec00304 	addi	sp,sp,12
  801884:	f800283a 	ret
  801888:	31000217 	ldw	r4,8(r6)
  80188c:	003fbd06 	br	801784 <_free_r+0x94>
  801890:	3806d0fa 	srli	r3,r7,3
  801894:	00800044 	movi	r2,1
  801898:	51400117 	ldw	r5,4(r10)
  80189c:	180890fa 	slli	r4,r3,3
  8018a0:	1807d0ba 	srai	r3,r3,2
  8018a4:	22c9883a 	add	r4,r4,r11
  8018a8:	21800217 	ldw	r6,8(r4)
  8018ac:	10c4983a 	sll	r2,r2,r3
  8018b0:	41000315 	stw	r4,12(r8)
  8018b4:	41800215 	stw	r6,8(r8)
  8018b8:	288ab03a 	or	r5,r5,r2
  8018bc:	22000215 	stw	r8,8(r4)
  8018c0:	8809883a 	mov	r4,r17
  8018c4:	51400115 	stw	r5,4(r10)
  8018c8:	32000315 	stw	r8,12(r6)
  8018cc:	dfc00217 	ldw	ra,8(sp)
  8018d0:	dc400117 	ldw	r17,4(sp)
  8018d4:	dc000017 	ldw	r16,0(sp)
  8018d8:	dec00304 	addi	sp,sp,12
  8018dc:	08114d81 	jmpi	8114d8 <__malloc_unlock>
  8018e0:	2880004c 	andi	r2,r5,1
  8018e4:	3a4d883a 	add	r6,r7,r9
  8018e8:	1000071e 	bne	r2,zero,801908 <_free_r+0x218>
  8018ec:	80bffe17 	ldw	r2,-8(r16)
  8018f0:	4091c83a 	sub	r8,r8,r2
  8018f4:	41000317 	ldw	r4,12(r8)
  8018f8:	40c00217 	ldw	r3,8(r8)
  8018fc:	308d883a 	add	r6,r6,r2
  801900:	20c00215 	stw	r3,8(r4)
  801904:	19000315 	stw	r4,12(r3)
  801908:	00802074 	movhi	r2,129
  80190c:	109bba04 	addi	r2,r2,28392
  801910:	11000017 	ldw	r4,0(r2)
  801914:	30c00054 	ori	r3,r6,1
  801918:	52000215 	stw	r8,8(r10)
  80191c:	40c00115 	stw	r3,4(r8)
  801920:	313fa036 	bltu	r6,r4,8017a4 <_free_r+0xb4>
  801924:	008020b4 	movhi	r2,130
  801928:	10a2c004 	addi	r2,r2,-29952
  80192c:	11400017 	ldw	r5,0(r2)
  801930:	8809883a 	mov	r4,r17
  801934:	08015c40 	call	8015c4 <_malloc_trim_r>
  801938:	003f9a06 	br	8017a4 <_free_r+0xb4>
  80193c:	00800104 	movi	r2,4
  801940:	10c0072e 	bgeu	r2,r3,801960 <_free_r+0x270>
  801944:	00800504 	movi	r2,20
  801948:	10c01936 	bltu	r2,r3,8019b0 <_free_r+0x2c0>
  80194c:	188016c4 	addi	r2,r3,91
  801950:	100690fa 	slli	r3,r2,3
  801954:	003fb306 	br	801824 <_free_r+0x134>
  801958:	01400044 	movi	r5,1
  80195c:	003f7e06 	br	801758 <_free_r+0x68>
  801960:	3804d1ba 	srli	r2,r7,6
  801964:	10800e04 	addi	r2,r2,56
  801968:	100690fa 	slli	r3,r2,3
  80196c:	003fad06 	br	801824 <_free_r+0x134>
  801970:	22000315 	stw	r8,12(r4)
  801974:	22000215 	stw	r8,8(r4)
  801978:	3a05883a 	add	r2,r7,r8
  80197c:	38c00054 	ori	r3,r7,1
  801980:	11c00015 	stw	r7,0(r2)
  801984:	41000215 	stw	r4,8(r8)
  801988:	40c00115 	stw	r3,4(r8)
  80198c:	41000315 	stw	r4,12(r8)
  801990:	003f8406 	br	8017a4 <_free_r+0xb4>
  801994:	1005d0ba 	srai	r2,r2,2
  801998:	00c00044 	movi	r3,1
  80199c:	51000117 	ldw	r4,4(r10)
  8019a0:	1886983a 	sll	r3,r3,r2
  8019a4:	20c8b03a 	or	r4,r4,r3
  8019a8:	51000115 	stw	r4,4(r10)
  8019ac:	003fa706 	br	80184c <_free_r+0x15c>
  8019b0:	00801504 	movi	r2,84
  8019b4:	10c00436 	bltu	r2,r3,8019c8 <_free_r+0x2d8>
  8019b8:	3804d33a 	srli	r2,r7,12
  8019bc:	10801b84 	addi	r2,r2,110
  8019c0:	100690fa 	slli	r3,r2,3
  8019c4:	003f9706 	br	801824 <_free_r+0x134>
  8019c8:	00805504 	movi	r2,340
  8019cc:	10c00436 	bltu	r2,r3,8019e0 <_free_r+0x2f0>
  8019d0:	3804d3fa 	srli	r2,r7,15
  8019d4:	10801dc4 	addi	r2,r2,119
  8019d8:	100690fa 	slli	r3,r2,3
  8019dc:	003f9106 	br	801824 <_free_r+0x134>
  8019e0:	00815504 	movi	r2,1364
  8019e4:	10c0032e 	bgeu	r2,r3,8019f4 <_free_r+0x304>
  8019e8:	00801f84 	movi	r2,126
  8019ec:	00c0fc04 	movi	r3,1008
  8019f0:	003f8c06 	br	801824 <_free_r+0x134>
  8019f4:	3804d4ba 	srli	r2,r7,18
  8019f8:	10801f04 	addi	r2,r2,124
  8019fc:	100690fa 	slli	r3,r2,3
  801a00:	003f8806 	br	801824 <_free_r+0x134>

00801a04 <_fseek_r>:
  801a04:	deffe804 	addi	sp,sp,-96
  801a08:	dd801515 	stw	r22,84(sp)
  801a0c:	dcc01215 	stw	r19,72(sp)
  801a10:	dc801115 	stw	r18,68(sp)
  801a14:	dc000f15 	stw	r16,60(sp)
  801a18:	dfc01715 	stw	ra,92(sp)
  801a1c:	ddc01615 	stw	r23,88(sp)
  801a20:	dd401415 	stw	r21,80(sp)
  801a24:	dd001315 	stw	r20,76(sp)
  801a28:	dc401015 	stw	r17,64(sp)
  801a2c:	2025883a 	mov	r18,r4
  801a30:	2821883a 	mov	r16,r5
  801a34:	302d883a 	mov	r22,r6
  801a38:	3827883a 	mov	r19,r7
  801a3c:	20000226 	beq	r4,zero,801a48 <_fseek_r+0x44>
  801a40:	20800e17 	ldw	r2,56(r4)
  801a44:	10007826 	beq	r2,zero,801c28 <_fseek_r+0x224>
  801a48:	8080030b 	ldhu	r2,12(r16)
  801a4c:	00c04204 	movi	r3,264
  801a50:	1080420c 	andi	r2,r2,264
  801a54:	10c07926 	beq	r2,r3,801c3c <_fseek_r+0x238>
  801a58:	85400a17 	ldw	r21,40(r16)
  801a5c:	a800ea26 	beq	r21,zero,801e08 <_fseek_r+0x404>
  801a60:	00800044 	movi	r2,1
  801a64:	98805f26 	beq	r19,r2,801be4 <_fseek_r+0x1e0>
  801a68:	00800084 	movi	r2,2
  801a6c:	98801026 	beq	r19,r2,801ab0 <_fseek_r+0xac>
  801a70:	98000f26 	beq	r19,zero,801ab0 <_fseek_r+0xac>
  801a74:	00800584 	movi	r2,22
  801a78:	013fffc4 	movi	r4,-1
  801a7c:	90800015 	stw	r2,0(r18)
  801a80:	2005883a 	mov	r2,r4
  801a84:	dfc01717 	ldw	ra,92(sp)
  801a88:	ddc01617 	ldw	r23,88(sp)
  801a8c:	dd801517 	ldw	r22,84(sp)
  801a90:	dd401417 	ldw	r21,80(sp)
  801a94:	dd001317 	ldw	r20,76(sp)
  801a98:	dcc01217 	ldw	r19,72(sp)
  801a9c:	dc801117 	ldw	r18,68(sp)
  801aa0:	dc401017 	ldw	r17,64(sp)
  801aa4:	dc000f17 	ldw	r16,60(sp)
  801aa8:	dec01804 	addi	sp,sp,96
  801aac:	f800283a 	ret
  801ab0:	81800417 	ldw	r6,16(r16)
  801ab4:	0023883a 	mov	r17,zero
  801ab8:	002f883a 	mov	r23,zero
  801abc:	3000a626 	beq	r6,zero,801d58 <_fseek_r+0x354>
  801ac0:	8100030b 	ldhu	r4,12(r16)
  801ac4:	2082068c 	andi	r2,r4,2074
  801ac8:	1000081e 	bne	r2,zero,801aec <_fseek_r+0xe8>
  801acc:	2081000c 	andi	r2,r4,1024
  801ad0:	10001b1e 	bne	r2,zero,801b40 <_fseek_r+0x13c>
  801ad4:	00802034 	movhi	r2,128
  801ad8:	108c5b04 	addi	r2,r2,12652
  801adc:	a8800926 	beq	r21,r2,801b04 <_fseek_r+0x100>
  801ae0:	8080030b 	ldhu	r2,12(r16)
  801ae4:	10820014 	ori	r2,r2,2048
  801ae8:	8080030d 	sth	r2,12(r16)
  801aec:	9009883a 	mov	r4,r18
  801af0:	800b883a 	mov	r5,r16
  801af4:	0800f300 	call	800f30 <_fflush_r>
  801af8:	1000a326 	beq	r2,zero,801d88 <_fseek_r+0x384>
  801afc:	013fffc4 	movi	r4,-1
  801b00:	003fdf06 	br	801a80 <_fseek_r+0x7c>
  801b04:	8140038f 	ldh	r5,14(r16)
  801b08:	283ff516 	blt	r5,zero,801ae0 <_fseek_r+0xdc>
  801b0c:	9009883a 	mov	r4,r18
  801b10:	d80d883a 	mov	r6,sp
  801b14:	0801e640 	call	801e64 <_fstat_r>
  801b18:	103ff11e 	bne	r2,zero,801ae0 <_fseek_r+0xdc>
  801b1c:	d8800117 	ldw	r2,4(sp)
  801b20:	00e00014 	movui	r3,32768
  801b24:	10bc000c 	andi	r2,r2,61440
  801b28:	10ffed1e 	bne	r2,r3,801ae0 <_fseek_r+0xdc>
  801b2c:	80c0030b 	ldhu	r3,12(r16)
  801b30:	00810004 	movi	r2,1024
  801b34:	80801315 	stw	r2,76(r16)
  801b38:	1886b03a 	or	r3,r3,r2
  801b3c:	80c0030d 	sth	r3,12(r16)
  801b40:	9800701e 	bne	r19,zero,801d04 <_fseek_r+0x300>
  801b44:	b029883a 	mov	r20,r22
  801b48:	b804c03a 	cmpne	r2,r23,zero
  801b4c:	10003f1e 	bne	r2,zero,801c4c <_fseek_r+0x248>
  801b50:	8100030b 	ldhu	r4,12(r16)
  801b54:	2084000c 	andi	r2,r4,4096
  801b58:	1000a126 	beq	r2,zero,801de0 <_fseek_r+0x3dc>
  801b5c:	81801417 	ldw	r6,80(r16)
  801b60:	80c00117 	ldw	r3,4(r16)
  801b64:	81400c17 	ldw	r5,48(r16)
  801b68:	30e3c83a 	sub	r17,r6,r3
  801b6c:	28008026 	beq	r5,zero,801d70 <_fseek_r+0x36c>
  801b70:	81c00f17 	ldw	r7,60(r16)
  801b74:	89e3c83a 	sub	r17,r17,r7
  801b78:	80800e17 	ldw	r2,56(r16)
  801b7c:	81800417 	ldw	r6,16(r16)
  801b80:	88c7883a 	add	r3,r17,r3
  801b84:	1185c83a 	sub	r2,r2,r6
  801b88:	11cf883a 	add	r7,r2,r7
  801b8c:	1887c83a 	sub	r3,r3,r2
  801b90:	2088000c 	andi	r2,r4,8192
  801b94:	10003e1e 	bne	r2,zero,801c90 <_fseek_r+0x28c>
  801b98:	a0c03d16 	blt	r20,r3,801c90 <_fseek_r+0x28c>
  801b9c:	38c5883a 	add	r2,r7,r3
  801ba0:	a0803b2e 	bgeu	r20,r2,801c90 <_fseek_r+0x28c>
  801ba4:	a0c5c83a 	sub	r2,r20,r3
  801ba8:	3887c83a 	sub	r3,r7,r2
  801bac:	3085883a 	add	r2,r6,r2
  801bb0:	80800015 	stw	r2,0(r16)
  801bb4:	80c00115 	stw	r3,4(r16)
  801bb8:	28000526 	beq	r5,zero,801bd0 <_fseek_r+0x1cc>
  801bbc:	80801004 	addi	r2,r16,64
  801bc0:	28800226 	beq	r5,r2,801bcc <_fseek_r+0x1c8>
  801bc4:	9009883a 	mov	r4,r18
  801bc8:	08016f00 	call	8016f0 <_free_r>
  801bcc:	80000c15 	stw	zero,48(r16)
  801bd0:	8080030b 	ldhu	r2,12(r16)
  801bd4:	0009883a 	mov	r4,zero
  801bd8:	10bff7cc 	andi	r2,r2,65503
  801bdc:	8080030d 	sth	r2,12(r16)
  801be0:	003fa706 	br	801a80 <_fseek_r+0x7c>
  801be4:	9009883a 	mov	r4,r18
  801be8:	800b883a 	mov	r5,r16
  801bec:	0800f300 	call	800f30 <_fflush_r>
  801bf0:	8100030b 	ldhu	r4,12(r16)
  801bf4:	2084000c 	andi	r2,r4,4096
  801bf8:	10008726 	beq	r2,zero,801e18 <_fseek_r+0x414>
  801bfc:	84401417 	ldw	r17,80(r16)
  801c00:	2080010c 	andi	r2,r4,4
  801c04:	1000171e 	bne	r2,zero,801c64 <_fseek_r+0x260>
  801c08:	2080020c 	andi	r2,r4,8
  801c0c:	10003b26 	beq	r2,zero,801cfc <_fseek_r+0x2f8>
  801c10:	80800017 	ldw	r2,0(r16)
  801c14:	10003926 	beq	r2,zero,801cfc <_fseek_r+0x2f8>
  801c18:	81800417 	ldw	r6,16(r16)
  801c1c:	1185c83a 	sub	r2,r2,r6
  801c20:	88a3883a 	add	r17,r17,r2
  801c24:	00001606 	br	801c80 <_fseek_r+0x27c>
  801c28:	08011c80 	call	8011c8 <__sinit>
  801c2c:	8080030b 	ldhu	r2,12(r16)
  801c30:	00c04204 	movi	r3,264
  801c34:	1080420c 	andi	r2,r2,264
  801c38:	10ff871e 	bne	r2,r3,801a58 <_fseek_r+0x54>
  801c3c:	9009883a 	mov	r4,r18
  801c40:	800b883a 	mov	r5,r16
  801c44:	0800f300 	call	800f30 <_fflush_r>
  801c48:	003f8306 	br	801a58 <_fseek_r+0x54>
  801c4c:	81400c17 	ldw	r5,48(r16)
  801c50:	28004526 	beq	r5,zero,801d68 <_fseek_r+0x364>
  801c54:	8100030b 	ldhu	r4,12(r16)
  801c58:	80c00117 	ldw	r3,4(r16)
  801c5c:	81c00f17 	ldw	r7,60(r16)
  801c60:	003fc506 	br	801b78 <_fseek_r+0x174>
  801c64:	80c00117 	ldw	r3,4(r16)
  801c68:	80800c17 	ldw	r2,48(r16)
  801c6c:	88e3c83a 	sub	r17,r17,r3
  801c70:	10002226 	beq	r2,zero,801cfc <_fseek_r+0x2f8>
  801c74:	81c00f17 	ldw	r7,60(r16)
  801c78:	81800417 	ldw	r6,16(r16)
  801c7c:	89e3c83a 	sub	r17,r17,r7
  801c80:	b46d883a 	add	r22,r22,r17
  801c84:	0027883a 	mov	r19,zero
  801c88:	05c00044 	movi	r23,1
  801c8c:	003f8b06 	br	801abc <_fseek_r+0xb8>
  801c90:	80801317 	ldw	r2,76(r16)
  801c94:	81400717 	ldw	r5,28(r16)
  801c98:	9009883a 	mov	r4,r18
  801c9c:	0085c83a 	sub	r2,zero,r2
  801ca0:	a0a2703a 	and	r17,r20,r2
  801ca4:	880d883a 	mov	r6,r17
  801ca8:	000f883a 	mov	r7,zero
  801cac:	a83ee83a 	callr	r21
  801cb0:	00ffffc4 	movi	r3,-1
  801cb4:	10ff8d26 	beq	r2,r3,801aec <_fseek_r+0xe8>
  801cb8:	80800417 	ldw	r2,16(r16)
  801cbc:	81400c17 	ldw	r5,48(r16)
  801cc0:	80000115 	stw	zero,4(r16)
  801cc4:	80800015 	stw	r2,0(r16)
  801cc8:	28000526 	beq	r5,zero,801ce0 <_fseek_r+0x2dc>
  801ccc:	80801004 	addi	r2,r16,64
  801cd0:	28800226 	beq	r5,r2,801cdc <_fseek_r+0x2d8>
  801cd4:	9009883a 	mov	r4,r18
  801cd8:	08016f00 	call	8016f0 <_free_r>
  801cdc:	80000c15 	stw	zero,48(r16)
  801ce0:	8080030b 	ldhu	r2,12(r16)
  801ce4:	a463c83a 	sub	r17,r20,r17
  801ce8:	10bff7cc 	andi	r2,r2,65503
  801cec:	8080030d 	sth	r2,12(r16)
  801cf0:	88000c1e 	bne	r17,zero,801d24 <_fseek_r+0x320>
  801cf4:	0009883a 	mov	r4,zero
  801cf8:	003f6106 	br	801a80 <_fseek_r+0x7c>
  801cfc:	81800417 	ldw	r6,16(r16)
  801d00:	003fdf06 	br	801c80 <_fseek_r+0x27c>
  801d04:	8140038f 	ldh	r5,14(r16)
  801d08:	9009883a 	mov	r4,r18
  801d0c:	d80d883a 	mov	r6,sp
  801d10:	0801e640 	call	801e64 <_fstat_r>
  801d14:	103f751e 	bne	r2,zero,801aec <_fseek_r+0xe8>
  801d18:	d8800417 	ldw	r2,16(sp)
  801d1c:	b0a9883a 	add	r20,r22,r2
  801d20:	003f8906 	br	801b48 <_fseek_r+0x144>
  801d24:	9009883a 	mov	r4,r18
  801d28:	800b883a 	mov	r5,r16
  801d2c:	0802da00 	call	802da0 <__srefill_r>
  801d30:	103f6e1e 	bne	r2,zero,801aec <_fseek_r+0xe8>
  801d34:	80c00117 	ldw	r3,4(r16)
  801d38:	1c7f6c36 	bltu	r3,r17,801aec <_fseek_r+0xe8>
  801d3c:	80800017 	ldw	r2,0(r16)
  801d40:	1c47c83a 	sub	r3,r3,r17
  801d44:	0009883a 	mov	r4,zero
  801d48:	1445883a 	add	r2,r2,r17
  801d4c:	80c00115 	stw	r3,4(r16)
  801d50:	80800015 	stw	r2,0(r16)
  801d54:	003f4a06 	br	801a80 <_fseek_r+0x7c>
  801d58:	9009883a 	mov	r4,r18
  801d5c:	800b883a 	mov	r5,r16
  801d60:	080226c0 	call	80226c <__smakebuf_r>
  801d64:	003f5606 	br	801ac0 <_fseek_r+0xbc>
  801d68:	8100030b 	ldhu	r4,12(r16)
  801d6c:	80c00117 	ldw	r3,4(r16)
  801d70:	80800017 	ldw	r2,0(r16)
  801d74:	81800417 	ldw	r6,16(r16)
  801d78:	1185c83a 	sub	r2,r2,r6
  801d7c:	10cf883a 	add	r7,r2,r3
  801d80:	8887c83a 	sub	r3,r17,r2
  801d84:	003f8206 	br	801b90 <_fseek_r+0x18c>
  801d88:	81400717 	ldw	r5,28(r16)
  801d8c:	b00d883a 	mov	r6,r22
  801d90:	980f883a 	mov	r7,r19
  801d94:	9009883a 	mov	r4,r18
  801d98:	a83ee83a 	callr	r21
  801d9c:	00ffffc4 	movi	r3,-1
  801da0:	10ff5626 	beq	r2,r3,801afc <_fseek_r+0xf8>
  801da4:	81400c17 	ldw	r5,48(r16)
  801da8:	28000526 	beq	r5,zero,801dc0 <_fseek_r+0x3bc>
  801dac:	80801004 	addi	r2,r16,64
  801db0:	28800226 	beq	r5,r2,801dbc <_fseek_r+0x3b8>
  801db4:	9009883a 	mov	r4,r18
  801db8:	08016f00 	call	8016f0 <_free_r>
  801dbc:	80000c15 	stw	zero,48(r16)
  801dc0:	8080030b 	ldhu	r2,12(r16)
  801dc4:	80c00417 	ldw	r3,16(r16)
  801dc8:	0009883a 	mov	r4,zero
  801dcc:	10bdf7cc 	andi	r2,r2,63455
  801dd0:	8080030d 	sth	r2,12(r16)
  801dd4:	80c00015 	stw	r3,0(r16)
  801dd8:	80000115 	stw	zero,4(r16)
  801ddc:	003f2806 	br	801a80 <_fseek_r+0x7c>
  801de0:	81400717 	ldw	r5,28(r16)
  801de4:	000d883a 	mov	r6,zero
  801de8:	9009883a 	mov	r4,r18
  801dec:	01c00044 	movi	r7,1
  801df0:	a83ee83a 	callr	r21
  801df4:	100d883a 	mov	r6,r2
  801df8:	00bfffc4 	movi	r2,-1
  801dfc:	30bf3b26 	beq	r6,r2,801aec <_fseek_r+0xe8>
  801e00:	8100030b 	ldhu	r4,12(r16)
  801e04:	003f5606 	br	801b60 <_fseek_r+0x15c>
  801e08:	00800744 	movi	r2,29
  801e0c:	013fffc4 	movi	r4,-1
  801e10:	90800015 	stw	r2,0(r18)
  801e14:	003f1a06 	br	801a80 <_fseek_r+0x7c>
  801e18:	81400717 	ldw	r5,28(r16)
  801e1c:	980f883a 	mov	r7,r19
  801e20:	9009883a 	mov	r4,r18
  801e24:	000d883a 	mov	r6,zero
  801e28:	a83ee83a 	callr	r21
  801e2c:	1023883a 	mov	r17,r2
  801e30:	00bfffc4 	movi	r2,-1
  801e34:	88bf3126 	beq	r17,r2,801afc <_fseek_r+0xf8>
  801e38:	8100030b 	ldhu	r4,12(r16)
  801e3c:	003f7006 	br	801c00 <_fseek_r+0x1fc>

00801e40 <fseek>:
  801e40:	00802074 	movhi	r2,129
  801e44:	109bb804 	addi	r2,r2,28384
  801e48:	2013883a 	mov	r9,r4
  801e4c:	11000017 	ldw	r4,0(r2)
  801e50:	2805883a 	mov	r2,r5
  801e54:	300f883a 	mov	r7,r6
  801e58:	480b883a 	mov	r5,r9
  801e5c:	100d883a 	mov	r6,r2
  801e60:	0801a041 	jmpi	801a04 <_fseek_r>

00801e64 <_fstat_r>:
  801e64:	defffd04 	addi	sp,sp,-12
  801e68:	dc000015 	stw	r16,0(sp)
  801e6c:	040020b4 	movhi	r16,130
  801e70:	8422bf04 	addi	r16,r16,-29956
  801e74:	dc400115 	stw	r17,4(sp)
  801e78:	80000015 	stw	zero,0(r16)
  801e7c:	2023883a 	mov	r17,r4
  801e80:	2809883a 	mov	r4,r5
  801e84:	300b883a 	mov	r5,r6
  801e88:	dfc00215 	stw	ra,8(sp)
  801e8c:	0810ce40 	call	810ce4 <fstat>
  801e90:	1007883a 	mov	r3,r2
  801e94:	00bfffc4 	movi	r2,-1
  801e98:	18800626 	beq	r3,r2,801eb4 <_fstat_r+0x50>
  801e9c:	1805883a 	mov	r2,r3
  801ea0:	dfc00217 	ldw	ra,8(sp)
  801ea4:	dc400117 	ldw	r17,4(sp)
  801ea8:	dc000017 	ldw	r16,0(sp)
  801eac:	dec00304 	addi	sp,sp,12
  801eb0:	f800283a 	ret
  801eb4:	80800017 	ldw	r2,0(r16)
  801eb8:	103ff826 	beq	r2,zero,801e9c <_fstat_r+0x38>
  801ebc:	88800015 	stw	r2,0(r17)
  801ec0:	1805883a 	mov	r2,r3
  801ec4:	dfc00217 	ldw	ra,8(sp)
  801ec8:	dc400117 	ldw	r17,4(sp)
  801ecc:	dc000017 	ldw	r16,0(sp)
  801ed0:	dec00304 	addi	sp,sp,12
  801ed4:	f800283a 	ret

00801ed8 <_fwalk_reent>:
  801ed8:	defff704 	addi	sp,sp,-36
  801edc:	dcc00315 	stw	r19,12(sp)
  801ee0:	24c0b804 	addi	r19,r4,736
  801ee4:	dd800615 	stw	r22,24(sp)
  801ee8:	dd400515 	stw	r21,20(sp)
  801eec:	dfc00815 	stw	ra,32(sp)
  801ef0:	ddc00715 	stw	r23,28(sp)
  801ef4:	dd000415 	stw	r20,16(sp)
  801ef8:	dc800215 	stw	r18,8(sp)
  801efc:	dc400115 	stw	r17,4(sp)
  801f00:	dc000015 	stw	r16,0(sp)
  801f04:	202b883a 	mov	r21,r4
  801f08:	282d883a 	mov	r22,r5
  801f0c:	08011b80 	call	8011b8 <__sfp_lock_acquire>
  801f10:	98002126 	beq	r19,zero,801f98 <_fwalk_reent+0xc0>
  801f14:	002f883a 	mov	r23,zero
  801f18:	9c800117 	ldw	r18,4(r19)
  801f1c:	9c000217 	ldw	r16,8(r19)
  801f20:	90bfffc4 	addi	r2,r18,-1
  801f24:	10000d16 	blt	r2,zero,801f5c <_fwalk_reent+0x84>
  801f28:	0023883a 	mov	r17,zero
  801f2c:	053fffc4 	movi	r20,-1
  801f30:	8080030f 	ldh	r2,12(r16)
  801f34:	8c400044 	addi	r17,r17,1
  801f38:	10000626 	beq	r2,zero,801f54 <_fwalk_reent+0x7c>
  801f3c:	8080038f 	ldh	r2,14(r16)
  801f40:	800b883a 	mov	r5,r16
  801f44:	a809883a 	mov	r4,r21
  801f48:	15000226 	beq	r2,r20,801f54 <_fwalk_reent+0x7c>
  801f4c:	b03ee83a 	callr	r22
  801f50:	b8aeb03a 	or	r23,r23,r2
  801f54:	84001704 	addi	r16,r16,92
  801f58:	947ff51e 	bne	r18,r17,801f30 <_fwalk_reent+0x58>
  801f5c:	9cc00017 	ldw	r19,0(r19)
  801f60:	983fed1e 	bne	r19,zero,801f18 <_fwalk_reent+0x40>
  801f64:	08011bc0 	call	8011bc <__sfp_lock_release>
  801f68:	b805883a 	mov	r2,r23
  801f6c:	dfc00817 	ldw	ra,32(sp)
  801f70:	ddc00717 	ldw	r23,28(sp)
  801f74:	dd800617 	ldw	r22,24(sp)
  801f78:	dd400517 	ldw	r21,20(sp)
  801f7c:	dd000417 	ldw	r20,16(sp)
  801f80:	dcc00317 	ldw	r19,12(sp)
  801f84:	dc800217 	ldw	r18,8(sp)
  801f88:	dc400117 	ldw	r17,4(sp)
  801f8c:	dc000017 	ldw	r16,0(sp)
  801f90:	dec00904 	addi	sp,sp,36
  801f94:	f800283a 	ret
  801f98:	002f883a 	mov	r23,zero
  801f9c:	003ff106 	br	801f64 <_fwalk_reent+0x8c>

00801fa0 <_fwalk>:
  801fa0:	defff804 	addi	sp,sp,-32
  801fa4:	dcc00315 	stw	r19,12(sp)
  801fa8:	24c0b804 	addi	r19,r4,736
  801fac:	dd400515 	stw	r21,20(sp)
  801fb0:	dfc00715 	stw	ra,28(sp)
  801fb4:	dd800615 	stw	r22,24(sp)
  801fb8:	dd000415 	stw	r20,16(sp)
  801fbc:	dc800215 	stw	r18,8(sp)
  801fc0:	dc400115 	stw	r17,4(sp)
  801fc4:	dc000015 	stw	r16,0(sp)
  801fc8:	282b883a 	mov	r21,r5
  801fcc:	08011b80 	call	8011b8 <__sfp_lock_acquire>
  801fd0:	98001f26 	beq	r19,zero,802050 <_fwalk+0xb0>
  801fd4:	002d883a 	mov	r22,zero
  801fd8:	9c800117 	ldw	r18,4(r19)
  801fdc:	9c000217 	ldw	r16,8(r19)
  801fe0:	90bfffc4 	addi	r2,r18,-1
  801fe4:	10000c16 	blt	r2,zero,802018 <_fwalk+0x78>
  801fe8:	0023883a 	mov	r17,zero
  801fec:	053fffc4 	movi	r20,-1
  801ff0:	8080030f 	ldh	r2,12(r16)
  801ff4:	8c400044 	addi	r17,r17,1
  801ff8:	10000526 	beq	r2,zero,802010 <_fwalk+0x70>
  801ffc:	8080038f 	ldh	r2,14(r16)
  802000:	8009883a 	mov	r4,r16
  802004:	15000226 	beq	r2,r20,802010 <_fwalk+0x70>
  802008:	a83ee83a 	callr	r21
  80200c:	b0acb03a 	or	r22,r22,r2
  802010:	84001704 	addi	r16,r16,92
  802014:	947ff61e 	bne	r18,r17,801ff0 <_fwalk+0x50>
  802018:	9cc00017 	ldw	r19,0(r19)
  80201c:	983fee1e 	bne	r19,zero,801fd8 <_fwalk+0x38>
  802020:	08011bc0 	call	8011bc <__sfp_lock_release>
  802024:	b005883a 	mov	r2,r22
  802028:	dfc00717 	ldw	ra,28(sp)
  80202c:	dd800617 	ldw	r22,24(sp)
  802030:	dd400517 	ldw	r21,20(sp)
  802034:	dd000417 	ldw	r20,16(sp)
  802038:	dcc00317 	ldw	r19,12(sp)
  80203c:	dc800217 	ldw	r18,8(sp)
  802040:	dc400117 	ldw	r17,4(sp)
  802044:	dc000017 	ldw	r16,0(sp)
  802048:	dec00804 	addi	sp,sp,32
  80204c:	f800283a 	ret
  802050:	002d883a 	mov	r22,zero
  802054:	003ff206 	br	802020 <_fwalk+0x80>

00802058 <_fwrite_r>:
  802058:	defff604 	addi	sp,sp,-40
  80205c:	dc000515 	stw	r16,20(sp)
  802060:	d9400015 	stw	r5,0(sp)
  802064:	2021883a 	mov	r16,r4
  802068:	300b883a 	mov	r5,r6
  80206c:	3809883a 	mov	r4,r7
  802070:	dcc00815 	stw	r19,32(sp)
  802074:	dc800715 	stw	r18,28(sp)
  802078:	dc400615 	stw	r17,24(sp)
  80207c:	dfc00915 	stw	ra,36(sp)
  802080:	3825883a 	mov	r18,r7
  802084:	3027883a 	mov	r19,r6
  802088:	08102900 	call	810290 <__mulsi3>
  80208c:	1023883a 	mov	r17,r2
  802090:	00800044 	movi	r2,1
  802094:	d8800315 	stw	r2,12(sp)
  802098:	dc400115 	stw	r17,4(sp)
  80209c:	dc400415 	stw	r17,16(sp)
  8020a0:	dec00215 	stw	sp,8(sp)
  8020a4:	80000326 	beq	r16,zero,8020b4 <_fwrite_r+0x5c>
  8020a8:	80800e17 	ldw	r2,56(r16)
  8020ac:	8009883a 	mov	r4,r16
  8020b0:	10001226 	beq	r2,zero,8020fc <_fwrite_r+0xa4>
  8020b4:	d9400a17 	ldw	r5,40(sp)
  8020b8:	8009883a 	mov	r4,r16
  8020bc:	d9800204 	addi	r6,sp,8
  8020c0:	08086f40 	call	8086f4 <__sfvwrite_r>
  8020c4:	980b883a 	mov	r5,r19
  8020c8:	10000426 	beq	r2,zero,8020dc <_fwrite_r+0x84>
  8020cc:	d9000417 	ldw	r4,16(sp)
  8020d0:	8909c83a 	sub	r4,r17,r4
  8020d4:	08102800 	call	810280 <__udivsi3>
  8020d8:	1025883a 	mov	r18,r2
  8020dc:	9005883a 	mov	r2,r18
  8020e0:	dfc00917 	ldw	ra,36(sp)
  8020e4:	dcc00817 	ldw	r19,32(sp)
  8020e8:	dc800717 	ldw	r18,28(sp)
  8020ec:	dc400617 	ldw	r17,24(sp)
  8020f0:	dc000517 	ldw	r16,20(sp)
  8020f4:	dec00a04 	addi	sp,sp,40
  8020f8:	f800283a 	ret
  8020fc:	08011c80 	call	8011c8 <__sinit>
  802100:	003fec06 	br	8020b4 <_fwrite_r+0x5c>

00802104 <fwrite>:
  802104:	00802074 	movhi	r2,129
  802108:	109bb804 	addi	r2,r2,28384
  80210c:	2017883a 	mov	r11,r4
  802110:	11000017 	ldw	r4,0(r2)
  802114:	defffe04 	addi	sp,sp,-8
  802118:	3013883a 	mov	r9,r6
  80211c:	2805883a 	mov	r2,r5
  802120:	d9c00015 	stw	r7,0(sp)
  802124:	580b883a 	mov	r5,r11
  802128:	100d883a 	mov	r6,r2
  80212c:	480f883a 	mov	r7,r9
  802130:	dfc00115 	stw	ra,4(sp)
  802134:	08020580 	call	802058 <_fwrite_r>
  802138:	dfc00117 	ldw	ra,4(sp)
  80213c:	dec00204 	addi	sp,sp,8
  802140:	f800283a 	ret

00802144 <getc>:
  802144:	defffd04 	addi	sp,sp,-12
  802148:	dc400115 	stw	r17,4(sp)
  80214c:	04402074 	movhi	r17,129
  802150:	8c5bb804 	addi	r17,r17,28384
  802154:	88c00017 	ldw	r3,0(r17)
  802158:	dc000015 	stw	r16,0(sp)
  80215c:	dfc00215 	stw	ra,8(sp)
  802160:	2021883a 	mov	r16,r4
  802164:	18000326 	beq	r3,zero,802174 <getc+0x30>
  802168:	18800e17 	ldw	r2,56(r3)
  80216c:	1809883a 	mov	r4,r3
  802170:	10000e26 	beq	r2,zero,8021ac <getc+0x68>
  802174:	80800117 	ldw	r2,4(r16)
  802178:	800b883a 	mov	r5,r16
  80217c:	10bfffc4 	addi	r2,r2,-1
  802180:	80800115 	stw	r2,4(r16)
  802184:	10000f16 	blt	r2,zero,8021c4 <getc+0x80>
  802188:	80c00017 	ldw	r3,0(r16)
  80218c:	18800003 	ldbu	r2,0(r3)
  802190:	18c00044 	addi	r3,r3,1
  802194:	80c00015 	stw	r3,0(r16)
  802198:	dfc00217 	ldw	ra,8(sp)
  80219c:	dc400117 	ldw	r17,4(sp)
  8021a0:	dc000017 	ldw	r16,0(sp)
  8021a4:	dec00304 	addi	sp,sp,12
  8021a8:	f800283a 	ret
  8021ac:	08011c80 	call	8011c8 <__sinit>
  8021b0:	80800117 	ldw	r2,4(r16)
  8021b4:	800b883a 	mov	r5,r16
  8021b8:	10bfffc4 	addi	r2,r2,-1
  8021bc:	80800115 	stw	r2,4(r16)
  8021c0:	103ff10e 	bge	r2,zero,802188 <getc+0x44>
  8021c4:	89000017 	ldw	r4,0(r17)
  8021c8:	dfc00217 	ldw	ra,8(sp)
  8021cc:	dc400117 	ldw	r17,4(sp)
  8021d0:	dc000017 	ldw	r16,0(sp)
  8021d4:	dec00304 	addi	sp,sp,12
  8021d8:	0802f801 	jmpi	802f80 <__srget_r>

008021dc <_getc_r>:
  8021dc:	defffd04 	addi	sp,sp,-12
  8021e0:	dc400115 	stw	r17,4(sp)
  8021e4:	dc000015 	stw	r16,0(sp)
  8021e8:	dfc00215 	stw	ra,8(sp)
  8021ec:	2021883a 	mov	r16,r4
  8021f0:	2823883a 	mov	r17,r5
  8021f4:	20000226 	beq	r4,zero,802200 <_getc_r+0x24>
  8021f8:	20800e17 	ldw	r2,56(r4)
  8021fc:	10000f26 	beq	r2,zero,80223c <_getc_r+0x60>
  802200:	88800117 	ldw	r2,4(r17)
  802204:	8009883a 	mov	r4,r16
  802208:	880b883a 	mov	r5,r17
  80220c:	10bfffc4 	addi	r2,r2,-1
  802210:	88800115 	stw	r2,4(r17)
  802214:	10001016 	blt	r2,zero,802258 <_getc_r+0x7c>
  802218:	88c00017 	ldw	r3,0(r17)
  80221c:	18800003 	ldbu	r2,0(r3)
  802220:	18c00044 	addi	r3,r3,1
  802224:	88c00015 	stw	r3,0(r17)
  802228:	dfc00217 	ldw	ra,8(sp)
  80222c:	dc400117 	ldw	r17,4(sp)
  802230:	dc000017 	ldw	r16,0(sp)
  802234:	dec00304 	addi	sp,sp,12
  802238:	f800283a 	ret
  80223c:	08011c80 	call	8011c8 <__sinit>
  802240:	88800117 	ldw	r2,4(r17)
  802244:	8009883a 	mov	r4,r16
  802248:	880b883a 	mov	r5,r17
  80224c:	10bfffc4 	addi	r2,r2,-1
  802250:	88800115 	stw	r2,4(r17)
  802254:	103ff00e 	bge	r2,zero,802218 <_getc_r+0x3c>
  802258:	dfc00217 	ldw	ra,8(sp)
  80225c:	dc400117 	ldw	r17,4(sp)
  802260:	dc000017 	ldw	r16,0(sp)
  802264:	dec00304 	addi	sp,sp,12
  802268:	0802f801 	jmpi	802f80 <__srget_r>

0080226c <__smakebuf_r>:
  80226c:	2880030b 	ldhu	r2,12(r5)
  802270:	deffed04 	addi	sp,sp,-76
  802274:	dc401015 	stw	r17,64(sp)
  802278:	1080008c 	andi	r2,r2,2
  80227c:	dc000f15 	stw	r16,60(sp)
  802280:	dfc01215 	stw	ra,72(sp)
  802284:	dc801115 	stw	r18,68(sp)
  802288:	2821883a 	mov	r16,r5
  80228c:	2023883a 	mov	r17,r4
  802290:	10000b26 	beq	r2,zero,8022c0 <__smakebuf_r+0x54>
  802294:	28c010c4 	addi	r3,r5,67
  802298:	00800044 	movi	r2,1
  80229c:	28800515 	stw	r2,20(r5)
  8022a0:	28c00415 	stw	r3,16(r5)
  8022a4:	28c00015 	stw	r3,0(r5)
  8022a8:	dfc01217 	ldw	ra,72(sp)
  8022ac:	dc801117 	ldw	r18,68(sp)
  8022b0:	dc401017 	ldw	r17,64(sp)
  8022b4:	dc000f17 	ldw	r16,60(sp)
  8022b8:	dec01304 	addi	sp,sp,76
  8022bc:	f800283a 	ret
  8022c0:	2940038f 	ldh	r5,14(r5)
  8022c4:	28002116 	blt	r5,zero,80234c <__smakebuf_r+0xe0>
  8022c8:	d80d883a 	mov	r6,sp
  8022cc:	0801e640 	call	801e64 <_fstat_r>
  8022d0:	10001e16 	blt	r2,zero,80234c <__smakebuf_r+0xe0>
  8022d4:	d8800117 	ldw	r2,4(sp)
  8022d8:	00e00014 	movui	r3,32768
  8022dc:	113c000c 	andi	r4,r2,61440
  8022e0:	20c03126 	beq	r4,r3,8023a8 <__smakebuf_r+0x13c>
  8022e4:	8080030b 	ldhu	r2,12(r16)
  8022e8:	00c80004 	movi	r3,8192
  8022ec:	10820014 	ori	r2,r2,2048
  8022f0:	8080030d 	sth	r2,12(r16)
  8022f4:	20c01e26 	beq	r4,r3,802370 <__smakebuf_r+0x104>
  8022f8:	04810004 	movi	r18,1024
  8022fc:	8809883a 	mov	r4,r17
  802300:	900b883a 	mov	r5,r18
  802304:	08024000 	call	802400 <_malloc_r>
  802308:	1009883a 	mov	r4,r2
  80230c:	10003126 	beq	r2,zero,8023d4 <__smakebuf_r+0x168>
  802310:	80c0030b 	ldhu	r3,12(r16)
  802314:	00802034 	movhi	r2,128
  802318:	1084ab04 	addi	r2,r2,4780
  80231c:	88800f15 	stw	r2,60(r17)
  802320:	18c02014 	ori	r3,r3,128
  802324:	84800515 	stw	r18,20(r16)
  802328:	80c0030d 	sth	r3,12(r16)
  80232c:	81000415 	stw	r4,16(r16)
  802330:	81000015 	stw	r4,0(r16)
  802334:	dfc01217 	ldw	ra,72(sp)
  802338:	dc801117 	ldw	r18,68(sp)
  80233c:	dc401017 	ldw	r17,64(sp)
  802340:	dc000f17 	ldw	r16,60(sp)
  802344:	dec01304 	addi	sp,sp,76
  802348:	f800283a 	ret
  80234c:	80c0030b 	ldhu	r3,12(r16)
  802350:	1880200c 	andi	r2,r3,128
  802354:	10000426 	beq	r2,zero,802368 <__smakebuf_r+0xfc>
  802358:	04801004 	movi	r18,64
  80235c:	18820014 	ori	r2,r3,2048
  802360:	8080030d 	sth	r2,12(r16)
  802364:	003fe506 	br	8022fc <__smakebuf_r+0x90>
  802368:	04810004 	movi	r18,1024
  80236c:	003ffb06 	br	80235c <__smakebuf_r+0xf0>
  802370:	8140038f 	ldh	r5,14(r16)
  802374:	8809883a 	mov	r4,r17
  802378:	0808b900 	call	808b90 <_isatty_r>
  80237c:	103fde26 	beq	r2,zero,8022f8 <__smakebuf_r+0x8c>
  802380:	8080030b 	ldhu	r2,12(r16)
  802384:	80c010c4 	addi	r3,r16,67
  802388:	04810004 	movi	r18,1024
  80238c:	10800054 	ori	r2,r2,1
  802390:	8080030d 	sth	r2,12(r16)
  802394:	00800044 	movi	r2,1
  802398:	80c00415 	stw	r3,16(r16)
  80239c:	80800515 	stw	r2,20(r16)
  8023a0:	80c00015 	stw	r3,0(r16)
  8023a4:	003fd506 	br	8022fc <__smakebuf_r+0x90>
  8023a8:	80c00a17 	ldw	r3,40(r16)
  8023ac:	00802034 	movhi	r2,128
  8023b0:	108c5b04 	addi	r2,r2,12652
  8023b4:	18bfcb1e 	bne	r3,r2,8022e4 <__smakebuf_r+0x78>
  8023b8:	8080030b 	ldhu	r2,12(r16)
  8023bc:	00c10004 	movi	r3,1024
  8023c0:	1825883a 	mov	r18,r3
  8023c4:	10c4b03a 	or	r2,r2,r3
  8023c8:	8080030d 	sth	r2,12(r16)
  8023cc:	80c01315 	stw	r3,76(r16)
  8023d0:	003fca06 	br	8022fc <__smakebuf_r+0x90>
  8023d4:	8100030b 	ldhu	r4,12(r16)
  8023d8:	2080800c 	andi	r2,r4,512
  8023dc:	103fb21e 	bne	r2,zero,8022a8 <__smakebuf_r+0x3c>
  8023e0:	80c010c4 	addi	r3,r16,67
  8023e4:	21000094 	ori	r4,r4,2
  8023e8:	00800044 	movi	r2,1
  8023ec:	80800515 	stw	r2,20(r16)
  8023f0:	8100030d 	sth	r4,12(r16)
  8023f4:	80c00415 	stw	r3,16(r16)
  8023f8:	80c00015 	stw	r3,0(r16)
  8023fc:	003faa06 	br	8022a8 <__smakebuf_r+0x3c>

00802400 <_malloc_r>:
  802400:	defff604 	addi	sp,sp,-40
  802404:	28c002c4 	addi	r3,r5,11
  802408:	00800584 	movi	r2,22
  80240c:	dc800215 	stw	r18,8(sp)
  802410:	dfc00915 	stw	ra,36(sp)
  802414:	df000815 	stw	fp,32(sp)
  802418:	ddc00715 	stw	r23,28(sp)
  80241c:	dd800615 	stw	r22,24(sp)
  802420:	dd400515 	stw	r21,20(sp)
  802424:	dd000415 	stw	r20,16(sp)
  802428:	dcc00315 	stw	r19,12(sp)
  80242c:	dc400115 	stw	r17,4(sp)
  802430:	dc000015 	stw	r16,0(sp)
  802434:	2025883a 	mov	r18,r4
  802438:	10c01236 	bltu	r2,r3,802484 <_malloc_r+0x84>
  80243c:	04400404 	movi	r17,16
  802440:	8940142e 	bgeu	r17,r5,802494 <_malloc_r+0x94>
  802444:	00800304 	movi	r2,12
  802448:	0007883a 	mov	r3,zero
  80244c:	90800015 	stw	r2,0(r18)
  802450:	1805883a 	mov	r2,r3
  802454:	dfc00917 	ldw	ra,36(sp)
  802458:	df000817 	ldw	fp,32(sp)
  80245c:	ddc00717 	ldw	r23,28(sp)
  802460:	dd800617 	ldw	r22,24(sp)
  802464:	dd400517 	ldw	r21,20(sp)
  802468:	dd000417 	ldw	r20,16(sp)
  80246c:	dcc00317 	ldw	r19,12(sp)
  802470:	dc800217 	ldw	r18,8(sp)
  802474:	dc400117 	ldw	r17,4(sp)
  802478:	dc000017 	ldw	r16,0(sp)
  80247c:	dec00a04 	addi	sp,sp,40
  802480:	f800283a 	ret
  802484:	00bffe04 	movi	r2,-8
  802488:	18a2703a 	and	r17,r3,r2
  80248c:	883fed16 	blt	r17,zero,802444 <_malloc_r+0x44>
  802490:	897fec36 	bltu	r17,r5,802444 <_malloc_r+0x44>
  802494:	9009883a 	mov	r4,r18
  802498:	08114b80 	call	8114b8 <__malloc_lock>
  80249c:	00807dc4 	movi	r2,503
  8024a0:	14402b2e 	bgeu	r2,r17,802550 <_malloc_r+0x150>
  8024a4:	8806d27a 	srli	r3,r17,9
  8024a8:	18003f1e 	bne	r3,zero,8025a8 <_malloc_r+0x1a8>
  8024ac:	880cd0fa 	srli	r6,r17,3
  8024b0:	300490fa 	slli	r2,r6,3
  8024b4:	02c02074 	movhi	r11,129
  8024b8:	5ad5df04 	addi	r11,r11,22396
  8024bc:	12cb883a 	add	r5,r2,r11
  8024c0:	2c000317 	ldw	r16,12(r5)
  8024c4:	580f883a 	mov	r7,r11
  8024c8:	2c00041e 	bne	r5,r16,8024dc <_malloc_r+0xdc>
  8024cc:	00000a06 	br	8024f8 <_malloc_r+0xf8>
  8024d0:	1800860e 	bge	r3,zero,8026ec <_malloc_r+0x2ec>
  8024d4:	84000317 	ldw	r16,12(r16)
  8024d8:	2c000726 	beq	r5,r16,8024f8 <_malloc_r+0xf8>
  8024dc:	80800117 	ldw	r2,4(r16)
  8024e0:	00ffff04 	movi	r3,-4
  8024e4:	10c8703a 	and	r4,r2,r3
  8024e8:	2447c83a 	sub	r3,r4,r17
  8024ec:	008003c4 	movi	r2,15
  8024f0:	10fff70e 	bge	r2,r3,8024d0 <_malloc_r+0xd0>
  8024f4:	31bfffc4 	addi	r6,r6,-1
  8024f8:	32400044 	addi	r9,r6,1
  8024fc:	02802074 	movhi	r10,129
  802500:	5295e104 	addi	r10,r10,22404
  802504:	54000217 	ldw	r16,8(r10)
  802508:	8280a026 	beq	r16,r10,80278c <_malloc_r+0x38c>
  80250c:	80800117 	ldw	r2,4(r16)
  802510:	00ffff04 	movi	r3,-4
  802514:	10ca703a 	and	r5,r2,r3
  802518:	2c4dc83a 	sub	r6,r5,r17
  80251c:	008003c4 	movi	r2,15
  802520:	11808316 	blt	r2,r6,802730 <_malloc_r+0x330>
  802524:	52800315 	stw	r10,12(r10)
  802528:	52800215 	stw	r10,8(r10)
  80252c:	30002916 	blt	r6,zero,8025d4 <_malloc_r+0x1d4>
  802530:	8147883a 	add	r3,r16,r5
  802534:	18800117 	ldw	r2,4(r3)
  802538:	9009883a 	mov	r4,r18
  80253c:	10800054 	ori	r2,r2,1
  802540:	18800115 	stw	r2,4(r3)
  802544:	08114d80 	call	8114d8 <__malloc_unlock>
  802548:	80c00204 	addi	r3,r16,8
  80254c:	003fc006 	br	802450 <_malloc_r+0x50>
  802550:	02c02074 	movhi	r11,129
  802554:	5ad5df04 	addi	r11,r11,22396
  802558:	8ac5883a 	add	r2,r17,r11
  80255c:	14000317 	ldw	r16,12(r2)
  802560:	580f883a 	mov	r7,r11
  802564:	8806d0fa 	srli	r3,r17,3
  802568:	14006c26 	beq	r2,r16,80271c <_malloc_r+0x31c>
  80256c:	80c00117 	ldw	r3,4(r16)
  802570:	00bfff04 	movi	r2,-4
  802574:	81800317 	ldw	r6,12(r16)
  802578:	1886703a 	and	r3,r3,r2
  80257c:	80c7883a 	add	r3,r16,r3
  802580:	18800117 	ldw	r2,4(r3)
  802584:	81400217 	ldw	r5,8(r16)
  802588:	9009883a 	mov	r4,r18
  80258c:	10800054 	ori	r2,r2,1
  802590:	18800115 	stw	r2,4(r3)
  802594:	31400215 	stw	r5,8(r6)
  802598:	29800315 	stw	r6,12(r5)
  80259c:	08114d80 	call	8114d8 <__malloc_unlock>
  8025a0:	80c00204 	addi	r3,r16,8
  8025a4:	003faa06 	br	802450 <_malloc_r+0x50>
  8025a8:	00800104 	movi	r2,4
  8025ac:	10c0052e 	bgeu	r2,r3,8025c4 <_malloc_r+0x1c4>
  8025b0:	00800504 	movi	r2,20
  8025b4:	10c07836 	bltu	r2,r3,802798 <_malloc_r+0x398>
  8025b8:	198016c4 	addi	r6,r3,91
  8025bc:	300490fa 	slli	r2,r6,3
  8025c0:	003fbc06 	br	8024b4 <_malloc_r+0xb4>
  8025c4:	8804d1ba 	srli	r2,r17,6
  8025c8:	11800e04 	addi	r6,r2,56
  8025cc:	300490fa 	slli	r2,r6,3
  8025d0:	003fb806 	br	8024b4 <_malloc_r+0xb4>
  8025d4:	00807fc4 	movi	r2,511
  8025d8:	1140bb36 	bltu	r2,r5,8028c8 <_malloc_r+0x4c8>
  8025dc:	2806d0fa 	srli	r3,r5,3
  8025e0:	573ffe04 	addi	fp,r10,-8
  8025e4:	00800044 	movi	r2,1
  8025e8:	180890fa 	slli	r4,r3,3
  8025ec:	1807d0ba 	srai	r3,r3,2
  8025f0:	e1c00117 	ldw	r7,4(fp)
  8025f4:	5909883a 	add	r4,r11,r4
  8025f8:	21400217 	ldw	r5,8(r4)
  8025fc:	10c4983a 	sll	r2,r2,r3
  802600:	81000315 	stw	r4,12(r16)
  802604:	81400215 	stw	r5,8(r16)
  802608:	388eb03a 	or	r7,r7,r2
  80260c:	2c000315 	stw	r16,12(r5)
  802610:	24000215 	stw	r16,8(r4)
  802614:	e1c00115 	stw	r7,4(fp)
  802618:	4807883a 	mov	r3,r9
  80261c:	4800cd16 	blt	r9,zero,802954 <_malloc_r+0x554>
  802620:	1807d0ba 	srai	r3,r3,2
  802624:	00800044 	movi	r2,1
  802628:	10c8983a 	sll	r4,r2,r3
  80262c:	39004436 	bltu	r7,r4,802740 <_malloc_r+0x340>
  802630:	21c4703a 	and	r2,r4,r7
  802634:	10000a1e 	bne	r2,zero,802660 <_malloc_r+0x260>
  802638:	2109883a 	add	r4,r4,r4
  80263c:	00bfff04 	movi	r2,-4
  802640:	4884703a 	and	r2,r9,r2
  802644:	3906703a 	and	r3,r7,r4
  802648:	12400104 	addi	r9,r2,4
  80264c:	1800041e 	bne	r3,zero,802660 <_malloc_r+0x260>
  802650:	2109883a 	add	r4,r4,r4
  802654:	3904703a 	and	r2,r7,r4
  802658:	4a400104 	addi	r9,r9,4
  80265c:	103ffc26 	beq	r2,zero,802650 <_malloc_r+0x250>
  802660:	480490fa 	slli	r2,r9,3
  802664:	4819883a 	mov	r12,r9
  802668:	023fff04 	movi	r8,-4
  80266c:	589b883a 	add	r13,r11,r2
  802670:	6807883a 	mov	r3,r13
  802674:	014003c4 	movi	r5,15
  802678:	1c000317 	ldw	r16,12(r3)
  80267c:	1c00041e 	bne	r3,r16,802690 <_malloc_r+0x290>
  802680:	0000a706 	br	802920 <_malloc_r+0x520>
  802684:	3000ab0e 	bge	r6,zero,802934 <_malloc_r+0x534>
  802688:	84000317 	ldw	r16,12(r16)
  80268c:	1c00a426 	beq	r3,r16,802920 <_malloc_r+0x520>
  802690:	80800117 	ldw	r2,4(r16)
  802694:	1204703a 	and	r2,r2,r8
  802698:	144dc83a 	sub	r6,r2,r17
  80269c:	29bff90e 	bge	r5,r6,802684 <_malloc_r+0x284>
  8026a0:	81000317 	ldw	r4,12(r16)
  8026a4:	80c00217 	ldw	r3,8(r16)
  8026a8:	89400054 	ori	r5,r17,1
  8026ac:	8445883a 	add	r2,r16,r17
  8026b0:	20c00215 	stw	r3,8(r4)
  8026b4:	19000315 	stw	r4,12(r3)
  8026b8:	81400115 	stw	r5,4(r16)
  8026bc:	1187883a 	add	r3,r2,r6
  8026c0:	31000054 	ori	r4,r6,1
  8026c4:	50800315 	stw	r2,12(r10)
  8026c8:	50800215 	stw	r2,8(r10)
  8026cc:	19800015 	stw	r6,0(r3)
  8026d0:	11000115 	stw	r4,4(r2)
  8026d4:	12800215 	stw	r10,8(r2)
  8026d8:	12800315 	stw	r10,12(r2)
  8026dc:	9009883a 	mov	r4,r18
  8026e0:	08114d80 	call	8114d8 <__malloc_unlock>
  8026e4:	80c00204 	addi	r3,r16,8
  8026e8:	003f5906 	br	802450 <_malloc_r+0x50>
  8026ec:	8109883a 	add	r4,r16,r4
  8026f0:	20800117 	ldw	r2,4(r4)
  8026f4:	80c00217 	ldw	r3,8(r16)
  8026f8:	81400317 	ldw	r5,12(r16)
  8026fc:	10800054 	ori	r2,r2,1
  802700:	20800115 	stw	r2,4(r4)
  802704:	28c00215 	stw	r3,8(r5)
  802708:	19400315 	stw	r5,12(r3)
  80270c:	9009883a 	mov	r4,r18
  802710:	08114d80 	call	8114d8 <__malloc_unlock>
  802714:	80c00204 	addi	r3,r16,8
  802718:	003f4d06 	br	802450 <_malloc_r+0x50>
  80271c:	80800204 	addi	r2,r16,8
  802720:	14000317 	ldw	r16,12(r2)
  802724:	143f911e 	bne	r2,r16,80256c <_malloc_r+0x16c>
  802728:	1a400084 	addi	r9,r3,2
  80272c:	003f7306 	br	8024fc <_malloc_r+0xfc>
  802730:	88c00054 	ori	r3,r17,1
  802734:	8445883a 	add	r2,r16,r17
  802738:	80c00115 	stw	r3,4(r16)
  80273c:	003fdf06 	br	8026bc <_malloc_r+0x2bc>
  802740:	e4000217 	ldw	r16,8(fp)
  802744:	00bfff04 	movi	r2,-4
  802748:	80c00117 	ldw	r3,4(r16)
  80274c:	802d883a 	mov	r22,r16
  802750:	18aa703a 	and	r21,r3,r2
  802754:	ac401636 	bltu	r21,r17,8027b0 <_malloc_r+0x3b0>
  802758:	ac49c83a 	sub	r4,r21,r17
  80275c:	008003c4 	movi	r2,15
  802760:	1100130e 	bge	r2,r4,8027b0 <_malloc_r+0x3b0>
  802764:	88800054 	ori	r2,r17,1
  802768:	8447883a 	add	r3,r16,r17
  80276c:	80800115 	stw	r2,4(r16)
  802770:	20800054 	ori	r2,r4,1
  802774:	18800115 	stw	r2,4(r3)
  802778:	e0c00215 	stw	r3,8(fp)
  80277c:	9009883a 	mov	r4,r18
  802780:	08114d80 	call	8114d8 <__malloc_unlock>
  802784:	80c00204 	addi	r3,r16,8
  802788:	003f3106 	br	802450 <_malloc_r+0x50>
  80278c:	39c00117 	ldw	r7,4(r7)
  802790:	573ffe04 	addi	fp,r10,-8
  802794:	003fa006 	br	802618 <_malloc_r+0x218>
  802798:	00801504 	movi	r2,84
  80279c:	10c06736 	bltu	r2,r3,80293c <_malloc_r+0x53c>
  8027a0:	8804d33a 	srli	r2,r17,12
  8027a4:	11801b84 	addi	r6,r2,110
  8027a8:	300490fa 	slli	r2,r6,3
  8027ac:	003f4106 	br	8024b4 <_malloc_r+0xb4>
  8027b0:	d0a70817 	ldw	r2,-25568(gp)
  8027b4:	d0e00317 	ldw	r3,-32756(gp)
  8027b8:	053fffc4 	movi	r20,-1
  8027bc:	10800404 	addi	r2,r2,16
  8027c0:	88a7883a 	add	r19,r17,r2
  8027c4:	1d000326 	beq	r3,r20,8027d4 <_malloc_r+0x3d4>
  8027c8:	98c3ffc4 	addi	r3,r19,4095
  8027cc:	00bc0004 	movi	r2,-4096
  8027d0:	18a6703a 	and	r19,r3,r2
  8027d4:	9009883a 	mov	r4,r18
  8027d8:	980b883a 	mov	r5,r19
  8027dc:	0802fe00 	call	802fe0 <_sbrk_r>
  8027e0:	1009883a 	mov	r4,r2
  8027e4:	15000426 	beq	r2,r20,8027f8 <_malloc_r+0x3f8>
  8027e8:	854b883a 	add	r5,r16,r21
  8027ec:	1029883a 	mov	r20,r2
  8027f0:	11405a2e 	bgeu	r2,r5,80295c <_malloc_r+0x55c>
  8027f4:	87000c26 	beq	r16,fp,802828 <_malloc_r+0x428>
  8027f8:	e4000217 	ldw	r16,8(fp)
  8027fc:	80c00117 	ldw	r3,4(r16)
  802800:	00bfff04 	movi	r2,-4
  802804:	1884703a 	and	r2,r3,r2
  802808:	14400336 	bltu	r2,r17,802818 <_malloc_r+0x418>
  80280c:	1449c83a 	sub	r4,r2,r17
  802810:	008003c4 	movi	r2,15
  802814:	113fd316 	blt	r2,r4,802764 <_malloc_r+0x364>
  802818:	9009883a 	mov	r4,r18
  80281c:	08114d80 	call	8114d8 <__malloc_unlock>
  802820:	0007883a 	mov	r3,zero
  802824:	003f0a06 	br	802450 <_malloc_r+0x50>
  802828:	05c020b4 	movhi	r23,130
  80282c:	bde2cc04 	addi	r23,r23,-29904
  802830:	b8800017 	ldw	r2,0(r23)
  802834:	988d883a 	add	r6,r19,r2
  802838:	b9800015 	stw	r6,0(r23)
  80283c:	d0e00317 	ldw	r3,-32756(gp)
  802840:	00bfffc4 	movi	r2,-1
  802844:	18808e26 	beq	r3,r2,802a80 <_malloc_r+0x680>
  802848:	2145c83a 	sub	r2,r4,r5
  80284c:	3085883a 	add	r2,r6,r2
  802850:	b8800015 	stw	r2,0(r23)
  802854:	20c001cc 	andi	r3,r4,7
  802858:	18005f1e 	bne	r3,zero,8029d8 <_malloc_r+0x5d8>
  80285c:	000b883a 	mov	r5,zero
  802860:	a4c5883a 	add	r2,r20,r19
  802864:	1083ffcc 	andi	r2,r2,4095
  802868:	00c40004 	movi	r3,4096
  80286c:	1887c83a 	sub	r3,r3,r2
  802870:	28e7883a 	add	r19,r5,r3
  802874:	9009883a 	mov	r4,r18
  802878:	980b883a 	mov	r5,r19
  80287c:	0802fe00 	call	802fe0 <_sbrk_r>
  802880:	1007883a 	mov	r3,r2
  802884:	00bfffc4 	movi	r2,-1
  802888:	18807a26 	beq	r3,r2,802a74 <_malloc_r+0x674>
  80288c:	1d05c83a 	sub	r2,r3,r20
  802890:	9885883a 	add	r2,r19,r2
  802894:	10c00054 	ori	r3,r2,1
  802898:	b8800017 	ldw	r2,0(r23)
  80289c:	a021883a 	mov	r16,r20
  8028a0:	a0c00115 	stw	r3,4(r20)
  8028a4:	9885883a 	add	r2,r19,r2
  8028a8:	b8800015 	stw	r2,0(r23)
  8028ac:	e5000215 	stw	r20,8(fp)
  8028b0:	b7003626 	beq	r22,fp,80298c <_malloc_r+0x58c>
  8028b4:	018003c4 	movi	r6,15
  8028b8:	35404b36 	bltu	r6,r21,8029e8 <_malloc_r+0x5e8>
  8028bc:	00800044 	movi	r2,1
  8028c0:	a0800115 	stw	r2,4(r20)
  8028c4:	003fcd06 	br	8027fc <_malloc_r+0x3fc>
  8028c8:	2808d27a 	srli	r4,r5,9
  8028cc:	2000371e 	bne	r4,zero,8029ac <_malloc_r+0x5ac>
  8028d0:	2808d0fa 	srli	r4,r5,3
  8028d4:	200690fa 	slli	r3,r4,3
  8028d8:	1ad1883a 	add	r8,r3,r11
  8028dc:	41800217 	ldw	r6,8(r8)
  8028e0:	41805b26 	beq	r8,r6,802a50 <_malloc_r+0x650>
  8028e4:	30800117 	ldw	r2,4(r6)
  8028e8:	00ffff04 	movi	r3,-4
  8028ec:	10c4703a 	and	r2,r2,r3
  8028f0:	2880022e 	bgeu	r5,r2,8028fc <_malloc_r+0x4fc>
  8028f4:	31800217 	ldw	r6,8(r6)
  8028f8:	41bffa1e 	bne	r8,r6,8028e4 <_malloc_r+0x4e4>
  8028fc:	32000317 	ldw	r8,12(r6)
  802900:	39c00117 	ldw	r7,4(r7)
  802904:	82000315 	stw	r8,12(r16)
  802908:	81800215 	stw	r6,8(r16)
  80290c:	07002074 	movhi	fp,129
  802910:	e715df04 	addi	fp,fp,22396
  802914:	34000315 	stw	r16,12(r6)
  802918:	44000215 	stw	r16,8(r8)
  80291c:	003f3e06 	br	802618 <_malloc_r+0x218>
  802920:	63000044 	addi	r12,r12,1
  802924:	608000cc 	andi	r2,r12,3
  802928:	10005d26 	beq	r2,zero,802aa0 <_malloc_r+0x6a0>
  80292c:	18c00204 	addi	r3,r3,8
  802930:	003f5106 	br	802678 <_malloc_r+0x278>
  802934:	8089883a 	add	r4,r16,r2
  802938:	003f6d06 	br	8026f0 <_malloc_r+0x2f0>
  80293c:	00805504 	movi	r2,340
  802940:	10c02036 	bltu	r2,r3,8029c4 <_malloc_r+0x5c4>
  802944:	8804d3fa 	srli	r2,r17,15
  802948:	11801dc4 	addi	r6,r2,119
  80294c:	300490fa 	slli	r2,r6,3
  802950:	003ed806 	br	8024b4 <_malloc_r+0xb4>
  802954:	48c000c4 	addi	r3,r9,3
  802958:	003f3106 	br	802620 <_malloc_r+0x220>
  80295c:	05c020b4 	movhi	r23,130
  802960:	bde2cc04 	addi	r23,r23,-29904
  802964:	b8800017 	ldw	r2,0(r23)
  802968:	988d883a 	add	r6,r19,r2
  80296c:	b9800015 	stw	r6,0(r23)
  802970:	293fb21e 	bne	r5,r4,80283c <_malloc_r+0x43c>
  802974:	2083ffcc 	andi	r2,r4,4095
  802978:	103fb01e 	bne	r2,zero,80283c <_malloc_r+0x43c>
  80297c:	e4000217 	ldw	r16,8(fp)
  802980:	9d45883a 	add	r2,r19,r21
  802984:	10800054 	ori	r2,r2,1
  802988:	80800115 	stw	r2,4(r16)
  80298c:	b8c00017 	ldw	r3,0(r23)
  802990:	d0a70917 	ldw	r2,-25564(gp)
  802994:	10c0012e 	bgeu	r2,r3,80299c <_malloc_r+0x59c>
  802998:	d0e70915 	stw	r3,-25564(gp)
  80299c:	d0a70a17 	ldw	r2,-25560(gp)
  8029a0:	10ff962e 	bgeu	r2,r3,8027fc <_malloc_r+0x3fc>
  8029a4:	d0e70a15 	stw	r3,-25560(gp)
  8029a8:	003f9406 	br	8027fc <_malloc_r+0x3fc>
  8029ac:	00800104 	movi	r2,4
  8029b0:	11001e36 	bltu	r2,r4,802a2c <_malloc_r+0x62c>
  8029b4:	2804d1ba 	srli	r2,r5,6
  8029b8:	11000e04 	addi	r4,r2,56
  8029bc:	200690fa 	slli	r3,r4,3
  8029c0:	003fc506 	br	8028d8 <_malloc_r+0x4d8>
  8029c4:	00815504 	movi	r2,1364
  8029c8:	10c01d2e 	bgeu	r2,r3,802a40 <_malloc_r+0x640>
  8029cc:	01801f84 	movi	r6,126
  8029d0:	0080fc04 	movi	r2,1008
  8029d4:	003eb706 	br	8024b4 <_malloc_r+0xb4>
  8029d8:	00800204 	movi	r2,8
  8029dc:	10cbc83a 	sub	r5,r2,r3
  8029e0:	2169883a 	add	r20,r4,r5
  8029e4:	003f9e06 	br	802860 <_malloc_r+0x460>
  8029e8:	00bffe04 	movi	r2,-8
  8029ec:	a93ffd04 	addi	r4,r21,-12
  8029f0:	2088703a 	and	r4,r4,r2
  8029f4:	b10b883a 	add	r5,r22,r4
  8029f8:	00c00144 	movi	r3,5
  8029fc:	28c00215 	stw	r3,8(r5)
  802a00:	28c00115 	stw	r3,4(r5)
  802a04:	b0800117 	ldw	r2,4(r22)
  802a08:	1080004c 	andi	r2,r2,1
  802a0c:	2084b03a 	or	r2,r4,r2
  802a10:	b0800115 	stw	r2,4(r22)
  802a14:	313fdd2e 	bgeu	r6,r4,80298c <_malloc_r+0x58c>
  802a18:	b1400204 	addi	r5,r22,8
  802a1c:	9009883a 	mov	r4,r18
  802a20:	08016f00 	call	8016f0 <_free_r>
  802a24:	e4000217 	ldw	r16,8(fp)
  802a28:	003fd806 	br	80298c <_malloc_r+0x58c>
  802a2c:	00800504 	movi	r2,20
  802a30:	11001536 	bltu	r2,r4,802a88 <_malloc_r+0x688>
  802a34:	210016c4 	addi	r4,r4,91
  802a38:	200690fa 	slli	r3,r4,3
  802a3c:	003fa606 	br	8028d8 <_malloc_r+0x4d8>
  802a40:	8804d4ba 	srli	r2,r17,18
  802a44:	11801f04 	addi	r6,r2,124
  802a48:	300490fa 	slli	r2,r6,3
  802a4c:	003e9906 	br	8024b4 <_malloc_r+0xb4>
  802a50:	2009d0ba 	srai	r4,r4,2
  802a54:	01402074 	movhi	r5,129
  802a58:	2955df04 	addi	r5,r5,22396
  802a5c:	00c00044 	movi	r3,1
  802a60:	28800117 	ldw	r2,4(r5)
  802a64:	1906983a 	sll	r3,r3,r4
  802a68:	10c4b03a 	or	r2,r2,r3
  802a6c:	28800115 	stw	r2,4(r5)
  802a70:	003fa306 	br	802900 <_malloc_r+0x500>
  802a74:	0027883a 	mov	r19,zero
  802a78:	00c00044 	movi	r3,1
  802a7c:	003f8606 	br	802898 <_malloc_r+0x498>
  802a80:	d1200315 	stw	r4,-32756(gp)
  802a84:	003f7306 	br	802854 <_malloc_r+0x454>
  802a88:	00801504 	movi	r2,84
  802a8c:	11001936 	bltu	r2,r4,802af4 <_malloc_r+0x6f4>
  802a90:	2804d33a 	srli	r2,r5,12
  802a94:	11001b84 	addi	r4,r2,110
  802a98:	200690fa 	slli	r3,r4,3
  802a9c:	003f8e06 	br	8028d8 <_malloc_r+0x4d8>
  802aa0:	480b883a 	mov	r5,r9
  802aa4:	6807883a 	mov	r3,r13
  802aa8:	288000cc 	andi	r2,r5,3
  802aac:	18fffe04 	addi	r3,r3,-8
  802ab0:	297fffc4 	addi	r5,r5,-1
  802ab4:	10001526 	beq	r2,zero,802b0c <_malloc_r+0x70c>
  802ab8:	18800217 	ldw	r2,8(r3)
  802abc:	10fffa26 	beq	r2,r3,802aa8 <_malloc_r+0x6a8>
  802ac0:	2109883a 	add	r4,r4,r4
  802ac4:	393f1e36 	bltu	r7,r4,802740 <_malloc_r+0x340>
  802ac8:	203f1d26 	beq	r4,zero,802740 <_malloc_r+0x340>
  802acc:	21c4703a 	and	r2,r4,r7
  802ad0:	10000226 	beq	r2,zero,802adc <_malloc_r+0x6dc>
  802ad4:	6013883a 	mov	r9,r12
  802ad8:	003ee106 	br	802660 <_malloc_r+0x260>
  802adc:	2109883a 	add	r4,r4,r4
  802ae0:	3904703a 	and	r2,r7,r4
  802ae4:	63000104 	addi	r12,r12,4
  802ae8:	103ffc26 	beq	r2,zero,802adc <_malloc_r+0x6dc>
  802aec:	6013883a 	mov	r9,r12
  802af0:	003edb06 	br	802660 <_malloc_r+0x260>
  802af4:	00805504 	movi	r2,340
  802af8:	11000836 	bltu	r2,r4,802b1c <_malloc_r+0x71c>
  802afc:	2804d3fa 	srli	r2,r5,15
  802b00:	11001dc4 	addi	r4,r2,119
  802b04:	200690fa 	slli	r3,r4,3
  802b08:	003f7306 	br	8028d8 <_malloc_r+0x4d8>
  802b0c:	0104303a 	nor	r2,zero,r4
  802b10:	388e703a 	and	r7,r7,r2
  802b14:	e1c00115 	stw	r7,4(fp)
  802b18:	003fe906 	br	802ac0 <_malloc_r+0x6c0>
  802b1c:	00815504 	movi	r2,1364
  802b20:	1100032e 	bgeu	r2,r4,802b30 <_malloc_r+0x730>
  802b24:	01001f84 	movi	r4,126
  802b28:	00c0fc04 	movi	r3,1008
  802b2c:	003f6a06 	br	8028d8 <_malloc_r+0x4d8>
  802b30:	2804d4ba 	srli	r2,r5,18
  802b34:	11001f04 	addi	r4,r2,124
  802b38:	200690fa 	slli	r3,r4,3
  802b3c:	003f6606 	br	8028d8 <_malloc_r+0x4d8>

00802b40 <memset>:
  802b40:	008000c4 	movi	r2,3
  802b44:	29403fcc 	andi	r5,r5,255
  802b48:	2007883a 	mov	r3,r4
  802b4c:	1180022e 	bgeu	r2,r6,802b58 <memset+0x18>
  802b50:	2084703a 	and	r2,r4,r2
  802b54:	10000826 	beq	r2,zero,802b78 <memset+0x38>
  802b58:	30000526 	beq	r6,zero,802b70 <memset+0x30>
  802b5c:	2805883a 	mov	r2,r5
  802b60:	30cd883a 	add	r6,r6,r3
  802b64:	18800005 	stb	r2,0(r3)
  802b68:	18c00044 	addi	r3,r3,1
  802b6c:	19bffd1e 	bne	r3,r6,802b64 <memset+0x24>
  802b70:	2005883a 	mov	r2,r4
  802b74:	f800283a 	ret
  802b78:	2804923a 	slli	r2,r5,8
  802b7c:	020003c4 	movi	r8,15
  802b80:	200f883a 	mov	r7,r4
  802b84:	2884b03a 	or	r2,r5,r2
  802b88:	1006943a 	slli	r3,r2,16
  802b8c:	10c6b03a 	or	r3,r2,r3
  802b90:	41800a2e 	bgeu	r8,r6,802bbc <memset+0x7c>
  802b94:	4005883a 	mov	r2,r8
  802b98:	31bffc04 	addi	r6,r6,-16
  802b9c:	38c00015 	stw	r3,0(r7)
  802ba0:	38c00115 	stw	r3,4(r7)
  802ba4:	38c00215 	stw	r3,8(r7)
  802ba8:	38c00315 	stw	r3,12(r7)
  802bac:	39c00404 	addi	r7,r7,16
  802bb0:	11bff936 	bltu	r2,r6,802b98 <memset+0x58>
  802bb4:	008000c4 	movi	r2,3
  802bb8:	1180052e 	bgeu	r2,r6,802bd0 <memset+0x90>
  802bbc:	31bfff04 	addi	r6,r6,-4
  802bc0:	008000c4 	movi	r2,3
  802bc4:	38c00015 	stw	r3,0(r7)
  802bc8:	39c00104 	addi	r7,r7,4
  802bcc:	11bffb36 	bltu	r2,r6,802bbc <memset+0x7c>
  802bd0:	3807883a 	mov	r3,r7
  802bd4:	003fe006 	br	802b58 <memset+0x18>

00802bd8 <_open_r>:
  802bd8:	defffd04 	addi	sp,sp,-12
  802bdc:	dc000015 	stw	r16,0(sp)
  802be0:	040020b4 	movhi	r16,130
  802be4:	8422bf04 	addi	r16,r16,-29956
  802be8:	dc400115 	stw	r17,4(sp)
  802bec:	80000015 	stw	zero,0(r16)
  802bf0:	2023883a 	mov	r17,r4
  802bf4:	2809883a 	mov	r4,r5
  802bf8:	300b883a 	mov	r5,r6
  802bfc:	380d883a 	mov	r6,r7
  802c00:	dfc00215 	stw	ra,8(sp)
  802c04:	08115f00 	call	8115f0 <open>
  802c08:	1007883a 	mov	r3,r2
  802c0c:	00bfffc4 	movi	r2,-1
  802c10:	18800626 	beq	r3,r2,802c2c <_open_r+0x54>
  802c14:	1805883a 	mov	r2,r3
  802c18:	dfc00217 	ldw	ra,8(sp)
  802c1c:	dc400117 	ldw	r17,4(sp)
  802c20:	dc000017 	ldw	r16,0(sp)
  802c24:	dec00304 	addi	sp,sp,12
  802c28:	f800283a 	ret
  802c2c:	80800017 	ldw	r2,0(r16)
  802c30:	103ff826 	beq	r2,zero,802c14 <_open_r+0x3c>
  802c34:	88800015 	stw	r2,0(r17)
  802c38:	1805883a 	mov	r2,r3
  802c3c:	dfc00217 	ldw	ra,8(sp)
  802c40:	dc400117 	ldw	r17,4(sp)
  802c44:	dc000017 	ldw	r16,0(sp)
  802c48:	dec00304 	addi	sp,sp,12
  802c4c:	f800283a 	ret

00802c50 <printf>:
  802c50:	defffb04 	addi	sp,sp,-20
  802c54:	dfc00115 	stw	ra,4(sp)
  802c58:	d9400215 	stw	r5,8(sp)
  802c5c:	d9800315 	stw	r6,12(sp)
  802c60:	d9c00415 	stw	r7,16(sp)
  802c64:	00802074 	movhi	r2,129
  802c68:	109bb804 	addi	r2,r2,28384
  802c6c:	10c00017 	ldw	r3,0(r2)
  802c70:	200b883a 	mov	r5,r4
  802c74:	d8800204 	addi	r2,sp,8
  802c78:	19000217 	ldw	r4,8(r3)
  802c7c:	100d883a 	mov	r6,r2
  802c80:	d8800015 	stw	r2,0(sp)
  802c84:	08052400 	call	805240 <__vfprintf_internal>
  802c88:	dfc00117 	ldw	ra,4(sp)
  802c8c:	dec00504 	addi	sp,sp,20
  802c90:	f800283a 	ret

00802c94 <_printf_r>:
  802c94:	defffc04 	addi	sp,sp,-16
  802c98:	dfc00115 	stw	ra,4(sp)
  802c9c:	d9800215 	stw	r6,8(sp)
  802ca0:	d9c00315 	stw	r7,12(sp)
  802ca4:	280d883a 	mov	r6,r5
  802ca8:	21400217 	ldw	r5,8(r4)
  802cac:	d8c00204 	addi	r3,sp,8
  802cb0:	180f883a 	mov	r7,r3
  802cb4:	d8c00015 	stw	r3,0(sp)
  802cb8:	080337c0 	call	80337c <___vfprintf_internal_r>
  802cbc:	dfc00117 	ldw	ra,4(sp)
  802cc0:	dec00404 	addi	sp,sp,16
  802cc4:	f800283a 	ret

00802cc8 <putchar>:
  802cc8:	00802074 	movhi	r2,129
  802ccc:	109bb804 	addi	r2,r2,28384
  802cd0:	11800017 	ldw	r6,0(r2)
  802cd4:	200b883a 	mov	r5,r4
  802cd8:	3009883a 	mov	r4,r6
  802cdc:	31800217 	ldw	r6,8(r6)
  802ce0:	080a25c1 	jmpi	80a25c <_putc_r>

00802ce4 <_putchar_r>:
  802ce4:	21800217 	ldw	r6,8(r4)
  802ce8:	080a25c1 	jmpi	80a25c <_putc_r>

00802cec <_puts_r>:
  802cec:	defff604 	addi	sp,sp,-40
  802cf0:	dc400715 	stw	r17,28(sp)
  802cf4:	2023883a 	mov	r17,r4
  802cf8:	2809883a 	mov	r4,r5
  802cfc:	dfc00915 	stw	ra,36(sp)
  802d00:	dcc00815 	stw	r19,32(sp)
  802d04:	2827883a 	mov	r19,r5
  802d08:	08032b00 	call	8032b0 <strlen>
  802d0c:	89400217 	ldw	r5,8(r17)
  802d10:	00c02074 	movhi	r3,129
  802d14:	18d34604 	addi	r3,r3,19736
  802d18:	01c00044 	movi	r7,1
  802d1c:	12000044 	addi	r8,r2,1
  802d20:	d8c00515 	stw	r3,20(sp)
  802d24:	d9c00615 	stw	r7,24(sp)
  802d28:	d8c00304 	addi	r3,sp,12
  802d2c:	01c00084 	movi	r7,2
  802d30:	8809883a 	mov	r4,r17
  802d34:	d80d883a 	mov	r6,sp
  802d38:	d8c00015 	stw	r3,0(sp)
  802d3c:	dcc00315 	stw	r19,12(sp)
  802d40:	da000215 	stw	r8,8(sp)
  802d44:	d9c00115 	stw	r7,4(sp)
  802d48:	d8800415 	stw	r2,16(sp)
  802d4c:	08086f40 	call	8086f4 <__sfvwrite_r>
  802d50:	00ffffc4 	movi	r3,-1
  802d54:	10000626 	beq	r2,zero,802d70 <_puts_r+0x84>
  802d58:	1805883a 	mov	r2,r3
  802d5c:	dfc00917 	ldw	ra,36(sp)
  802d60:	dcc00817 	ldw	r19,32(sp)
  802d64:	dc400717 	ldw	r17,28(sp)
  802d68:	dec00a04 	addi	sp,sp,40
  802d6c:	f800283a 	ret
  802d70:	00c00284 	movi	r3,10
  802d74:	1805883a 	mov	r2,r3
  802d78:	dfc00917 	ldw	ra,36(sp)
  802d7c:	dcc00817 	ldw	r19,32(sp)
  802d80:	dc400717 	ldw	r17,28(sp)
  802d84:	dec00a04 	addi	sp,sp,40
  802d88:	f800283a 	ret

00802d8c <puts>:
  802d8c:	00802074 	movhi	r2,129
  802d90:	109bb804 	addi	r2,r2,28384
  802d94:	200b883a 	mov	r5,r4
  802d98:	11000017 	ldw	r4,0(r2)
  802d9c:	0802cec1 	jmpi	802cec <_puts_r>

00802da0 <__srefill_r>:
  802da0:	defffd04 	addi	sp,sp,-12
  802da4:	dc400115 	stw	r17,4(sp)
  802da8:	dc000015 	stw	r16,0(sp)
  802dac:	dfc00215 	stw	ra,8(sp)
  802db0:	2023883a 	mov	r17,r4
  802db4:	2821883a 	mov	r16,r5
  802db8:	20000226 	beq	r4,zero,802dc4 <__srefill_r+0x24>
  802dbc:	20800e17 	ldw	r2,56(r4)
  802dc0:	10004126 	beq	r2,zero,802ec8 <__srefill_r+0x128>
  802dc4:	80c0030b 	ldhu	r3,12(r16)
  802dc8:	80000115 	stw	zero,4(r16)
  802dcc:	1880080c 	andi	r2,r3,32
  802dd0:	1000361e 	bne	r2,zero,802eac <__srefill_r+0x10c>
  802dd4:	1880010c 	andi	r2,r3,4
  802dd8:	1000211e 	bne	r2,zero,802e60 <__srefill_r+0xc0>
  802ddc:	1880040c 	andi	r2,r3,16
  802de0:	10005026 	beq	r2,zero,802f24 <__srefill_r+0x184>
  802de4:	1880020c 	andi	r2,r3,8
  802de8:	1000541e 	bne	r2,zero,802f3c <__srefill_r+0x19c>
  802dec:	8080030b 	ldhu	r2,12(r16)
  802df0:	10800114 	ori	r2,r2,4
  802df4:	8080030d 	sth	r2,12(r16)
  802df8:	80800417 	ldw	r2,16(r16)
  802dfc:	10004526 	beq	r2,zero,802f14 <__srefill_r+0x174>
  802e00:	8080030b 	ldhu	r2,12(r16)
  802e04:	108000cc 	andi	r2,r2,3
  802e08:	1000361e 	bne	r2,zero,802ee4 <__srefill_r+0x144>
  802e0c:	81800417 	ldw	r6,16(r16)
  802e10:	80c00817 	ldw	r3,32(r16)
  802e14:	81400717 	ldw	r5,28(r16)
  802e18:	81c00517 	ldw	r7,20(r16)
  802e1c:	8809883a 	mov	r4,r17
  802e20:	81800015 	stw	r6,0(r16)
  802e24:	183ee83a 	callr	r3
  802e28:	80c0030b 	ldhu	r3,12(r16)
  802e2c:	1009883a 	mov	r4,r2
  802e30:	80800115 	stw	r2,4(r16)
  802e34:	00b7ffc4 	movi	r2,-8193
  802e38:	1884703a 	and	r2,r3,r2
  802e3c:	8080030d 	sth	r2,12(r16)
  802e40:	0100230e 	bge	zero,r4,802ed0 <__srefill_r+0x130>
  802e44:	0009883a 	mov	r4,zero
  802e48:	2005883a 	mov	r2,r4
  802e4c:	dfc00217 	ldw	ra,8(sp)
  802e50:	dc400117 	ldw	r17,4(sp)
  802e54:	dc000017 	ldw	r16,0(sp)
  802e58:	dec00304 	addi	sp,sp,12
  802e5c:	f800283a 	ret
  802e60:	81400c17 	ldw	r5,48(r16)
  802e64:	283fe426 	beq	r5,zero,802df8 <__srefill_r+0x58>
  802e68:	80801004 	addi	r2,r16,64
  802e6c:	28800226 	beq	r5,r2,802e78 <__srefill_r+0xd8>
  802e70:	8809883a 	mov	r4,r17
  802e74:	08016f00 	call	8016f0 <_free_r>
  802e78:	80800f17 	ldw	r2,60(r16)
  802e7c:	80000c15 	stw	zero,48(r16)
  802e80:	80800115 	stw	r2,4(r16)
  802e84:	103fdc26 	beq	r2,zero,802df8 <__srefill_r+0x58>
  802e88:	80800e17 	ldw	r2,56(r16)
  802e8c:	0009883a 	mov	r4,zero
  802e90:	80800015 	stw	r2,0(r16)
  802e94:	2005883a 	mov	r2,r4
  802e98:	dfc00217 	ldw	ra,8(sp)
  802e9c:	dc400117 	ldw	r17,4(sp)
  802ea0:	dc000017 	ldw	r16,0(sp)
  802ea4:	dec00304 	addi	sp,sp,12
  802ea8:	f800283a 	ret
  802eac:	013fffc4 	movi	r4,-1
  802eb0:	2005883a 	mov	r2,r4
  802eb4:	dfc00217 	ldw	ra,8(sp)
  802eb8:	dc400117 	ldw	r17,4(sp)
  802ebc:	dc000017 	ldw	r16,0(sp)
  802ec0:	dec00304 	addi	sp,sp,12
  802ec4:	f800283a 	ret
  802ec8:	08011c80 	call	8011c8 <__sinit>
  802ecc:	003fbd06 	br	802dc4 <__srefill_r+0x24>
  802ed0:	20000b1e 	bne	r4,zero,802f00 <__srefill_r+0x160>
  802ed4:	10800814 	ori	r2,r2,32
  802ed8:	013fffc4 	movi	r4,-1
  802edc:	8080030d 	sth	r2,12(r16)
  802ee0:	003fd906 	br	802e48 <__srefill_r+0xa8>
  802ee4:	00802074 	movhi	r2,129
  802ee8:	109bb904 	addi	r2,r2,28388
  802eec:	11000017 	ldw	r4,0(r2)
  802ef0:	01402034 	movhi	r5,128
  802ef4:	294bd904 	addi	r5,r5,12132
  802ef8:	0801fa00 	call	801fa0 <_fwalk>
  802efc:	003fc306 	br	802e0c <__srefill_r+0x6c>
  802f00:	10801014 	ori	r2,r2,64
  802f04:	013fffc4 	movi	r4,-1
  802f08:	8080030d 	sth	r2,12(r16)
  802f0c:	80000115 	stw	zero,4(r16)
  802f10:	003fcd06 	br	802e48 <__srefill_r+0xa8>
  802f14:	8809883a 	mov	r4,r17
  802f18:	800b883a 	mov	r5,r16
  802f1c:	080226c0 	call	80226c <__smakebuf_r>
  802f20:	003fb706 	br	802e00 <__srefill_r+0x60>
  802f24:	18c01014 	ori	r3,r3,64
  802f28:	00800244 	movi	r2,9
  802f2c:	013fffc4 	movi	r4,-1
  802f30:	88800015 	stw	r2,0(r17)
  802f34:	80c0030d 	sth	r3,12(r16)
  802f38:	003fc306 	br	802e48 <__srefill_r+0xa8>
  802f3c:	8809883a 	mov	r4,r17
  802f40:	800b883a 	mov	r5,r16
  802f44:	0800f300 	call	800f30 <_fflush_r>
  802f48:	103fd81e 	bne	r2,zero,802eac <__srefill_r+0x10c>
  802f4c:	8080030b 	ldhu	r2,12(r16)
  802f50:	80000215 	stw	zero,8(r16)
  802f54:	80000615 	stw	zero,24(r16)
  802f58:	10bffdcc 	andi	r2,r2,65527
  802f5c:	8080030d 	sth	r2,12(r16)
  802f60:	003fa206 	br	802dec <__srefill_r+0x4c>

00802f64 <lflush>:
  802f64:	20c0030b 	ldhu	r3,12(r4)
  802f68:	01400244 	movi	r5,9
  802f6c:	0005883a 	mov	r2,zero
  802f70:	18c0024c 	andi	r3,r3,9
  802f74:	19400126 	beq	r3,r5,802f7c <lflush+0x18>
  802f78:	f800283a 	ret
  802f7c:	080112c1 	jmpi	80112c <fflush>

00802f80 <__srget_r>:
  802f80:	defffe04 	addi	sp,sp,-8
  802f84:	dc000015 	stw	r16,0(sp)
  802f88:	dfc00115 	stw	ra,4(sp)
  802f8c:	2821883a 	mov	r16,r5
  802f90:	0802da00 	call	802da0 <__srefill_r>
  802f94:	013fffc4 	movi	r4,-1
  802f98:	1000071e 	bne	r2,zero,802fb8 <__srget_r+0x38>
  802f9c:	80800117 	ldw	r2,4(r16)
  802fa0:	81000017 	ldw	r4,0(r16)
  802fa4:	10bfffc4 	addi	r2,r2,-1
  802fa8:	20c00044 	addi	r3,r4,1
  802fac:	80800115 	stw	r2,4(r16)
  802fb0:	21000003 	ldbu	r4,0(r4)
  802fb4:	80c00015 	stw	r3,0(r16)
  802fb8:	2005883a 	mov	r2,r4
  802fbc:	dfc00117 	ldw	ra,4(sp)
  802fc0:	dc000017 	ldw	r16,0(sp)
  802fc4:	dec00204 	addi	sp,sp,8
  802fc8:	f800283a 	ret

00802fcc <__srget>:
  802fcc:	00802074 	movhi	r2,129
  802fd0:	109bb804 	addi	r2,r2,28384
  802fd4:	200b883a 	mov	r5,r4
  802fd8:	11000017 	ldw	r4,0(r2)
  802fdc:	0802f801 	jmpi	802f80 <__srget_r>

00802fe0 <_sbrk_r>:
  802fe0:	defffd04 	addi	sp,sp,-12
  802fe4:	dc000015 	stw	r16,0(sp)
  802fe8:	040020b4 	movhi	r16,130
  802fec:	8422bf04 	addi	r16,r16,-29956
  802ff0:	dc400115 	stw	r17,4(sp)
  802ff4:	80000015 	stw	zero,0(r16)
  802ff8:	2023883a 	mov	r17,r4
  802ffc:	2809883a 	mov	r4,r5
  803000:	dfc00215 	stw	ra,8(sp)
  803004:	08119d80 	call	8119d8 <sbrk>
  803008:	1007883a 	mov	r3,r2
  80300c:	00bfffc4 	movi	r2,-1
  803010:	18800626 	beq	r3,r2,80302c <_sbrk_r+0x4c>
  803014:	1805883a 	mov	r2,r3
  803018:	dfc00217 	ldw	ra,8(sp)
  80301c:	dc400117 	ldw	r17,4(sp)
  803020:	dc000017 	ldw	r16,0(sp)
  803024:	dec00304 	addi	sp,sp,12
  803028:	f800283a 	ret
  80302c:	80800017 	ldw	r2,0(r16)
  803030:	103ff826 	beq	r2,zero,803014 <_sbrk_r+0x34>
  803034:	88800015 	stw	r2,0(r17)
  803038:	1805883a 	mov	r2,r3
  80303c:	dfc00217 	ldw	ra,8(sp)
  803040:	dc400117 	ldw	r17,4(sp)
  803044:	dc000017 	ldw	r16,0(sp)
  803048:	dec00304 	addi	sp,sp,12
  80304c:	f800283a 	ret

00803050 <eofread>:
  803050:	0005883a 	mov	r2,zero
  803054:	f800283a 	ret

00803058 <_sscanf_r>:
  803058:	deffe404 	addi	sp,sp,-112
  80305c:	dcc01915 	stw	r19,100(sp)
  803060:	2027883a 	mov	r19,r4
  803064:	dfc01a15 	stw	ra,104(sp)
  803068:	dc401815 	stw	r17,96(sp)
  80306c:	d9c01b15 	stw	r7,108(sp)
  803070:	00808104 	movi	r2,516
  803074:	2809883a 	mov	r4,r5
  803078:	3023883a 	mov	r17,r6
  80307c:	d9400115 	stw	r5,4(sp)
  803080:	d9400515 	stw	r5,20(sp)
  803084:	d880040d 	sth	r2,16(sp)
  803088:	08032b00 	call	8032b0 <strlen>
  80308c:	d8c01b04 	addi	r3,sp,108
  803090:	d8c00015 	stw	r3,0(sp)
  803094:	180f883a 	mov	r7,r3
  803098:	023fffc4 	movi	r8,-1
  80309c:	00c02034 	movhi	r3,128
  8030a0:	18cc1404 	addi	r3,r3,12368
  8030a4:	9809883a 	mov	r4,r19
  8030a8:	880d883a 	mov	r6,r17
  8030ac:	d9400104 	addi	r5,sp,4
  8030b0:	d8800615 	stw	r2,24(sp)
  8030b4:	d8c00915 	stw	r3,36(sp)
  8030b8:	da00048d 	sth	r8,18(sp)
  8030bc:	d8800215 	stw	r2,8(sp)
  8030c0:	d8000d15 	stw	zero,52(sp)
  8030c4:	d8001215 	stw	zero,72(sp)
  8030c8:	08052640 	call	805264 <__svfscanf_r>
  8030cc:	dfc01a17 	ldw	ra,104(sp)
  8030d0:	dcc01917 	ldw	r19,100(sp)
  8030d4:	dc401817 	ldw	r17,96(sp)
  8030d8:	dec01c04 	addi	sp,sp,112
  8030dc:	f800283a 	ret

008030e0 <sscanf>:
  8030e0:	deffe404 	addi	sp,sp,-112
  8030e4:	dfc01915 	stw	ra,100(sp)
  8030e8:	dc401815 	stw	r17,96(sp)
  8030ec:	d9801a15 	stw	r6,104(sp)
  8030f0:	d9c01b15 	stw	r7,108(sp)
  8030f4:	00808104 	movi	r2,516
  8030f8:	2823883a 	mov	r17,r5
  8030fc:	d9000515 	stw	r4,20(sp)
  803100:	d9000115 	stw	r4,4(sp)
  803104:	d880040d 	sth	r2,16(sp)
  803108:	08032b00 	call	8032b0 <strlen>
  80310c:	d8c01a04 	addi	r3,sp,104
  803110:	d8c00015 	stw	r3,0(sp)
  803114:	00c02074 	movhi	r3,129
  803118:	18dbb804 	addi	r3,r3,28384
  80311c:	19000017 	ldw	r4,0(r3)
  803120:	d9c00017 	ldw	r7,0(sp)
  803124:	00c02034 	movhi	r3,128
  803128:	18cc1404 	addi	r3,r3,12368
  80312c:	023fffc4 	movi	r8,-1
  803130:	880d883a 	mov	r6,r17
  803134:	d9400104 	addi	r5,sp,4
  803138:	d8800615 	stw	r2,24(sp)
  80313c:	d8c00915 	stw	r3,36(sp)
  803140:	da00048d 	sth	r8,18(sp)
  803144:	d8800215 	stw	r2,8(sp)
  803148:	d8000d15 	stw	zero,52(sp)
  80314c:	d8001215 	stw	zero,72(sp)
  803150:	08052640 	call	805264 <__svfscanf_r>
  803154:	dfc01917 	ldw	ra,100(sp)
  803158:	dc401817 	ldw	r17,96(sp)
  80315c:	dec01c04 	addi	sp,sp,112
  803160:	f800283a 	ret

00803164 <__sclose>:
  803164:	2940038f 	ldh	r5,14(r5)
  803168:	0806ba01 	jmpi	806ba0 <_close_r>

0080316c <__sseek>:
  80316c:	defffe04 	addi	sp,sp,-8
  803170:	dc000015 	stw	r16,0(sp)
  803174:	2821883a 	mov	r16,r5
  803178:	2940038f 	ldh	r5,14(r5)
  80317c:	dfc00115 	stw	ra,4(sp)
  803180:	0808cf00 	call	808cf0 <_lseek_r>
  803184:	1007883a 	mov	r3,r2
  803188:	00bfffc4 	movi	r2,-1
  80318c:	18800926 	beq	r3,r2,8031b4 <__sseek+0x48>
  803190:	8080030b 	ldhu	r2,12(r16)
  803194:	80c01415 	stw	r3,80(r16)
  803198:	10840014 	ori	r2,r2,4096
  80319c:	8080030d 	sth	r2,12(r16)
  8031a0:	1805883a 	mov	r2,r3
  8031a4:	dfc00117 	ldw	ra,4(sp)
  8031a8:	dc000017 	ldw	r16,0(sp)
  8031ac:	dec00204 	addi	sp,sp,8
  8031b0:	f800283a 	ret
  8031b4:	8080030b 	ldhu	r2,12(r16)
  8031b8:	10bbffcc 	andi	r2,r2,61439
  8031bc:	8080030d 	sth	r2,12(r16)
  8031c0:	1805883a 	mov	r2,r3
  8031c4:	dfc00117 	ldw	ra,4(sp)
  8031c8:	dc000017 	ldw	r16,0(sp)
  8031cc:	dec00204 	addi	sp,sp,8
  8031d0:	f800283a 	ret

008031d4 <__swrite>:
  8031d4:	2880030b 	ldhu	r2,12(r5)
  8031d8:	defffb04 	addi	sp,sp,-20
  8031dc:	dcc00315 	stw	r19,12(sp)
  8031e0:	1080400c 	andi	r2,r2,256
  8031e4:	dc800215 	stw	r18,8(sp)
  8031e8:	dc400115 	stw	r17,4(sp)
  8031ec:	dc000015 	stw	r16,0(sp)
  8031f0:	3027883a 	mov	r19,r6
  8031f4:	3825883a 	mov	r18,r7
  8031f8:	dfc00415 	stw	ra,16(sp)
  8031fc:	2821883a 	mov	r16,r5
  803200:	000d883a 	mov	r6,zero
  803204:	01c00084 	movi	r7,2
  803208:	2023883a 	mov	r17,r4
  80320c:	10000226 	beq	r2,zero,803218 <__swrite+0x44>
  803210:	2940038f 	ldh	r5,14(r5)
  803214:	0808cf00 	call	808cf0 <_lseek_r>
  803218:	8080030b 	ldhu	r2,12(r16)
  80321c:	8140038f 	ldh	r5,14(r16)
  803220:	8809883a 	mov	r4,r17
  803224:	10bbffcc 	andi	r2,r2,61439
  803228:	980d883a 	mov	r6,r19
  80322c:	900f883a 	mov	r7,r18
  803230:	8080030d 	sth	r2,12(r16)
  803234:	dfc00417 	ldw	ra,16(sp)
  803238:	dcc00317 	ldw	r19,12(sp)
  80323c:	dc800217 	ldw	r18,8(sp)
  803240:	dc400117 	ldw	r17,4(sp)
  803244:	dc000017 	ldw	r16,0(sp)
  803248:	dec00504 	addi	sp,sp,20
  80324c:	08069ec1 	jmpi	8069ec <_write_r>

00803250 <__sread>:
  803250:	defffe04 	addi	sp,sp,-8
  803254:	dc000015 	stw	r16,0(sp)
  803258:	2821883a 	mov	r16,r5
  80325c:	2940038f 	ldh	r5,14(r5)
  803260:	dfc00115 	stw	ra,4(sp)
  803264:	080a3440 	call	80a344 <_read_r>
  803268:	1007883a 	mov	r3,r2
  80326c:	10000816 	blt	r2,zero,803290 <__sread+0x40>
  803270:	80801417 	ldw	r2,80(r16)
  803274:	10c5883a 	add	r2,r2,r3
  803278:	80801415 	stw	r2,80(r16)
  80327c:	1805883a 	mov	r2,r3
  803280:	dfc00117 	ldw	ra,4(sp)
  803284:	dc000017 	ldw	r16,0(sp)
  803288:	dec00204 	addi	sp,sp,8
  80328c:	f800283a 	ret
  803290:	8080030b 	ldhu	r2,12(r16)
  803294:	10bbffcc 	andi	r2,r2,61439
  803298:	8080030d 	sth	r2,12(r16)
  80329c:	1805883a 	mov	r2,r3
  8032a0:	dfc00117 	ldw	ra,4(sp)
  8032a4:	dc000017 	ldw	r16,0(sp)
  8032a8:	dec00204 	addi	sp,sp,8
  8032ac:	f800283a 	ret

008032b0 <strlen>:
  8032b0:	208000cc 	andi	r2,r4,3
  8032b4:	2011883a 	mov	r8,r4
  8032b8:	1000161e 	bne	r2,zero,803314 <strlen+0x64>
  8032bc:	20c00017 	ldw	r3,0(r4)
  8032c0:	017fbff4 	movhi	r5,65279
  8032c4:	297fbfc4 	addi	r5,r5,-257
  8032c8:	01e02074 	movhi	r7,32897
  8032cc:	39e02004 	addi	r7,r7,-32640
  8032d0:	1945883a 	add	r2,r3,r5
  8032d4:	11c4703a 	and	r2,r2,r7
  8032d8:	00c6303a 	nor	r3,zero,r3
  8032dc:	1886703a 	and	r3,r3,r2
  8032e0:	18000c1e 	bne	r3,zero,803314 <strlen+0x64>
  8032e4:	280d883a 	mov	r6,r5
  8032e8:	380b883a 	mov	r5,r7
  8032ec:	21000104 	addi	r4,r4,4
  8032f0:	20800017 	ldw	r2,0(r4)
  8032f4:	1187883a 	add	r3,r2,r6
  8032f8:	1946703a 	and	r3,r3,r5
  8032fc:	0084303a 	nor	r2,zero,r2
  803300:	10c4703a 	and	r2,r2,r3
  803304:	103ff926 	beq	r2,zero,8032ec <strlen+0x3c>
  803308:	20800007 	ldb	r2,0(r4)
  80330c:	10000326 	beq	r2,zero,80331c <strlen+0x6c>
  803310:	21000044 	addi	r4,r4,1
  803314:	20800007 	ldb	r2,0(r4)
  803318:	103ffd1e 	bne	r2,zero,803310 <strlen+0x60>
  80331c:	2205c83a 	sub	r2,r4,r8
  803320:	f800283a 	ret

00803324 <__sprint_r>:
  803324:	30800217 	ldw	r2,8(r6)
  803328:	defffe04 	addi	sp,sp,-8
  80332c:	dc000015 	stw	r16,0(sp)
  803330:	dfc00115 	stw	ra,4(sp)
  803334:	3021883a 	mov	r16,r6
  803338:	0007883a 	mov	r3,zero
  80333c:	1000061e 	bne	r2,zero,803358 <__sprint_r+0x34>
  803340:	1805883a 	mov	r2,r3
  803344:	30000115 	stw	zero,4(r6)
  803348:	dfc00117 	ldw	ra,4(sp)
  80334c:	dc000017 	ldw	r16,0(sp)
  803350:	dec00204 	addi	sp,sp,8
  803354:	f800283a 	ret
  803358:	08086f40 	call	8086f4 <__sfvwrite_r>
  80335c:	1007883a 	mov	r3,r2
  803360:	1805883a 	mov	r2,r3
  803364:	80000115 	stw	zero,4(r16)
  803368:	80000215 	stw	zero,8(r16)
  80336c:	dfc00117 	ldw	ra,4(sp)
  803370:	dc000017 	ldw	r16,0(sp)
  803374:	dec00204 	addi	sp,sp,8
  803378:	f800283a 	ret

0080337c <___vfprintf_internal_r>:
  80337c:	defea404 	addi	sp,sp,-1392
  803380:	dd815815 	stw	r22,1376(sp)
  803384:	dc015215 	stw	r16,1352(sp)
  803388:	d9c15115 	stw	r7,1348(sp)
  80338c:	dfc15b15 	stw	ra,1388(sp)
  803390:	df015a15 	stw	fp,1384(sp)
  803394:	ddc15915 	stw	r23,1380(sp)
  803398:	dd415715 	stw	r21,1372(sp)
  80339c:	dd015615 	stw	r20,1368(sp)
  8033a0:	dcc15515 	stw	r19,1364(sp)
  8033a4:	dc815415 	stw	r18,1360(sp)
  8033a8:	dc415315 	stw	r17,1356(sp)
  8033ac:	282d883a 	mov	r22,r5
  8033b0:	3021883a 	mov	r16,r6
  8033b4:	d9014f15 	stw	r4,1340(sp)
  8033b8:	0808c340 	call	808c34 <_localeconv_r>
  8033bc:	10800017 	ldw	r2,0(r2)
  8033c0:	d9c15117 	ldw	r7,1348(sp)
  8033c4:	d8814915 	stw	r2,1316(sp)
  8033c8:	d8814f17 	ldw	r2,1340(sp)
  8033cc:	10000226 	beq	r2,zero,8033d8 <___vfprintf_internal_r+0x5c>
  8033d0:	10800e17 	ldw	r2,56(r2)
  8033d4:	10020d26 	beq	r2,zero,803c0c <___vfprintf_internal_r+0x890>
  8033d8:	b080030b 	ldhu	r2,12(r22)
  8033dc:	1080020c 	andi	r2,r2,8
  8033e0:	10020e26 	beq	r2,zero,803c1c <___vfprintf_internal_r+0x8a0>
  8033e4:	b0800417 	ldw	r2,16(r22)
  8033e8:	10020c26 	beq	r2,zero,803c1c <___vfprintf_internal_r+0x8a0>
  8033ec:	b200030b 	ldhu	r8,12(r22)
  8033f0:	00800284 	movi	r2,10
  8033f4:	40c0068c 	andi	r3,r8,26
  8033f8:	18802f1e 	bne	r3,r2,8034b8 <___vfprintf_internal_r+0x13c>
  8033fc:	b080038f 	ldh	r2,14(r22)
  803400:	10002d16 	blt	r2,zero,8034b8 <___vfprintf_internal_r+0x13c>
  803404:	b240038b 	ldhu	r9,14(r22)
  803408:	b2800717 	ldw	r10,28(r22)
  80340c:	b2c00917 	ldw	r11,36(r22)
  803410:	d9014f17 	ldw	r4,1340(sp)
  803414:	dc402904 	addi	r17,sp,164
  803418:	d8804004 	addi	r2,sp,256
  80341c:	00c10004 	movi	r3,1024
  803420:	423fff4c 	andi	r8,r8,65533
  803424:	800d883a 	mov	r6,r16
  803428:	880b883a 	mov	r5,r17
  80342c:	da002c0d 	sth	r8,176(sp)
  803430:	da402c8d 	sth	r9,178(sp)
  803434:	da803015 	stw	r10,192(sp)
  803438:	dac03215 	stw	r11,200(sp)
  80343c:	d8802d15 	stw	r2,180(sp)
  803440:	d8c02e15 	stw	r3,184(sp)
  803444:	d8802915 	stw	r2,164(sp)
  803448:	d8c02b15 	stw	r3,172(sp)
  80344c:	d8002f15 	stw	zero,188(sp)
  803450:	080337c0 	call	80337c <___vfprintf_internal_r>
  803454:	d8814b15 	stw	r2,1324(sp)
  803458:	10000416 	blt	r2,zero,80346c <___vfprintf_internal_r+0xf0>
  80345c:	d9014f17 	ldw	r4,1340(sp)
  803460:	880b883a 	mov	r5,r17
  803464:	0800f300 	call	800f30 <_fflush_r>
  803468:	1002321e 	bne	r2,zero,803d34 <___vfprintf_internal_r+0x9b8>
  80346c:	d8802c0b 	ldhu	r2,176(sp)
  803470:	1080100c 	andi	r2,r2,64
  803474:	10000326 	beq	r2,zero,803484 <___vfprintf_internal_r+0x108>
  803478:	b080030b 	ldhu	r2,12(r22)
  80347c:	10801014 	ori	r2,r2,64
  803480:	b080030d 	sth	r2,12(r22)
  803484:	d8814b17 	ldw	r2,1324(sp)
  803488:	dfc15b17 	ldw	ra,1388(sp)
  80348c:	df015a17 	ldw	fp,1384(sp)
  803490:	ddc15917 	ldw	r23,1380(sp)
  803494:	dd815817 	ldw	r22,1376(sp)
  803498:	dd415717 	ldw	r21,1372(sp)
  80349c:	dd015617 	ldw	r20,1368(sp)
  8034a0:	dcc15517 	ldw	r19,1364(sp)
  8034a4:	dc815417 	ldw	r18,1360(sp)
  8034a8:	dc415317 	ldw	r17,1356(sp)
  8034ac:	dc015217 	ldw	r16,1352(sp)
  8034b0:	dec15c04 	addi	sp,sp,1392
  8034b4:	f800283a 	ret
  8034b8:	0005883a 	mov	r2,zero
  8034bc:	0007883a 	mov	r3,zero
  8034c0:	dd401904 	addi	r21,sp,100
  8034c4:	d8814215 	stw	r2,1288(sp)
  8034c8:	802f883a 	mov	r23,r16
  8034cc:	d8c14315 	stw	r3,1292(sp)
  8034d0:	d8014b15 	stw	zero,1324(sp)
  8034d4:	d8014815 	stw	zero,1312(sp)
  8034d8:	d8014415 	stw	zero,1296(sp)
  8034dc:	d8014715 	stw	zero,1308(sp)
  8034e0:	dd400c15 	stw	r21,48(sp)
  8034e4:	d8000e15 	stw	zero,56(sp)
  8034e8:	d8000d15 	stw	zero,52(sp)
  8034ec:	b8800007 	ldb	r2,0(r23)
  8034f0:	10001926 	beq	r2,zero,803558 <___vfprintf_internal_r+0x1dc>
  8034f4:	00c00944 	movi	r3,37
  8034f8:	10c01726 	beq	r2,r3,803558 <___vfprintf_internal_r+0x1dc>
  8034fc:	b821883a 	mov	r16,r23
  803500:	00000106 	br	803508 <___vfprintf_internal_r+0x18c>
  803504:	10c00326 	beq	r2,r3,803514 <___vfprintf_internal_r+0x198>
  803508:	84000044 	addi	r16,r16,1
  80350c:	80800007 	ldb	r2,0(r16)
  803510:	103ffc1e 	bne	r2,zero,803504 <___vfprintf_internal_r+0x188>
  803514:	85e7c83a 	sub	r19,r16,r23
  803518:	98000e26 	beq	r19,zero,803554 <___vfprintf_internal_r+0x1d8>
  80351c:	dc800e17 	ldw	r18,56(sp)
  803520:	dc400d17 	ldw	r17,52(sp)
  803524:	008001c4 	movi	r2,7
  803528:	94e5883a 	add	r18,r18,r19
  80352c:	8c400044 	addi	r17,r17,1
  803530:	adc00015 	stw	r23,0(r21)
  803534:	dc800e15 	stw	r18,56(sp)
  803538:	acc00115 	stw	r19,4(r21)
  80353c:	dc400d15 	stw	r17,52(sp)
  803540:	14428b16 	blt	r2,r17,803f70 <___vfprintf_internal_r+0xbf4>
  803544:	ad400204 	addi	r21,r21,8
  803548:	d9014b17 	ldw	r4,1324(sp)
  80354c:	24c9883a 	add	r4,r4,r19
  803550:	d9014b15 	stw	r4,1324(sp)
  803554:	802f883a 	mov	r23,r16
  803558:	b8800007 	ldb	r2,0(r23)
  80355c:	10013c26 	beq	r2,zero,803a50 <___vfprintf_internal_r+0x6d4>
  803560:	bdc00044 	addi	r23,r23,1
  803564:	d8000405 	stb	zero,16(sp)
  803568:	b8c00007 	ldb	r3,0(r23)
  80356c:	04ffffc4 	movi	r19,-1
  803570:	d8014c15 	stw	zero,1328(sp)
  803574:	d8014a15 	stw	zero,1320(sp)
  803578:	d8c14d15 	stw	r3,1332(sp)
  80357c:	bdc00044 	addi	r23,r23,1
  803580:	d9414d17 	ldw	r5,1332(sp)
  803584:	00801604 	movi	r2,88
  803588:	28fff804 	addi	r3,r5,-32
  80358c:	10c06036 	bltu	r2,r3,803710 <___vfprintf_internal_r+0x394>
  803590:	18c5883a 	add	r2,r3,r3
  803594:	1085883a 	add	r2,r2,r2
  803598:	00c02034 	movhi	r3,128
  80359c:	18cd6b04 	addi	r3,r3,13740
  8035a0:	10c5883a 	add	r2,r2,r3
  8035a4:	11000017 	ldw	r4,0(r2)
  8035a8:	2000683a 	jmp	r4
  8035ac:	00804520 	cmpeqi	r2,zero,276
  8035b0:	00803710 	cmplti	r2,zero,220
  8035b4:	00803710 	cmplti	r2,zero,220
  8035b8:	0080450c 	andi	r2,zero,276
  8035bc:	00803710 	cmplti	r2,zero,220
  8035c0:	00803710 	cmplti	r2,zero,220
  8035c4:	00803710 	cmplti	r2,zero,220
  8035c8:	00803710 	cmplti	r2,zero,220
  8035cc:	00803710 	cmplti	r2,zero,220
  8035d0:	00803710 	cmplti	r2,zero,220
  8035d4:	008042ec 	andhi	r2,zero,267
  8035d8:	008044fc 	xorhi	r2,zero,275
  8035dc:	00803710 	cmplti	r2,zero,220
  8035e0:	00804304 	movi	r2,268
  8035e4:	008045a4 	muli	r2,zero,278
  8035e8:	00803710 	cmplti	r2,zero,220
  8035ec:	00804590 	cmplti	r2,zero,278
  8035f0:	0080454c 	andi	r2,zero,277
  8035f4:	0080454c 	andi	r2,zero,277
  8035f8:	0080454c 	andi	r2,zero,277
  8035fc:	0080454c 	andi	r2,zero,277
  803600:	0080454c 	andi	r2,zero,277
  803604:	0080454c 	andi	r2,zero,277
  803608:	0080454c 	andi	r2,zero,277
  80360c:	0080454c 	andi	r2,zero,277
  803610:	0080454c 	andi	r2,zero,277
  803614:	00803710 	cmplti	r2,zero,220
  803618:	00803710 	cmplti	r2,zero,220
  80361c:	00803710 	cmplti	r2,zero,220
  803620:	00803710 	cmplti	r2,zero,220
  803624:	00803710 	cmplti	r2,zero,220
  803628:	00803710 	cmplti	r2,zero,220
  80362c:	00803710 	cmplti	r2,zero,220
  803630:	00803710 	cmplti	r2,zero,220
  803634:	00803710 	cmplti	r2,zero,220
  803638:	00803710 	cmplti	r2,zero,220
  80363c:	00803d68 	cmpgeui	r2,zero,245
  803640:	008043d4 	movui	r2,271
  803644:	00803710 	cmplti	r2,zero,220
  803648:	008043d4 	movui	r2,271
  80364c:	00803710 	cmplti	r2,zero,220
  803650:	00803710 	cmplti	r2,zero,220
  803654:	00803710 	cmplti	r2,zero,220
  803658:	00803710 	cmplti	r2,zero,220
  80365c:	00804538 	rdprs	r2,zero,276
  803660:	00803710 	cmplti	r2,zero,220
  803664:	00803710 	cmplti	r2,zero,220
  803668:	00803e1c 	xori	r2,zero,248
  80366c:	00803710 	cmplti	r2,zero,220
  803670:	00803710 	cmplti	r2,zero,220
  803674:	00803710 	cmplti	r2,zero,220
  803678:	00803710 	cmplti	r2,zero,220
  80367c:	00803710 	cmplti	r2,zero,220
  803680:	00803e68 	cmpgeui	r2,zero,249
  803684:	00803710 	cmplti	r2,zero,220
  803688:	00803710 	cmplti	r2,zero,220
  80368c:	00804488 	cmpgei	r2,zero,274
  803690:	00803710 	cmplti	r2,zero,220
  803694:	00803710 	cmplti	r2,zero,220
  803698:	00803710 	cmplti	r2,zero,220
  80369c:	00803710 	cmplti	r2,zero,220
  8036a0:	00803710 	cmplti	r2,zero,220
  8036a4:	00803710 	cmplti	r2,zero,220
  8036a8:	00803710 	cmplti	r2,zero,220
  8036ac:	00803710 	cmplti	r2,zero,220
  8036b0:	00803710 	cmplti	r2,zero,220
  8036b4:	00803710 	cmplti	r2,zero,220
  8036b8:	0080445c 	xori	r2,zero,273
  8036bc:	00803d74 	movhi	r2,245
  8036c0:	008043d4 	movui	r2,271
  8036c4:	008043d4 	movui	r2,271
  8036c8:	008043d4 	movui	r2,271
  8036cc:	008043c0 	call	8043c <__reset-0x77fbc4>
  8036d0:	00803d74 	movhi	r2,245
  8036d4:	00803710 	cmplti	r2,zero,220
  8036d8:	00803710 	cmplti	r2,zero,220
  8036dc:	00804348 	cmpgei	r2,zero,269
  8036e0:	00803710 	cmplti	r2,zero,220
  8036e4:	00804318 	cmpnei	r2,zero,268
  8036e8:	00803e28 	cmpgeui	r2,zero,248
  8036ec:	00804378 	rdprs	r2,zero,269
  8036f0:	00804364 	muli	r2,zero,269
  8036f4:	00803710 	cmplti	r2,zero,220
  8036f8:	0080460c 	andi	r2,zero,280
  8036fc:	00803710 	cmplti	r2,zero,220
  803700:	00803e74 	movhi	r2,249
  803704:	00803710 	cmplti	r2,zero,220
  803708:	00803710 	cmplti	r2,zero,220
  80370c:	008044ec 	andhi	r2,zero,275
  803710:	d9014d17 	ldw	r4,1332(sp)
  803714:	2000ce26 	beq	r4,zero,803a50 <___vfprintf_internal_r+0x6d4>
  803718:	01400044 	movi	r5,1
  80371c:	d9800f04 	addi	r6,sp,60
  803720:	d9c14015 	stw	r7,1280(sp)
  803724:	d9414515 	stw	r5,1300(sp)
  803728:	d9814115 	stw	r6,1284(sp)
  80372c:	280f883a 	mov	r7,r5
  803730:	d9000f05 	stb	r4,60(sp)
  803734:	d8000405 	stb	zero,16(sp)
  803738:	d8014615 	stw	zero,1304(sp)
  80373c:	d8c14c17 	ldw	r3,1328(sp)
  803740:	1880008c 	andi	r2,r3,2
  803744:	1005003a 	cmpeq	r2,r2,zero
  803748:	d8815015 	stw	r2,1344(sp)
  80374c:	1000031e 	bne	r2,zero,80375c <___vfprintf_internal_r+0x3e0>
  803750:	d9014517 	ldw	r4,1300(sp)
  803754:	21000084 	addi	r4,r4,2
  803758:	d9014515 	stw	r4,1300(sp)
  80375c:	d9414c17 	ldw	r5,1328(sp)
  803760:	2940210c 	andi	r5,r5,132
  803764:	d9414e15 	stw	r5,1336(sp)
  803768:	28002d1e 	bne	r5,zero,803820 <___vfprintf_internal_r+0x4a4>
  80376c:	d9814a17 	ldw	r6,1320(sp)
  803770:	d8814517 	ldw	r2,1300(sp)
  803774:	30a1c83a 	sub	r16,r6,r2
  803778:	0400290e 	bge	zero,r16,803820 <___vfprintf_internal_r+0x4a4>
  80377c:	00800404 	movi	r2,16
  803780:	14045e0e 	bge	r2,r16,8048fc <___vfprintf_internal_r+0x1580>
  803784:	dc800e17 	ldw	r18,56(sp)
  803788:	dc400d17 	ldw	r17,52(sp)
  80378c:	1027883a 	mov	r19,r2
  803790:	07002074 	movhi	fp,129
  803794:	e7136284 	addi	fp,fp,19850
  803798:	050001c4 	movi	r20,7
  80379c:	00000306 	br	8037ac <___vfprintf_internal_r+0x430>
  8037a0:	843ffc04 	addi	r16,r16,-16
  8037a4:	ad400204 	addi	r21,r21,8
  8037a8:	9c00130e 	bge	r19,r16,8037f8 <___vfprintf_internal_r+0x47c>
  8037ac:	94800404 	addi	r18,r18,16
  8037b0:	8c400044 	addi	r17,r17,1
  8037b4:	af000015 	stw	fp,0(r21)
  8037b8:	acc00115 	stw	r19,4(r21)
  8037bc:	dc800e15 	stw	r18,56(sp)
  8037c0:	dc400d15 	stw	r17,52(sp)
  8037c4:	a47ff60e 	bge	r20,r17,8037a0 <___vfprintf_internal_r+0x424>
  8037c8:	d9014f17 	ldw	r4,1340(sp)
  8037cc:	b00b883a 	mov	r5,r22
  8037d0:	d9800c04 	addi	r6,sp,48
  8037d4:	d9c15115 	stw	r7,1348(sp)
  8037d8:	08033240 	call	803324 <__sprint_r>
  8037dc:	d9c15117 	ldw	r7,1348(sp)
  8037e0:	10009e1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  8037e4:	843ffc04 	addi	r16,r16,-16
  8037e8:	dc800e17 	ldw	r18,56(sp)
  8037ec:	dc400d17 	ldw	r17,52(sp)
  8037f0:	dd401904 	addi	r21,sp,100
  8037f4:	9c3fed16 	blt	r19,r16,8037ac <___vfprintf_internal_r+0x430>
  8037f8:	9425883a 	add	r18,r18,r16
  8037fc:	8c400044 	addi	r17,r17,1
  803800:	008001c4 	movi	r2,7
  803804:	af000015 	stw	fp,0(r21)
  803808:	ac000115 	stw	r16,4(r21)
  80380c:	dc800e15 	stw	r18,56(sp)
  803810:	dc400d15 	stw	r17,52(sp)
  803814:	1441f516 	blt	r2,r17,803fec <___vfprintf_internal_r+0xc70>
  803818:	ad400204 	addi	r21,r21,8
  80381c:	00000206 	br	803828 <___vfprintf_internal_r+0x4ac>
  803820:	dc800e17 	ldw	r18,56(sp)
  803824:	dc400d17 	ldw	r17,52(sp)
  803828:	d8800407 	ldb	r2,16(sp)
  80382c:	10000b26 	beq	r2,zero,80385c <___vfprintf_internal_r+0x4e0>
  803830:	00800044 	movi	r2,1
  803834:	94800044 	addi	r18,r18,1
  803838:	8c400044 	addi	r17,r17,1
  80383c:	a8800115 	stw	r2,4(r21)
  803840:	d8c00404 	addi	r3,sp,16
  803844:	008001c4 	movi	r2,7
  803848:	a8c00015 	stw	r3,0(r21)
  80384c:	dc800e15 	stw	r18,56(sp)
  803850:	dc400d15 	stw	r17,52(sp)
  803854:	1441da16 	blt	r2,r17,803fc0 <___vfprintf_internal_r+0xc44>
  803858:	ad400204 	addi	r21,r21,8
  80385c:	d9015017 	ldw	r4,1344(sp)
  803860:	20000b1e 	bne	r4,zero,803890 <___vfprintf_internal_r+0x514>
  803864:	d8800444 	addi	r2,sp,17
  803868:	94800084 	addi	r18,r18,2
  80386c:	8c400044 	addi	r17,r17,1
  803870:	a8800015 	stw	r2,0(r21)
  803874:	00c00084 	movi	r3,2
  803878:	008001c4 	movi	r2,7
  80387c:	a8c00115 	stw	r3,4(r21)
  803880:	dc800e15 	stw	r18,56(sp)
  803884:	dc400d15 	stw	r17,52(sp)
  803888:	1441c216 	blt	r2,r17,803f94 <___vfprintf_internal_r+0xc18>
  80388c:	ad400204 	addi	r21,r21,8
  803890:	d9414e17 	ldw	r5,1336(sp)
  803894:	00802004 	movi	r2,128
  803898:	2880b126 	beq	r5,r2,803b60 <___vfprintf_internal_r+0x7e4>
  80389c:	d8c14617 	ldw	r3,1304(sp)
  8038a0:	19e1c83a 	sub	r16,r3,r7
  8038a4:	0400260e 	bge	zero,r16,803940 <___vfprintf_internal_r+0x5c4>
  8038a8:	00800404 	movi	r2,16
  8038ac:	1403cf0e 	bge	r2,r16,8047ec <___vfprintf_internal_r+0x1470>
  8038b0:	1027883a 	mov	r19,r2
  8038b4:	07002074 	movhi	fp,129
  8038b8:	e7135e84 	addi	fp,fp,19834
  8038bc:	050001c4 	movi	r20,7
  8038c0:	00000306 	br	8038d0 <___vfprintf_internal_r+0x554>
  8038c4:	843ffc04 	addi	r16,r16,-16
  8038c8:	ad400204 	addi	r21,r21,8
  8038cc:	9c00130e 	bge	r19,r16,80391c <___vfprintf_internal_r+0x5a0>
  8038d0:	94800404 	addi	r18,r18,16
  8038d4:	8c400044 	addi	r17,r17,1
  8038d8:	af000015 	stw	fp,0(r21)
  8038dc:	acc00115 	stw	r19,4(r21)
  8038e0:	dc800e15 	stw	r18,56(sp)
  8038e4:	dc400d15 	stw	r17,52(sp)
  8038e8:	a47ff60e 	bge	r20,r17,8038c4 <___vfprintf_internal_r+0x548>
  8038ec:	d9014f17 	ldw	r4,1340(sp)
  8038f0:	b00b883a 	mov	r5,r22
  8038f4:	d9800c04 	addi	r6,sp,48
  8038f8:	d9c15115 	stw	r7,1348(sp)
  8038fc:	08033240 	call	803324 <__sprint_r>
  803900:	d9c15117 	ldw	r7,1348(sp)
  803904:	1000551e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803908:	843ffc04 	addi	r16,r16,-16
  80390c:	dc800e17 	ldw	r18,56(sp)
  803910:	dc400d17 	ldw	r17,52(sp)
  803914:	dd401904 	addi	r21,sp,100
  803918:	9c3fed16 	blt	r19,r16,8038d0 <___vfprintf_internal_r+0x554>
  80391c:	9425883a 	add	r18,r18,r16
  803920:	8c400044 	addi	r17,r17,1
  803924:	008001c4 	movi	r2,7
  803928:	af000015 	stw	fp,0(r21)
  80392c:	ac000115 	stw	r16,4(r21)
  803930:	dc800e15 	stw	r18,56(sp)
  803934:	dc400d15 	stw	r17,52(sp)
  803938:	14418216 	blt	r2,r17,803f44 <___vfprintf_internal_r+0xbc8>
  80393c:	ad400204 	addi	r21,r21,8
  803940:	d9014c17 	ldw	r4,1328(sp)
  803944:	2080400c 	andi	r2,r4,256
  803948:	10004a1e 	bne	r2,zero,803a74 <___vfprintf_internal_r+0x6f8>
  80394c:	d9414117 	ldw	r5,1284(sp)
  803950:	91e5883a 	add	r18,r18,r7
  803954:	8c400044 	addi	r17,r17,1
  803958:	008001c4 	movi	r2,7
  80395c:	a9400015 	stw	r5,0(r21)
  803960:	a9c00115 	stw	r7,4(r21)
  803964:	dc800e15 	stw	r18,56(sp)
  803968:	dc400d15 	stw	r17,52(sp)
  80396c:	14416716 	blt	r2,r17,803f0c <___vfprintf_internal_r+0xb90>
  803970:	a8c00204 	addi	r3,r21,8
  803974:	d9814c17 	ldw	r6,1328(sp)
  803978:	3080010c 	andi	r2,r6,4
  80397c:	10002826 	beq	r2,zero,803a20 <___vfprintf_internal_r+0x6a4>
  803980:	d8814a17 	ldw	r2,1320(sp)
  803984:	d9014517 	ldw	r4,1300(sp)
  803988:	1121c83a 	sub	r16,r2,r4
  80398c:	0400240e 	bge	zero,r16,803a20 <___vfprintf_internal_r+0x6a4>
  803990:	00800404 	movi	r2,16
  803994:	1404550e 	bge	r2,r16,804aec <___vfprintf_internal_r+0x1770>
  803998:	dc400d17 	ldw	r17,52(sp)
  80399c:	1027883a 	mov	r19,r2
  8039a0:	07002074 	movhi	fp,129
  8039a4:	e7136284 	addi	fp,fp,19850
  8039a8:	050001c4 	movi	r20,7
  8039ac:	00000306 	br	8039bc <___vfprintf_internal_r+0x640>
  8039b0:	843ffc04 	addi	r16,r16,-16
  8039b4:	18c00204 	addi	r3,r3,8
  8039b8:	9c00110e 	bge	r19,r16,803a00 <___vfprintf_internal_r+0x684>
  8039bc:	94800404 	addi	r18,r18,16
  8039c0:	8c400044 	addi	r17,r17,1
  8039c4:	1f000015 	stw	fp,0(r3)
  8039c8:	1cc00115 	stw	r19,4(r3)
  8039cc:	dc800e15 	stw	r18,56(sp)
  8039d0:	dc400d15 	stw	r17,52(sp)
  8039d4:	a47ff60e 	bge	r20,r17,8039b0 <___vfprintf_internal_r+0x634>
  8039d8:	d9014f17 	ldw	r4,1340(sp)
  8039dc:	b00b883a 	mov	r5,r22
  8039e0:	d9800c04 	addi	r6,sp,48
  8039e4:	08033240 	call	803324 <__sprint_r>
  8039e8:	10001c1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  8039ec:	843ffc04 	addi	r16,r16,-16
  8039f0:	dc800e17 	ldw	r18,56(sp)
  8039f4:	dc400d17 	ldw	r17,52(sp)
  8039f8:	d8c01904 	addi	r3,sp,100
  8039fc:	9c3fef16 	blt	r19,r16,8039bc <___vfprintf_internal_r+0x640>
  803a00:	9425883a 	add	r18,r18,r16
  803a04:	8c400044 	addi	r17,r17,1
  803a08:	008001c4 	movi	r2,7
  803a0c:	1f000015 	stw	fp,0(r3)
  803a10:	1c000115 	stw	r16,4(r3)
  803a14:	dc800e15 	stw	r18,56(sp)
  803a18:	dc400d15 	stw	r17,52(sp)
  803a1c:	1440cb16 	blt	r2,r17,803d4c <___vfprintf_internal_r+0x9d0>
  803a20:	d8814a17 	ldw	r2,1320(sp)
  803a24:	d9414517 	ldw	r5,1300(sp)
  803a28:	1140010e 	bge	r2,r5,803a30 <___vfprintf_internal_r+0x6b4>
  803a2c:	2805883a 	mov	r2,r5
  803a30:	d9814b17 	ldw	r6,1324(sp)
  803a34:	308d883a 	add	r6,r6,r2
  803a38:	d9814b15 	stw	r6,1324(sp)
  803a3c:	90013b1e 	bne	r18,zero,803f2c <___vfprintf_internal_r+0xbb0>
  803a40:	d9c14017 	ldw	r7,1280(sp)
  803a44:	dd401904 	addi	r21,sp,100
  803a48:	d8000d15 	stw	zero,52(sp)
  803a4c:	003ea706 	br	8034ec <___vfprintf_internal_r+0x170>
  803a50:	d8800e17 	ldw	r2,56(sp)
  803a54:	1005451e 	bne	r2,zero,804f6c <___vfprintf_internal_r+0x1bf0>
  803a58:	d8000d15 	stw	zero,52(sp)
  803a5c:	b080030b 	ldhu	r2,12(r22)
  803a60:	1080100c 	andi	r2,r2,64
  803a64:	103e8726 	beq	r2,zero,803484 <___vfprintf_internal_r+0x108>
  803a68:	00bfffc4 	movi	r2,-1
  803a6c:	d8814b15 	stw	r2,1324(sp)
  803a70:	003e8406 	br	803484 <___vfprintf_internal_r+0x108>
  803a74:	d9814d17 	ldw	r6,1332(sp)
  803a78:	00801944 	movi	r2,101
  803a7c:	11806e16 	blt	r2,r6,803c38 <___vfprintf_internal_r+0x8bc>
  803a80:	d9414717 	ldw	r5,1308(sp)
  803a84:	00c00044 	movi	r3,1
  803a88:	1943490e 	bge	r3,r5,8047b0 <___vfprintf_internal_r+0x1434>
  803a8c:	d8814117 	ldw	r2,1284(sp)
  803a90:	94800044 	addi	r18,r18,1
  803a94:	8c400044 	addi	r17,r17,1
  803a98:	a8800015 	stw	r2,0(r21)
  803a9c:	008001c4 	movi	r2,7
  803aa0:	a8c00115 	stw	r3,4(r21)
  803aa4:	dc800e15 	stw	r18,56(sp)
  803aa8:	dc400d15 	stw	r17,52(sp)
  803aac:	1441ca16 	blt	r2,r17,8041d8 <___vfprintf_internal_r+0xe5c>
  803ab0:	a8c00204 	addi	r3,r21,8
  803ab4:	d9014917 	ldw	r4,1316(sp)
  803ab8:	00800044 	movi	r2,1
  803abc:	94800044 	addi	r18,r18,1
  803ac0:	8c400044 	addi	r17,r17,1
  803ac4:	18800115 	stw	r2,4(r3)
  803ac8:	008001c4 	movi	r2,7
  803acc:	19000015 	stw	r4,0(r3)
  803ad0:	dc800e15 	stw	r18,56(sp)
  803ad4:	dc400d15 	stw	r17,52(sp)
  803ad8:	1441b616 	blt	r2,r17,8041b4 <___vfprintf_internal_r+0xe38>
  803adc:	1cc00204 	addi	r19,r3,8
  803ae0:	d9014217 	ldw	r4,1288(sp)
  803ae4:	d9414317 	ldw	r5,1292(sp)
  803ae8:	000d883a 	mov	r6,zero
  803aec:	000f883a 	mov	r7,zero
  803af0:	080fac40 	call	80fac4 <__nedf2>
  803af4:	10017426 	beq	r2,zero,8040c8 <___vfprintf_internal_r+0xd4c>
  803af8:	d9414717 	ldw	r5,1308(sp)
  803afc:	d9814117 	ldw	r6,1284(sp)
  803b00:	8c400044 	addi	r17,r17,1
  803b04:	2c85883a 	add	r2,r5,r18
  803b08:	14bfffc4 	addi	r18,r2,-1
  803b0c:	28bfffc4 	addi	r2,r5,-1
  803b10:	30c00044 	addi	r3,r6,1
  803b14:	98800115 	stw	r2,4(r19)
  803b18:	008001c4 	movi	r2,7
  803b1c:	98c00015 	stw	r3,0(r19)
  803b20:	dc800e15 	stw	r18,56(sp)
  803b24:	dc400d15 	stw	r17,52(sp)
  803b28:	14418e16 	blt	r2,r17,804164 <___vfprintf_internal_r+0xde8>
  803b2c:	9cc00204 	addi	r19,r19,8
  803b30:	d9414817 	ldw	r5,1312(sp)
  803b34:	d8800804 	addi	r2,sp,32
  803b38:	8c400044 	addi	r17,r17,1
  803b3c:	9165883a 	add	r18,r18,r5
  803b40:	98800015 	stw	r2,0(r19)
  803b44:	008001c4 	movi	r2,7
  803b48:	99400115 	stw	r5,4(r19)
  803b4c:	dc800e15 	stw	r18,56(sp)
  803b50:	dc400d15 	stw	r17,52(sp)
  803b54:	1440ed16 	blt	r2,r17,803f0c <___vfprintf_internal_r+0xb90>
  803b58:	98c00204 	addi	r3,r19,8
  803b5c:	003f8506 	br	803974 <___vfprintf_internal_r+0x5f8>
  803b60:	d9814a17 	ldw	r6,1320(sp)
  803b64:	d8814517 	ldw	r2,1300(sp)
  803b68:	30a1c83a 	sub	r16,r6,r2
  803b6c:	043f4b0e 	bge	zero,r16,80389c <___vfprintf_internal_r+0x520>
  803b70:	00800404 	movi	r2,16
  803b74:	14043a0e 	bge	r2,r16,804c60 <___vfprintf_internal_r+0x18e4>
  803b78:	1027883a 	mov	r19,r2
  803b7c:	07002074 	movhi	fp,129
  803b80:	e7135e84 	addi	fp,fp,19834
  803b84:	050001c4 	movi	r20,7
  803b88:	00000306 	br	803b98 <___vfprintf_internal_r+0x81c>
  803b8c:	843ffc04 	addi	r16,r16,-16
  803b90:	ad400204 	addi	r21,r21,8
  803b94:	9c00130e 	bge	r19,r16,803be4 <___vfprintf_internal_r+0x868>
  803b98:	94800404 	addi	r18,r18,16
  803b9c:	8c400044 	addi	r17,r17,1
  803ba0:	af000015 	stw	fp,0(r21)
  803ba4:	acc00115 	stw	r19,4(r21)
  803ba8:	dc800e15 	stw	r18,56(sp)
  803bac:	dc400d15 	stw	r17,52(sp)
  803bb0:	a47ff60e 	bge	r20,r17,803b8c <___vfprintf_internal_r+0x810>
  803bb4:	d9014f17 	ldw	r4,1340(sp)
  803bb8:	b00b883a 	mov	r5,r22
  803bbc:	d9800c04 	addi	r6,sp,48
  803bc0:	d9c15115 	stw	r7,1348(sp)
  803bc4:	08033240 	call	803324 <__sprint_r>
  803bc8:	d9c15117 	ldw	r7,1348(sp)
  803bcc:	103fa31e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803bd0:	843ffc04 	addi	r16,r16,-16
  803bd4:	dc800e17 	ldw	r18,56(sp)
  803bd8:	dc400d17 	ldw	r17,52(sp)
  803bdc:	dd401904 	addi	r21,sp,100
  803be0:	9c3fed16 	blt	r19,r16,803b98 <___vfprintf_internal_r+0x81c>
  803be4:	9425883a 	add	r18,r18,r16
  803be8:	8c400044 	addi	r17,r17,1
  803bec:	008001c4 	movi	r2,7
  803bf0:	af000015 	stw	fp,0(r21)
  803bf4:	ac000115 	stw	r16,4(r21)
  803bf8:	dc800e15 	stw	r18,56(sp)
  803bfc:	dc400d15 	stw	r17,52(sp)
  803c00:	14416116 	blt	r2,r17,804188 <___vfprintf_internal_r+0xe0c>
  803c04:	ad400204 	addi	r21,r21,8
  803c08:	003f2406 	br	80389c <___vfprintf_internal_r+0x520>
  803c0c:	d9014f17 	ldw	r4,1340(sp)
  803c10:	08011c80 	call	8011c8 <__sinit>
  803c14:	d9c15117 	ldw	r7,1348(sp)
  803c18:	003def06 	br	8033d8 <___vfprintf_internal_r+0x5c>
  803c1c:	d9014f17 	ldw	r4,1340(sp)
  803c20:	b00b883a 	mov	r5,r22
  803c24:	d9c15115 	stw	r7,1348(sp)
  803c28:	0806a640 	call	806a64 <__swsetup_r>
  803c2c:	d9c15117 	ldw	r7,1348(sp)
  803c30:	103dee26 	beq	r2,zero,8033ec <___vfprintf_internal_r+0x70>
  803c34:	003f8c06 	br	803a68 <___vfprintf_internal_r+0x6ec>
  803c38:	d9014217 	ldw	r4,1288(sp)
  803c3c:	d9414317 	ldw	r5,1292(sp)
  803c40:	000d883a 	mov	r6,zero
  803c44:	000f883a 	mov	r7,zero
  803c48:	080fa3c0 	call	80fa3c <__eqdf2>
  803c4c:	1000f21e 	bne	r2,zero,804018 <___vfprintf_internal_r+0xc9c>
  803c50:	00802074 	movhi	r2,129
  803c54:	10935e04 	addi	r2,r2,19832
  803c58:	94800044 	addi	r18,r18,1
  803c5c:	8c400044 	addi	r17,r17,1
  803c60:	a8800015 	stw	r2,0(r21)
  803c64:	00c00044 	movi	r3,1
  803c68:	008001c4 	movi	r2,7
  803c6c:	a8c00115 	stw	r3,4(r21)
  803c70:	dc800e15 	stw	r18,56(sp)
  803c74:	dc400d15 	stw	r17,52(sp)
  803c78:	14430016 	blt	r2,r17,80487c <___vfprintf_internal_r+0x1500>
  803c7c:	a8c00204 	addi	r3,r21,8
  803c80:	d8800517 	ldw	r2,20(sp)
  803c84:	d9014717 	ldw	r4,1308(sp)
  803c88:	11015c0e 	bge	r2,r4,8041fc <___vfprintf_internal_r+0xe80>
  803c8c:	dc400d17 	ldw	r17,52(sp)
  803c90:	d9814917 	ldw	r6,1316(sp)
  803c94:	00800044 	movi	r2,1
  803c98:	94800044 	addi	r18,r18,1
  803c9c:	8c400044 	addi	r17,r17,1
  803ca0:	18800115 	stw	r2,4(r3)
  803ca4:	008001c4 	movi	r2,7
  803ca8:	19800015 	stw	r6,0(r3)
  803cac:	dc800e15 	stw	r18,56(sp)
  803cb0:	dc400d15 	stw	r17,52(sp)
  803cb4:	14431616 	blt	r2,r17,804910 <___vfprintf_internal_r+0x1594>
  803cb8:	18c00204 	addi	r3,r3,8
  803cbc:	d8814717 	ldw	r2,1308(sp)
  803cc0:	143fffc4 	addi	r16,r2,-1
  803cc4:	043f2b0e 	bge	zero,r16,803974 <___vfprintf_internal_r+0x5f8>
  803cc8:	00800404 	movi	r2,16
  803ccc:	1402a80e 	bge	r2,r16,804770 <___vfprintf_internal_r+0x13f4>
  803cd0:	dc400d17 	ldw	r17,52(sp)
  803cd4:	1027883a 	mov	r19,r2
  803cd8:	07002074 	movhi	fp,129
  803cdc:	e7135e84 	addi	fp,fp,19834
  803ce0:	050001c4 	movi	r20,7
  803ce4:	00000306 	br	803cf4 <___vfprintf_internal_r+0x978>
  803ce8:	18c00204 	addi	r3,r3,8
  803cec:	843ffc04 	addi	r16,r16,-16
  803cf0:	9c02a20e 	bge	r19,r16,80477c <___vfprintf_internal_r+0x1400>
  803cf4:	94800404 	addi	r18,r18,16
  803cf8:	8c400044 	addi	r17,r17,1
  803cfc:	1f000015 	stw	fp,0(r3)
  803d00:	1cc00115 	stw	r19,4(r3)
  803d04:	dc800e15 	stw	r18,56(sp)
  803d08:	dc400d15 	stw	r17,52(sp)
  803d0c:	a47ff60e 	bge	r20,r17,803ce8 <___vfprintf_internal_r+0x96c>
  803d10:	d9014f17 	ldw	r4,1340(sp)
  803d14:	b00b883a 	mov	r5,r22
  803d18:	d9800c04 	addi	r6,sp,48
  803d1c:	08033240 	call	803324 <__sprint_r>
  803d20:	103f4e1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803d24:	dc800e17 	ldw	r18,56(sp)
  803d28:	dc400d17 	ldw	r17,52(sp)
  803d2c:	d8c01904 	addi	r3,sp,100
  803d30:	003fee06 	br	803cec <___vfprintf_internal_r+0x970>
  803d34:	d8802c0b 	ldhu	r2,176(sp)
  803d38:	00ffffc4 	movi	r3,-1
  803d3c:	d8c14b15 	stw	r3,1324(sp)
  803d40:	1080100c 	andi	r2,r2,64
  803d44:	103dcc1e 	bne	r2,zero,803478 <___vfprintf_internal_r+0xfc>
  803d48:	003dce06 	br	803484 <___vfprintf_internal_r+0x108>
  803d4c:	d9014f17 	ldw	r4,1340(sp)
  803d50:	b00b883a 	mov	r5,r22
  803d54:	d9800c04 	addi	r6,sp,48
  803d58:	08033240 	call	803324 <__sprint_r>
  803d5c:	103f3f1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803d60:	dc800e17 	ldw	r18,56(sp)
  803d64:	003f2e06 	br	803a20 <___vfprintf_internal_r+0x6a4>
  803d68:	d9414c17 	ldw	r5,1328(sp)
  803d6c:	29400414 	ori	r5,r5,16
  803d70:	d9414c15 	stw	r5,1328(sp)
  803d74:	d9814c17 	ldw	r6,1328(sp)
  803d78:	3080080c 	andi	r2,r6,32
  803d7c:	10014f1e 	bne	r2,zero,8042bc <___vfprintf_internal_r+0xf40>
  803d80:	d8c14c17 	ldw	r3,1328(sp)
  803d84:	1880040c 	andi	r2,r3,16
  803d88:	1002f01e 	bne	r2,zero,80494c <___vfprintf_internal_r+0x15d0>
  803d8c:	d9014c17 	ldw	r4,1328(sp)
  803d90:	2080100c 	andi	r2,r4,64
  803d94:	1002ed26 	beq	r2,zero,80494c <___vfprintf_internal_r+0x15d0>
  803d98:	3880000f 	ldh	r2,0(r7)
  803d9c:	39c00104 	addi	r7,r7,4
  803da0:	d9c14015 	stw	r7,1280(sp)
  803da4:	1023d7fa 	srai	r17,r2,31
  803da8:	1021883a 	mov	r16,r2
  803dac:	88037816 	blt	r17,zero,804b90 <___vfprintf_internal_r+0x1814>
  803db0:	01000044 	movi	r4,1
  803db4:	98000416 	blt	r19,zero,803dc8 <___vfprintf_internal_r+0xa4c>
  803db8:	d8c14c17 	ldw	r3,1328(sp)
  803dbc:	00bfdfc4 	movi	r2,-129
  803dc0:	1886703a 	and	r3,r3,r2
  803dc4:	d8c14c15 	stw	r3,1328(sp)
  803dc8:	8444b03a 	or	r2,r16,r17
  803dcc:	10022c1e 	bne	r2,zero,804680 <___vfprintf_internal_r+0x1304>
  803dd0:	98022b1e 	bne	r19,zero,804680 <___vfprintf_internal_r+0x1304>
  803dd4:	20803fcc 	andi	r2,r4,255
  803dd8:	1002a126 	beq	r2,zero,804860 <___vfprintf_internal_r+0x14e4>
  803ddc:	d8c01904 	addi	r3,sp,100
  803de0:	dd000f04 	addi	r20,sp,60
  803de4:	d8c14115 	stw	r3,1284(sp)
  803de8:	d8c14117 	ldw	r3,1284(sp)
  803dec:	dcc14515 	stw	r19,1300(sp)
  803df0:	a0c5c83a 	sub	r2,r20,r3
  803df4:	11c00a04 	addi	r7,r2,40
  803df8:	99c0010e 	bge	r19,r7,803e00 <___vfprintf_internal_r+0xa84>
  803dfc:	d9c14515 	stw	r7,1300(sp)
  803e00:	dcc14615 	stw	r19,1304(sp)
  803e04:	d8800407 	ldb	r2,16(sp)
  803e08:	103e4c26 	beq	r2,zero,80373c <___vfprintf_internal_r+0x3c0>
  803e0c:	d8814517 	ldw	r2,1300(sp)
  803e10:	10800044 	addi	r2,r2,1
  803e14:	d8814515 	stw	r2,1300(sp)
  803e18:	003e4806 	br	80373c <___vfprintf_internal_r+0x3c0>
  803e1c:	d9814c17 	ldw	r6,1328(sp)
  803e20:	31800414 	ori	r6,r6,16
  803e24:	d9814c15 	stw	r6,1328(sp)
  803e28:	d8c14c17 	ldw	r3,1328(sp)
  803e2c:	1880080c 	andi	r2,r3,32
  803e30:	1001271e 	bne	r2,zero,8042d0 <___vfprintf_internal_r+0xf54>
  803e34:	d9414c17 	ldw	r5,1328(sp)
  803e38:	2880040c 	andi	r2,r5,16
  803e3c:	1002bc1e 	bne	r2,zero,804930 <___vfprintf_internal_r+0x15b4>
  803e40:	d9814c17 	ldw	r6,1328(sp)
  803e44:	3080100c 	andi	r2,r6,64
  803e48:	1002b926 	beq	r2,zero,804930 <___vfprintf_internal_r+0x15b4>
  803e4c:	3c00000b 	ldhu	r16,0(r7)
  803e50:	0009883a 	mov	r4,zero
  803e54:	39c00104 	addi	r7,r7,4
  803e58:	0023883a 	mov	r17,zero
  803e5c:	d9c14015 	stw	r7,1280(sp)
  803e60:	d8000405 	stb	zero,16(sp)
  803e64:	003fd306 	br	803db4 <___vfprintf_internal_r+0xa38>
  803e68:	d9014c17 	ldw	r4,1328(sp)
  803e6c:	21000414 	ori	r4,r4,16
  803e70:	d9014c15 	stw	r4,1328(sp)
  803e74:	d9414c17 	ldw	r5,1328(sp)
  803e78:	2880080c 	andi	r2,r5,32
  803e7c:	1001081e 	bne	r2,zero,8042a0 <___vfprintf_internal_r+0xf24>
  803e80:	d8c14c17 	ldw	r3,1328(sp)
  803e84:	1880040c 	andi	r2,r3,16
  803e88:	1002b61e 	bne	r2,zero,804964 <___vfprintf_internal_r+0x15e8>
  803e8c:	d9014c17 	ldw	r4,1328(sp)
  803e90:	2080100c 	andi	r2,r4,64
  803e94:	1002b326 	beq	r2,zero,804964 <___vfprintf_internal_r+0x15e8>
  803e98:	3c00000b 	ldhu	r16,0(r7)
  803e9c:	01000044 	movi	r4,1
  803ea0:	39c00104 	addi	r7,r7,4
  803ea4:	0023883a 	mov	r17,zero
  803ea8:	d9c14015 	stw	r7,1280(sp)
  803eac:	d8000405 	stb	zero,16(sp)
  803eb0:	003fc006 	br	803db4 <___vfprintf_internal_r+0xa38>
  803eb4:	d9014f17 	ldw	r4,1340(sp)
  803eb8:	b00b883a 	mov	r5,r22
  803ebc:	d9800c04 	addi	r6,sp,48
  803ec0:	08033240 	call	803324 <__sprint_r>
  803ec4:	103ee51e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803ec8:	dc800e17 	ldw	r18,56(sp)
  803ecc:	d8c01904 	addi	r3,sp,100
  803ed0:	d9814c17 	ldw	r6,1328(sp)
  803ed4:	3080004c 	andi	r2,r6,1
  803ed8:	1005003a 	cmpeq	r2,r2,zero
  803edc:	103ea51e 	bne	r2,zero,803974 <___vfprintf_internal_r+0x5f8>
  803ee0:	00800044 	movi	r2,1
  803ee4:	dc400d17 	ldw	r17,52(sp)
  803ee8:	18800115 	stw	r2,4(r3)
  803eec:	d8814917 	ldw	r2,1316(sp)
  803ef0:	94800044 	addi	r18,r18,1
  803ef4:	8c400044 	addi	r17,r17,1
  803ef8:	18800015 	stw	r2,0(r3)
  803efc:	008001c4 	movi	r2,7
  803f00:	dc800e15 	stw	r18,56(sp)
  803f04:	dc400d15 	stw	r17,52(sp)
  803f08:	1442240e 	bge	r2,r17,80479c <___vfprintf_internal_r+0x1420>
  803f0c:	d9014f17 	ldw	r4,1340(sp)
  803f10:	b00b883a 	mov	r5,r22
  803f14:	d9800c04 	addi	r6,sp,48
  803f18:	08033240 	call	803324 <__sprint_r>
  803f1c:	103ecf1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803f20:	dc800e17 	ldw	r18,56(sp)
  803f24:	d8c01904 	addi	r3,sp,100
  803f28:	003e9206 	br	803974 <___vfprintf_internal_r+0x5f8>
  803f2c:	d9014f17 	ldw	r4,1340(sp)
  803f30:	b00b883a 	mov	r5,r22
  803f34:	d9800c04 	addi	r6,sp,48
  803f38:	08033240 	call	803324 <__sprint_r>
  803f3c:	103ec026 	beq	r2,zero,803a40 <___vfprintf_internal_r+0x6c4>
  803f40:	003ec606 	br	803a5c <___vfprintf_internal_r+0x6e0>
  803f44:	d9014f17 	ldw	r4,1340(sp)
  803f48:	b00b883a 	mov	r5,r22
  803f4c:	d9800c04 	addi	r6,sp,48
  803f50:	d9c15115 	stw	r7,1348(sp)
  803f54:	08033240 	call	803324 <__sprint_r>
  803f58:	d9c15117 	ldw	r7,1348(sp)
  803f5c:	103ebf1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803f60:	dc800e17 	ldw	r18,56(sp)
  803f64:	dc400d17 	ldw	r17,52(sp)
  803f68:	dd401904 	addi	r21,sp,100
  803f6c:	003e7406 	br	803940 <___vfprintf_internal_r+0x5c4>
  803f70:	d9014f17 	ldw	r4,1340(sp)
  803f74:	b00b883a 	mov	r5,r22
  803f78:	d9800c04 	addi	r6,sp,48
  803f7c:	d9c15115 	stw	r7,1348(sp)
  803f80:	08033240 	call	803324 <__sprint_r>
  803f84:	d9c15117 	ldw	r7,1348(sp)
  803f88:	103eb41e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803f8c:	dd401904 	addi	r21,sp,100
  803f90:	003d6d06 	br	803548 <___vfprintf_internal_r+0x1cc>
  803f94:	d9014f17 	ldw	r4,1340(sp)
  803f98:	b00b883a 	mov	r5,r22
  803f9c:	d9800c04 	addi	r6,sp,48
  803fa0:	d9c15115 	stw	r7,1348(sp)
  803fa4:	08033240 	call	803324 <__sprint_r>
  803fa8:	d9c15117 	ldw	r7,1348(sp)
  803fac:	103eab1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803fb0:	dc800e17 	ldw	r18,56(sp)
  803fb4:	dc400d17 	ldw	r17,52(sp)
  803fb8:	dd401904 	addi	r21,sp,100
  803fbc:	003e3406 	br	803890 <___vfprintf_internal_r+0x514>
  803fc0:	d9014f17 	ldw	r4,1340(sp)
  803fc4:	b00b883a 	mov	r5,r22
  803fc8:	d9800c04 	addi	r6,sp,48
  803fcc:	d9c15115 	stw	r7,1348(sp)
  803fd0:	08033240 	call	803324 <__sprint_r>
  803fd4:	d9c15117 	ldw	r7,1348(sp)
  803fd8:	103ea01e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  803fdc:	dc800e17 	ldw	r18,56(sp)
  803fe0:	dc400d17 	ldw	r17,52(sp)
  803fe4:	dd401904 	addi	r21,sp,100
  803fe8:	003e1c06 	br	80385c <___vfprintf_internal_r+0x4e0>
  803fec:	d9014f17 	ldw	r4,1340(sp)
  803ff0:	b00b883a 	mov	r5,r22
  803ff4:	d9800c04 	addi	r6,sp,48
  803ff8:	d9c15115 	stw	r7,1348(sp)
  803ffc:	08033240 	call	803324 <__sprint_r>
  804000:	d9c15117 	ldw	r7,1348(sp)
  804004:	103e951e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804008:	dc800e17 	ldw	r18,56(sp)
  80400c:	dc400d17 	ldw	r17,52(sp)
  804010:	dd401904 	addi	r21,sp,100
  804014:	003e0406 	br	803828 <___vfprintf_internal_r+0x4ac>
  804018:	d9000517 	ldw	r4,20(sp)
  80401c:	0102580e 	bge	zero,r4,804980 <___vfprintf_internal_r+0x1604>
  804020:	d9814717 	ldw	r6,1308(sp)
  804024:	21807a16 	blt	r4,r6,804210 <___vfprintf_internal_r+0xe94>
  804028:	d8814117 	ldw	r2,1284(sp)
  80402c:	91a5883a 	add	r18,r18,r6
  804030:	8c400044 	addi	r17,r17,1
  804034:	a8800015 	stw	r2,0(r21)
  804038:	008001c4 	movi	r2,7
  80403c:	a9800115 	stw	r6,4(r21)
  804040:	dc800e15 	stw	r18,56(sp)
  804044:	dc400d15 	stw	r17,52(sp)
  804048:	1442fc16 	blt	r2,r17,804c3c <___vfprintf_internal_r+0x18c0>
  80404c:	a8c00204 	addi	r3,r21,8
  804050:	d9414717 	ldw	r5,1308(sp)
  804054:	2161c83a 	sub	r16,r4,r5
  804058:	043f9d0e 	bge	zero,r16,803ed0 <___vfprintf_internal_r+0xb54>
  80405c:	00800404 	movi	r2,16
  804060:	1402190e 	bge	r2,r16,8048c8 <___vfprintf_internal_r+0x154c>
  804064:	dc400d17 	ldw	r17,52(sp)
  804068:	1027883a 	mov	r19,r2
  80406c:	07002074 	movhi	fp,129
  804070:	e7135e84 	addi	fp,fp,19834
  804074:	050001c4 	movi	r20,7
  804078:	00000306 	br	804088 <___vfprintf_internal_r+0xd0c>
  80407c:	18c00204 	addi	r3,r3,8
  804080:	843ffc04 	addi	r16,r16,-16
  804084:	9c02130e 	bge	r19,r16,8048d4 <___vfprintf_internal_r+0x1558>
  804088:	94800404 	addi	r18,r18,16
  80408c:	8c400044 	addi	r17,r17,1
  804090:	1f000015 	stw	fp,0(r3)
  804094:	1cc00115 	stw	r19,4(r3)
  804098:	dc800e15 	stw	r18,56(sp)
  80409c:	dc400d15 	stw	r17,52(sp)
  8040a0:	a47ff60e 	bge	r20,r17,80407c <___vfprintf_internal_r+0xd00>
  8040a4:	d9014f17 	ldw	r4,1340(sp)
  8040a8:	b00b883a 	mov	r5,r22
  8040ac:	d9800c04 	addi	r6,sp,48
  8040b0:	08033240 	call	803324 <__sprint_r>
  8040b4:	103e691e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  8040b8:	dc800e17 	ldw	r18,56(sp)
  8040bc:	dc400d17 	ldw	r17,52(sp)
  8040c0:	d8c01904 	addi	r3,sp,100
  8040c4:	003fee06 	br	804080 <___vfprintf_internal_r+0xd04>
  8040c8:	d8814717 	ldw	r2,1308(sp)
  8040cc:	143fffc4 	addi	r16,r2,-1
  8040d0:	043e970e 	bge	zero,r16,803b30 <___vfprintf_internal_r+0x7b4>
  8040d4:	00800404 	movi	r2,16
  8040d8:	1400180e 	bge	r2,r16,80413c <___vfprintf_internal_r+0xdc0>
  8040dc:	1029883a 	mov	r20,r2
  8040e0:	07002074 	movhi	fp,129
  8040e4:	e7135e84 	addi	fp,fp,19834
  8040e8:	054001c4 	movi	r21,7
  8040ec:	00000306 	br	8040fc <___vfprintf_internal_r+0xd80>
  8040f0:	9cc00204 	addi	r19,r19,8
  8040f4:	843ffc04 	addi	r16,r16,-16
  8040f8:	a400120e 	bge	r20,r16,804144 <___vfprintf_internal_r+0xdc8>
  8040fc:	94800404 	addi	r18,r18,16
  804100:	8c400044 	addi	r17,r17,1
  804104:	9f000015 	stw	fp,0(r19)
  804108:	9d000115 	stw	r20,4(r19)
  80410c:	dc800e15 	stw	r18,56(sp)
  804110:	dc400d15 	stw	r17,52(sp)
  804114:	ac7ff60e 	bge	r21,r17,8040f0 <___vfprintf_internal_r+0xd74>
  804118:	d9014f17 	ldw	r4,1340(sp)
  80411c:	b00b883a 	mov	r5,r22
  804120:	d9800c04 	addi	r6,sp,48
  804124:	08033240 	call	803324 <__sprint_r>
  804128:	103e4c1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  80412c:	dc800e17 	ldw	r18,56(sp)
  804130:	dc400d17 	ldw	r17,52(sp)
  804134:	dcc01904 	addi	r19,sp,100
  804138:	003fee06 	br	8040f4 <___vfprintf_internal_r+0xd78>
  80413c:	07002074 	movhi	fp,129
  804140:	e7135e84 	addi	fp,fp,19834
  804144:	9425883a 	add	r18,r18,r16
  804148:	8c400044 	addi	r17,r17,1
  80414c:	008001c4 	movi	r2,7
  804150:	9f000015 	stw	fp,0(r19)
  804154:	9c000115 	stw	r16,4(r19)
  804158:	dc800e15 	stw	r18,56(sp)
  80415c:	dc400d15 	stw	r17,52(sp)
  804160:	147e720e 	bge	r2,r17,803b2c <___vfprintf_internal_r+0x7b0>
  804164:	d9014f17 	ldw	r4,1340(sp)
  804168:	b00b883a 	mov	r5,r22
  80416c:	d9800c04 	addi	r6,sp,48
  804170:	08033240 	call	803324 <__sprint_r>
  804174:	103e391e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804178:	dc800e17 	ldw	r18,56(sp)
  80417c:	dc400d17 	ldw	r17,52(sp)
  804180:	dcc01904 	addi	r19,sp,100
  804184:	003e6a06 	br	803b30 <___vfprintf_internal_r+0x7b4>
  804188:	d9014f17 	ldw	r4,1340(sp)
  80418c:	b00b883a 	mov	r5,r22
  804190:	d9800c04 	addi	r6,sp,48
  804194:	d9c15115 	stw	r7,1348(sp)
  804198:	08033240 	call	803324 <__sprint_r>
  80419c:	d9c15117 	ldw	r7,1348(sp)
  8041a0:	103e2e1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  8041a4:	dc800e17 	ldw	r18,56(sp)
  8041a8:	dc400d17 	ldw	r17,52(sp)
  8041ac:	dd401904 	addi	r21,sp,100
  8041b0:	003dba06 	br	80389c <___vfprintf_internal_r+0x520>
  8041b4:	d9014f17 	ldw	r4,1340(sp)
  8041b8:	b00b883a 	mov	r5,r22
  8041bc:	d9800c04 	addi	r6,sp,48
  8041c0:	08033240 	call	803324 <__sprint_r>
  8041c4:	103e251e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  8041c8:	dc800e17 	ldw	r18,56(sp)
  8041cc:	dc400d17 	ldw	r17,52(sp)
  8041d0:	dcc01904 	addi	r19,sp,100
  8041d4:	003e4206 	br	803ae0 <___vfprintf_internal_r+0x764>
  8041d8:	d9014f17 	ldw	r4,1340(sp)
  8041dc:	b00b883a 	mov	r5,r22
  8041e0:	d9800c04 	addi	r6,sp,48
  8041e4:	08033240 	call	803324 <__sprint_r>
  8041e8:	103e1c1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  8041ec:	dc800e17 	ldw	r18,56(sp)
  8041f0:	dc400d17 	ldw	r17,52(sp)
  8041f4:	d8c01904 	addi	r3,sp,100
  8041f8:	003e2e06 	br	803ab4 <___vfprintf_internal_r+0x738>
  8041fc:	d9414c17 	ldw	r5,1328(sp)
  804200:	2880004c 	andi	r2,r5,1
  804204:	1005003a 	cmpeq	r2,r2,zero
  804208:	103dda1e 	bne	r2,zero,803974 <___vfprintf_internal_r+0x5f8>
  80420c:	003e9f06 	br	803c8c <___vfprintf_internal_r+0x910>
  804210:	d8c14117 	ldw	r3,1284(sp)
  804214:	9125883a 	add	r18,r18,r4
  804218:	8c400044 	addi	r17,r17,1
  80421c:	008001c4 	movi	r2,7
  804220:	a8c00015 	stw	r3,0(r21)
  804224:	a9000115 	stw	r4,4(r21)
  804228:	dc800e15 	stw	r18,56(sp)
  80422c:	dc400d15 	stw	r17,52(sp)
  804230:	14426c16 	blt	r2,r17,804be4 <___vfprintf_internal_r+0x1868>
  804234:	a8c00204 	addi	r3,r21,8
  804238:	d9414917 	ldw	r5,1316(sp)
  80423c:	00800044 	movi	r2,1
  804240:	94800044 	addi	r18,r18,1
  804244:	8c400044 	addi	r17,r17,1
  804248:	18800115 	stw	r2,4(r3)
  80424c:	008001c4 	movi	r2,7
  804250:	19400015 	stw	r5,0(r3)
  804254:	dc800e15 	stw	r18,56(sp)
  804258:	dc400d15 	stw	r17,52(sp)
  80425c:	2021883a 	mov	r16,r4
  804260:	14425616 	blt	r2,r17,804bbc <___vfprintf_internal_r+0x1840>
  804264:	19400204 	addi	r5,r3,8
  804268:	d9814717 	ldw	r6,1308(sp)
  80426c:	8c400044 	addi	r17,r17,1
  804270:	dc400d15 	stw	r17,52(sp)
  804274:	3107c83a 	sub	r3,r6,r4
  804278:	d9014117 	ldw	r4,1284(sp)
  80427c:	90e5883a 	add	r18,r18,r3
  804280:	28c00115 	stw	r3,4(r5)
  804284:	8105883a 	add	r2,r16,r4
  804288:	28800015 	stw	r2,0(r5)
  80428c:	008001c4 	movi	r2,7
  804290:	dc800e15 	stw	r18,56(sp)
  804294:	147f1d16 	blt	r2,r17,803f0c <___vfprintf_internal_r+0xb90>
  804298:	28c00204 	addi	r3,r5,8
  80429c:	003db506 	br	803974 <___vfprintf_internal_r+0x5f8>
  8042a0:	3c000017 	ldw	r16,0(r7)
  8042a4:	3c400117 	ldw	r17,4(r7)
  8042a8:	39800204 	addi	r6,r7,8
  8042ac:	01000044 	movi	r4,1
  8042b0:	d9814015 	stw	r6,1280(sp)
  8042b4:	d8000405 	stb	zero,16(sp)
  8042b8:	003ebe06 	br	803db4 <___vfprintf_internal_r+0xa38>
  8042bc:	3c000017 	ldw	r16,0(r7)
  8042c0:	3c400117 	ldw	r17,4(r7)
  8042c4:	38800204 	addi	r2,r7,8
  8042c8:	d8814015 	stw	r2,1280(sp)
  8042cc:	003eb706 	br	803dac <___vfprintf_internal_r+0xa30>
  8042d0:	3c000017 	ldw	r16,0(r7)
  8042d4:	3c400117 	ldw	r17,4(r7)
  8042d8:	39000204 	addi	r4,r7,8
  8042dc:	d9014015 	stw	r4,1280(sp)
  8042e0:	0009883a 	mov	r4,zero
  8042e4:	d8000405 	stb	zero,16(sp)
  8042e8:	003eb206 	br	803db4 <___vfprintf_internal_r+0xa38>
  8042ec:	38c00017 	ldw	r3,0(r7)
  8042f0:	39c00104 	addi	r7,r7,4
  8042f4:	d8c14a15 	stw	r3,1320(sp)
  8042f8:	1800d70e 	bge	r3,zero,804658 <___vfprintf_internal_r+0x12dc>
  8042fc:	00c7c83a 	sub	r3,zero,r3
  804300:	d8c14a15 	stw	r3,1320(sp)
  804304:	d9014c17 	ldw	r4,1328(sp)
  804308:	b8c00007 	ldb	r3,0(r23)
  80430c:	21000114 	ori	r4,r4,4
  804310:	d9014c15 	stw	r4,1328(sp)
  804314:	003c9806 	br	803578 <___vfprintf_internal_r+0x1fc>
  804318:	d9814c17 	ldw	r6,1328(sp)
  80431c:	3080080c 	andi	r2,r6,32
  804320:	1001f626 	beq	r2,zero,804afc <___vfprintf_internal_r+0x1780>
  804324:	d9014b17 	ldw	r4,1324(sp)
  804328:	38800017 	ldw	r2,0(r7)
  80432c:	39c00104 	addi	r7,r7,4
  804330:	d9c14015 	stw	r7,1280(sp)
  804334:	2007d7fa 	srai	r3,r4,31
  804338:	d9c14017 	ldw	r7,1280(sp)
  80433c:	11000015 	stw	r4,0(r2)
  804340:	10c00115 	stw	r3,4(r2)
  804344:	003c6906 	br	8034ec <___vfprintf_internal_r+0x170>
  804348:	b8c00007 	ldb	r3,0(r23)
  80434c:	00801b04 	movi	r2,108
  804350:	18825526 	beq	r3,r2,804ca8 <___vfprintf_internal_r+0x192c>
  804354:	d9414c17 	ldw	r5,1328(sp)
  804358:	29400414 	ori	r5,r5,16
  80435c:	d9414c15 	stw	r5,1328(sp)
  804360:	003c8506 	br	803578 <___vfprintf_internal_r+0x1fc>
  804364:	d9814c17 	ldw	r6,1328(sp)
  804368:	b8c00007 	ldb	r3,0(r23)
  80436c:	31800814 	ori	r6,r6,32
  804370:	d9814c15 	stw	r6,1328(sp)
  804374:	003c8006 	br	803578 <___vfprintf_internal_r+0x1fc>
  804378:	d8814c17 	ldw	r2,1328(sp)
  80437c:	3c000017 	ldw	r16,0(r7)
  804380:	00c01e04 	movi	r3,120
  804384:	10800094 	ori	r2,r2,2
  804388:	d8814c15 	stw	r2,1328(sp)
  80438c:	39c00104 	addi	r7,r7,4
  804390:	01402074 	movhi	r5,129
  804394:	29534704 	addi	r5,r5,19740
  804398:	00800c04 	movi	r2,48
  80439c:	0023883a 	mov	r17,zero
  8043a0:	01000084 	movi	r4,2
  8043a4:	d9c14015 	stw	r7,1280(sp)
  8043a8:	d8c14d15 	stw	r3,1332(sp)
  8043ac:	d9414415 	stw	r5,1296(sp)
  8043b0:	d8800445 	stb	r2,17(sp)
  8043b4:	d8c00485 	stb	r3,18(sp)
  8043b8:	d8000405 	stb	zero,16(sp)
  8043bc:	003e7d06 	br	803db4 <___vfprintf_internal_r+0xa38>
  8043c0:	d8814c17 	ldw	r2,1328(sp)
  8043c4:	b8c00007 	ldb	r3,0(r23)
  8043c8:	10801014 	ori	r2,r2,64
  8043cc:	d8814c15 	stw	r2,1328(sp)
  8043d0:	003c6906 	br	803578 <___vfprintf_internal_r+0x1fc>
  8043d4:	d9414c17 	ldw	r5,1328(sp)
  8043d8:	2880020c 	andi	r2,r5,8
  8043dc:	1001e526 	beq	r2,zero,804b74 <___vfprintf_internal_r+0x17f8>
  8043e0:	39800017 	ldw	r6,0(r7)
  8043e4:	38800204 	addi	r2,r7,8
  8043e8:	d8814015 	stw	r2,1280(sp)
  8043ec:	d9814215 	stw	r6,1288(sp)
  8043f0:	39c00117 	ldw	r7,4(r7)
  8043f4:	d9c14315 	stw	r7,1292(sp)
  8043f8:	d9014217 	ldw	r4,1288(sp)
  8043fc:	d9414317 	ldw	r5,1292(sp)
  804400:	080a9b00 	call	80a9b0 <__isinfd>
  804404:	10021d26 	beq	r2,zero,804c7c <___vfprintf_internal_r+0x1900>
  804408:	d9014217 	ldw	r4,1288(sp)
  80440c:	d9414317 	ldw	r5,1292(sp)
  804410:	000d883a 	mov	r6,zero
  804414:	000f883a 	mov	r7,zero
  804418:	080fc5c0 	call	80fc5c <__ltdf2>
  80441c:	1002d016 	blt	r2,zero,804f60 <___vfprintf_internal_r+0x1be4>
  804420:	d9414d17 	ldw	r5,1332(sp)
  804424:	008011c4 	movi	r2,71
  804428:	11421016 	blt	r2,r5,804c6c <___vfprintf_internal_r+0x18f0>
  80442c:	01802074 	movhi	r6,129
  804430:	31934c04 	addi	r6,r6,19760
  804434:	d9814115 	stw	r6,1284(sp)
  804438:	d9014c17 	ldw	r4,1328(sp)
  80443c:	00c000c4 	movi	r3,3
  804440:	00bfdfc4 	movi	r2,-129
  804444:	2088703a 	and	r4,r4,r2
  804448:	180f883a 	mov	r7,r3
  80444c:	d8c14515 	stw	r3,1300(sp)
  804450:	d9014c15 	stw	r4,1328(sp)
  804454:	d8014615 	stw	zero,1304(sp)
  804458:	003e6a06 	br	803e04 <___vfprintf_internal_r+0xa88>
  80445c:	38800017 	ldw	r2,0(r7)
  804460:	00c00044 	movi	r3,1
  804464:	39c00104 	addi	r7,r7,4
  804468:	d9c14015 	stw	r7,1280(sp)
  80446c:	d9000f04 	addi	r4,sp,60
  804470:	180f883a 	mov	r7,r3
  804474:	d8c14515 	stw	r3,1300(sp)
  804478:	d9014115 	stw	r4,1284(sp)
  80447c:	d8800f05 	stb	r2,60(sp)
  804480:	d8000405 	stb	zero,16(sp)
  804484:	003cac06 	br	803738 <___vfprintf_internal_r+0x3bc>
  804488:	01402074 	movhi	r5,129
  80448c:	29535204 	addi	r5,r5,19784
  804490:	d9414415 	stw	r5,1296(sp)
  804494:	d9814c17 	ldw	r6,1328(sp)
  804498:	3080080c 	andi	r2,r6,32
  80449c:	1000ff26 	beq	r2,zero,80489c <___vfprintf_internal_r+0x1520>
  8044a0:	3c000017 	ldw	r16,0(r7)
  8044a4:	3c400117 	ldw	r17,4(r7)
  8044a8:	38800204 	addi	r2,r7,8
  8044ac:	d8814015 	stw	r2,1280(sp)
  8044b0:	d9414c17 	ldw	r5,1328(sp)
  8044b4:	2880004c 	andi	r2,r5,1
  8044b8:	1005003a 	cmpeq	r2,r2,zero
  8044bc:	1000b91e 	bne	r2,zero,8047a4 <___vfprintf_internal_r+0x1428>
  8044c0:	8444b03a 	or	r2,r16,r17
  8044c4:	1000b726 	beq	r2,zero,8047a4 <___vfprintf_internal_r+0x1428>
  8044c8:	d9814d17 	ldw	r6,1332(sp)
  8044cc:	29400094 	ori	r5,r5,2
  8044d0:	00800c04 	movi	r2,48
  8044d4:	01000084 	movi	r4,2
  8044d8:	d9414c15 	stw	r5,1328(sp)
  8044dc:	d8800445 	stb	r2,17(sp)
  8044e0:	d9800485 	stb	r6,18(sp)
  8044e4:	d8000405 	stb	zero,16(sp)
  8044e8:	003e3206 	br	803db4 <___vfprintf_internal_r+0xa38>
  8044ec:	01802074 	movhi	r6,129
  8044f0:	31934704 	addi	r6,r6,19740
  8044f4:	d9814415 	stw	r6,1296(sp)
  8044f8:	003fe606 	br	804494 <___vfprintf_internal_r+0x1118>
  8044fc:	00800ac4 	movi	r2,43
  804500:	d8800405 	stb	r2,16(sp)
  804504:	b8c00007 	ldb	r3,0(r23)
  804508:	003c1b06 	br	803578 <___vfprintf_internal_r+0x1fc>
  80450c:	d8814c17 	ldw	r2,1328(sp)
  804510:	b8c00007 	ldb	r3,0(r23)
  804514:	10800054 	ori	r2,r2,1
  804518:	d8814c15 	stw	r2,1328(sp)
  80451c:	003c1606 	br	803578 <___vfprintf_internal_r+0x1fc>
  804520:	d8800407 	ldb	r2,16(sp)
  804524:	10004c1e 	bne	r2,zero,804658 <___vfprintf_internal_r+0x12dc>
  804528:	00800804 	movi	r2,32
  80452c:	d8800405 	stb	r2,16(sp)
  804530:	b8c00007 	ldb	r3,0(r23)
  804534:	003c1006 	br	803578 <___vfprintf_internal_r+0x1fc>
  804538:	d9814c17 	ldw	r6,1328(sp)
  80453c:	b8c00007 	ldb	r3,0(r23)
  804540:	31800214 	ori	r6,r6,8
  804544:	d9814c15 	stw	r6,1328(sp)
  804548:	003c0b06 	br	803578 <___vfprintf_internal_r+0x1fc>
  80454c:	0009883a 	mov	r4,zero
  804550:	04000244 	movi	r16,9
  804554:	01400284 	movi	r5,10
  804558:	d9c15115 	stw	r7,1348(sp)
  80455c:	08102900 	call	810290 <__mulsi3>
  804560:	b9000007 	ldb	r4,0(r23)
  804564:	d8c14d17 	ldw	r3,1332(sp)
  804568:	bdc00044 	addi	r23,r23,1
  80456c:	d9014d15 	stw	r4,1332(sp)
  804570:	d9414d17 	ldw	r5,1332(sp)
  804574:	1885883a 	add	r2,r3,r2
  804578:	113ff404 	addi	r4,r2,-48
  80457c:	28bff404 	addi	r2,r5,-48
  804580:	d9c15117 	ldw	r7,1348(sp)
  804584:	80bff32e 	bgeu	r16,r2,804554 <___vfprintf_internal_r+0x11d8>
  804588:	d9014a15 	stw	r4,1320(sp)
  80458c:	003bfc06 	br	803580 <___vfprintf_internal_r+0x204>
  804590:	d8814c17 	ldw	r2,1328(sp)
  804594:	b8c00007 	ldb	r3,0(r23)
  804598:	10802014 	ori	r2,r2,128
  80459c:	d8814c15 	stw	r2,1328(sp)
  8045a0:	003bf506 	br	803578 <___vfprintf_internal_r+0x1fc>
  8045a4:	b8c00007 	ldb	r3,0(r23)
  8045a8:	00800a84 	movi	r2,42
  8045ac:	bdc00044 	addi	r23,r23,1
  8045b0:	18831826 	beq	r3,r2,805214 <___vfprintf_internal_r+0x1e98>
  8045b4:	d8c14d15 	stw	r3,1332(sp)
  8045b8:	18bff404 	addi	r2,r3,-48
  8045bc:	00c00244 	movi	r3,9
  8045c0:	18827b36 	bltu	r3,r2,804fb0 <___vfprintf_internal_r+0x1c34>
  8045c4:	1821883a 	mov	r16,r3
  8045c8:	0009883a 	mov	r4,zero
  8045cc:	01400284 	movi	r5,10
  8045d0:	d9c15115 	stw	r7,1348(sp)
  8045d4:	08102900 	call	810290 <__mulsi3>
  8045d8:	d9414d17 	ldw	r5,1332(sp)
  8045dc:	b9800007 	ldb	r6,0(r23)
  8045e0:	d9c15117 	ldw	r7,1348(sp)
  8045e4:	1145883a 	add	r2,r2,r5
  8045e8:	113ff404 	addi	r4,r2,-48
  8045ec:	30bff404 	addi	r2,r6,-48
  8045f0:	d9814d15 	stw	r6,1332(sp)
  8045f4:	bdc00044 	addi	r23,r23,1
  8045f8:	80bff42e 	bgeu	r16,r2,8045cc <___vfprintf_internal_r+0x1250>
  8045fc:	2027883a 	mov	r19,r4
  804600:	203bdf0e 	bge	r4,zero,803580 <___vfprintf_internal_r+0x204>
  804604:	04ffffc4 	movi	r19,-1
  804608:	003bdd06 	br	803580 <___vfprintf_internal_r+0x204>
  80460c:	d8000405 	stb	zero,16(sp)
  804610:	39800017 	ldw	r6,0(r7)
  804614:	39c00104 	addi	r7,r7,4
  804618:	d9c14015 	stw	r7,1280(sp)
  80461c:	d9814115 	stw	r6,1284(sp)
  804620:	3001c926 	beq	r6,zero,804d48 <___vfprintf_internal_r+0x19cc>
  804624:	98000e16 	blt	r19,zero,804660 <___vfprintf_internal_r+0x12e4>
  804628:	d9014117 	ldw	r4,1284(sp)
  80462c:	000b883a 	mov	r5,zero
  804630:	980d883a 	mov	r6,r19
  804634:	0808e680 	call	808e68 <memchr>
  804638:	10025926 	beq	r2,zero,804fa0 <___vfprintf_internal_r+0x1c24>
  80463c:	d8c14117 	ldw	r3,1284(sp)
  804640:	10cfc83a 	sub	r7,r2,r3
  804644:	99c19e16 	blt	r19,r7,804cc0 <___vfprintf_internal_r+0x1944>
  804648:	d9c14515 	stw	r7,1300(sp)
  80464c:	38000916 	blt	r7,zero,804674 <___vfprintf_internal_r+0x12f8>
  804650:	d8014615 	stw	zero,1304(sp)
  804654:	003deb06 	br	803e04 <___vfprintf_internal_r+0xa88>
  804658:	b8c00007 	ldb	r3,0(r23)
  80465c:	003bc606 	br	803578 <___vfprintf_internal_r+0x1fc>
  804660:	d9014117 	ldw	r4,1284(sp)
  804664:	08032b00 	call	8032b0 <strlen>
  804668:	d8814515 	stw	r2,1300(sp)
  80466c:	100f883a 	mov	r7,r2
  804670:	103ff70e 	bge	r2,zero,804650 <___vfprintf_internal_r+0x12d4>
  804674:	d8014515 	stw	zero,1300(sp)
  804678:	d8014615 	stw	zero,1304(sp)
  80467c:	003de106 	br	803e04 <___vfprintf_internal_r+0xa88>
  804680:	20c03fcc 	andi	r3,r4,255
  804684:	00800044 	movi	r2,1
  804688:	18802d26 	beq	r3,r2,804740 <___vfprintf_internal_r+0x13c4>
  80468c:	18800e36 	bltu	r3,r2,8046c8 <___vfprintf_internal_r+0x134c>
  804690:	00800084 	movi	r2,2
  804694:	1880fa26 	beq	r3,r2,804a80 <___vfprintf_internal_r+0x1704>
  804698:	01002074 	movhi	r4,129
  80469c:	21135704 	addi	r4,r4,19804
  8046a0:	08032b00 	call	8032b0 <strlen>
  8046a4:	100f883a 	mov	r7,r2
  8046a8:	dcc14515 	stw	r19,1300(sp)
  8046ac:	9880010e 	bge	r19,r2,8046b4 <___vfprintf_internal_r+0x1338>
  8046b0:	d8814515 	stw	r2,1300(sp)
  8046b4:	00802074 	movhi	r2,129
  8046b8:	10935704 	addi	r2,r2,19804
  8046bc:	dcc14615 	stw	r19,1304(sp)
  8046c0:	d8814115 	stw	r2,1284(sp)
  8046c4:	003dcf06 	br	803e04 <___vfprintf_internal_r+0xa88>
  8046c8:	d9401904 	addi	r5,sp,100
  8046cc:	dd000f04 	addi	r20,sp,60
  8046d0:	d9414115 	stw	r5,1284(sp)
  8046d4:	880a977a 	slli	r5,r17,29
  8046d8:	d9814117 	ldw	r6,1284(sp)
  8046dc:	8004d0fa 	srli	r2,r16,3
  8046e0:	8806d0fa 	srli	r3,r17,3
  8046e4:	810001cc 	andi	r4,r16,7
  8046e8:	2884b03a 	or	r2,r5,r2
  8046ec:	31bfffc4 	addi	r6,r6,-1
  8046f0:	21000c04 	addi	r4,r4,48
  8046f4:	d9814115 	stw	r6,1284(sp)
  8046f8:	10cab03a 	or	r5,r2,r3
  8046fc:	31000005 	stb	r4,0(r6)
  804700:	1021883a 	mov	r16,r2
  804704:	1823883a 	mov	r17,r3
  804708:	283ff21e 	bne	r5,zero,8046d4 <___vfprintf_internal_r+0x1358>
  80470c:	d8c14c17 	ldw	r3,1328(sp)
  804710:	1880004c 	andi	r2,r3,1
  804714:	1005003a 	cmpeq	r2,r2,zero
  804718:	103db31e 	bne	r2,zero,803de8 <___vfprintf_internal_r+0xa6c>
  80471c:	20803fcc 	andi	r2,r4,255
  804720:	1080201c 	xori	r2,r2,128
  804724:	10bfe004 	addi	r2,r2,-128
  804728:	00c00c04 	movi	r3,48
  80472c:	10fdae26 	beq	r2,r3,803de8 <___vfprintf_internal_r+0xa6c>
  804730:	31bfffc4 	addi	r6,r6,-1
  804734:	d9814115 	stw	r6,1284(sp)
  804738:	30c00005 	stb	r3,0(r6)
  80473c:	003daa06 	br	803de8 <___vfprintf_internal_r+0xa6c>
  804740:	88800068 	cmpgeui	r2,r17,1
  804744:	10002c1e 	bne	r2,zero,8047f8 <___vfprintf_internal_r+0x147c>
  804748:	8800021e 	bne	r17,zero,804754 <___vfprintf_internal_r+0x13d8>
  80474c:	00800244 	movi	r2,9
  804750:	14002936 	bltu	r2,r16,8047f8 <___vfprintf_internal_r+0x147c>
  804754:	d90018c4 	addi	r4,sp,99
  804758:	dd000f04 	addi	r20,sp,60
  80475c:	d9014115 	stw	r4,1284(sp)
  804760:	d9014117 	ldw	r4,1284(sp)
  804764:	80800c04 	addi	r2,r16,48
  804768:	20800005 	stb	r2,0(r4)
  80476c:	003d9e06 	br	803de8 <___vfprintf_internal_r+0xa6c>
  804770:	dc400d17 	ldw	r17,52(sp)
  804774:	07002074 	movhi	fp,129
  804778:	e7135e84 	addi	fp,fp,19834
  80477c:	9425883a 	add	r18,r18,r16
  804780:	8c400044 	addi	r17,r17,1
  804784:	008001c4 	movi	r2,7
  804788:	1f000015 	stw	fp,0(r3)
  80478c:	1c000115 	stw	r16,4(r3)
  804790:	dc800e15 	stw	r18,56(sp)
  804794:	dc400d15 	stw	r17,52(sp)
  804798:	147ddc16 	blt	r2,r17,803f0c <___vfprintf_internal_r+0xb90>
  80479c:	18c00204 	addi	r3,r3,8
  8047a0:	003c7406 	br	803974 <___vfprintf_internal_r+0x5f8>
  8047a4:	01000084 	movi	r4,2
  8047a8:	d8000405 	stb	zero,16(sp)
  8047ac:	003d8106 	br	803db4 <___vfprintf_internal_r+0xa38>
  8047b0:	d9814c17 	ldw	r6,1328(sp)
  8047b4:	30c4703a 	and	r2,r6,r3
  8047b8:	1005003a 	cmpeq	r2,r2,zero
  8047bc:	103cb326 	beq	r2,zero,803a8c <___vfprintf_internal_r+0x710>
  8047c0:	d9014117 	ldw	r4,1284(sp)
  8047c4:	94800044 	addi	r18,r18,1
  8047c8:	8c400044 	addi	r17,r17,1
  8047cc:	008001c4 	movi	r2,7
  8047d0:	a9000015 	stw	r4,0(r21)
  8047d4:	a8c00115 	stw	r3,4(r21)
  8047d8:	dc800e15 	stw	r18,56(sp)
  8047dc:	dc400d15 	stw	r17,52(sp)
  8047e0:	147e6016 	blt	r2,r17,804164 <___vfprintf_internal_r+0xde8>
  8047e4:	acc00204 	addi	r19,r21,8
  8047e8:	003cd106 	br	803b30 <___vfprintf_internal_r+0x7b4>
  8047ec:	07002074 	movhi	fp,129
  8047f0:	e7135e84 	addi	fp,fp,19834
  8047f4:	003c4906 	br	80391c <___vfprintf_internal_r+0x5a0>
  8047f8:	dd000f04 	addi	r20,sp,60
  8047fc:	dc801904 	addi	r18,sp,100
  804800:	8009883a 	mov	r4,r16
  804804:	880b883a 	mov	r5,r17
  804808:	01800284 	movi	r6,10
  80480c:	000f883a 	mov	r7,zero
  804810:	080e7540 	call	80e754 <__umoddi3>
  804814:	12000c04 	addi	r8,r2,48
  804818:	94bfffc4 	addi	r18,r18,-1
  80481c:	8009883a 	mov	r4,r16
  804820:	880b883a 	mov	r5,r17
  804824:	01800284 	movi	r6,10
  804828:	000f883a 	mov	r7,zero
  80482c:	92000005 	stb	r8,0(r18)
  804830:	080e0e80 	call	80e0e8 <__udivdi3>
  804834:	1009883a 	mov	r4,r2
  804838:	1021883a 	mov	r16,r2
  80483c:	18800068 	cmpgeui	r2,r3,1
  804840:	1823883a 	mov	r17,r3
  804844:	103fee1e 	bne	r2,zero,804800 <___vfprintf_internal_r+0x1484>
  804848:	1800021e 	bne	r3,zero,804854 <___vfprintf_internal_r+0x14d8>
  80484c:	00800244 	movi	r2,9
  804850:	113feb36 	bltu	r2,r4,804800 <___vfprintf_internal_r+0x1484>
  804854:	94bfffc4 	addi	r18,r18,-1
  804858:	dc814115 	stw	r18,1284(sp)
  80485c:	003fc006 	br	804760 <___vfprintf_internal_r+0x13e4>
  804860:	d9014c17 	ldw	r4,1328(sp)
  804864:	2080004c 	andi	r2,r4,1
  804868:	10009a1e 	bne	r2,zero,804ad4 <___vfprintf_internal_r+0x1758>
  80486c:	d9401904 	addi	r5,sp,100
  804870:	dd000f04 	addi	r20,sp,60
  804874:	d9414115 	stw	r5,1284(sp)
  804878:	003d5b06 	br	803de8 <___vfprintf_internal_r+0xa6c>
  80487c:	d9014f17 	ldw	r4,1340(sp)
  804880:	b00b883a 	mov	r5,r22
  804884:	d9800c04 	addi	r6,sp,48
  804888:	08033240 	call	803324 <__sprint_r>
  80488c:	103c731e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804890:	dc800e17 	ldw	r18,56(sp)
  804894:	d8c01904 	addi	r3,sp,100
  804898:	003cf906 	br	803c80 <___vfprintf_internal_r+0x904>
  80489c:	d8c14c17 	ldw	r3,1328(sp)
  8048a0:	1880040c 	andi	r2,r3,16
  8048a4:	1000711e 	bne	r2,zero,804a6c <___vfprintf_internal_r+0x16f0>
  8048a8:	d9014c17 	ldw	r4,1328(sp)
  8048ac:	2080100c 	andi	r2,r4,64
  8048b0:	10006e26 	beq	r2,zero,804a6c <___vfprintf_internal_r+0x16f0>
  8048b4:	3c00000b 	ldhu	r16,0(r7)
  8048b8:	0023883a 	mov	r17,zero
  8048bc:	39c00104 	addi	r7,r7,4
  8048c0:	d9c14015 	stw	r7,1280(sp)
  8048c4:	003efa06 	br	8044b0 <___vfprintf_internal_r+0x1134>
  8048c8:	dc400d17 	ldw	r17,52(sp)
  8048cc:	07002074 	movhi	fp,129
  8048d0:	e7135e84 	addi	fp,fp,19834
  8048d4:	9425883a 	add	r18,r18,r16
  8048d8:	8c400044 	addi	r17,r17,1
  8048dc:	008001c4 	movi	r2,7
  8048e0:	1f000015 	stw	fp,0(r3)
  8048e4:	1c000115 	stw	r16,4(r3)
  8048e8:	dc800e15 	stw	r18,56(sp)
  8048ec:	dc400d15 	stw	r17,52(sp)
  8048f0:	147d7016 	blt	r2,r17,803eb4 <___vfprintf_internal_r+0xb38>
  8048f4:	18c00204 	addi	r3,r3,8
  8048f8:	003d7506 	br	803ed0 <___vfprintf_internal_r+0xb54>
  8048fc:	dc800e17 	ldw	r18,56(sp)
  804900:	dc400d17 	ldw	r17,52(sp)
  804904:	07002074 	movhi	fp,129
  804908:	e7136284 	addi	fp,fp,19850
  80490c:	003bba06 	br	8037f8 <___vfprintf_internal_r+0x47c>
  804910:	d9014f17 	ldw	r4,1340(sp)
  804914:	b00b883a 	mov	r5,r22
  804918:	d9800c04 	addi	r6,sp,48
  80491c:	08033240 	call	803324 <__sprint_r>
  804920:	103c4e1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804924:	dc800e17 	ldw	r18,56(sp)
  804928:	d8c01904 	addi	r3,sp,100
  80492c:	003ce306 	br	803cbc <___vfprintf_internal_r+0x940>
  804930:	3c000017 	ldw	r16,0(r7)
  804934:	0009883a 	mov	r4,zero
  804938:	39c00104 	addi	r7,r7,4
  80493c:	0023883a 	mov	r17,zero
  804940:	d9c14015 	stw	r7,1280(sp)
  804944:	d8000405 	stb	zero,16(sp)
  804948:	003d1a06 	br	803db4 <___vfprintf_internal_r+0xa38>
  80494c:	38800017 	ldw	r2,0(r7)
  804950:	39c00104 	addi	r7,r7,4
  804954:	d9c14015 	stw	r7,1280(sp)
  804958:	1023d7fa 	srai	r17,r2,31
  80495c:	1021883a 	mov	r16,r2
  804960:	003d1206 	br	803dac <___vfprintf_internal_r+0xa30>
  804964:	3c000017 	ldw	r16,0(r7)
  804968:	01000044 	movi	r4,1
  80496c:	39c00104 	addi	r7,r7,4
  804970:	0023883a 	mov	r17,zero
  804974:	d9c14015 	stw	r7,1280(sp)
  804978:	d8000405 	stb	zero,16(sp)
  80497c:	003d0d06 	br	803db4 <___vfprintf_internal_r+0xa38>
  804980:	00802074 	movhi	r2,129
  804984:	10935e04 	addi	r2,r2,19832
  804988:	94800044 	addi	r18,r18,1
  80498c:	8c400044 	addi	r17,r17,1
  804990:	a8800015 	stw	r2,0(r21)
  804994:	00c00044 	movi	r3,1
  804998:	008001c4 	movi	r2,7
  80499c:	a8c00115 	stw	r3,4(r21)
  8049a0:	dc800e15 	stw	r18,56(sp)
  8049a4:	dc400d15 	stw	r17,52(sp)
  8049a8:	1440ca16 	blt	r2,r17,804cd4 <___vfprintf_internal_r+0x1958>
  8049ac:	a8c00204 	addi	r3,r21,8
  8049b0:	2000061e 	bne	r4,zero,8049cc <___vfprintf_internal_r+0x1650>
  8049b4:	d9414717 	ldw	r5,1308(sp)
  8049b8:	2800041e 	bne	r5,zero,8049cc <___vfprintf_internal_r+0x1650>
  8049bc:	d9814c17 	ldw	r6,1328(sp)
  8049c0:	3080004c 	andi	r2,r6,1
  8049c4:	1005003a 	cmpeq	r2,r2,zero
  8049c8:	103bea1e 	bne	r2,zero,803974 <___vfprintf_internal_r+0x5f8>
  8049cc:	00800044 	movi	r2,1
  8049d0:	dc400d17 	ldw	r17,52(sp)
  8049d4:	18800115 	stw	r2,4(r3)
  8049d8:	d8814917 	ldw	r2,1316(sp)
  8049dc:	94800044 	addi	r18,r18,1
  8049e0:	8c400044 	addi	r17,r17,1
  8049e4:	18800015 	stw	r2,0(r3)
  8049e8:	008001c4 	movi	r2,7
  8049ec:	dc800e15 	stw	r18,56(sp)
  8049f0:	dc400d15 	stw	r17,52(sp)
  8049f4:	1440ca16 	blt	r2,r17,804d20 <___vfprintf_internal_r+0x19a4>
  8049f8:	18c00204 	addi	r3,r3,8
  8049fc:	0121c83a 	sub	r16,zero,r4
  804a00:	0400500e 	bge	zero,r16,804b44 <___vfprintf_internal_r+0x17c8>
  804a04:	00800404 	movi	r2,16
  804a08:	1400800e 	bge	r2,r16,804c0c <___vfprintf_internal_r+0x1890>
  804a0c:	1027883a 	mov	r19,r2
  804a10:	07002074 	movhi	fp,129
  804a14:	e7135e84 	addi	fp,fp,19834
  804a18:	050001c4 	movi	r20,7
  804a1c:	00000306 	br	804a2c <___vfprintf_internal_r+0x16b0>
  804a20:	18c00204 	addi	r3,r3,8
  804a24:	843ffc04 	addi	r16,r16,-16
  804a28:	9c007a0e 	bge	r19,r16,804c14 <___vfprintf_internal_r+0x1898>
  804a2c:	94800404 	addi	r18,r18,16
  804a30:	8c400044 	addi	r17,r17,1
  804a34:	1f000015 	stw	fp,0(r3)
  804a38:	1cc00115 	stw	r19,4(r3)
  804a3c:	dc800e15 	stw	r18,56(sp)
  804a40:	dc400d15 	stw	r17,52(sp)
  804a44:	a47ff60e 	bge	r20,r17,804a20 <___vfprintf_internal_r+0x16a4>
  804a48:	d9014f17 	ldw	r4,1340(sp)
  804a4c:	b00b883a 	mov	r5,r22
  804a50:	d9800c04 	addi	r6,sp,48
  804a54:	08033240 	call	803324 <__sprint_r>
  804a58:	103c001e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804a5c:	dc800e17 	ldw	r18,56(sp)
  804a60:	dc400d17 	ldw	r17,52(sp)
  804a64:	d8c01904 	addi	r3,sp,100
  804a68:	003fee06 	br	804a24 <___vfprintf_internal_r+0x16a8>
  804a6c:	3c000017 	ldw	r16,0(r7)
  804a70:	0023883a 	mov	r17,zero
  804a74:	39c00104 	addi	r7,r7,4
  804a78:	d9c14015 	stw	r7,1280(sp)
  804a7c:	003e8c06 	br	8044b0 <___vfprintf_internal_r+0x1134>
  804a80:	d9401904 	addi	r5,sp,100
  804a84:	dd000f04 	addi	r20,sp,60
  804a88:	d9414115 	stw	r5,1284(sp)
  804a8c:	d9814417 	ldw	r6,1296(sp)
  804a90:	880a973a 	slli	r5,r17,28
  804a94:	8004d13a 	srli	r2,r16,4
  804a98:	810003cc 	andi	r4,r16,15
  804a9c:	3109883a 	add	r4,r6,r4
  804aa0:	2884b03a 	or	r2,r5,r2
  804aa4:	21400003 	ldbu	r5,0(r4)
  804aa8:	d9014117 	ldw	r4,1284(sp)
  804aac:	8806d13a 	srli	r3,r17,4
  804ab0:	1021883a 	mov	r16,r2
  804ab4:	213fffc4 	addi	r4,r4,-1
  804ab8:	d9014115 	stw	r4,1284(sp)
  804abc:	d9814117 	ldw	r6,1284(sp)
  804ac0:	10c8b03a 	or	r4,r2,r3
  804ac4:	1823883a 	mov	r17,r3
  804ac8:	31400005 	stb	r5,0(r6)
  804acc:	203fef1e 	bne	r4,zero,804a8c <___vfprintf_internal_r+0x1710>
  804ad0:	003cc506 	br	803de8 <___vfprintf_internal_r+0xa6c>
  804ad4:	00800c04 	movi	r2,48
  804ad8:	d98018c4 	addi	r6,sp,99
  804adc:	dd000f04 	addi	r20,sp,60
  804ae0:	d88018c5 	stb	r2,99(sp)
  804ae4:	d9814115 	stw	r6,1284(sp)
  804ae8:	003cbf06 	br	803de8 <___vfprintf_internal_r+0xa6c>
  804aec:	dc400d17 	ldw	r17,52(sp)
  804af0:	07002074 	movhi	fp,129
  804af4:	e7136284 	addi	fp,fp,19850
  804af8:	003bc106 	br	803a00 <___vfprintf_internal_r+0x684>
  804afc:	d9414c17 	ldw	r5,1328(sp)
  804b00:	2880040c 	andi	r2,r5,16
  804b04:	10007c26 	beq	r2,zero,804cf8 <___vfprintf_internal_r+0x197c>
  804b08:	38800017 	ldw	r2,0(r7)
  804b0c:	39c00104 	addi	r7,r7,4
  804b10:	d9c14015 	stw	r7,1280(sp)
  804b14:	d9814b17 	ldw	r6,1324(sp)
  804b18:	d9c14017 	ldw	r7,1280(sp)
  804b1c:	11800015 	stw	r6,0(r2)
  804b20:	003a7206 	br	8034ec <___vfprintf_internal_r+0x170>
  804b24:	d9014f17 	ldw	r4,1340(sp)
  804b28:	b00b883a 	mov	r5,r22
  804b2c:	d9800c04 	addi	r6,sp,48
  804b30:	08033240 	call	803324 <__sprint_r>
  804b34:	103bc91e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804b38:	dc800e17 	ldw	r18,56(sp)
  804b3c:	dc400d17 	ldw	r17,52(sp)
  804b40:	d8c01904 	addi	r3,sp,100
  804b44:	d9014717 	ldw	r4,1308(sp)
  804b48:	d9414117 	ldw	r5,1284(sp)
  804b4c:	8c400044 	addi	r17,r17,1
  804b50:	9125883a 	add	r18,r18,r4
  804b54:	008001c4 	movi	r2,7
  804b58:	19400015 	stw	r5,0(r3)
  804b5c:	19000115 	stw	r4,4(r3)
  804b60:	dc800e15 	stw	r18,56(sp)
  804b64:	dc400d15 	stw	r17,52(sp)
  804b68:	147ce816 	blt	r2,r17,803f0c <___vfprintf_internal_r+0xb90>
  804b6c:	18c00204 	addi	r3,r3,8
  804b70:	003b8006 	br	803974 <___vfprintf_internal_r+0x5f8>
  804b74:	38c00017 	ldw	r3,0(r7)
  804b78:	39000204 	addi	r4,r7,8
  804b7c:	d9014015 	stw	r4,1280(sp)
  804b80:	d8c14215 	stw	r3,1288(sp)
  804b84:	39c00117 	ldw	r7,4(r7)
  804b88:	d9c14315 	stw	r7,1292(sp)
  804b8c:	003e1a06 	br	8043f8 <___vfprintf_internal_r+0x107c>
  804b90:	0005883a 	mov	r2,zero
  804b94:	1409c83a 	sub	r4,r2,r16
  804b98:	1105803a 	cmpltu	r2,r2,r4
  804b9c:	044bc83a 	sub	r5,zero,r17
  804ba0:	2885c83a 	sub	r2,r5,r2
  804ba4:	2021883a 	mov	r16,r4
  804ba8:	1023883a 	mov	r17,r2
  804bac:	01000044 	movi	r4,1
  804bb0:	00800b44 	movi	r2,45
  804bb4:	d8800405 	stb	r2,16(sp)
  804bb8:	003c7e06 	br	803db4 <___vfprintf_internal_r+0xa38>
  804bbc:	d9014f17 	ldw	r4,1340(sp)
  804bc0:	b00b883a 	mov	r5,r22
  804bc4:	d9800c04 	addi	r6,sp,48
  804bc8:	08033240 	call	803324 <__sprint_r>
  804bcc:	103ba31e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804bd0:	dc800e17 	ldw	r18,56(sp)
  804bd4:	dc400d17 	ldw	r17,52(sp)
  804bd8:	d9000517 	ldw	r4,20(sp)
  804bdc:	d9401904 	addi	r5,sp,100
  804be0:	003da106 	br	804268 <___vfprintf_internal_r+0xeec>
  804be4:	d9014f17 	ldw	r4,1340(sp)
  804be8:	b00b883a 	mov	r5,r22
  804bec:	d9800c04 	addi	r6,sp,48
  804bf0:	08033240 	call	803324 <__sprint_r>
  804bf4:	103b991e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804bf8:	dc800e17 	ldw	r18,56(sp)
  804bfc:	dc400d17 	ldw	r17,52(sp)
  804c00:	d9000517 	ldw	r4,20(sp)
  804c04:	d8c01904 	addi	r3,sp,100
  804c08:	003d8b06 	br	804238 <___vfprintf_internal_r+0xebc>
  804c0c:	07002074 	movhi	fp,129
  804c10:	e7135e84 	addi	fp,fp,19834
  804c14:	9425883a 	add	r18,r18,r16
  804c18:	8c400044 	addi	r17,r17,1
  804c1c:	008001c4 	movi	r2,7
  804c20:	1f000015 	stw	fp,0(r3)
  804c24:	1c000115 	stw	r16,4(r3)
  804c28:	dc800e15 	stw	r18,56(sp)
  804c2c:	dc400d15 	stw	r17,52(sp)
  804c30:	147fbc16 	blt	r2,r17,804b24 <___vfprintf_internal_r+0x17a8>
  804c34:	18c00204 	addi	r3,r3,8
  804c38:	003fc206 	br	804b44 <___vfprintf_internal_r+0x17c8>
  804c3c:	d9014f17 	ldw	r4,1340(sp)
  804c40:	b00b883a 	mov	r5,r22
  804c44:	d9800c04 	addi	r6,sp,48
  804c48:	08033240 	call	803324 <__sprint_r>
  804c4c:	103b831e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804c50:	dc800e17 	ldw	r18,56(sp)
  804c54:	d9000517 	ldw	r4,20(sp)
  804c58:	d8c01904 	addi	r3,sp,100
  804c5c:	003cfc06 	br	804050 <___vfprintf_internal_r+0xcd4>
  804c60:	07002074 	movhi	fp,129
  804c64:	e7135e84 	addi	fp,fp,19834
  804c68:	003bde06 	br	803be4 <___vfprintf_internal_r+0x868>
  804c6c:	00802074 	movhi	r2,129
  804c70:	10934d04 	addi	r2,r2,19764
  804c74:	d8814115 	stw	r2,1284(sp)
  804c78:	003def06 	br	804438 <___vfprintf_internal_r+0x10bc>
  804c7c:	d9014217 	ldw	r4,1288(sp)
  804c80:	d9414317 	ldw	r5,1292(sp)
  804c84:	080a9f00 	call	80a9f0 <__isnand>
  804c88:	10003926 	beq	r2,zero,804d70 <___vfprintf_internal_r+0x19f4>
  804c8c:	d9414d17 	ldw	r5,1332(sp)
  804c90:	008011c4 	movi	r2,71
  804c94:	1140ce16 	blt	r2,r5,804fd0 <___vfprintf_internal_r+0x1c54>
  804c98:	01802074 	movhi	r6,129
  804c9c:	31934e04 	addi	r6,r6,19768
  804ca0:	d9814115 	stw	r6,1284(sp)
  804ca4:	003de406 	br	804438 <___vfprintf_internal_r+0x10bc>
  804ca8:	d9014c17 	ldw	r4,1328(sp)
  804cac:	bdc00044 	addi	r23,r23,1
  804cb0:	b8c00007 	ldb	r3,0(r23)
  804cb4:	21000814 	ori	r4,r4,32
  804cb8:	d9014c15 	stw	r4,1328(sp)
  804cbc:	003a2e06 	br	803578 <___vfprintf_internal_r+0x1fc>
  804cc0:	dcc14515 	stw	r19,1300(sp)
  804cc4:	98011016 	blt	r19,zero,805108 <___vfprintf_internal_r+0x1d8c>
  804cc8:	980f883a 	mov	r7,r19
  804ccc:	d8014615 	stw	zero,1304(sp)
  804cd0:	003c4c06 	br	803e04 <___vfprintf_internal_r+0xa88>
  804cd4:	d9014f17 	ldw	r4,1340(sp)
  804cd8:	b00b883a 	mov	r5,r22
  804cdc:	d9800c04 	addi	r6,sp,48
  804ce0:	08033240 	call	803324 <__sprint_r>
  804ce4:	103b5d1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804ce8:	dc800e17 	ldw	r18,56(sp)
  804cec:	d9000517 	ldw	r4,20(sp)
  804cf0:	d8c01904 	addi	r3,sp,100
  804cf4:	003f2e06 	br	8049b0 <___vfprintf_internal_r+0x1634>
  804cf8:	d8c14c17 	ldw	r3,1328(sp)
  804cfc:	1880100c 	andi	r2,r3,64
  804d00:	1000a026 	beq	r2,zero,804f84 <___vfprintf_internal_r+0x1c08>
  804d04:	38800017 	ldw	r2,0(r7)
  804d08:	39c00104 	addi	r7,r7,4
  804d0c:	d9c14015 	stw	r7,1280(sp)
  804d10:	d9014b17 	ldw	r4,1324(sp)
  804d14:	d9c14017 	ldw	r7,1280(sp)
  804d18:	1100000d 	sth	r4,0(r2)
  804d1c:	0039f306 	br	8034ec <___vfprintf_internal_r+0x170>
  804d20:	d9014f17 	ldw	r4,1340(sp)
  804d24:	b00b883a 	mov	r5,r22
  804d28:	d9800c04 	addi	r6,sp,48
  804d2c:	08033240 	call	803324 <__sprint_r>
  804d30:	103b4a1e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804d34:	dc800e17 	ldw	r18,56(sp)
  804d38:	dc400d17 	ldw	r17,52(sp)
  804d3c:	d9000517 	ldw	r4,20(sp)
  804d40:	d8c01904 	addi	r3,sp,100
  804d44:	003f2d06 	br	8049fc <___vfprintf_internal_r+0x1680>
  804d48:	00800184 	movi	r2,6
  804d4c:	14c09a36 	bltu	r2,r19,804fb8 <___vfprintf_internal_r+0x1c3c>
  804d50:	dcc14515 	stw	r19,1300(sp)
  804d54:	9800010e 	bge	r19,zero,804d5c <___vfprintf_internal_r+0x19e0>
  804d58:	d8014515 	stw	zero,1300(sp)
  804d5c:	00802074 	movhi	r2,129
  804d60:	10935004 	addi	r2,r2,19776
  804d64:	980f883a 	mov	r7,r19
  804d68:	d8814115 	stw	r2,1284(sp)
  804d6c:	003a7206 	br	803738 <___vfprintf_internal_r+0x3bc>
  804d70:	00bfffc4 	movi	r2,-1
  804d74:	9880e226 	beq	r19,r2,805100 <___vfprintf_internal_r+0x1d84>
  804d78:	d9414d17 	ldw	r5,1332(sp)
  804d7c:	008019c4 	movi	r2,103
  804d80:	2880dc26 	beq	r5,r2,8050f4 <___vfprintf_internal_r+0x1d78>
  804d84:	008011c4 	movi	r2,71
  804d88:	2880da26 	beq	r5,r2,8050f4 <___vfprintf_internal_r+0x1d78>
  804d8c:	d9414c17 	ldw	r5,1328(sp)
  804d90:	d9014317 	ldw	r4,1292(sp)
  804d94:	d9814217 	ldw	r6,1288(sp)
  804d98:	29404014 	ori	r5,r5,256
  804d9c:	d9414c15 	stw	r5,1328(sp)
  804da0:	2000cc16 	blt	r4,zero,8050d4 <___vfprintf_internal_r+0x1d58>
  804da4:	3021883a 	mov	r16,r6
  804da8:	2023883a 	mov	r17,r4
  804dac:	0039883a 	mov	fp,zero
  804db0:	d9414d17 	ldw	r5,1332(sp)
  804db4:	00801984 	movi	r2,102
  804db8:	2880b726 	beq	r5,r2,805098 <___vfprintf_internal_r+0x1d1c>
  804dbc:	00801184 	movi	r2,70
  804dc0:	2880b526 	beq	r5,r2,805098 <___vfprintf_internal_r+0x1d1c>
  804dc4:	00801944 	movi	r2,101
  804dc8:	2880c826 	beq	r5,r2,8050ec <___vfprintf_internal_r+0x1d70>
  804dcc:	00801144 	movi	r2,69
  804dd0:	2880c626 	beq	r5,r2,8050ec <___vfprintf_internal_r+0x1d70>
  804dd4:	9829883a 	mov	r20,r19
  804dd8:	d9014f17 	ldw	r4,1340(sp)
  804ddc:	d8800504 	addi	r2,sp,20
  804de0:	880d883a 	mov	r6,r17
  804de4:	d8800115 	stw	r2,4(sp)
  804de8:	d8c00604 	addi	r3,sp,24
  804dec:	d8800704 	addi	r2,sp,28
  804df0:	800b883a 	mov	r5,r16
  804df4:	01c00084 	movi	r7,2
  804df8:	d8c00215 	stw	r3,8(sp)
  804dfc:	d8800315 	stw	r2,12(sp)
  804e00:	dd000015 	stw	r20,0(sp)
  804e04:	0806e540 	call	806e54 <_dtoa_r>
  804e08:	d9814d17 	ldw	r6,1332(sp)
  804e0c:	d8814115 	stw	r2,1284(sp)
  804e10:	008019c4 	movi	r2,103
  804e14:	30809526 	beq	r6,r2,80506c <___vfprintf_internal_r+0x1cf0>
  804e18:	d8c14d17 	ldw	r3,1332(sp)
  804e1c:	008011c4 	movi	r2,71
  804e20:	18809226 	beq	r3,r2,80506c <___vfprintf_internal_r+0x1cf0>
  804e24:	d9414117 	ldw	r5,1284(sp)
  804e28:	d9814d17 	ldw	r6,1332(sp)
  804e2c:	00801984 	movi	r2,102
  804e30:	2d25883a 	add	r18,r5,r20
  804e34:	30808626 	beq	r6,r2,805050 <___vfprintf_internal_r+0x1cd4>
  804e38:	00801184 	movi	r2,70
  804e3c:	30808426 	beq	r6,r2,805050 <___vfprintf_internal_r+0x1cd4>
  804e40:	000d883a 	mov	r6,zero
  804e44:	000f883a 	mov	r7,zero
  804e48:	880b883a 	mov	r5,r17
  804e4c:	8009883a 	mov	r4,r16
  804e50:	080fa3c0 	call	80fa3c <__eqdf2>
  804e54:	1000751e 	bne	r2,zero,80502c <___vfprintf_internal_r+0x1cb0>
  804e58:	9005883a 	mov	r2,r18
  804e5c:	dc800715 	stw	r18,28(sp)
  804e60:	d9014117 	ldw	r4,1284(sp)
  804e64:	d9414d17 	ldw	r5,1332(sp)
  804e68:	00c019c4 	movi	r3,103
  804e6c:	1125c83a 	sub	r18,r2,r4
  804e70:	28c06826 	beq	r5,r3,805014 <___vfprintf_internal_r+0x1c98>
  804e74:	008011c4 	movi	r2,71
  804e78:	28806626 	beq	r5,r2,805014 <___vfprintf_internal_r+0x1c98>
  804e7c:	d9000517 	ldw	r4,20(sp)
  804e80:	d8c14d17 	ldw	r3,1332(sp)
  804e84:	00801944 	movi	r2,101
  804e88:	10c05516 	blt	r2,r3,804fe0 <___vfprintf_internal_r+0x1c64>
  804e8c:	213fffc4 	addi	r4,r4,-1
  804e90:	d9000515 	stw	r4,20(sp)
  804e94:	d8c00805 	stb	r3,32(sp)
  804e98:	2021883a 	mov	r16,r4
  804e9c:	2000c116 	blt	r4,zero,8051a4 <___vfprintf_internal_r+0x1e28>
  804ea0:	00800ac4 	movi	r2,43
  804ea4:	d8800845 	stb	r2,33(sp)
  804ea8:	00800244 	movi	r2,9
  804eac:	1400af0e 	bge	r2,r16,80516c <___vfprintf_internal_r+0x1df0>
  804eb0:	1027883a 	mov	r19,r2
  804eb4:	dc400b84 	addi	r17,sp,46
  804eb8:	8009883a 	mov	r4,r16
  804ebc:	01400284 	movi	r5,10
  804ec0:	08102200 	call	810220 <__modsi3>
  804ec4:	10800c04 	addi	r2,r2,48
  804ec8:	8c7fffc4 	addi	r17,r17,-1
  804ecc:	8009883a 	mov	r4,r16
  804ed0:	01400284 	movi	r5,10
  804ed4:	88800005 	stb	r2,0(r17)
  804ed8:	08101c00 	call	8101c0 <__divsi3>
  804edc:	1021883a 	mov	r16,r2
  804ee0:	98bff516 	blt	r19,r2,804eb8 <___vfprintf_internal_r+0x1b3c>
  804ee4:	10c00c04 	addi	r3,r2,48
  804ee8:	d88009c4 	addi	r2,sp,39
  804eec:	108001c4 	addi	r2,r2,7
  804ef0:	897fffc4 	addi	r5,r17,-1
  804ef4:	88ffffc5 	stb	r3,-1(r17)
  804ef8:	2880a72e 	bgeu	r5,r2,805198 <___vfprintf_internal_r+0x1e1c>
  804efc:	1009883a 	mov	r4,r2
  804f00:	d9800804 	addi	r6,sp,32
  804f04:	d8c00884 	addi	r3,sp,34
  804f08:	28800003 	ldbu	r2,0(r5)
  804f0c:	29400044 	addi	r5,r5,1
  804f10:	18800005 	stb	r2,0(r3)
  804f14:	18c00044 	addi	r3,r3,1
  804f18:	293ffb36 	bltu	r5,r4,804f08 <___vfprintf_internal_r+0x1b8c>
  804f1c:	1987c83a 	sub	r3,r3,r6
  804f20:	00800044 	movi	r2,1
  804f24:	d8c14815 	stw	r3,1312(sp)
  804f28:	90cf883a 	add	r7,r18,r3
  804f2c:	1480960e 	bge	r2,r18,805188 <___vfprintf_internal_r+0x1e0c>
  804f30:	39c00044 	addi	r7,r7,1
  804f34:	d9c14515 	stw	r7,1300(sp)
  804f38:	38003416 	blt	r7,zero,80500c <___vfprintf_internal_r+0x1c90>
  804f3c:	e0803fcc 	andi	r2,fp,255
  804f40:	1080201c 	xori	r2,r2,128
  804f44:	10bfe004 	addi	r2,r2,-128
  804f48:	10004e26 	beq	r2,zero,805084 <___vfprintf_internal_r+0x1d08>
  804f4c:	00800b44 	movi	r2,45
  804f50:	dc814715 	stw	r18,1308(sp)
  804f54:	d8014615 	stw	zero,1304(sp)
  804f58:	d8800405 	stb	r2,16(sp)
  804f5c:	003bab06 	br	803e0c <___vfprintf_internal_r+0xa90>
  804f60:	00800b44 	movi	r2,45
  804f64:	d8800405 	stb	r2,16(sp)
  804f68:	003d2d06 	br	804420 <___vfprintf_internal_r+0x10a4>
  804f6c:	d9014f17 	ldw	r4,1340(sp)
  804f70:	b00b883a 	mov	r5,r22
  804f74:	d9800c04 	addi	r6,sp,48
  804f78:	08033240 	call	803324 <__sprint_r>
  804f7c:	103ab71e 	bne	r2,zero,803a5c <___vfprintf_internal_r+0x6e0>
  804f80:	003ab506 	br	803a58 <___vfprintf_internal_r+0x6dc>
  804f84:	38800017 	ldw	r2,0(r7)
  804f88:	39c00104 	addi	r7,r7,4
  804f8c:	d9c14015 	stw	r7,1280(sp)
  804f90:	d9414b17 	ldw	r5,1324(sp)
  804f94:	d9c14017 	ldw	r7,1280(sp)
  804f98:	11400015 	stw	r5,0(r2)
  804f9c:	00395306 	br	8034ec <___vfprintf_internal_r+0x170>
  804fa0:	980f883a 	mov	r7,r19
  804fa4:	dcc14515 	stw	r19,1300(sp)
  804fa8:	d8014615 	stw	zero,1304(sp)
  804fac:	003b9506 	br	803e04 <___vfprintf_internal_r+0xa88>
  804fb0:	0027883a 	mov	r19,zero
  804fb4:	00397206 	br	803580 <___vfprintf_internal_r+0x204>
  804fb8:	00c02074 	movhi	r3,129
  804fbc:	18d35004 	addi	r3,r3,19776
  804fc0:	100f883a 	mov	r7,r2
  804fc4:	d8814515 	stw	r2,1300(sp)
  804fc8:	d8c14115 	stw	r3,1284(sp)
  804fcc:	0039da06 	br	803738 <___vfprintf_internal_r+0x3bc>
  804fd0:	00802074 	movhi	r2,129
  804fd4:	10934f04 	addi	r2,r2,19772
  804fd8:	d8814115 	stw	r2,1284(sp)
  804fdc:	003d1606 	br	804438 <___vfprintf_internal_r+0x10bc>
  804fe0:	d9414d17 	ldw	r5,1332(sp)
  804fe4:	00801984 	movi	r2,102
  804fe8:	28804926 	beq	r5,r2,805110 <___vfprintf_internal_r+0x1d94>
  804fec:	200f883a 	mov	r7,r4
  804ff0:	24805716 	blt	r4,r18,805150 <___vfprintf_internal_r+0x1dd4>
  804ff4:	d9414c17 	ldw	r5,1328(sp)
  804ff8:	2880004c 	andi	r2,r5,1
  804ffc:	10000126 	beq	r2,zero,805004 <___vfprintf_internal_r+0x1c88>
  805000:	21c00044 	addi	r7,r4,1
  805004:	d9c14515 	stw	r7,1300(sp)
  805008:	383fcc0e 	bge	r7,zero,804f3c <___vfprintf_internal_r+0x1bc0>
  80500c:	d8014515 	stw	zero,1300(sp)
  805010:	003fca06 	br	804f3c <___vfprintf_internal_r+0x1bc0>
  805014:	d9000517 	ldw	r4,20(sp)
  805018:	00bfff04 	movi	r2,-4
  80501c:	1100480e 	bge	r2,r4,805140 <___vfprintf_internal_r+0x1dc4>
  805020:	99004716 	blt	r19,r4,805140 <___vfprintf_internal_r+0x1dc4>
  805024:	d8c14d15 	stw	r3,1332(sp)
  805028:	003ff006 	br	804fec <___vfprintf_internal_r+0x1c70>
  80502c:	d8800717 	ldw	r2,28(sp)
  805030:	14bf8b2e 	bgeu	r2,r18,804e60 <___vfprintf_internal_r+0x1ae4>
  805034:	9007883a 	mov	r3,r18
  805038:	01000c04 	movi	r4,48
  80503c:	11000005 	stb	r4,0(r2)
  805040:	10800044 	addi	r2,r2,1
  805044:	d8800715 	stw	r2,28(sp)
  805048:	18bffc1e 	bne	r3,r2,80503c <___vfprintf_internal_r+0x1cc0>
  80504c:	003f8406 	br	804e60 <___vfprintf_internal_r+0x1ae4>
  805050:	d8814117 	ldw	r2,1284(sp)
  805054:	10c00007 	ldb	r3,0(r2)
  805058:	00800c04 	movi	r2,48
  80505c:	18805b26 	beq	r3,r2,8051cc <___vfprintf_internal_r+0x1e50>
  805060:	d9000517 	ldw	r4,20(sp)
  805064:	9125883a 	add	r18,r18,r4
  805068:	003f7506 	br	804e40 <___vfprintf_internal_r+0x1ac4>
  80506c:	d9014c17 	ldw	r4,1328(sp)
  805070:	2080004c 	andi	r2,r4,1
  805074:	1005003a 	cmpeq	r2,r2,zero
  805078:	103f6a26 	beq	r2,zero,804e24 <___vfprintf_internal_r+0x1aa8>
  80507c:	d8800717 	ldw	r2,28(sp)
  805080:	003f7706 	br	804e60 <___vfprintf_internal_r+0x1ae4>
  805084:	d9c14515 	stw	r7,1300(sp)
  805088:	38004d16 	blt	r7,zero,8051c0 <___vfprintf_internal_r+0x1e44>
  80508c:	dc814715 	stw	r18,1308(sp)
  805090:	d8014615 	stw	zero,1304(sp)
  805094:	003b5b06 	br	803e04 <___vfprintf_internal_r+0xa88>
  805098:	d9014f17 	ldw	r4,1340(sp)
  80509c:	d8800504 	addi	r2,sp,20
  8050a0:	d8800115 	stw	r2,4(sp)
  8050a4:	d8c00604 	addi	r3,sp,24
  8050a8:	d8800704 	addi	r2,sp,28
  8050ac:	800b883a 	mov	r5,r16
  8050b0:	880d883a 	mov	r6,r17
  8050b4:	01c000c4 	movi	r7,3
  8050b8:	d8c00215 	stw	r3,8(sp)
  8050bc:	d8800315 	stw	r2,12(sp)
  8050c0:	dcc00015 	stw	r19,0(sp)
  8050c4:	9829883a 	mov	r20,r19
  8050c8:	0806e540 	call	806e54 <_dtoa_r>
  8050cc:	d8814115 	stw	r2,1284(sp)
  8050d0:	003f5106 	br	804e18 <___vfprintf_internal_r+0x1a9c>
  8050d4:	d8c14217 	ldw	r3,1288(sp)
  8050d8:	d9014317 	ldw	r4,1292(sp)
  8050dc:	07000b44 	movi	fp,45
  8050e0:	1821883a 	mov	r16,r3
  8050e4:	2460003c 	xorhi	r17,r4,32768
  8050e8:	003f3106 	br	804db0 <___vfprintf_internal_r+0x1a34>
  8050ec:	9d000044 	addi	r20,r19,1
  8050f0:	003f3906 	br	804dd8 <___vfprintf_internal_r+0x1a5c>
  8050f4:	983f251e 	bne	r19,zero,804d8c <___vfprintf_internal_r+0x1a10>
  8050f8:	04c00044 	movi	r19,1
  8050fc:	003f2306 	br	804d8c <___vfprintf_internal_r+0x1a10>
  805100:	04c00184 	movi	r19,6
  805104:	003f2106 	br	804d8c <___vfprintf_internal_r+0x1a10>
  805108:	d8014515 	stw	zero,1300(sp)
  80510c:	003eee06 	br	804cc8 <___vfprintf_internal_r+0x194c>
  805110:	200f883a 	mov	r7,r4
  805114:	0100370e 	bge	zero,r4,8051f4 <___vfprintf_internal_r+0x1e78>
  805118:	9800031e 	bne	r19,zero,805128 <___vfprintf_internal_r+0x1dac>
  80511c:	d9814c17 	ldw	r6,1328(sp)
  805120:	3080004c 	andi	r2,r6,1
  805124:	103fb726 	beq	r2,zero,805004 <___vfprintf_internal_r+0x1c88>
  805128:	20800044 	addi	r2,r4,1
  80512c:	98a7883a 	add	r19,r19,r2
  805130:	dcc14515 	stw	r19,1300(sp)
  805134:	980f883a 	mov	r7,r19
  805138:	983f800e 	bge	r19,zero,804f3c <___vfprintf_internal_r+0x1bc0>
  80513c:	003fb306 	br	80500c <___vfprintf_internal_r+0x1c90>
  805140:	d9814d17 	ldw	r6,1332(sp)
  805144:	31bfff84 	addi	r6,r6,-2
  805148:	d9814d15 	stw	r6,1332(sp)
  80514c:	003f4c06 	br	804e80 <___vfprintf_internal_r+0x1b04>
  805150:	0100180e 	bge	zero,r4,8051b4 <___vfprintf_internal_r+0x1e38>
  805154:	00800044 	movi	r2,1
  805158:	1485883a 	add	r2,r2,r18
  80515c:	d8814515 	stw	r2,1300(sp)
  805160:	100f883a 	mov	r7,r2
  805164:	103f750e 	bge	r2,zero,804f3c <___vfprintf_internal_r+0x1bc0>
  805168:	003fa806 	br	80500c <___vfprintf_internal_r+0x1c90>
  80516c:	80c00c04 	addi	r3,r16,48
  805170:	00800c04 	movi	r2,48
  805174:	d8c008c5 	stb	r3,35(sp)
  805178:	d9800804 	addi	r6,sp,32
  80517c:	d8c00904 	addi	r3,sp,36
  805180:	d8800885 	stb	r2,34(sp)
  805184:	003f6506 	br	804f1c <___vfprintf_internal_r+0x1ba0>
  805188:	d9014c17 	ldw	r4,1328(sp)
  80518c:	2084703a 	and	r2,r4,r2
  805190:	103f9c26 	beq	r2,zero,805004 <___vfprintf_internal_r+0x1c88>
  805194:	003f6606 	br	804f30 <___vfprintf_internal_r+0x1bb4>
  805198:	d9800804 	addi	r6,sp,32
  80519c:	d8c00884 	addi	r3,sp,34
  8051a0:	003f5e06 	br	804f1c <___vfprintf_internal_r+0x1ba0>
  8051a4:	00800b44 	movi	r2,45
  8051a8:	0121c83a 	sub	r16,zero,r4
  8051ac:	d8800845 	stb	r2,33(sp)
  8051b0:	003f3d06 	br	804ea8 <___vfprintf_internal_r+0x1b2c>
  8051b4:	00800084 	movi	r2,2
  8051b8:	1105c83a 	sub	r2,r2,r4
  8051bc:	003fe606 	br	805158 <___vfprintf_internal_r+0x1ddc>
  8051c0:	d8014515 	stw	zero,1300(sp)
  8051c4:	dc814715 	stw	r18,1308(sp)
  8051c8:	003fb106 	br	805090 <___vfprintf_internal_r+0x1d14>
  8051cc:	000d883a 	mov	r6,zero
  8051d0:	000f883a 	mov	r7,zero
  8051d4:	8009883a 	mov	r4,r16
  8051d8:	880b883a 	mov	r5,r17
  8051dc:	080fac40 	call	80fac4 <__nedf2>
  8051e0:	103f9f26 	beq	r2,zero,805060 <___vfprintf_internal_r+0x1ce4>
  8051e4:	00800044 	movi	r2,1
  8051e8:	1509c83a 	sub	r4,r2,r20
  8051ec:	d9000515 	stw	r4,20(sp)
  8051f0:	003f9b06 	br	805060 <___vfprintf_internal_r+0x1ce4>
  8051f4:	98000d1e 	bne	r19,zero,80522c <___vfprintf_internal_r+0x1eb0>
  8051f8:	d8c14c17 	ldw	r3,1328(sp)
  8051fc:	1880004c 	andi	r2,r3,1
  805200:	10000a1e 	bne	r2,zero,80522c <___vfprintf_internal_r+0x1eb0>
  805204:	01000044 	movi	r4,1
  805208:	200f883a 	mov	r7,r4
  80520c:	d9014515 	stw	r4,1300(sp)
  805210:	003f4a06 	br	804f3c <___vfprintf_internal_r+0x1bc0>
  805214:	3cc00017 	ldw	r19,0(r7)
  805218:	39c00104 	addi	r7,r7,4
  80521c:	983d0e0e 	bge	r19,zero,804658 <___vfprintf_internal_r+0x12dc>
  805220:	b8c00007 	ldb	r3,0(r23)
  805224:	04ffffc4 	movi	r19,-1
  805228:	0038d306 	br	803578 <___vfprintf_internal_r+0x1fc>
  80522c:	9cc00084 	addi	r19,r19,2
  805230:	dcc14515 	stw	r19,1300(sp)
  805234:	980f883a 	mov	r7,r19
  805238:	983f400e 	bge	r19,zero,804f3c <___vfprintf_internal_r+0x1bc0>
  80523c:	003f7306 	br	80500c <___vfprintf_internal_r+0x1c90>

00805240 <__vfprintf_internal>:
  805240:	00802074 	movhi	r2,129
  805244:	109bb804 	addi	r2,r2,28384
  805248:	2013883a 	mov	r9,r4
  80524c:	11000017 	ldw	r4,0(r2)
  805250:	2805883a 	mov	r2,r5
  805254:	300f883a 	mov	r7,r6
  805258:	480b883a 	mov	r5,r9
  80525c:	100d883a 	mov	r6,r2
  805260:	080337c1 	jmpi	80337c <___vfprintf_internal_r>

00805264 <__svfscanf_r>:
  805264:	deff4e04 	addi	sp,sp,-712
  805268:	dd80ae15 	stw	r22,696(sp)
  80526c:	dd00ac15 	stw	r20,688(sp)
  805270:	dc40a915 	stw	r17,676(sp)
  805274:	dc00a815 	stw	r16,672(sp)
  805278:	dfc0b115 	stw	ra,708(sp)
  80527c:	df00b015 	stw	fp,704(sp)
  805280:	ddc0af15 	stw	r23,700(sp)
  805284:	dd40ad15 	stw	r21,692(sp)
  805288:	dcc0ab15 	stw	r19,684(sp)
  80528c:	dc80aa15 	stw	r18,680(sp)
  805290:	202d883a 	mov	r22,r4
  805294:	2821883a 	mov	r16,r5
  805298:	d9c0a415 	stw	r7,656(sp)
  80529c:	3029883a 	mov	r20,r6
  8052a0:	d800a215 	stw	zero,648(sp)
  8052a4:	0023883a 	mov	r17,zero
  8052a8:	d800a115 	stw	zero,644(sp)
  8052ac:	d800a015 	stw	zero,640(sp)
  8052b0:	a1000007 	ldb	r4,0(r20)
  8052b4:	d9000115 	stw	r4,4(sp)
  8052b8:	20001f26 	beq	r4,zero,805338 <__svfscanf_r+0xd4>
  8052bc:	04c02074 	movhi	r19,129
  8052c0:	9cdbbc04 	addi	r19,r19,28400
  8052c4:	9c800017 	ldw	r18,0(r19)
  8052c8:	a5000044 	addi	r20,r20,1
  8052cc:	9107883a 	add	r3,r18,r4
  8052d0:	18800003 	ldbu	r2,0(r3)
  8052d4:	1080020c 	andi	r2,r2,8
  8052d8:	10002426 	beq	r2,zero,80536c <__svfscanf_r+0x108>
  8052dc:	80c00117 	ldw	r3,4(r16)
  8052e0:	00c00e0e 	bge	zero,r3,80531c <__svfscanf_r+0xb8>
  8052e4:	81400017 	ldw	r5,0(r16)
  8052e8:	98800017 	ldw	r2,0(r19)
  8052ec:	28c00003 	ldbu	r3,0(r5)
  8052f0:	1887883a 	add	r3,r3,r2
  8052f4:	19000003 	ldbu	r4,0(r3)
  8052f8:	2100020c 	andi	r4,r4,8
  8052fc:	203fec26 	beq	r4,zero,8052b0 <__svfscanf_r+0x4c>
  805300:	80c00117 	ldw	r3,4(r16)
  805304:	29800044 	addi	r6,r5,1
  805308:	8c400044 	addi	r17,r17,1
  80530c:	18ffffc4 	addi	r3,r3,-1
  805310:	81800015 	stw	r6,0(r16)
  805314:	80c00115 	stw	r3,4(r16)
  805318:	00fff216 	blt	zero,r3,8052e4 <__svfscanf_r+0x80>
  80531c:	b009883a 	mov	r4,r22
  805320:	800b883a 	mov	r5,r16
  805324:	0802da00 	call	802da0 <__srefill_r>
  805328:	103fee26 	beq	r2,zero,8052e4 <__svfscanf_r+0x80>
  80532c:	a1000007 	ldb	r4,0(r20)
  805330:	d9000115 	stw	r4,4(sp)
  805334:	203fe11e 	bne	r4,zero,8052bc <__svfscanf_r+0x58>
  805338:	d880a217 	ldw	r2,648(sp)
  80533c:	dfc0b117 	ldw	ra,708(sp)
  805340:	df00b017 	ldw	fp,704(sp)
  805344:	ddc0af17 	ldw	r23,700(sp)
  805348:	dd80ae17 	ldw	r22,696(sp)
  80534c:	dd40ad17 	ldw	r21,692(sp)
  805350:	dd00ac17 	ldw	r20,688(sp)
  805354:	dcc0ab17 	ldw	r19,684(sp)
  805358:	dc80aa17 	ldw	r18,680(sp)
  80535c:	dc40a917 	ldw	r17,676(sp)
  805360:	dc00a817 	ldw	r16,672(sp)
  805364:	dec0b204 	addi	sp,sp,712
  805368:	f800283a 	ret
  80536c:	00800944 	movi	r2,37
  805370:	20801626 	beq	r4,r2,8053cc <__svfscanf_r+0x168>
  805374:	80800117 	ldw	r2,4(r16)
  805378:	00800b0e 	bge	zero,r2,8053a8 <__svfscanf_r+0x144>
  80537c:	81000017 	ldw	r4,0(r16)
  805380:	a0ffffc7 	ldb	r3,-1(r20)
  805384:	20800003 	ldbu	r2,0(r4)
  805388:	10ffeb1e 	bne	r2,r3,805338 <__svfscanf_r+0xd4>
  80538c:	80c00117 	ldw	r3,4(r16)
  805390:	21800044 	addi	r6,r4,1
  805394:	8c400044 	addi	r17,r17,1
  805398:	18ffffc4 	addi	r3,r3,-1
  80539c:	80c00115 	stw	r3,4(r16)
  8053a0:	81800015 	stw	r6,0(r16)
  8053a4:	003fc206 	br	8052b0 <__svfscanf_r+0x4c>
  8053a8:	b009883a 	mov	r4,r22
  8053ac:	800b883a 	mov	r5,r16
  8053b0:	0802da00 	call	802da0 <__srefill_r>
  8053b4:	103ff126 	beq	r2,zero,80537c <__svfscanf_r+0x118>
  8053b8:	d900a217 	ldw	r4,648(sp)
  8053bc:	2004981e 	bne	r4,zero,806620 <__svfscanf_r+0x13bc>
  8053c0:	00bfffc4 	movi	r2,-1
  8053c4:	d880a215 	stw	r2,648(sp)
  8053c8:	003fdb06 	br	805338 <__svfscanf_r+0xd4>
  8053cc:	d800a315 	stw	zero,652(sp)
  8053d0:	002b883a 	mov	r21,zero
  8053d4:	a0c00003 	ldbu	r3,0(r20)
  8053d8:	00801e04 	movi	r2,120
  8053dc:	a5000044 	addi	r20,r20,1
  8053e0:	1dc03fcc 	andi	r23,r3,255
  8053e4:	bdc0201c 	xori	r23,r23,128
  8053e8:	bdffe004 	addi	r23,r23,-128
  8053ec:	10c08036 	bltu	r2,r3,8055f0 <__svfscanf_r+0x38c>
  8053f0:	18c5883a 	add	r2,r3,r3
  8053f4:	1085883a 	add	r2,r2,r2
  8053f8:	00c02034 	movhi	r3,128
  8053fc:	18d50304 	addi	r3,r3,21516
  805400:	10c5883a 	add	r2,r2,r3
  805404:	11000017 	ldw	r4,0(r2)
  805408:	2000683a 	jmp	r4
  80540c:	008053c0 	call	8053c <__reset-0x77fac4>
  805410:	008055f0 	cmpltui	r2,zero,343
  805414:	008055f0 	cmpltui	r2,zero,343
  805418:	008055f0 	cmpltui	r2,zero,343
  80541c:	008055f0 	cmpltui	r2,zero,343
  805420:	008055f0 	cmpltui	r2,zero,343
  805424:	008055f0 	cmpltui	r2,zero,343
  805428:	008055f0 	cmpltui	r2,zero,343
  80542c:	008055f0 	cmpltui	r2,zero,343
  805430:	008055f0 	cmpltui	r2,zero,343
  805434:	008055f0 	cmpltui	r2,zero,343
  805438:	008055f0 	cmpltui	r2,zero,343
  80543c:	008055f0 	cmpltui	r2,zero,343
  805440:	008055f0 	cmpltui	r2,zero,343
  805444:	008055f0 	cmpltui	r2,zero,343
  805448:	008055f0 	cmpltui	r2,zero,343
  80544c:	008055f0 	cmpltui	r2,zero,343
  805450:	008055f0 	cmpltui	r2,zero,343
  805454:	008055f0 	cmpltui	r2,zero,343
  805458:	008055f0 	cmpltui	r2,zero,343
  80545c:	008055f0 	cmpltui	r2,zero,343
  805460:	008055f0 	cmpltui	r2,zero,343
  805464:	008055f0 	cmpltui	r2,zero,343
  805468:	008055f0 	cmpltui	r2,zero,343
  80546c:	008055f0 	cmpltui	r2,zero,343
  805470:	008055f0 	cmpltui	r2,zero,343
  805474:	008055f0 	cmpltui	r2,zero,343
  805478:	008055f0 	cmpltui	r2,zero,343
  80547c:	008055f0 	cmpltui	r2,zero,343
  805480:	008055f0 	cmpltui	r2,zero,343
  805484:	008055f0 	cmpltui	r2,zero,343
  805488:	008055f0 	cmpltui	r2,zero,343
  80548c:	008055f0 	cmpltui	r2,zero,343
  805490:	008055f0 	cmpltui	r2,zero,343
  805494:	008055f0 	cmpltui	r2,zero,343
  805498:	008055f0 	cmpltui	r2,zero,343
  80549c:	008055f0 	cmpltui	r2,zero,343
  8054a0:	00805374 	movhi	r2,333
  8054a4:	008055f0 	cmpltui	r2,zero,343
  8054a8:	008055f0 	cmpltui	r2,zero,343
  8054ac:	008055f0 	cmpltui	r2,zero,343
  8054b0:	008055f0 	cmpltui	r2,zero,343
  8054b4:	00806490 	cmplti	r2,zero,402
  8054b8:	008055f0 	cmpltui	r2,zero,343
  8054bc:	008055f0 	cmpltui	r2,zero,343
  8054c0:	008055f0 	cmpltui	r2,zero,343
  8054c4:	008055f0 	cmpltui	r2,zero,343
  8054c8:	008055f0 	cmpltui	r2,zero,343
  8054cc:	00806474 	movhi	r2,401
  8054d0:	00806474 	movhi	r2,401
  8054d4:	00806474 	movhi	r2,401
  8054d8:	00806474 	movhi	r2,401
  8054dc:	00806474 	movhi	r2,401
  8054e0:	00806474 	movhi	r2,401
  8054e4:	00806474 	movhi	r2,401
  8054e8:	00806474 	movhi	r2,401
  8054ec:	00806474 	movhi	r2,401
  8054f0:	00806474 	movhi	r2,401
  8054f4:	008055f0 	cmpltui	r2,zero,343
  8054f8:	008055f0 	cmpltui	r2,zero,343
  8054fc:	008055f0 	cmpltui	r2,zero,343
  805500:	008055f0 	cmpltui	r2,zero,343
  805504:	008055f0 	cmpltui	r2,zero,343
  805508:	008055f0 	cmpltui	r2,zero,343
  80550c:	008055f0 	cmpltui	r2,zero,343
  805510:	008055f0 	cmpltui	r2,zero,343
  805514:	008055f0 	cmpltui	r2,zero,343
  805518:	008055f0 	cmpltui	r2,zero,343
  80551c:	00805604 	movi	r2,344
  805520:	00806578 	rdprs	r2,zero,405
  805524:	008055f0 	cmpltui	r2,zero,343
  805528:	00806578 	rdprs	r2,zero,405
  80552c:	008055f0 	cmpltui	r2,zero,343
  805530:	008055f0 	cmpltui	r2,zero,343
  805534:	008055f0 	cmpltui	r2,zero,343
  805538:	008055f0 	cmpltui	r2,zero,343
  80553c:	0080646c 	andhi	r2,zero,401
  805540:	008055f0 	cmpltui	r2,zero,343
  805544:	008055f0 	cmpltui	r2,zero,343
  805548:	0080644c 	andi	r2,zero,401
  80554c:	008055f0 	cmpltui	r2,zero,343
  805550:	008055f0 	cmpltui	r2,zero,343
  805554:	008055f0 	cmpltui	r2,zero,343
  805558:	008055f0 	cmpltui	r2,zero,343
  80555c:	008055f0 	cmpltui	r2,zero,343
  805560:	008055f0 	cmpltui	r2,zero,343
  805564:	008055f0 	cmpltui	r2,zero,343
  805568:	008055f0 	cmpltui	r2,zero,343
  80556c:	00806498 	cmpnei	r2,zero,402
  805570:	008055f0 	cmpltui	r2,zero,343
  805574:	008055f0 	cmpltui	r2,zero,343
  805578:	00806430 	cmpltui	r2,zero,400
  80557c:	008055f0 	cmpltui	r2,zero,343
  805580:	008055f0 	cmpltui	r2,zero,343
  805584:	008055f0 	cmpltui	r2,zero,343
  805588:	008055f0 	cmpltui	r2,zero,343
  80558c:	008055f0 	cmpltui	r2,zero,343
  805590:	008055f0 	cmpltui	r2,zero,343
  805594:	008055f0 	cmpltui	r2,zero,343
  805598:	00806580 	call	80658 <__reset-0x77f9a8>
  80559c:	00805608 	cmpgei	r2,zero,344
  8055a0:	00806578 	rdprs	r2,zero,405
  8055a4:	00806578 	rdprs	r2,zero,405
  8055a8:	00806578 	rdprs	r2,zero,405
  8055ac:	0080658c 	andi	r2,zero,406
  8055b0:	008064d4 	movui	r2,403
  8055b4:	008055f0 	cmpltui	r2,zero,343
  8055b8:	008055f0 	cmpltui	r2,zero,343
  8055bc:	00805b9c 	xori	r2,zero,366
  8055c0:	008055f0 	cmpltui	r2,zero,343
  8055c4:	00806688 	cmpgei	r2,zero,410
  8055c8:	00806644 	movi	r2,409
  8055cc:	00806668 	cmpgeui	r2,zero,409
  8055d0:	008055f0 	cmpltui	r2,zero,343
  8055d4:	008055f0 	cmpltui	r2,zero,343
  8055d8:	00806660 	cmpeqi	r2,zero,409
  8055dc:	008055f0 	cmpltui	r2,zero,343
  8055e0:	008064b8 	rdprs	r2,zero,402
  8055e4:	008055f0 	cmpltui	r2,zero,343
  8055e8:	008055f0 	cmpltui	r2,zero,343
  8055ec:	00806498 	cmpnei	r2,zero,402
  8055f0:	bc87883a 	add	r3,r23,r18
  8055f4:	18800003 	ldbu	r2,0(r3)
  8055f8:	1080004c 	andi	r2,r2,1
  8055fc:	1005003a 	cmpeq	r2,r2,zero
  805600:	1000011e 	bne	r2,zero,805608 <__svfscanf_r+0x3a4>
  805604:	ad400054 	ori	r21,r21,1
  805608:	01002074 	movhi	r4,129
  80560c:	2130f304 	addi	r4,r4,-15412
  805610:	00800284 	movi	r2,10
  805614:	d900a015 	stw	r4,640(sp)
  805618:	048000c4 	movi	r18,3
  80561c:	d880a115 	stw	r2,644(sp)
  805620:	80c00117 	ldw	r3,4(r16)
  805624:	00c13f0e 	bge	zero,r3,805b24 <__svfscanf_r+0x8c0>
  805628:	a880100c 	andi	r2,r21,64
  80562c:	10001326 	beq	r2,zero,80567c <__svfscanf_r+0x418>
  805630:	00800104 	movi	r2,4
  805634:	14bf1e36 	bltu	r2,r18,8052b0 <__svfscanf_r+0x4c>
  805638:	9485883a 	add	r2,r18,r18
  80563c:	1085883a 	add	r2,r2,r2
  805640:	00c02034 	movhi	r3,128
  805644:	18d59504 	addi	r3,r3,22100
  805648:	10c5883a 	add	r2,r2,r3
  80564c:	11000017 	ldw	r4,0(r2)
  805650:	2000683a 	jmp	r4
  805654:	008056b8 	rdprs	r2,zero,346
  805658:	008057b8 	rdprs	r2,zero,350
  80565c:	008059c8 	cmpgei	r2,zero,359
  805660:	0080582c 	andhi	r2,zero,352
  805664:	00805b00 	call	805b0 <__reset-0x77fa50>
  805668:	b009883a 	mov	r4,r22
  80566c:	800b883a 	mov	r5,r16
  805670:	0802da00 	call	802da0 <__srefill_r>
  805674:	103f501e 	bne	r2,zero,8053b8 <__svfscanf_r+0x154>
  805678:	8c400044 	addi	r17,r17,1
  80567c:	81400017 	ldw	r5,0(r16)
  805680:	98800017 	ldw	r2,0(r19)
  805684:	28c00003 	ldbu	r3,0(r5)
  805688:	1887883a 	add	r3,r3,r2
  80568c:	19000003 	ldbu	r4,0(r3)
  805690:	2100020c 	andi	r4,r4,8
  805694:	203fe626 	beq	r4,zero,805630 <__svfscanf_r+0x3cc>
  805698:	80c00117 	ldw	r3,4(r16)
  80569c:	18ffffc4 	addi	r3,r3,-1
  8056a0:	80c00115 	stw	r3,4(r16)
  8056a4:	00fff00e 	bge	zero,r3,805668 <__svfscanf_r+0x404>
  8056a8:	29800044 	addi	r6,r5,1
  8056ac:	8c400044 	addi	r17,r17,1
  8056b0:	81800015 	stw	r6,0(r16)
  8056b4:	003ff106 	br	80567c <__svfscanf_r+0x418>
  8056b8:	d8c0a317 	ldw	r3,652(sp)
  8056bc:	1800021e 	bne	r3,zero,8056c8 <__svfscanf_r+0x464>
  8056c0:	01000044 	movi	r4,1
  8056c4:	d900a315 	stw	r4,652(sp)
  8056c8:	a880004c 	andi	r2,r21,1
  8056cc:	1005003a 	cmpeq	r2,r2,zero
  8056d0:	1002811e 	bne	r2,zero,8060d8 <__svfscanf_r+0xe74>
  8056d4:	ad40040c 	andi	r21,r21,16
  8056d8:	a805003a 	cmpeq	r2,r21,zero
  8056dc:	d880a615 	stw	r2,664(sp)
  8056e0:	1003d31e 	bne	r2,zero,806630 <__svfscanf_r+0x13cc>
  8056e4:	0027883a 	mov	r19,zero
  8056e8:	d900a317 	ldw	r4,652(sp)
  8056ec:	2003c726 	beq	r4,zero,80660c <__svfscanf_r+0x13a8>
  8056f0:	07002074 	movhi	fp,129
  8056f4:	e71bbd04 	addi	fp,fp,28404
  8056f8:	e0800017 	ldw	r2,0(fp)
  8056fc:	103f2e26 	beq	r2,zero,8053b8 <__svfscanf_r+0x154>
  805700:	d8804404 	addi	r2,sp,272
  805704:	0025883a 	mov	r18,zero
  805708:	d880a515 	stw	r2,660(sp)
  80570c:	05ffffc4 	movi	r23,-1
  805710:	80800017 	ldw	r2,0(r16)
  805714:	80c00117 	ldw	r3,4(r16)
  805718:	d900a517 	ldw	r4,660(sp)
  80571c:	12000003 	ldbu	r8,0(r2)
  805720:	18ffffc4 	addi	r3,r3,-1
  805724:	11800044 	addi	r6,r2,1
  805728:	248f883a 	add	r7,r4,r18
  80572c:	80c00115 	stw	r3,4(r16)
  805730:	81800015 	stw	r6,0(r16)
  805734:	3a000005 	stb	r8,0(r7)
  805738:	d9000204 	addi	r4,sp,8
  80573c:	000b883a 	mov	r5,zero
  805740:	01800204 	movi	r6,8
  805744:	0802b400 	call	802b40 <memset>
  805748:	d980a517 	ldw	r6,660(sp)
  80574c:	94800044 	addi	r18,r18,1
  805750:	d8800204 	addi	r2,sp,8
  805754:	b009883a 	mov	r4,r22
  805758:	980b883a 	mov	r5,r19
  80575c:	900f883a 	mov	r7,r18
  805760:	d8800015 	stw	r2,0(sp)
  805764:	0808d680 	call	808d68 <_mbrtowc_r>
  805768:	1007883a 	mov	r3,r2
  80576c:	15ff1226 	beq	r2,r23,8053b8 <__svfscanf_r+0x154>
  805770:	10039e1e 	bne	r2,zero,8065ec <__svfscanf_r+0x1388>
  805774:	a800011e 	bne	r21,zero,80577c <__svfscanf_r+0x518>
  805778:	98000015 	stw	zero,0(r19)
  80577c:	d8c0a317 	ldw	r3,652(sp)
  805780:	d900a617 	ldw	r4,664(sp)
  805784:	8ca3883a 	add	r17,r17,r18
  805788:	18ffffc4 	addi	r3,r3,-1
  80578c:	d8c0a315 	stw	r3,652(sp)
  805790:	20000126 	beq	r4,zero,805798 <__svfscanf_r+0x534>
  805794:	9cc00104 	addi	r19,r19,4
  805798:	0025883a 	mov	r18,zero
  80579c:	80c00117 	ldw	r3,4(r16)
  8057a0:	00c3950e 	bge	zero,r3,8065f8 <__svfscanf_r+0x1394>
  8057a4:	d880a317 	ldw	r2,652(sp)
  8057a8:	10039826 	beq	r2,zero,80660c <__svfscanf_r+0x13a8>
  8057ac:	e0800017 	ldw	r2,0(fp)
  8057b0:	90bfd71e 	bne	r18,r2,805710 <__svfscanf_r+0x4ac>
  8057b4:	003f0006 	br	8053b8 <__svfscanf_r+0x154>
  8057b8:	d880a317 	ldw	r2,652(sp)
  8057bc:	1000021e 	bne	r2,zero,8057c8 <__svfscanf_r+0x564>
  8057c0:	00ffffc4 	movi	r3,-1
  8057c4:	d8c0a315 	stw	r3,652(sp)
  8057c8:	a880040c 	andi	r2,r21,16
  8057cc:	1003b826 	beq	r2,zero,8066b0 <__svfscanf_r+0x144c>
  8057d0:	0027883a 	mov	r19,zero
  8057d4:	dd400404 	addi	r21,sp,16
  8057d8:	81000017 	ldw	r4,0(r16)
  8057dc:	20800003 	ldbu	r2,0(r4)
  8057e0:	a885883a 	add	r2,r21,r2
  8057e4:	10c00007 	ldb	r3,0(r2)
  8057e8:	18037d26 	beq	r3,zero,8065e0 <__svfscanf_r+0x137c>
  8057ec:	80c00117 	ldw	r3,4(r16)
  8057f0:	21800044 	addi	r6,r4,1
  8057f4:	d900a317 	ldw	r4,652(sp)
  8057f8:	18ffffc4 	addi	r3,r3,-1
  8057fc:	9cc00044 	addi	r19,r19,1
  805800:	81800015 	stw	r6,0(r16)
  805804:	80c00115 	stw	r3,4(r16)
  805808:	24c37526 	beq	r4,r19,8065e0 <__svfscanf_r+0x137c>
  80580c:	00fff216 	blt	zero,r3,8057d8 <__svfscanf_r+0x574>
  805810:	b009883a 	mov	r4,r22
  805814:	800b883a 	mov	r5,r16
  805818:	0802da00 	call	802da0 <__srefill_r>
  80581c:	103fee26 	beq	r2,zero,8057d8 <__svfscanf_r+0x574>
  805820:	983ee526 	beq	r19,zero,8053b8 <__svfscanf_r+0x154>
  805824:	8ce3883a 	add	r17,r17,r19
  805828:	003ea106 	br	8052b0 <__svfscanf_r+0x4c>
  80582c:	d900a317 	ldw	r4,652(sp)
  805830:	00805704 	movi	r2,348
  805834:	20ffffc4 	addi	r3,r4,-1
  805838:	10c0bf2e 	bgeu	r2,r3,805b38 <__svfscanf_r+0x8d4>
  80583c:	00805744 	movi	r2,349
  805840:	24ffa8c4 	addi	r19,r4,-349
  805844:	ac836014 	ori	r18,r21,3456
  805848:	d880a315 	stw	r2,652(sp)
  80584c:	d8c04404 	addi	r3,sp,272
  805850:	d8c0a515 	stw	r3,660(sp)
  805854:	002f883a 	mov	r23,zero
  805858:	182b883a 	mov	r21,r3
  80585c:	81800017 	ldw	r6,0(r16)
  805860:	00c01344 	movi	r3,77
  805864:	31400003 	ldbu	r5,0(r6)
  805868:	28bff544 	addi	r2,r5,-43
  80586c:	10803fcc 	andi	r2,r2,255
  805870:	1880b836 	bltu	r3,r2,805b54 <__svfscanf_r+0x8f0>
  805874:	1085883a 	add	r2,r2,r2
  805878:	1085883a 	add	r2,r2,r2
  80587c:	00c02034 	movhi	r3,128
  805880:	18d62404 	addi	r3,r3,22672
  805884:	10c5883a 	add	r2,r2,r3
  805888:	11000017 	ldw	r4,0(r2)
  80588c:	2000683a 	jmp	r4
  805890:	00805ca4 	muli	r2,zero,370
  805894:	00805b54 	movui	r2,365
  805898:	00805ca4 	muli	r2,zero,370
  80589c:	00805b54 	movui	r2,365
  8058a0:	00805b54 	movui	r2,365
  8058a4:	00805ce8 	cmpgeui	r2,zero,371
  8058a8:	008064ec 	andhi	r2,zero,403
  8058ac:	008064ec 	andhi	r2,zero,403
  8058b0:	008064ec 	andhi	r2,zero,403
  8058b4:	008064ec 	andhi	r2,zero,403
  8058b8:	008064ec 	andhi	r2,zero,403
  8058bc:	008064ec 	andhi	r2,zero,403
  8058c0:	008064ec 	andhi	r2,zero,403
  8058c4:	00806514 	movui	r2,404
  8058c8:	00806514 	movui	r2,404
  8058cc:	00805b54 	movui	r2,365
  8058d0:	00805b54 	movui	r2,365
  8058d4:	00805b54 	movui	r2,365
  8058d8:	00805b54 	movui	r2,365
  8058dc:	00805b54 	movui	r2,365
  8058e0:	00805b54 	movui	r2,365
  8058e4:	00805b54 	movui	r2,365
  8058e8:	00806544 	movi	r2,405
  8058ec:	00806544 	movi	r2,405
  8058f0:	00806544 	movi	r2,405
  8058f4:	00806544 	movi	r2,405
  8058f8:	00806544 	movi	r2,405
  8058fc:	00806544 	movi	r2,405
  805900:	00805b54 	movui	r2,365
  805904:	00805b54 	movui	r2,365
  805908:	00805b54 	movui	r2,365
  80590c:	00805b54 	movui	r2,365
  805910:	00805b54 	movui	r2,365
  805914:	00805b54 	movui	r2,365
  805918:	00805b54 	movui	r2,365
  80591c:	00805b54 	movui	r2,365
  805920:	00805b54 	movui	r2,365
  805924:	00805b54 	movui	r2,365
  805928:	00805b54 	movui	r2,365
  80592c:	00805b54 	movui	r2,365
  805930:	00805b54 	movui	r2,365
  805934:	00805b54 	movui	r2,365
  805938:	00805b54 	movui	r2,365
  80593c:	00805b54 	movui	r2,365
  805940:	00805b54 	movui	r2,365
  805944:	00806554 	movui	r2,405
  805948:	00805b54 	movui	r2,365
  80594c:	00805b54 	movui	r2,365
  805950:	00805b54 	movui	r2,365
  805954:	00805b54 	movui	r2,365
  805958:	00805b54 	movui	r2,365
  80595c:	00805b54 	movui	r2,365
  805960:	00805b54 	movui	r2,365
  805964:	00805b54 	movui	r2,365
  805968:	00806544 	movi	r2,405
  80596c:	00806544 	movi	r2,405
  805970:	00806544 	movi	r2,405
  805974:	00806544 	movi	r2,405
  805978:	00806544 	movi	r2,405
  80597c:	00806544 	movi	r2,405
  805980:	00805b54 	movui	r2,365
  805984:	00805b54 	movui	r2,365
  805988:	00805b54 	movui	r2,365
  80598c:	00805b54 	movui	r2,365
  805990:	00805b54 	movui	r2,365
  805994:	00805b54 	movui	r2,365
  805998:	00805b54 	movui	r2,365
  80599c:	00805b54 	movui	r2,365
  8059a0:	00805b54 	movui	r2,365
  8059a4:	00805b54 	movui	r2,365
  8059a8:	00805b54 	movui	r2,365
  8059ac:	00805b54 	movui	r2,365
  8059b0:	00805b54 	movui	r2,365
  8059b4:	00805b54 	movui	r2,365
  8059b8:	00805b54 	movui	r2,365
  8059bc:	00805b54 	movui	r2,365
  8059c0:	00805b54 	movui	r2,365
  8059c4:	00806554 	movui	r2,405
  8059c8:	d900a317 	ldw	r4,652(sp)
  8059cc:	2000021e 	bne	r4,zero,8059d8 <__svfscanf_r+0x774>
  8059d0:	00bfffc4 	movi	r2,-1
  8059d4:	d880a315 	stw	r2,652(sp)
  8059d8:	a880004c 	andi	r2,r21,1
  8059dc:	1005003a 	cmpeq	r2,r2,zero
  8059e0:	1003651e 	bne	r2,zero,806778 <__svfscanf_r+0x1514>
  8059e4:	adc0040c 	andi	r23,r21,16
  8059e8:	b807003a 	cmpeq	r3,r23,zero
  8059ec:	d8c0a715 	stw	r3,668(sp)
  8059f0:	1802f61e 	bne	r3,zero,8065cc <__svfscanf_r+0x1368>
  8059f4:	dd400104 	addi	r21,sp,4
  8059f8:	0025883a 	mov	r18,zero
  8059fc:	073fffc4 	movi	fp,-1
  805a00:	81400017 	ldw	r5,0(r16)
  805a04:	98800017 	ldw	r2,0(r19)
  805a08:	29c00003 	ldbu	r7,0(r5)
  805a0c:	38c03fcc 	andi	r3,r7,255
  805a10:	1887883a 	add	r3,r3,r2
  805a14:	19000003 	ldbu	r4,0(r3)
  805a18:	2100020c 	andi	r4,r4,8
  805a1c:	2000321e 	bne	r4,zero,805ae8 <__svfscanf_r+0x884>
  805a20:	d8c0a317 	ldw	r3,652(sp)
  805a24:	18003026 	beq	r3,zero,805ae8 <__svfscanf_r+0x884>
  805a28:	00802074 	movhi	r2,129
  805a2c:	109bbd04 	addi	r2,r2,28404
  805a30:	10c00017 	ldw	r3,0(r2)
  805a34:	90fe6026 	beq	r18,r3,8053b8 <__svfscanf_r+0x154>
  805a38:	d8c04404 	addi	r3,sp,272
  805a3c:	80800117 	ldw	r2,4(r16)
  805a40:	d8c0a515 	stw	r3,660(sp)
  805a44:	d900a517 	ldw	r4,660(sp)
  805a48:	10ffffc4 	addi	r3,r2,-1
  805a4c:	29800044 	addi	r6,r5,1
  805a50:	80c00115 	stw	r3,4(r16)
  805a54:	2485883a 	add	r2,r4,r18
  805a58:	81800015 	stw	r6,0(r16)
  805a5c:	d9000204 	addi	r4,sp,8
  805a60:	000b883a 	mov	r5,zero
  805a64:	01800204 	movi	r6,8
  805a68:	11c00005 	stb	r7,0(r2)
  805a6c:	0802b400 	call	802b40 <memset>
  805a70:	d980a517 	ldw	r6,660(sp)
  805a74:	94800044 	addi	r18,r18,1
  805a78:	d8800204 	addi	r2,sp,8
  805a7c:	b009883a 	mov	r4,r22
  805a80:	a80b883a 	mov	r5,r21
  805a84:	900f883a 	mov	r7,r18
  805a88:	d8800015 	stw	r2,0(sp)
  805a8c:	0808d680 	call	808d68 <_mbrtowc_r>
  805a90:	1007883a 	mov	r3,r2
  805a94:	173e4826 	beq	r2,fp,8053b8 <__svfscanf_r+0x154>
  805a98:	1002c91e 	bne	r2,zero,8065c0 <__svfscanf_r+0x135c>
  805a9c:	a8000015 	stw	zero,0(r21)
  805aa0:	a9000017 	ldw	r4,0(r21)
  805aa4:	0808c000 	call	808c00 <iswspace>
  805aa8:	1002bc1e 	bne	r2,zero,80659c <__svfscanf_r+0x1338>
  805aac:	d900a317 	ldw	r4,652(sp)
  805ab0:	d880a717 	ldw	r2,668(sp)
  805ab4:	8ca3883a 	add	r17,r17,r18
  805ab8:	213fffc4 	addi	r4,r4,-1
  805abc:	d900a315 	stw	r4,652(sp)
  805ac0:	10000126 	beq	r2,zero,805ac8 <__svfscanf_r+0x864>
  805ac4:	ad400104 	addi	r21,r21,4
  805ac8:	0025883a 	mov	r18,zero
  805acc:	80c00117 	ldw	r3,4(r16)
  805ad0:	00ffcb16 	blt	zero,r3,805a00 <__svfscanf_r+0x79c>
  805ad4:	b009883a 	mov	r4,r22
  805ad8:	800b883a 	mov	r5,r16
  805adc:	0802da00 	call	802da0 <__srefill_r>
  805ae0:	103fc726 	beq	r2,zero,805a00 <__svfscanf_r+0x79c>
  805ae4:	903e341e 	bne	r18,zero,8053b8 <__svfscanf_r+0x154>
  805ae8:	b83df11e 	bne	r23,zero,8052b0 <__svfscanf_r+0x4c>
  805aec:	d900a217 	ldw	r4,648(sp)
  805af0:	a8000015 	stw	zero,0(r21)
  805af4:	21000044 	addi	r4,r4,1
  805af8:	d900a215 	stw	r4,648(sp)
  805afc:	003dec06 	br	8052b0 <__svfscanf_r+0x4c>
  805b00:	d900a317 	ldw	r4,652(sp)
  805b04:	00805704 	movi	r2,348
  805b08:	20ffffc4 	addi	r3,r4,-1
  805b0c:	10c0902e 	bgeu	r2,r3,805d50 <__svfscanf_r+0xaec>
  805b10:	00805744 	movi	r2,349
  805b14:	24ffa8c4 	addi	r19,r4,-349
  805b18:	ad41e014 	ori	r21,r21,1920
  805b1c:	d880a315 	stw	r2,652(sp)
  805b20:	00010806 	br	805f44 <__svfscanf_r+0xce0>
  805b24:	b009883a 	mov	r4,r22
  805b28:	800b883a 	mov	r5,r16
  805b2c:	0802da00 	call	802da0 <__srefill_r>
  805b30:	103ebd26 	beq	r2,zero,805628 <__svfscanf_r+0x3c4>
  805b34:	003e2006 	br	8053b8 <__svfscanf_r+0x154>
  805b38:	d900a317 	ldw	r4,652(sp)
  805b3c:	ac836014 	ori	r18,r21,3456
  805b40:	2002941e 	bne	r4,zero,806594 <__svfscanf_r+0x1330>
  805b44:	d8804404 	addi	r2,sp,272
  805b48:	d880a515 	stw	r2,660(sp)
  805b4c:	002f883a 	mov	r23,zero
  805b50:	102b883a 	mov	r21,r2
  805b54:	9080400c 	andi	r2,r18,256
  805b58:	10000926 	beq	r2,zero,805b80 <__svfscanf_r+0x91c>
  805b5c:	d8c0a517 	ldw	r3,660(sp)
  805b60:	1d40052e 	bgeu	r3,r21,805b78 <__svfscanf_r+0x914>
  805b64:	ad7fffc4 	addi	r21,r21,-1
  805b68:	a9400007 	ldb	r5,0(r21)
  805b6c:	b009883a 	mov	r4,r22
  805b70:	800d883a 	mov	r6,r16
  805b74:	080cf880 	call	80cf88 <_ungetc_r>
  805b78:	d900a517 	ldw	r4,660(sp)
  805b7c:	257dee26 	beq	r4,r21,805338 <__svfscanf_r+0xd4>
  805b80:	9080040c 	andi	r2,r18,16
  805b84:	10000a26 	beq	r2,zero,805bb0 <__svfscanf_r+0x94c>
  805b88:	d8c0a517 	ldw	r3,660(sp)
  805b8c:	a8c5c83a 	sub	r2,r21,r3
  805b90:	b885883a 	add	r2,r23,r2
  805b94:	88a3883a 	add	r17,r17,r2
  805b98:	003dc506 	br	8052b0 <__svfscanf_r+0x4c>
  805b9c:	a0c00007 	ldb	r3,0(r20)
  805ba0:	00801b04 	movi	r2,108
  805ba4:	18801726 	beq	r3,r2,805c04 <__svfscanf_r+0x9a0>
  805ba8:	ad400054 	ori	r21,r21,1
  805bac:	003e0906 	br	8053d4 <__svfscanf_r+0x170>
  805bb0:	a8000005 	stb	zero,0(r21)
  805bb4:	d8c0a017 	ldw	r3,640(sp)
  805bb8:	d940a517 	ldw	r5,660(sp)
  805bbc:	d9c0a117 	ldw	r7,644(sp)
  805bc0:	b009883a 	mov	r4,r22
  805bc4:	000d883a 	mov	r6,zero
  805bc8:	183ee83a 	callr	r3
  805bcc:	1007883a 	mov	r3,r2
  805bd0:	9080080c 	andi	r2,r18,32
  805bd4:	1000251e 	bne	r2,zero,805c6c <__svfscanf_r+0xa08>
  805bd8:	9080010c 	andi	r2,r18,4
  805bdc:	10000c26 	beq	r2,zero,805c10 <__svfscanf_r+0x9ac>
  805be0:	d900a417 	ldw	r4,656(sp)
  805be4:	20800017 	ldw	r2,0(r4)
  805be8:	21000104 	addi	r4,r4,4
  805bec:	d900a415 	stw	r4,656(sp)
  805bf0:	10c0000d 	sth	r3,0(r2)
  805bf4:	d880a217 	ldw	r2,648(sp)
  805bf8:	10800044 	addi	r2,r2,1
  805bfc:	d880a215 	stw	r2,648(sp)
  805c00:	003fe106 	br	805b88 <__svfscanf_r+0x924>
  805c04:	a5000044 	addi	r20,r20,1
  805c08:	ad400094 	ori	r21,r21,2
  805c0c:	003df106 	br	8053d4 <__svfscanf_r+0x170>
  805c10:	9080004c 	andi	r2,r18,1
  805c14:	1005003a 	cmpeq	r2,r2,zero
  805c18:	10001426 	beq	r2,zero,805c6c <__svfscanf_r+0xa08>
  805c1c:	9080008c 	andi	r2,r18,2
  805c20:	10001226 	beq	r2,zero,805c6c <__svfscanf_r+0xa08>
  805c24:	d8c0a017 	ldw	r3,640(sp)
  805c28:	00802074 	movhi	r2,129
  805c2c:	10b25604 	addi	r2,r2,-13992
  805c30:	18801426 	beq	r3,r2,805c84 <__svfscanf_r+0xa20>
  805c34:	d9c0a117 	ldw	r7,644(sp)
  805c38:	d940a517 	ldw	r5,660(sp)
  805c3c:	000d883a 	mov	r6,zero
  805c40:	b009883a 	mov	r4,r22
  805c44:	080c6400 	call	80c640 <_strtoll_r>
  805c48:	100d883a 	mov	r6,r2
  805c4c:	180f883a 	mov	r7,r3
  805c50:	d900a417 	ldw	r4,656(sp)
  805c54:	20800017 	ldw	r2,0(r4)
  805c58:	21000104 	addi	r4,r4,4
  805c5c:	d900a415 	stw	r4,656(sp)
  805c60:	11c00115 	stw	r7,4(r2)
  805c64:	11800015 	stw	r6,0(r2)
  805c68:	003fe206 	br	805bf4 <__svfscanf_r+0x990>
  805c6c:	d900a417 	ldw	r4,656(sp)
  805c70:	20800017 	ldw	r2,0(r4)
  805c74:	21000104 	addi	r4,r4,4
  805c78:	d900a415 	stw	r4,656(sp)
  805c7c:	10c00015 	stw	r3,0(r2)
  805c80:	003fdc06 	br	805bf4 <__svfscanf_r+0x990>
  805c84:	d9c0a117 	ldw	r7,644(sp)
  805c88:	d940a517 	ldw	r5,660(sp)
  805c8c:	000d883a 	mov	r6,zero
  805c90:	b009883a 	mov	r4,r22
  805c94:	080cbbc0 	call	80cbbc <_strtoull_r>
  805c98:	100d883a 	mov	r6,r2
  805c9c:	180f883a 	mov	r7,r3
  805ca0:	003feb06 	br	805c50 <__svfscanf_r+0x9ec>
  805ca4:	9080200c 	andi	r2,r18,128
  805ca8:	103faa26 	beq	r2,zero,805b54 <__svfscanf_r+0x8f0>
  805cac:	00bfdfc4 	movi	r2,-129
  805cb0:	90a4703a 	and	r18,r18,r2
  805cb4:	a9400005 	stb	r5,0(r21)
  805cb8:	ad400044 	addi	r21,r21,1
  805cbc:	80c00117 	ldw	r3,4(r16)
  805cc0:	18ffffc4 	addi	r3,r3,-1
  805cc4:	80c00115 	stw	r3,4(r16)
  805cc8:	00c0130e 	bge	zero,r3,805d18 <__svfscanf_r+0xab4>
  805ccc:	31800044 	addi	r6,r6,1
  805cd0:	81800015 	stw	r6,0(r16)
  805cd4:	d880a317 	ldw	r2,652(sp)
  805cd8:	10bfffc4 	addi	r2,r2,-1
  805cdc:	d880a315 	stw	r2,652(sp)
  805ce0:	103ede1e 	bne	r2,zero,80585c <__svfscanf_r+0x5f8>
  805ce4:	003f9b06 	br	805b54 <__svfscanf_r+0x8f0>
  805ce8:	9082000c 	andi	r2,r18,2048
  805cec:	103ff126 	beq	r2,zero,805cb4 <__svfscanf_r+0xa50>
  805cf0:	d8c0a117 	ldw	r3,644(sp)
  805cf4:	1800031e 	bne	r3,zero,805d04 <__svfscanf_r+0xaa0>
  805cf8:	01000204 	movi	r4,8
  805cfc:	94808014 	ori	r18,r18,512
  805d00:	d900a115 	stw	r4,644(sp)
  805d04:	9081000c 	andi	r2,r18,1024
  805d08:	10000826 	beq	r2,zero,805d2c <__svfscanf_r+0xac8>
  805d0c:	00be9fc4 	movi	r2,-1409
  805d10:	90a4703a 	and	r18,r18,r2
  805d14:	003fe706 	br	805cb4 <__svfscanf_r+0xa50>
  805d18:	b009883a 	mov	r4,r22
  805d1c:	800b883a 	mov	r5,r16
  805d20:	0802da00 	call	802da0 <__srefill_r>
  805d24:	103feb26 	beq	r2,zero,805cd4 <__svfscanf_r+0xa70>
  805d28:	003f8a06 	br	805b54 <__svfscanf_r+0x8f0>
  805d2c:	98000426 	beq	r19,zero,805d40 <__svfscanf_r+0xadc>
  805d30:	d880a317 	ldw	r2,652(sp)
  805d34:	9cffffc4 	addi	r19,r19,-1
  805d38:	10800044 	addi	r2,r2,1
  805d3c:	d880a315 	stw	r2,652(sp)
  805d40:	00bf1fc4 	movi	r2,-897
  805d44:	90a4703a 	and	r18,r18,r2
  805d48:	bdc00044 	addi	r23,r23,1
  805d4c:	003fdb06 	br	805cbc <__svfscanf_r+0xa58>
  805d50:	d900a317 	ldw	r4,652(sp)
  805d54:	ad41e014 	ori	r21,r21,1920
  805d58:	2000791e 	bne	r4,zero,805f40 <__svfscanf_r+0xcdc>
  805d5c:	d8c04404 	addi	r3,sp,272
  805d60:	d8c0a515 	stw	r3,660(sp)
  805d64:	182f883a 	mov	r23,r3
  805d68:	d8009c15 	stw	zero,624(sp)
  805d6c:	d8009d15 	stw	zero,628(sp)
  805d70:	d8009f15 	stw	zero,636(sp)
  805d74:	d8009e15 	stw	zero,632(sp)
  805d78:	0039883a 	mov	fp,zero
  805d7c:	e1003fcc 	andi	r4,fp,255
  805d80:	2100201c 	xori	r4,r4,128
  805d84:	213fe004 	addi	r4,r4,-128
  805d88:	20ffffc4 	addi	r3,r4,-1
  805d8c:	00800184 	movi	r2,6
  805d90:	10c01736 	bltu	r2,r3,805df0 <__svfscanf_r+0xb8c>
  805d94:	00c00084 	movi	r3,2
  805d98:	19026d0e 	bge	r3,r4,806750 <__svfscanf_r+0x14ec>
  805d9c:	008000c4 	movi	r2,3
  805da0:	1100130e 	bge	r2,r4,805df0 <__svfscanf_r+0xb8c>
  805da4:	e4ffffc4 	addi	r19,fp,-1
  805da8:	b825883a 	mov	r18,r23
  805dac:	94bfffc4 	addi	r18,r18,-1
  805db0:	91400007 	ldb	r5,0(r18)
  805db4:	b009883a 	mov	r4,r22
  805db8:	800d883a 	mov	r6,r16
  805dbc:	080cf880 	call	80cf88 <_ungetc_r>
  805dc0:	9cffffc4 	addi	r19,r19,-1
  805dc4:	98c03fcc 	andi	r3,r19,255
  805dc8:	18c0201c 	xori	r3,r3,128
  805dcc:	18ffe004 	addi	r3,r3,-128
  805dd0:	00800084 	movi	r2,2
  805dd4:	18bff51e 	bne	r3,r2,805dac <__svfscanf_r+0xb48>
  805dd8:	e0bfff04 	addi	r2,fp,-4
  805ddc:	10803fcc 	andi	r2,r2,255
  805de0:	b887c83a 	sub	r3,r23,r2
  805de4:	8885c83a 	sub	r2,r17,r2
  805de8:	147fffc4 	addi	r17,r2,-1
  805dec:	1dffffc4 	addi	r23,r3,-1
  805df0:	a880400c 	andi	r2,r21,256
  805df4:	10001226 	beq	r2,zero,805e40 <__svfscanf_r+0xbdc>
  805df8:	a881000c 	andi	r2,r21,1024
  805dfc:	10002b1e 	bne	r2,zero,805eac <__svfscanf_r+0xc48>
  805e00:	bdffffc4 	addi	r23,r23,-1
  805e04:	b9400007 	ldb	r5,0(r23)
  805e08:	00801944 	movi	r2,101
  805e0c:	8c7fffc4 	addi	r17,r17,-1
  805e10:	28800826 	beq	r5,r2,805e34 <__svfscanf_r+0xbd0>
  805e14:	00801144 	movi	r2,69
  805e18:	28800626 	beq	r5,r2,805e34 <__svfscanf_r+0xbd0>
  805e1c:	bdffffc4 	addi	r23,r23,-1
  805e20:	b009883a 	mov	r4,r22
  805e24:	800d883a 	mov	r6,r16
  805e28:	080cf880 	call	80cf88 <_ungetc_r>
  805e2c:	b9400007 	ldb	r5,0(r23)
  805e30:	8c7fffc4 	addi	r17,r17,-1
  805e34:	b009883a 	mov	r4,r22
  805e38:	800d883a 	mov	r6,r16
  805e3c:	080cf880 	call	80cf88 <_ungetc_r>
  805e40:	a880040c 	andi	r2,r21,16
  805e44:	103d1a1e 	bne	r2,zero,8052b0 <__svfscanf_r+0x4c>
  805e48:	a8c1800c 	andi	r3,r21,1536
  805e4c:	00810004 	movi	r2,1024
  805e50:	b8000005 	stb	zero,0(r23)
  805e54:	18813326 	beq	r3,r2,806324 <__svfscanf_r+0x10c0>
  805e58:	d8809d17 	ldw	r2,628(sp)
  805e5c:	1000251e 	bne	r2,zero,805ef4 <__svfscanf_r+0xc90>
  805e60:	d940a517 	ldw	r5,660(sp)
  805e64:	b009883a 	mov	r4,r22
  805e68:	000d883a 	mov	r6,zero
  805e6c:	080acc00 	call	80acc0 <_strtod_r>
  805e70:	a900004c 	andi	r4,r21,1
  805e74:	2009003a 	cmpeq	r4,r4,zero
  805e78:	1025883a 	mov	r18,r2
  805e7c:	1827883a 	mov	r19,r3
  805e80:	2000141e 	bne	r4,zero,805ed4 <__svfscanf_r+0xc70>
  805e84:	d8c0a417 	ldw	r3,656(sp)
  805e88:	18800017 	ldw	r2,0(r3)
  805e8c:	1d400104 	addi	r21,r3,4
  805e90:	14c00115 	stw	r19,4(r2)
  805e94:	14800015 	stw	r18,0(r2)
  805e98:	d8c0a217 	ldw	r3,648(sp)
  805e9c:	dd40a415 	stw	r21,656(sp)
  805ea0:	18c00044 	addi	r3,r3,1
  805ea4:	d8c0a215 	stw	r3,648(sp)
  805ea8:	003d0106 	br	8052b0 <__svfscanf_r+0x4c>
  805eac:	d900a517 	ldw	r4,660(sp)
  805eb0:	25fd212e 	bgeu	r4,r23,805338 <__svfscanf_r+0xd4>
  805eb4:	bdffffc4 	addi	r23,r23,-1
  805eb8:	b9400007 	ldb	r5,0(r23)
  805ebc:	b009883a 	mov	r4,r22
  805ec0:	800d883a 	mov	r6,r16
  805ec4:	080cf880 	call	80cf88 <_ungetc_r>
  805ec8:	d880a517 	ldw	r2,660(sp)
  805ecc:	15fff936 	bltu	r2,r23,805eb4 <__svfscanf_r+0xc50>
  805ed0:	003d1906 	br	805338 <__svfscanf_r+0xd4>
  805ed4:	a880008c 	andi	r2,r21,2
  805ed8:	10011926 	beq	r2,zero,806340 <__svfscanf_r+0x10dc>
  805edc:	d900a417 	ldw	r4,656(sp)
  805ee0:	20800017 	ldw	r2,0(r4)
  805ee4:	25400104 	addi	r21,r4,4
  805ee8:	10c00115 	stw	r3,4(r2)
  805eec:	14800015 	stw	r18,0(r2)
  805ef0:	003fe906 	br	805e98 <__svfscanf_r+0xc34>
  805ef4:	d8c09c17 	ldw	r3,624(sp)
  805ef8:	b009883a 	mov	r4,r22
  805efc:	000d883a 	mov	r6,zero
  805f00:	19400044 	addi	r5,r3,1
  805f04:	01c00284 	movi	r7,10
  805f08:	080c3cc0 	call	80c3cc <_strtol_r>
  805f0c:	d9009d17 	ldw	r4,628(sp)
  805f10:	110dc83a 	sub	r6,r2,r4
  805f14:	d8c0a517 	ldw	r3,660(sp)
  805f18:	d9009c17 	ldw	r4,624(sp)
  805f1c:	188054c4 	addi	r2,r3,339
  805f20:	20800236 	bltu	r4,r2,805f2c <__svfscanf_r+0xcc8>
  805f24:	18805484 	addi	r2,r3,338
  805f28:	d8809c15 	stw	r2,624(sp)
  805f2c:	d9009c17 	ldw	r4,624(sp)
  805f30:	01402074 	movhi	r5,129
  805f34:	29536704 	addi	r5,r5,19868
  805f38:	080aae80 	call	80aae8 <sprintf>
  805f3c:	003fc806 	br	805e60 <__svfscanf_r+0xbfc>
  805f40:	0027883a 	mov	r19,zero
  805f44:	d8c04404 	addi	r3,sp,272
  805f48:	d8c0a515 	stw	r3,660(sp)
  805f4c:	182f883a 	mov	r23,r3
  805f50:	d8009f15 	stw	zero,636(sp)
  805f54:	d8009e15 	stw	zero,632(sp)
  805f58:	d8009d15 	stw	zero,628(sp)
  805f5c:	d8009c15 	stw	zero,624(sp)
  805f60:	0039883a 	mov	fp,zero
  805f64:	0025883a 	mov	r18,zero
  805f68:	80800017 	ldw	r2,0(r16)
  805f6c:	11400003 	ldbu	r5,0(r2)
  805f70:	00801384 	movi	r2,78
  805f74:	28fff544 	addi	r3,r5,-43
  805f78:	18c03fcc 	andi	r3,r3,255
  805f7c:	10c08336 	bltu	r2,r3,80618c <__svfscanf_r+0xf28>
  805f80:	18c5883a 	add	r2,r3,r3
  805f84:	1085883a 	add	r2,r2,r2
  805f88:	00c02034 	movhi	r3,128
  805f8c:	18d7e704 	addi	r3,r3,24476
  805f90:	10c5883a 	add	r2,r2,r3
  805f94:	11000017 	ldw	r4,0(r2)
  805f98:	2000683a 	jmp	r4
  805f9c:	00806144 	movi	r2,389
  805fa0:	0080618c 	andi	r2,zero,390
  805fa4:	00806144 	movi	r2,389
  805fa8:	008061d0 	cmplti	r2,zero,391
  805fac:	0080618c 	andi	r2,zero,390
  805fb0:	0080623c 	xorhi	r2,zero,392
  805fb4:	00806270 	cmpltui	r2,zero,393
  805fb8:	00806270 	cmpltui	r2,zero,393
  805fbc:	00806270 	cmpltui	r2,zero,393
  805fc0:	00806270 	cmpltui	r2,zero,393
  805fc4:	00806270 	cmpltui	r2,zero,393
  805fc8:	00806270 	cmpltui	r2,zero,393
  805fcc:	00806270 	cmpltui	r2,zero,393
  805fd0:	00806270 	cmpltui	r2,zero,393
  805fd4:	00806270 	cmpltui	r2,zero,393
  805fd8:	0080618c 	andi	r2,zero,390
  805fdc:	0080618c 	andi	r2,zero,390
  805fe0:	0080618c 	andi	r2,zero,390
  805fe4:	0080618c 	andi	r2,zero,390
  805fe8:	0080618c 	andi	r2,zero,390
  805fec:	0080618c 	andi	r2,zero,390
  805ff0:	0080618c 	andi	r2,zero,390
  805ff4:	00806290 	cmplti	r2,zero,394
  805ff8:	0080618c 	andi	r2,zero,390
  805ffc:	0080618c 	andi	r2,zero,390
  806000:	0080618c 	andi	r2,zero,390
  806004:	008062a0 	cmpeqi	r2,zero,394
  806008:	008062ec 	andhi	r2,zero,395
  80600c:	0080618c 	andi	r2,zero,390
  806010:	0080618c 	andi	r2,zero,390
  806014:	008063c4 	movi	r2,399
  806018:	0080618c 	andi	r2,zero,390
  80601c:	0080618c 	andi	r2,zero,390
  806020:	0080618c 	andi	r2,zero,390
  806024:	0080618c 	andi	r2,zero,390
  806028:	00806370 	cmpltui	r2,zero,397
  80602c:	0080618c 	andi	r2,zero,390
  806030:	0080618c 	andi	r2,zero,390
  806034:	0080618c 	andi	r2,zero,390
  806038:	0080618c 	andi	r2,zero,390
  80603c:	0080618c 	andi	r2,zero,390
  806040:	00806404 	movi	r2,400
  806044:	0080618c 	andi	r2,zero,390
  806048:	0080618c 	andi	r2,zero,390
  80604c:	0080618c 	andi	r2,zero,390
  806050:	0080618c 	andi	r2,zero,390
  806054:	00806308 	cmpgei	r2,zero,396
  806058:	0080618c 	andi	r2,zero,390
  80605c:	0080618c 	andi	r2,zero,390
  806060:	0080618c 	andi	r2,zero,390
  806064:	0080618c 	andi	r2,zero,390
  806068:	0080618c 	andi	r2,zero,390
  80606c:	0080618c 	andi	r2,zero,390
  806070:	0080618c 	andi	r2,zero,390
  806074:	00806290 	cmplti	r2,zero,394
  806078:	0080618c 	andi	r2,zero,390
  80607c:	0080618c 	andi	r2,zero,390
  806080:	0080618c 	andi	r2,zero,390
  806084:	008062a0 	cmpeqi	r2,zero,394
  806088:	008062ec 	andhi	r2,zero,395
  80608c:	0080618c 	andi	r2,zero,390
  806090:	0080618c 	andi	r2,zero,390
  806094:	008063c4 	movi	r2,399
  806098:	0080618c 	andi	r2,zero,390
  80609c:	0080618c 	andi	r2,zero,390
  8060a0:	0080618c 	andi	r2,zero,390
  8060a4:	0080618c 	andi	r2,zero,390
  8060a8:	00806370 	cmpltui	r2,zero,397
  8060ac:	0080618c 	andi	r2,zero,390
  8060b0:	0080618c 	andi	r2,zero,390
  8060b4:	0080618c 	andi	r2,zero,390
  8060b8:	0080618c 	andi	r2,zero,390
  8060bc:	0080618c 	andi	r2,zero,390
  8060c0:	00806404 	movi	r2,400
  8060c4:	0080618c 	andi	r2,zero,390
  8060c8:	0080618c 	andi	r2,zero,390
  8060cc:	0080618c 	andi	r2,zero,390
  8060d0:	0080618c 	andi	r2,zero,390
  8060d4:	00806308 	cmpgei	r2,zero,396
  8060d8:	a880040c 	andi	r2,r21,16
  8060dc:	10004826 	beq	r2,zero,806200 <__svfscanf_r+0xf9c>
  8060e0:	0027883a 	mov	r19,zero
  8060e4:	00000b06 	br	806114 <__svfscanf_r+0xeb0>
  8060e8:	80800017 	ldw	r2,0(r16)
  8060ec:	b009883a 	mov	r4,r22
  8060f0:	800b883a 	mov	r5,r16
  8060f4:	148d883a 	add	r6,r2,r18
  8060f8:	81800015 	stw	r6,0(r16)
  8060fc:	9ca7883a 	add	r19,r19,r18
  806100:	0802da00 	call	802da0 <__srefill_r>
  806104:	103dc61e 	bne	r2,zero,805820 <__svfscanf_r+0x5bc>
  806108:	d880a317 	ldw	r2,652(sp)
  80610c:	1485c83a 	sub	r2,r2,r18
  806110:	d880a315 	stw	r2,652(sp)
  806114:	84800117 	ldw	r18,4(r16)
  806118:	d900a317 	ldw	r4,652(sp)
  80611c:	913ff216 	blt	r18,r4,8060e8 <__svfscanf_r+0xe84>
  806120:	d900a317 	ldw	r4,652(sp)
  806124:	80800017 	ldw	r2,0(r16)
  806128:	9927883a 	add	r19,r19,r4
  80612c:	9107c83a 	sub	r3,r18,r4
  806130:	110d883a 	add	r6,r2,r4
  806134:	8ce3883a 	add	r17,r17,r19
  806138:	80c00115 	stw	r3,4(r16)
  80613c:	81800015 	stw	r6,0(r16)
  806140:	003c5b06 	br	8052b0 <__svfscanf_r+0x4c>
  806144:	a880200c 	andi	r2,r21,128
  806148:	10001026 	beq	r2,zero,80618c <__svfscanf_r+0xf28>
  80614c:	00bfdfc4 	movi	r2,-129
  806150:	a8aa703a 	and	r21,r21,r2
  806154:	b9400005 	stb	r5,0(r23)
  806158:	bdc00044 	addi	r23,r23,1
  80615c:	80c00117 	ldw	r3,4(r16)
  806160:	8c400044 	addi	r17,r17,1
  806164:	18bfffc4 	addi	r2,r3,-1
  806168:	80800115 	stw	r2,4(r16)
  80616c:	00801f0e 	bge	zero,r2,8061ec <__svfscanf_r+0xf88>
  806170:	80800017 	ldw	r2,0(r16)
  806174:	10800044 	addi	r2,r2,1
  806178:	80800015 	stw	r2,0(r16)
  80617c:	d880a317 	ldw	r2,652(sp)
  806180:	10bfffc4 	addi	r2,r2,-1
  806184:	d880a315 	stw	r2,652(sp)
  806188:	103f771e 	bne	r2,zero,805f68 <__svfscanf_r+0xd04>
  80618c:	d8c09e17 	ldw	r3,632(sp)
  806190:	18000226 	beq	r3,zero,80619c <__svfscanf_r+0xf38>
  806194:	00bfbfc4 	movi	r2,-257
  806198:	a8aa703a 	and	r21,r21,r2
  80619c:	90ffffc4 	addi	r3,r18,-1
  8061a0:	00800044 	movi	r2,1
  8061a4:	10fef536 	bltu	r2,r3,805d7c <__svfscanf_r+0xb18>
  8061a8:	d900a517 	ldw	r4,660(sp)
  8061ac:	25fc622e 	bgeu	r4,r23,805338 <__svfscanf_r+0xd4>
  8061b0:	bdffffc4 	addi	r23,r23,-1
  8061b4:	b9400007 	ldb	r5,0(r23)
  8061b8:	b009883a 	mov	r4,r22
  8061bc:	800d883a 	mov	r6,r16
  8061c0:	080cf880 	call	80cf88 <_ungetc_r>
  8061c4:	d880a517 	ldw	r2,660(sp)
  8061c8:	15fff936 	bltu	r2,r23,8061b0 <__svfscanf_r+0xf4c>
  8061cc:	003c5a06 	br	805338 <__svfscanf_r+0xd4>
  8061d0:	a880800c 	andi	r2,r21,512
  8061d4:	103fed26 	beq	r2,zero,80618c <__svfscanf_r+0xf28>
  8061d8:	d9009e17 	ldw	r4,632(sp)
  8061dc:	00bf5fc4 	movi	r2,-641
  8061e0:	a8aa703a 	and	r21,r21,r2
  8061e4:	d9009f15 	stw	r4,636(sp)
  8061e8:	003fda06 	br	806154 <__svfscanf_r+0xef0>
  8061ec:	b009883a 	mov	r4,r22
  8061f0:	800b883a 	mov	r5,r16
  8061f4:	0802da00 	call	802da0 <__srefill_r>
  8061f8:	103fe026 	beq	r2,zero,80617c <__svfscanf_r+0xf18>
  8061fc:	003fe306 	br	80618c <__svfscanf_r+0xf28>
  806200:	d880a417 	ldw	r2,656(sp)
  806204:	d980a317 	ldw	r6,652(sp)
  806208:	01400044 	movi	r5,1
  80620c:	11000017 	ldw	r4,0(r2)
  806210:	800f883a 	mov	r7,r16
  806214:	08086b40 	call	8086b4 <fread>
  806218:	103c6726 	beq	r2,zero,8053b8 <__svfscanf_r+0x154>
  80621c:	d8c0a417 	ldw	r3,656(sp)
  806220:	d900a217 	ldw	r4,648(sp)
  806224:	88a3883a 	add	r17,r17,r2
  806228:	18c00104 	addi	r3,r3,4
  80622c:	21000044 	addi	r4,r4,1
  806230:	d8c0a415 	stw	r3,656(sp)
  806234:	d900a215 	stw	r4,648(sp)
  806238:	003c1d06 	br	8052b0 <__svfscanf_r+0x4c>
  80623c:	a880400c 	andi	r2,r21,256
  806240:	10000b26 	beq	r2,zero,806270 <__svfscanf_r+0x100c>
  806244:	00bfdfc4 	movi	r2,-129
  806248:	a8aa703a 	and	r21,r21,r2
  80624c:	d8809e17 	ldw	r2,632(sp)
  806250:	10800044 	addi	r2,r2,1
  806254:	d8809e15 	stw	r2,632(sp)
  806258:	983fc026 	beq	r19,zero,80615c <__svfscanf_r+0xef8>
  80625c:	d8c0a317 	ldw	r3,652(sp)
  806260:	9cffffc4 	addi	r19,r19,-1
  806264:	18c00044 	addi	r3,r3,1
  806268:	d8c0a315 	stw	r3,652(sp)
  80626c:	003fbb06 	br	80615c <__svfscanf_r+0xef8>
  806270:	e0803fcc 	andi	r2,fp,255
  806274:	1080201c 	xori	r2,r2,128
  806278:	10bfe004 	addi	r2,r2,-128
  80627c:	9085883a 	add	r2,r18,r2
  806280:	103fc21e 	bne	r2,zero,80618c <__svfscanf_r+0xf28>
  806284:	00bf9fc4 	movi	r2,-385
  806288:	a8aa703a 	and	r21,r21,r2
  80628c:	003fb106 	br	806154 <__svfscanf_r+0xef0>
  806290:	00800044 	movi	r2,1
  806294:	90bfbd1e 	bne	r18,r2,80618c <__svfscanf_r+0xf28>
  806298:	04800084 	movi	r18,2
  80629c:	003fad06 	br	806154 <__svfscanf_r+0xef0>
  8062a0:	a8c1400c 	andi	r3,r21,1280
  8062a4:	00810004 	movi	r2,1024
  8062a8:	18800426 	beq	r3,r2,8062bc <__svfscanf_r+0x1058>
  8062ac:	a884703a 	and	r2,r21,r2
  8062b0:	103fb626 	beq	r2,zero,80618c <__svfscanf_r+0xf28>
  8062b4:	d8809e17 	ldw	r2,632(sp)
  8062b8:	103fb826 	beq	r2,zero,80619c <__svfscanf_r+0xf38>
  8062bc:	a880800c 	andi	r2,r21,512
  8062c0:	1000051e 	bne	r2,zero,8062d8 <__svfscanf_r+0x1074>
  8062c4:	d8c09e17 	ldw	r3,632(sp)
  8062c8:	d9009f17 	ldw	r4,636(sp)
  8062cc:	ddc09c15 	stw	r23,624(sp)
  8062d0:	1907c83a 	sub	r3,r3,r4
  8062d4:	d8c09d15 	stw	r3,628(sp)
  8062d8:	00be7fc4 	movi	r2,-1537
  8062dc:	a884703a 	and	r2,r21,r2
  8062e0:	15406014 	ori	r21,r2,384
  8062e4:	d8009e15 	stw	zero,632(sp)
  8062e8:	003f9a06 	br	806154 <__svfscanf_r+0xef0>
  8062ec:	e0c03fcc 	andi	r3,fp,255
  8062f0:	18c0201c 	xori	r3,r3,128
  8062f4:	18ffe004 	addi	r3,r3,-128
  8062f8:	00800084 	movi	r2,2
  8062fc:	18bfa31e 	bne	r3,r2,80618c <__svfscanf_r+0xf28>
  806300:	070000c4 	movi	fp,3
  806304:	003f9306 	br	806154 <__svfscanf_r+0xef0>
  806308:	e0c03fcc 	andi	r3,fp,255
  80630c:	18c0201c 	xori	r3,r3,128
  806310:	18ffe004 	addi	r3,r3,-128
  806314:	008001c4 	movi	r2,7
  806318:	18bf9c1e 	bne	r3,r2,80618c <__svfscanf_r+0xf28>
  80631c:	07000204 	movi	fp,8
  806320:	003f8c06 	br	806154 <__svfscanf_r+0xef0>
  806324:	d8c09e17 	ldw	r3,632(sp)
  806328:	d9009f17 	ldw	r4,636(sp)
  80632c:	1905c83a 	sub	r2,r3,r4
  806330:	103ecb26 	beq	r2,zero,805e60 <__svfscanf_r+0xbfc>
  806334:	008dc83a 	sub	r6,zero,r2
  806338:	ddc09c15 	stw	r23,624(sp)
  80633c:	003ef506 	br	805f14 <__svfscanf_r+0xcb0>
  806340:	d880a417 	ldw	r2,656(sp)
  806344:	9009883a 	mov	r4,r18
  806348:	180b883a 	mov	r5,r3
  80634c:	15c00017 	ldw	r23,0(r2)
  806350:	15400104 	addi	r21,r2,4
  806354:	080a9f00 	call	80a9f0 <__isnand>
  806358:	1000311e 	bne	r2,zero,806420 <__svfscanf_r+0x11bc>
  80635c:	980b883a 	mov	r5,r19
  806360:	9009883a 	mov	r4,r18
  806364:	080ff3c0 	call	80ff3c <__truncdfsf2>
  806368:	b8800015 	stw	r2,0(r23)
  80636c:	003eca06 	br	805e98 <__svfscanf_r+0xc34>
  806370:	9000101e 	bne	r18,zero,8063b4 <__svfscanf_r+0x1150>
  806374:	a8c1c00c 	andi	r3,r21,1792
  806378:	0081c004 	movi	r2,1792
  80637c:	18800926 	beq	r3,r2,8063a4 <__svfscanf_r+0x1140>
  806380:	e0c03fcc 	andi	r3,fp,255
  806384:	18c0201c 	xori	r3,r3,128
  806388:	18ffe004 	addi	r3,r3,-128
  80638c:	00800044 	movi	r2,1
  806390:	18800226 	beq	r3,r2,80639c <__svfscanf_r+0x1138>
  806394:	00800104 	movi	r2,4
  806398:	18bf7c1e 	bne	r3,r2,80618c <__svfscanf_r+0xf28>
  80639c:	e7000044 	addi	fp,fp,1
  8063a0:	003f6c06 	br	806154 <__svfscanf_r+0xef0>
  8063a4:	00be1fc4 	movi	r2,-1921
  8063a8:	a8aa703a 	and	r21,r21,r2
  8063ac:	04800044 	movi	r18,1
  8063b0:	003f6806 	br	806154 <__svfscanf_r+0xef0>
  8063b4:	00800084 	movi	r2,2
  8063b8:	90bff11e 	bne	r18,r2,806380 <__svfscanf_r+0x111c>
  8063bc:	048000c4 	movi	r18,3
  8063c0:	003f6406 	br	806154 <__svfscanf_r+0xef0>
  8063c4:	e0c03fcc 	andi	r3,fp,255
  8063c8:	18c0201c 	xori	r3,r3,128
  8063cc:	18ffe004 	addi	r3,r3,-128
  8063d0:	1800071e 	bne	r3,zero,8063f0 <__svfscanf_r+0x118c>
  8063d4:	a8c1c00c 	andi	r3,r21,1792
  8063d8:	0081c004 	movi	r2,1792
  8063dc:	18bf6b1e 	bne	r3,r2,80618c <__svfscanf_r+0xf28>
  8063e0:	00be1fc4 	movi	r2,-1921
  8063e4:	a8aa703a 	and	r21,r21,r2
  8063e8:	07000044 	movi	fp,1
  8063ec:	003f5906 	br	806154 <__svfscanf_r+0xef0>
  8063f0:	008000c4 	movi	r2,3
  8063f4:	18bfe926 	beq	r3,r2,80639c <__svfscanf_r+0x1138>
  8063f8:	00800144 	movi	r2,5
  8063fc:	18bfe726 	beq	r3,r2,80639c <__svfscanf_r+0x1138>
  806400:	003f6206 	br	80618c <__svfscanf_r+0xf28>
  806404:	e0c03fcc 	andi	r3,fp,255
  806408:	18c0201c 	xori	r3,r3,128
  80640c:	18ffe004 	addi	r3,r3,-128
  806410:	00800184 	movi	r2,6
  806414:	18bf5d1e 	bne	r3,r2,80618c <__svfscanf_r+0xf28>
  806418:	070001c4 	movi	fp,7
  80641c:	003f4d06 	br	806154 <__svfscanf_r+0xef0>
  806420:	0009883a 	mov	r4,zero
  806424:	080aae00 	call	80aae0 <nanf>
  806428:	b8800015 	stw	r2,0(r23)
  80642c:	003e9a06 	br	805e98 <__svfscanf_r+0xc34>
  806430:	a00b883a 	mov	r5,r20
  806434:	d9000404 	addi	r4,sp,16
  806438:	080aa200 	call	80aa20 <__sccl>
  80643c:	1029883a 	mov	r20,r2
  806440:	ad401014 	ori	r21,r21,64
  806444:	04800044 	movi	r18,1
  806448:	003c7506 	br	805620 <__svfscanf_r+0x3bc>
  80644c:	01000204 	movi	r4,8
  806450:	00802074 	movhi	r2,129
  806454:	10b25604 	addi	r2,r2,-13992
  806458:	ad400054 	ori	r21,r21,1
  80645c:	048000c4 	movi	r18,3
  806460:	d900a115 	stw	r4,644(sp)
  806464:	d880a015 	stw	r2,640(sp)
  806468:	003c6d06 	br	805620 <__svfscanf_r+0x3bc>
  80646c:	ad400094 	ori	r21,r21,2
  806470:	003bd806 	br	8053d4 <__svfscanf_r+0x170>
  806474:	d900a317 	ldw	r4,652(sp)
  806478:	01400284 	movi	r5,10
  80647c:	08102900 	call	810290 <__mulsi3>
  806480:	15c5883a 	add	r2,r2,r23
  806484:	10bff404 	addi	r2,r2,-48
  806488:	d880a315 	stw	r2,652(sp)
  80648c:	003bd106 	br	8053d4 <__svfscanf_r+0x170>
  806490:	ad400414 	ori	r21,r21,16
  806494:	003bcf06 	br	8053d4 <__svfscanf_r+0x170>
  806498:	00800404 	movi	r2,16
  80649c:	00c02074 	movhi	r3,129
  8064a0:	18f25604 	addi	r3,r3,-13992
  8064a4:	ad408014 	ori	r21,r21,512
  8064a8:	048000c4 	movi	r18,3
  8064ac:	d880a115 	stw	r2,644(sp)
  8064b0:	d8c0a015 	stw	r3,640(sp)
  8064b4:	003c5a06 	br	805620 <__svfscanf_r+0x3bc>
  8064b8:	00c00284 	movi	r3,10
  8064bc:	01002074 	movhi	r4,129
  8064c0:	21325604 	addi	r4,r4,-13992
  8064c4:	048000c4 	movi	r18,3
  8064c8:	d8c0a115 	stw	r3,644(sp)
  8064cc:	d900a015 	stw	r4,640(sp)
  8064d0:	003c5306 	br	805620 <__svfscanf_r+0x3bc>
  8064d4:	00c02074 	movhi	r3,129
  8064d8:	18f0f304 	addi	r3,r3,-15412
  8064dc:	048000c4 	movi	r18,3
  8064e0:	d8c0a015 	stw	r3,640(sp)
  8064e4:	d800a115 	stw	zero,644(sp)
  8064e8:	003c4d06 	br	805620 <__svfscanf_r+0x3bc>
  8064ec:	d8c0a117 	ldw	r3,644(sp)
  8064f0:	18c5883a 	add	r2,r3,r3
  8064f4:	00c02074 	movhi	r3,129
  8064f8:	18d36884 	addi	r3,r3,19874
  8064fc:	10c5883a 	add	r2,r2,r3
  806500:	1080000f 	ldh	r2,0(r2)
  806504:	00fd1fc4 	movi	r3,-2945
  806508:	90e4703a 	and	r18,r18,r3
  80650c:	d880a115 	stw	r2,644(sp)
  806510:	003de806 	br	805cb4 <__svfscanf_r+0xa50>
  806514:	d900a117 	ldw	r4,644(sp)
  806518:	00c02074 	movhi	r3,129
  80651c:	18d36884 	addi	r3,r3,19874
  806520:	2105883a 	add	r2,r4,r4
  806524:	10c5883a 	add	r2,r2,r3
  806528:	1080000f 	ldh	r2,0(r2)
  80652c:	00c00204 	movi	r3,8
  806530:	d880a115 	stw	r2,644(sp)
  806534:	18bd870e 	bge	r3,r2,805b54 <__svfscanf_r+0x8f0>
  806538:	00bd1fc4 	movi	r2,-2945
  80653c:	90a4703a 	and	r18,r18,r2
  806540:	003ddc06 	br	805cb4 <__svfscanf_r+0xa50>
  806544:	d8c0a117 	ldw	r3,644(sp)
  806548:	00800284 	movi	r2,10
  80654c:	10fffa16 	blt	r2,r3,806538 <__svfscanf_r+0x12d4>
  806550:	003d8006 	br	805b54 <__svfscanf_r+0x8f0>
  806554:	90c1800c 	andi	r3,r18,1536
  806558:	00808004 	movi	r2,512
  80655c:	18bd7d1e 	bne	r3,r2,805b54 <__svfscanf_r+0x8f0>
  806560:	00bf7fc4 	movi	r2,-513
  806564:	9084703a 	and	r2,r18,r2
  806568:	01000404 	movi	r4,16
  80656c:	14814014 	ori	r18,r2,1280
  806570:	d900a115 	stw	r4,644(sp)
  806574:	003dcf06 	br	805cb4 <__svfscanf_r+0xa50>
  806578:	04800104 	movi	r18,4
  80657c:	003c2806 	br	805620 <__svfscanf_r+0x3bc>
  806580:	ad401014 	ori	r21,r21,64
  806584:	0025883a 	mov	r18,zero
  806588:	003c2506 	br	805620 <__svfscanf_r+0x3bc>
  80658c:	ad400114 	ori	r21,r21,4
  806590:	003b9006 	br	8053d4 <__svfscanf_r+0x170>
  806594:	0027883a 	mov	r19,zero
  806598:	003cac06 	br	80584c <__svfscanf_r+0x5e8>
  80659c:	903d5226 	beq	r18,zero,805ae8 <__svfscanf_r+0x884>
  8065a0:	94bfffc4 	addi	r18,r18,-1
  8065a4:	d8c04404 	addi	r3,sp,272
  8065a8:	1c85883a 	add	r2,r3,r18
  8065ac:	11400003 	ldbu	r5,0(r2)
  8065b0:	b009883a 	mov	r4,r22
  8065b4:	800d883a 	mov	r6,r16
  8065b8:	080cf880 	call	80cf88 <_ungetc_r>
  8065bc:	003ff706 	br	80659c <__svfscanf_r+0x1338>
  8065c0:	00bfff84 	movi	r2,-2
  8065c4:	18bd361e 	bne	r3,r2,805aa0 <__svfscanf_r+0x83c>
  8065c8:	003d4006 	br	805acc <__svfscanf_r+0x868>
  8065cc:	d900a417 	ldw	r4,656(sp)
  8065d0:	25400017 	ldw	r21,0(r4)
  8065d4:	21000104 	addi	r4,r4,4
  8065d8:	d900a415 	stw	r4,656(sp)
  8065dc:	003d0606 	br	8059f8 <__svfscanf_r+0x794>
  8065e0:	983b5526 	beq	r19,zero,805338 <__svfscanf_r+0xd4>
  8065e4:	8ce3883a 	add	r17,r17,r19
  8065e8:	003b3106 	br	8052b0 <__svfscanf_r+0x4c>
  8065ec:	00bfff84 	movi	r2,-2
  8065f0:	18bc621e 	bne	r3,r2,80577c <__svfscanf_r+0x518>
  8065f4:	003c6906 	br	80579c <__svfscanf_r+0x538>
  8065f8:	b009883a 	mov	r4,r22
  8065fc:	800b883a 	mov	r5,r16
  806600:	0802da00 	call	802da0 <__srefill_r>
  806604:	103c6726 	beq	r2,zero,8057a4 <__svfscanf_r+0x540>
  806608:	903b6b1e 	bne	r18,zero,8053b8 <__svfscanf_r+0x154>
  80660c:	a83b281e 	bne	r21,zero,8052b0 <__svfscanf_r+0x4c>
  806610:	d8c0a217 	ldw	r3,648(sp)
  806614:	18c00044 	addi	r3,r3,1
  806618:	d8c0a215 	stw	r3,648(sp)
  80661c:	003b2406 	br	8052b0 <__svfscanf_r+0x4c>
  806620:	8080030b 	ldhu	r2,12(r16)
  806624:	1080100c 	andi	r2,r2,64
  806628:	103b4326 	beq	r2,zero,805338 <__svfscanf_r+0xd4>
  80662c:	003b6406 	br	8053c0 <__svfscanf_r+0x15c>
  806630:	d8c0a417 	ldw	r3,656(sp)
  806634:	1cc00017 	ldw	r19,0(r3)
  806638:	18c00104 	addi	r3,r3,4
  80663c:	d8c0a415 	stw	r3,656(sp)
  806640:	003c2906 	br	8056e8 <__svfscanf_r+0x484>
  806644:	00800204 	movi	r2,8
  806648:	00c02074 	movhi	r3,129
  80664c:	18f25604 	addi	r3,r3,-13992
  806650:	048000c4 	movi	r18,3
  806654:	d880a115 	stw	r2,644(sp)
  806658:	d8c0a015 	stw	r3,640(sp)
  80665c:	003bf006 	br	805620 <__svfscanf_r+0x3bc>
  806660:	04800084 	movi	r18,2
  806664:	003bee06 	br	805620 <__svfscanf_r+0x3bc>
  806668:	01000404 	movi	r4,16
  80666c:	00802074 	movhi	r2,129
  806670:	10b25604 	addi	r2,r2,-13992
  806674:	ad408814 	ori	r21,r21,544
  806678:	048000c4 	movi	r18,3
  80667c:	d900a115 	stw	r4,644(sp)
  806680:	d880a015 	stw	r2,640(sp)
  806684:	003be606 	br	805620 <__svfscanf_r+0x3bc>
  806688:	a880040c 	andi	r2,r21,16
  80668c:	103b081e 	bne	r2,zero,8052b0 <__svfscanf_r+0x4c>
  806690:	a880010c 	andi	r2,r21,4
  806694:	10004e26 	beq	r2,zero,8067d0 <__svfscanf_r+0x156c>
  806698:	d8c0a417 	ldw	r3,656(sp)
  80669c:	18800017 	ldw	r2,0(r3)
  8066a0:	18c00104 	addi	r3,r3,4
  8066a4:	d8c0a415 	stw	r3,656(sp)
  8066a8:	1440000d 	sth	r17,0(r2)
  8066ac:	003b0006 	br	8052b0 <__svfscanf_r+0x4c>
  8066b0:	d880a417 	ldw	r2,656(sp)
  8066b4:	dd400404 	addi	r21,sp,16
  8066b8:	14800017 	ldw	r18,0(r2)
  8066bc:	9027883a 	mov	r19,r18
  8066c0:	81000017 	ldw	r4,0(r16)
  8066c4:	20800003 	ldbu	r2,0(r4)
  8066c8:	a885883a 	add	r2,r21,r2
  8066cc:	10c00007 	ldb	r3,0(r2)
  8066d0:	18001426 	beq	r3,zero,806724 <__svfscanf_r+0x14c0>
  8066d4:	d8c0a317 	ldw	r3,652(sp)
  8066d8:	80800117 	ldw	r2,4(r16)
  8066dc:	21800044 	addi	r6,r4,1
  8066e0:	18ffffc4 	addi	r3,r3,-1
  8066e4:	d8c0a315 	stw	r3,652(sp)
  8066e8:	10ffffc4 	addi	r3,r2,-1
  8066ec:	80c00115 	stw	r3,4(r16)
  8066f0:	20800003 	ldbu	r2,0(r4)
  8066f4:	90800005 	stb	r2,0(r18)
  8066f8:	d900a317 	ldw	r4,652(sp)
  8066fc:	81800015 	stw	r6,0(r16)
  806700:	94800044 	addi	r18,r18,1
  806704:	20000726 	beq	r4,zero,806724 <__svfscanf_r+0x14c0>
  806708:	80800117 	ldw	r2,4(r16)
  80670c:	00bfec16 	blt	zero,r2,8066c0 <__svfscanf_r+0x145c>
  806710:	b009883a 	mov	r4,r22
  806714:	800b883a 	mov	r5,r16
  806718:	0802da00 	call	802da0 <__srefill_r>
  80671c:	103fe826 	beq	r2,zero,8066c0 <__svfscanf_r+0x145c>
  806720:	9cbb2526 	beq	r19,r18,8053b8 <__svfscanf_r+0x154>
  806724:	94e7c83a 	sub	r19,r18,r19
  806728:	983b0326 	beq	r19,zero,805338 <__svfscanf_r+0xd4>
  80672c:	90000005 	stb	zero,0(r18)
  806730:	d880a417 	ldw	r2,656(sp)
  806734:	d8c0a217 	ldw	r3,648(sp)
  806738:	8ce3883a 	add	r17,r17,r19
  80673c:	10800104 	addi	r2,r2,4
  806740:	18c00044 	addi	r3,r3,1
  806744:	d880a415 	stw	r2,656(sp)
  806748:	d8c0a215 	stw	r3,648(sp)
  80674c:	003ad806 	br	8052b0 <__svfscanf_r+0x4c>
  806750:	d900a517 	ldw	r4,660(sp)
  806754:	25faf82e 	bgeu	r4,r23,805338 <__svfscanf_r+0xd4>
  806758:	bdffffc4 	addi	r23,r23,-1
  80675c:	b9400007 	ldb	r5,0(r23)
  806760:	b009883a 	mov	r4,r22
  806764:	800d883a 	mov	r6,r16
  806768:	080cf880 	call	80cf88 <_ungetc_r>
  80676c:	d8c0a517 	ldw	r3,660(sp)
  806770:	1dfff936 	bltu	r3,r23,806758 <__svfscanf_r+0x14f4>
  806774:	003af006 	br	805338 <__svfscanf_r+0xd4>
  806778:	a880040c 	andi	r2,r21,16
  80677c:	10002d26 	beq	r2,zero,806834 <__svfscanf_r+0x15d0>
  806780:	0025883a 	mov	r18,zero
  806784:	00000906 	br	8067ac <__svfscanf_r+0x1548>
  806788:	80c00117 	ldw	r3,4(r16)
  80678c:	d880a317 	ldw	r2,652(sp)
  806790:	29800044 	addi	r6,r5,1
  806794:	18ffffc4 	addi	r3,r3,-1
  806798:	94800044 	addi	r18,r18,1
  80679c:	81800015 	stw	r6,0(r16)
  8067a0:	80c00115 	stw	r3,4(r16)
  8067a4:	14800826 	beq	r2,r18,8067c8 <__svfscanf_r+0x1564>
  8067a8:	00c0120e 	bge	zero,r3,8067f4 <__svfscanf_r+0x1590>
  8067ac:	81400017 	ldw	r5,0(r16)
  8067b0:	98800017 	ldw	r2,0(r19)
  8067b4:	28c00003 	ldbu	r3,0(r5)
  8067b8:	1887883a 	add	r3,r3,r2
  8067bc:	19000003 	ldbu	r4,0(r3)
  8067c0:	2100020c 	andi	r4,r4,8
  8067c4:	203ff026 	beq	r4,zero,806788 <__svfscanf_r+0x1524>
  8067c8:	8ca3883a 	add	r17,r17,r18
  8067cc:	003ab806 	br	8052b0 <__svfscanf_r+0x4c>
  8067d0:	a880004c 	andi	r2,r21,1
  8067d4:	1005003a 	cmpeq	r2,r2,zero
  8067d8:	10000b1e 	bne	r2,zero,806808 <__svfscanf_r+0x15a4>
  8067dc:	d900a417 	ldw	r4,656(sp)
  8067e0:	20800017 	ldw	r2,0(r4)
  8067e4:	21000104 	addi	r4,r4,4
  8067e8:	d900a415 	stw	r4,656(sp)
  8067ec:	14400015 	stw	r17,0(r2)
  8067f0:	003aaf06 	br	8052b0 <__svfscanf_r+0x4c>
  8067f4:	b009883a 	mov	r4,r22
  8067f8:	800b883a 	mov	r5,r16
  8067fc:	0802da00 	call	802da0 <__srefill_r>
  806800:	103fea26 	beq	r2,zero,8067ac <__svfscanf_r+0x1548>
  806804:	003ff006 	br	8067c8 <__svfscanf_r+0x1564>
  806808:	a880008c 	andi	r2,r21,2
  80680c:	10002c26 	beq	r2,zero,8068c0 <__svfscanf_r+0x165c>
  806810:	d8c0a417 	ldw	r3,656(sp)
  806814:	d900a417 	ldw	r4,656(sp)
  806818:	18800017 	ldw	r2,0(r3)
  80681c:	8807d7fa 	srai	r3,r17,31
  806820:	21000104 	addi	r4,r4,4
  806824:	d900a415 	stw	r4,656(sp)
  806828:	14400015 	stw	r17,0(r2)
  80682c:	10c00115 	stw	r3,4(r2)
  806830:	003a9f06 	br	8052b0 <__svfscanf_r+0x4c>
  806834:	d8c0a417 	ldw	r3,656(sp)
  806838:	1d400017 	ldw	r21,0(r3)
  80683c:	a825883a 	mov	r18,r21
  806840:	00000e06 	br	80687c <__svfscanf_r+0x1618>
  806844:	80800117 	ldw	r2,4(r16)
  806848:	d900a317 	ldw	r4,652(sp)
  80684c:	29800044 	addi	r6,r5,1
  806850:	10ffffc4 	addi	r3,r2,-1
  806854:	213fffc4 	addi	r4,r4,-1
  806858:	d900a315 	stw	r4,652(sp)
  80685c:	80c00115 	stw	r3,4(r16)
  806860:	28800003 	ldbu	r2,0(r5)
  806864:	90800005 	stb	r2,0(r18)
  806868:	81800015 	stw	r6,0(r16)
  80686c:	94800044 	addi	r18,r18,1
  806870:	20000926 	beq	r4,zero,806898 <__svfscanf_r+0x1634>
  806874:	80800117 	ldw	r2,4(r16)
  806878:	0080170e 	bge	zero,r2,8068d8 <__svfscanf_r+0x1674>
  80687c:	81400017 	ldw	r5,0(r16)
  806880:	98800017 	ldw	r2,0(r19)
  806884:	28c00003 	ldbu	r3,0(r5)
  806888:	1887883a 	add	r3,r3,r2
  80688c:	19000003 	ldbu	r4,0(r3)
  806890:	2100020c 	andi	r4,r4,8
  806894:	203feb26 	beq	r4,zero,806844 <__svfscanf_r+0x15e0>
  806898:	9545c83a 	sub	r2,r18,r21
  80689c:	d8c0a217 	ldw	r3,648(sp)
  8068a0:	88a3883a 	add	r17,r17,r2
  8068a4:	d880a417 	ldw	r2,656(sp)
  8068a8:	18c00044 	addi	r3,r3,1
  8068ac:	d8c0a215 	stw	r3,648(sp)
  8068b0:	10800104 	addi	r2,r2,4
  8068b4:	d880a415 	stw	r2,656(sp)
  8068b8:	90000005 	stb	zero,0(r18)
  8068bc:	003a7c06 	br	8052b0 <__svfscanf_r+0x4c>
  8068c0:	d8c0a417 	ldw	r3,656(sp)
  8068c4:	18800017 	ldw	r2,0(r3)
  8068c8:	18c00104 	addi	r3,r3,4
  8068cc:	d8c0a415 	stw	r3,656(sp)
  8068d0:	14400015 	stw	r17,0(r2)
  8068d4:	003a7606 	br	8052b0 <__svfscanf_r+0x4c>
  8068d8:	b009883a 	mov	r4,r22
  8068dc:	800b883a 	mov	r5,r16
  8068e0:	0802da00 	call	802da0 <__srefill_r>
  8068e4:	103fe526 	beq	r2,zero,80687c <__svfscanf_r+0x1618>
  8068e8:	003feb06 	br	806898 <__svfscanf_r+0x1634>

008068ec <__svfscanf>:
  8068ec:	00802074 	movhi	r2,129
  8068f0:	109bb804 	addi	r2,r2,28384
  8068f4:	2013883a 	mov	r9,r4
  8068f8:	11000017 	ldw	r4,0(r2)
  8068fc:	2805883a 	mov	r2,r5
  806900:	300f883a 	mov	r7,r6
  806904:	480b883a 	mov	r5,r9
  806908:	100d883a 	mov	r6,r2
  80690c:	08052641 	jmpi	805264 <__svfscanf_r>

00806910 <_vfscanf_r>:
  806910:	defffb04 	addi	sp,sp,-20
  806914:	dcc00315 	stw	r19,12(sp)
  806918:	dc800215 	stw	r18,8(sp)
  80691c:	dc400115 	stw	r17,4(sp)
  806920:	dc000015 	stw	r16,0(sp)
  806924:	dfc00415 	stw	ra,16(sp)
  806928:	2021883a 	mov	r16,r4
  80692c:	2823883a 	mov	r17,r5
  806930:	3025883a 	mov	r18,r6
  806934:	3827883a 	mov	r19,r7
  806938:	20000226 	beq	r4,zero,806944 <_vfscanf_r+0x34>
  80693c:	20800e17 	ldw	r2,56(r4)
  806940:	10000b26 	beq	r2,zero,806970 <_vfscanf_r+0x60>
  806944:	8009883a 	mov	r4,r16
  806948:	880b883a 	mov	r5,r17
  80694c:	900d883a 	mov	r6,r18
  806950:	980f883a 	mov	r7,r19
  806954:	dfc00417 	ldw	ra,16(sp)
  806958:	dcc00317 	ldw	r19,12(sp)
  80695c:	dc800217 	ldw	r18,8(sp)
  806960:	dc400117 	ldw	r17,4(sp)
  806964:	dc000017 	ldw	r16,0(sp)
  806968:	dec00504 	addi	sp,sp,20
  80696c:	08052641 	jmpi	805264 <__svfscanf_r>
  806970:	08011c80 	call	8011c8 <__sinit>
  806974:	003ff306 	br	806944 <_vfscanf_r+0x34>

00806978 <vfscanf>:
  806978:	defffb04 	addi	sp,sp,-20
  80697c:	dcc00315 	stw	r19,12(sp)
  806980:	04c02074 	movhi	r19,129
  806984:	9cdbb804 	addi	r19,r19,28384
  806988:	98c00017 	ldw	r3,0(r19)
  80698c:	dc800215 	stw	r18,8(sp)
  806990:	dc400115 	stw	r17,4(sp)
  806994:	dc000015 	stw	r16,0(sp)
  806998:	dfc00415 	stw	ra,16(sp)
  80699c:	2021883a 	mov	r16,r4
  8069a0:	2823883a 	mov	r17,r5
  8069a4:	3025883a 	mov	r18,r6
  8069a8:	18000326 	beq	r3,zero,8069b8 <vfscanf+0x40>
  8069ac:	18800e17 	ldw	r2,56(r3)
  8069b0:	1809883a 	mov	r4,r3
  8069b4:	10000b26 	beq	r2,zero,8069e4 <vfscanf+0x6c>
  8069b8:	99000017 	ldw	r4,0(r19)
  8069bc:	800b883a 	mov	r5,r16
  8069c0:	880d883a 	mov	r6,r17
  8069c4:	900f883a 	mov	r7,r18
  8069c8:	dfc00417 	ldw	ra,16(sp)
  8069cc:	dcc00317 	ldw	r19,12(sp)
  8069d0:	dc800217 	ldw	r18,8(sp)
  8069d4:	dc400117 	ldw	r17,4(sp)
  8069d8:	dc000017 	ldw	r16,0(sp)
  8069dc:	dec00504 	addi	sp,sp,20
  8069e0:	08052641 	jmpi	805264 <__svfscanf_r>
  8069e4:	08011c80 	call	8011c8 <__sinit>
  8069e8:	003ff306 	br	8069b8 <vfscanf+0x40>

008069ec <_write_r>:
  8069ec:	defffd04 	addi	sp,sp,-12
  8069f0:	dc000015 	stw	r16,0(sp)
  8069f4:	040020b4 	movhi	r16,130
  8069f8:	8422bf04 	addi	r16,r16,-29956
  8069fc:	dc400115 	stw	r17,4(sp)
  806a00:	80000015 	stw	zero,0(r16)
  806a04:	2023883a 	mov	r17,r4
  806a08:	2809883a 	mov	r4,r5
  806a0c:	300b883a 	mov	r5,r6
  806a10:	380d883a 	mov	r6,r7
  806a14:	dfc00215 	stw	ra,8(sp)
  806a18:	0811ac40 	call	811ac4 <write>
  806a1c:	1007883a 	mov	r3,r2
  806a20:	00bfffc4 	movi	r2,-1
  806a24:	18800626 	beq	r3,r2,806a40 <_write_r+0x54>
  806a28:	1805883a 	mov	r2,r3
  806a2c:	dfc00217 	ldw	ra,8(sp)
  806a30:	dc400117 	ldw	r17,4(sp)
  806a34:	dc000017 	ldw	r16,0(sp)
  806a38:	dec00304 	addi	sp,sp,12
  806a3c:	f800283a 	ret
  806a40:	80800017 	ldw	r2,0(r16)
  806a44:	103ff826 	beq	r2,zero,806a28 <_write_r+0x3c>
  806a48:	88800015 	stw	r2,0(r17)
  806a4c:	1805883a 	mov	r2,r3
  806a50:	dfc00217 	ldw	ra,8(sp)
  806a54:	dc400117 	ldw	r17,4(sp)
  806a58:	dc000017 	ldw	r16,0(sp)
  806a5c:	dec00304 	addi	sp,sp,12
  806a60:	f800283a 	ret

00806a64 <__swsetup_r>:
  806a64:	00802074 	movhi	r2,129
  806a68:	109bb804 	addi	r2,r2,28384
  806a6c:	10c00017 	ldw	r3,0(r2)
  806a70:	defffd04 	addi	sp,sp,-12
  806a74:	dc400115 	stw	r17,4(sp)
  806a78:	dc000015 	stw	r16,0(sp)
  806a7c:	dfc00215 	stw	ra,8(sp)
  806a80:	2023883a 	mov	r17,r4
  806a84:	2821883a 	mov	r16,r5
  806a88:	18000226 	beq	r3,zero,806a94 <__swsetup_r+0x30>
  806a8c:	18800e17 	ldw	r2,56(r3)
  806a90:	10001f26 	beq	r2,zero,806b10 <__swsetup_r+0xac>
  806a94:	8100030b 	ldhu	r4,12(r16)
  806a98:	2080020c 	andi	r2,r4,8
  806a9c:	10002826 	beq	r2,zero,806b40 <__swsetup_r+0xdc>
  806aa0:	81400417 	ldw	r5,16(r16)
  806aa4:	28001d26 	beq	r5,zero,806b1c <__swsetup_r+0xb8>
  806aa8:	2080004c 	andi	r2,r4,1
  806aac:	1005003a 	cmpeq	r2,r2,zero
  806ab0:	10000b26 	beq	r2,zero,806ae0 <__swsetup_r+0x7c>
  806ab4:	2080008c 	andi	r2,r4,2
  806ab8:	10001226 	beq	r2,zero,806b04 <__swsetup_r+0xa0>
  806abc:	0005883a 	mov	r2,zero
  806ac0:	80800215 	stw	r2,8(r16)
  806ac4:	28000b26 	beq	r5,zero,806af4 <__swsetup_r+0x90>
  806ac8:	0005883a 	mov	r2,zero
  806acc:	dfc00217 	ldw	ra,8(sp)
  806ad0:	dc400117 	ldw	r17,4(sp)
  806ad4:	dc000017 	ldw	r16,0(sp)
  806ad8:	dec00304 	addi	sp,sp,12
  806adc:	f800283a 	ret
  806ae0:	80800517 	ldw	r2,20(r16)
  806ae4:	80000215 	stw	zero,8(r16)
  806ae8:	0085c83a 	sub	r2,zero,r2
  806aec:	80800615 	stw	r2,24(r16)
  806af0:	283ff51e 	bne	r5,zero,806ac8 <__swsetup_r+0x64>
  806af4:	2080200c 	andi	r2,r4,128
  806af8:	103ff326 	beq	r2,zero,806ac8 <__swsetup_r+0x64>
  806afc:	00bfffc4 	movi	r2,-1
  806b00:	003ff206 	br	806acc <__swsetup_r+0x68>
  806b04:	80800517 	ldw	r2,20(r16)
  806b08:	80800215 	stw	r2,8(r16)
  806b0c:	003fed06 	br	806ac4 <__swsetup_r+0x60>
  806b10:	1809883a 	mov	r4,r3
  806b14:	08011c80 	call	8011c8 <__sinit>
  806b18:	003fde06 	br	806a94 <__swsetup_r+0x30>
  806b1c:	20c0a00c 	andi	r3,r4,640
  806b20:	00808004 	movi	r2,512
  806b24:	18bfe026 	beq	r3,r2,806aa8 <__swsetup_r+0x44>
  806b28:	8809883a 	mov	r4,r17
  806b2c:	800b883a 	mov	r5,r16
  806b30:	080226c0 	call	80226c <__smakebuf_r>
  806b34:	8100030b 	ldhu	r4,12(r16)
  806b38:	81400417 	ldw	r5,16(r16)
  806b3c:	003fda06 	br	806aa8 <__swsetup_r+0x44>
  806b40:	2080040c 	andi	r2,r4,16
  806b44:	103fed26 	beq	r2,zero,806afc <__swsetup_r+0x98>
  806b48:	2080010c 	andi	r2,r4,4
  806b4c:	10001226 	beq	r2,zero,806b98 <__swsetup_r+0x134>
  806b50:	81400c17 	ldw	r5,48(r16)
  806b54:	28000526 	beq	r5,zero,806b6c <__swsetup_r+0x108>
  806b58:	80801004 	addi	r2,r16,64
  806b5c:	28800226 	beq	r5,r2,806b68 <__swsetup_r+0x104>
  806b60:	8809883a 	mov	r4,r17
  806b64:	08016f00 	call	8016f0 <_free_r>
  806b68:	80000c15 	stw	zero,48(r16)
  806b6c:	8080030b 	ldhu	r2,12(r16)
  806b70:	81400417 	ldw	r5,16(r16)
  806b74:	80000115 	stw	zero,4(r16)
  806b78:	10bff6cc 	andi	r2,r2,65499
  806b7c:	8080030d 	sth	r2,12(r16)
  806b80:	81400015 	stw	r5,0(r16)
  806b84:	8080030b 	ldhu	r2,12(r16)
  806b88:	10800214 	ori	r2,r2,8
  806b8c:	113fffcc 	andi	r4,r2,65535
  806b90:	8080030d 	sth	r2,12(r16)
  806b94:	003fc306 	br	806aa4 <__swsetup_r+0x40>
  806b98:	81400417 	ldw	r5,16(r16)
  806b9c:	003ff906 	br	806b84 <__swsetup_r+0x120>

00806ba0 <_close_r>:
  806ba0:	defffd04 	addi	sp,sp,-12
  806ba4:	dc000015 	stw	r16,0(sp)
  806ba8:	040020b4 	movhi	r16,130
  806bac:	8422bf04 	addi	r16,r16,-29956
  806bb0:	dc400115 	stw	r17,4(sp)
  806bb4:	80000015 	stw	zero,0(r16)
  806bb8:	2023883a 	mov	r17,r4
  806bbc:	2809883a 	mov	r4,r5
  806bc0:	dfc00215 	stw	ra,8(sp)
  806bc4:	0810b580 	call	810b58 <close>
  806bc8:	1007883a 	mov	r3,r2
  806bcc:	00bfffc4 	movi	r2,-1
  806bd0:	18800626 	beq	r3,r2,806bec <_close_r+0x4c>
  806bd4:	1805883a 	mov	r2,r3
  806bd8:	dfc00217 	ldw	ra,8(sp)
  806bdc:	dc400117 	ldw	r17,4(sp)
  806be0:	dc000017 	ldw	r16,0(sp)
  806be4:	dec00304 	addi	sp,sp,12
  806be8:	f800283a 	ret
  806bec:	80800017 	ldw	r2,0(r16)
  806bf0:	103ff826 	beq	r2,zero,806bd4 <_close_r+0x34>
  806bf4:	88800015 	stw	r2,0(r17)
  806bf8:	1805883a 	mov	r2,r3
  806bfc:	dfc00217 	ldw	ra,8(sp)
  806c00:	dc400117 	ldw	r17,4(sp)
  806c04:	dc000017 	ldw	r16,0(sp)
  806c08:	dec00304 	addi	sp,sp,12
  806c0c:	f800283a 	ret

00806c10 <quorem>:
  806c10:	28c00417 	ldw	r3,16(r5)
  806c14:	20800417 	ldw	r2,16(r4)
  806c18:	defff104 	addi	sp,sp,-60
  806c1c:	dfc00e15 	stw	ra,56(sp)
  806c20:	df000d15 	stw	fp,52(sp)
  806c24:	ddc00c15 	stw	r23,48(sp)
  806c28:	dd800b15 	stw	r22,44(sp)
  806c2c:	dd400a15 	stw	r21,40(sp)
  806c30:	dd000915 	stw	r20,36(sp)
  806c34:	dcc00815 	stw	r19,32(sp)
  806c38:	dc800715 	stw	r18,28(sp)
  806c3c:	dc400615 	stw	r17,24(sp)
  806c40:	dc000515 	stw	r16,20(sp)
  806c44:	d9000315 	stw	r4,12(sp)
  806c48:	d9400415 	stw	r5,16(sp)
  806c4c:	10c07f16 	blt	r2,r3,806e4c <quorem+0x23c>
  806c50:	1d3fffc4 	addi	r20,r3,-1
  806c54:	d8c00417 	ldw	r3,16(sp)
  806c58:	d9000317 	ldw	r4,12(sp)
  806c5c:	a505883a 	add	r2,r20,r20
  806c60:	1085883a 	add	r2,r2,r2
  806c64:	1cc00504 	addi	r19,r3,20
  806c68:	25c00504 	addi	r23,r4,20
  806c6c:	98ad883a 	add	r22,r19,r2
  806c70:	15c7883a 	add	r3,r2,r23
  806c74:	b1400017 	ldw	r5,0(r22)
  806c78:	19000017 	ldw	r4,0(r3)
  806c7c:	d8c00015 	stw	r3,0(sp)
  806c80:	29400044 	addi	r5,r5,1
  806c84:	d9000215 	stw	r4,8(sp)
  806c88:	08102800 	call	810280 <__udivsi3>
  806c8c:	1039883a 	mov	fp,r2
  806c90:	10003d1e 	bne	r2,zero,806d88 <quorem+0x178>
  806c94:	d9400417 	ldw	r5,16(sp)
  806c98:	d9000317 	ldw	r4,12(sp)
  806c9c:	08092280 	call	809228 <__mcmp>
  806ca0:	10002c16 	blt	r2,zero,806d54 <quorem+0x144>
  806ca4:	e7000044 	addi	fp,fp,1
  806ca8:	b80f883a 	mov	r7,r23
  806cac:	0011883a 	mov	r8,zero
  806cb0:	0009883a 	mov	r4,zero
  806cb4:	99400017 	ldw	r5,0(r19)
  806cb8:	38c00017 	ldw	r3,0(r7)
  806cbc:	9cc00104 	addi	r19,r19,4
  806cc0:	28bfffcc 	andi	r2,r5,65535
  806cc4:	2085883a 	add	r2,r4,r2
  806cc8:	11bfffcc 	andi	r6,r2,65535
  806ccc:	193fffcc 	andi	r4,r3,65535
  806cd0:	1004d43a 	srli	r2,r2,16
  806cd4:	280ad43a 	srli	r5,r5,16
  806cd8:	2189c83a 	sub	r4,r4,r6
  806cdc:	2209883a 	add	r4,r4,r8
  806ce0:	1806d43a 	srli	r3,r3,16
  806ce4:	288b883a 	add	r5,r5,r2
  806ce8:	200dd43a 	srai	r6,r4,16
  806cec:	28bfffcc 	andi	r2,r5,65535
  806cf0:	1887c83a 	sub	r3,r3,r2
  806cf4:	1987883a 	add	r3,r3,r6
  806cf8:	3900000d 	sth	r4,0(r7)
  806cfc:	38c0008d 	sth	r3,2(r7)
  806d00:	2808d43a 	srli	r4,r5,16
  806d04:	39c00104 	addi	r7,r7,4
  806d08:	1811d43a 	srai	r8,r3,16
  806d0c:	b4ffe92e 	bgeu	r22,r19,806cb4 <quorem+0xa4>
  806d10:	a505883a 	add	r2,r20,r20
  806d14:	1085883a 	add	r2,r2,r2
  806d18:	b885883a 	add	r2,r23,r2
  806d1c:	10c00017 	ldw	r3,0(r2)
  806d20:	18000c1e 	bne	r3,zero,806d54 <quorem+0x144>
  806d24:	113fff04 	addi	r4,r2,-4
  806d28:	b900082e 	bgeu	r23,r4,806d4c <quorem+0x13c>
  806d2c:	10bfff17 	ldw	r2,-4(r2)
  806d30:	10000326 	beq	r2,zero,806d40 <quorem+0x130>
  806d34:	00000506 	br	806d4c <quorem+0x13c>
  806d38:	20800017 	ldw	r2,0(r4)
  806d3c:	1000031e 	bne	r2,zero,806d4c <quorem+0x13c>
  806d40:	213fff04 	addi	r4,r4,-4
  806d44:	a53fffc4 	addi	r20,r20,-1
  806d48:	b93ffb36 	bltu	r23,r4,806d38 <quorem+0x128>
  806d4c:	d9000317 	ldw	r4,12(sp)
  806d50:	25000415 	stw	r20,16(r4)
  806d54:	e005883a 	mov	r2,fp
  806d58:	dfc00e17 	ldw	ra,56(sp)
  806d5c:	df000d17 	ldw	fp,52(sp)
  806d60:	ddc00c17 	ldw	r23,48(sp)
  806d64:	dd800b17 	ldw	r22,44(sp)
  806d68:	dd400a17 	ldw	r21,40(sp)
  806d6c:	dd000917 	ldw	r20,36(sp)
  806d70:	dcc00817 	ldw	r19,32(sp)
  806d74:	dc800717 	ldw	r18,28(sp)
  806d78:	dc400617 	ldw	r17,24(sp)
  806d7c:	dc000517 	ldw	r16,20(sp)
  806d80:	dec00f04 	addi	sp,sp,60
  806d84:	f800283a 	ret
  806d88:	b823883a 	mov	r17,r23
  806d8c:	9825883a 	mov	r18,r19
  806d90:	d8000115 	stw	zero,4(sp)
  806d94:	002b883a 	mov	r21,zero
  806d98:	94000017 	ldw	r16,0(r18)
  806d9c:	e009883a 	mov	r4,fp
  806da0:	94800104 	addi	r18,r18,4
  806da4:	817fffcc 	andi	r5,r16,65535
  806da8:	08102900 	call	810290 <__mulsi3>
  806dac:	800ad43a 	srli	r5,r16,16
  806db0:	e009883a 	mov	r4,fp
  806db4:	a8a1883a 	add	r16,r21,r2
  806db8:	08102900 	call	810290 <__mulsi3>
  806dbc:	89000017 	ldw	r4,0(r17)
  806dc0:	80ffffcc 	andi	r3,r16,65535
  806dc4:	8020d43a 	srli	r16,r16,16
  806dc8:	217fffcc 	andi	r5,r4,65535
  806dcc:	28cbc83a 	sub	r5,r5,r3
  806dd0:	d8c00117 	ldw	r3,4(sp)
  806dd4:	2008d43a 	srli	r4,r4,16
  806dd8:	1405883a 	add	r2,r2,r16
  806ddc:	28cb883a 	add	r5,r5,r3
  806de0:	280dd43a 	srai	r6,r5,16
  806de4:	10ffffcc 	andi	r3,r2,65535
  806de8:	20c9c83a 	sub	r4,r4,r3
  806dec:	2189883a 	add	r4,r4,r6
  806df0:	8900008d 	sth	r4,2(r17)
  806df4:	2009d43a 	srai	r4,r4,16
  806df8:	8940000d 	sth	r5,0(r17)
  806dfc:	102ad43a 	srli	r21,r2,16
  806e00:	8c400104 	addi	r17,r17,4
  806e04:	d9000115 	stw	r4,4(sp)
  806e08:	b4bfe32e 	bgeu	r22,r18,806d98 <quorem+0x188>
  806e0c:	d9000217 	ldw	r4,8(sp)
  806e10:	203fa01e 	bne	r4,zero,806c94 <quorem+0x84>
  806e14:	d8800017 	ldw	r2,0(sp)
  806e18:	10ffff04 	addi	r3,r2,-4
  806e1c:	b8c0082e 	bgeu	r23,r3,806e40 <quorem+0x230>
  806e20:	10bfff17 	ldw	r2,-4(r2)
  806e24:	10000326 	beq	r2,zero,806e34 <quorem+0x224>
  806e28:	00000506 	br	806e40 <quorem+0x230>
  806e2c:	18800017 	ldw	r2,0(r3)
  806e30:	1000031e 	bne	r2,zero,806e40 <quorem+0x230>
  806e34:	18ffff04 	addi	r3,r3,-4
  806e38:	a53fffc4 	addi	r20,r20,-1
  806e3c:	b8fffb36 	bltu	r23,r3,806e2c <quorem+0x21c>
  806e40:	d8c00317 	ldw	r3,12(sp)
  806e44:	1d000415 	stw	r20,16(r3)
  806e48:	003f9206 	br	806c94 <quorem+0x84>
  806e4c:	0005883a 	mov	r2,zero
  806e50:	003fc106 	br	806d58 <quorem+0x148>

00806e54 <_dtoa_r>:
  806e54:	22001017 	ldw	r8,64(r4)
  806e58:	deffda04 	addi	sp,sp,-152
  806e5c:	dd402115 	stw	r21,132(sp)
  806e60:	dd002015 	stw	r20,128(sp)
  806e64:	dc801e15 	stw	r18,120(sp)
  806e68:	dc401d15 	stw	r17,116(sp)
  806e6c:	dfc02515 	stw	ra,148(sp)
  806e70:	df002415 	stw	fp,144(sp)
  806e74:	ddc02315 	stw	r23,140(sp)
  806e78:	dd802215 	stw	r22,136(sp)
  806e7c:	dcc01f15 	stw	r19,124(sp)
  806e80:	dc001c15 	stw	r16,112(sp)
  806e84:	d9001615 	stw	r4,88(sp)
  806e88:	3023883a 	mov	r17,r6
  806e8c:	2829883a 	mov	r20,r5
  806e90:	d9c01715 	stw	r7,92(sp)
  806e94:	dc802817 	ldw	r18,160(sp)
  806e98:	302b883a 	mov	r21,r6
  806e9c:	40000a26 	beq	r8,zero,806ec8 <_dtoa_r+0x74>
  806ea0:	20801117 	ldw	r2,68(r4)
  806ea4:	400b883a 	mov	r5,r8
  806ea8:	40800115 	stw	r2,4(r8)
  806eac:	20c01117 	ldw	r3,68(r4)
  806eb0:	00800044 	movi	r2,1
  806eb4:	10c4983a 	sll	r2,r2,r3
  806eb8:	40800215 	stw	r2,8(r8)
  806ebc:	08090cc0 	call	8090cc <_Bfree>
  806ec0:	d8c01617 	ldw	r3,88(sp)
  806ec4:	18001015 	stw	zero,64(r3)
  806ec8:	8800a316 	blt	r17,zero,807158 <_dtoa_r+0x304>
  806ecc:	90000015 	stw	zero,0(r18)
  806ed0:	a8dffc2c 	andhi	r3,r21,32752
  806ed4:	009ffc34 	movhi	r2,32752
  806ed8:	18809126 	beq	r3,r2,807120 <_dtoa_r+0x2cc>
  806edc:	000d883a 	mov	r6,zero
  806ee0:	000f883a 	mov	r7,zero
  806ee4:	a009883a 	mov	r4,r20
  806ee8:	a80b883a 	mov	r5,r21
  806eec:	dd001215 	stw	r20,72(sp)
  806ef0:	dd401315 	stw	r21,76(sp)
  806ef4:	080fac40 	call	80fac4 <__nedf2>
  806ef8:	1000171e 	bne	r2,zero,806f58 <_dtoa_r+0x104>
  806efc:	d9802717 	ldw	r6,156(sp)
  806f00:	00800044 	movi	r2,1
  806f04:	30800015 	stw	r2,0(r6)
  806f08:	d8802917 	ldw	r2,164(sp)
  806f0c:	10029b26 	beq	r2,zero,80797c <_dtoa_r+0xb28>
  806f10:	d9002917 	ldw	r4,164(sp)
  806f14:	00802074 	movhi	r2,129
  806f18:	10935e44 	addi	r2,r2,19833
  806f1c:	10ffffc4 	addi	r3,r2,-1
  806f20:	20800015 	stw	r2,0(r4)
  806f24:	1805883a 	mov	r2,r3
  806f28:	dfc02517 	ldw	ra,148(sp)
  806f2c:	df002417 	ldw	fp,144(sp)
  806f30:	ddc02317 	ldw	r23,140(sp)
  806f34:	dd802217 	ldw	r22,136(sp)
  806f38:	dd402117 	ldw	r21,132(sp)
  806f3c:	dd002017 	ldw	r20,128(sp)
  806f40:	dcc01f17 	ldw	r19,124(sp)
  806f44:	dc801e17 	ldw	r18,120(sp)
  806f48:	dc401d17 	ldw	r17,116(sp)
  806f4c:	dc001c17 	ldw	r16,112(sp)
  806f50:	dec02604 	addi	sp,sp,152
  806f54:	f800283a 	ret
  806f58:	d9001617 	ldw	r4,88(sp)
  806f5c:	d9401217 	ldw	r5,72(sp)
  806f60:	d8800104 	addi	r2,sp,4
  806f64:	a80d883a 	mov	r6,r21
  806f68:	d9c00204 	addi	r7,sp,8
  806f6c:	d8800015 	stw	r2,0(sp)
  806f70:	08097080 	call	809708 <__d2b>
  806f74:	d8800715 	stw	r2,28(sp)
  806f78:	a804d53a 	srli	r2,r21,20
  806f7c:	1101ffcc 	andi	r4,r2,2047
  806f80:	20008626 	beq	r4,zero,80719c <_dtoa_r+0x348>
  806f84:	d8c01217 	ldw	r3,72(sp)
  806f88:	00800434 	movhi	r2,16
  806f8c:	10bfffc4 	addi	r2,r2,-1
  806f90:	ddc00117 	ldw	r23,4(sp)
  806f94:	a884703a 	and	r2,r21,r2
  806f98:	1811883a 	mov	r8,r3
  806f9c:	124ffc34 	orhi	r9,r2,16368
  806fa0:	25bf0044 	addi	r22,r4,-1023
  806fa4:	d8000815 	stw	zero,32(sp)
  806fa8:	0005883a 	mov	r2,zero
  806fac:	00cffe34 	movhi	r3,16376
  806fb0:	480b883a 	mov	r5,r9
  806fb4:	4009883a 	mov	r4,r8
  806fb8:	180f883a 	mov	r7,r3
  806fbc:	100d883a 	mov	r6,r2
  806fc0:	080f32c0 	call	80f32c <__subdf3>
  806fc4:	0218dbf4 	movhi	r8,25455
  806fc8:	4210d844 	addi	r8,r8,17249
  806fcc:	024ff4f4 	movhi	r9,16339
  806fd0:	4a61e9c4 	addi	r9,r9,-30809
  806fd4:	480f883a 	mov	r7,r9
  806fd8:	400d883a 	mov	r6,r8
  806fdc:	180b883a 	mov	r5,r3
  806fe0:	1009883a 	mov	r4,r2
  806fe4:	080f4200 	call	80f420 <__muldf3>
  806fe8:	0222d874 	movhi	r8,35681
  806fec:	42322cc4 	addi	r8,r8,-14157
  806ff0:	024ff1f4 	movhi	r9,16327
  806ff4:	4a628a04 	addi	r9,r9,-30168
  806ff8:	480f883a 	mov	r7,r9
  806ffc:	400d883a 	mov	r6,r8
  807000:	180b883a 	mov	r5,r3
  807004:	1009883a 	mov	r4,r2
  807008:	080f3ac0 	call	80f3ac <__adddf3>
  80700c:	b009883a 	mov	r4,r22
  807010:	1021883a 	mov	r16,r2
  807014:	1823883a 	mov	r17,r3
  807018:	080fd6c0 	call	80fd6c <__floatsidf>
  80701c:	021427f4 	movhi	r8,20639
  807020:	421e7ec4 	addi	r8,r8,31227
  807024:	024ff4f4 	movhi	r9,16339
  807028:	4a5104c4 	addi	r9,r9,17427
  80702c:	480f883a 	mov	r7,r9
  807030:	400d883a 	mov	r6,r8
  807034:	180b883a 	mov	r5,r3
  807038:	1009883a 	mov	r4,r2
  80703c:	080f4200 	call	80f420 <__muldf3>
  807040:	180f883a 	mov	r7,r3
  807044:	880b883a 	mov	r5,r17
  807048:	100d883a 	mov	r6,r2
  80704c:	8009883a 	mov	r4,r16
  807050:	080f3ac0 	call	80f3ac <__adddf3>
  807054:	1009883a 	mov	r4,r2
  807058:	180b883a 	mov	r5,r3
  80705c:	1021883a 	mov	r16,r2
  807060:	1823883a 	mov	r17,r3
  807064:	080fe640 	call	80fe64 <__fixdfsi>
  807068:	000d883a 	mov	r6,zero
  80706c:	000f883a 	mov	r7,zero
  807070:	8009883a 	mov	r4,r16
  807074:	880b883a 	mov	r5,r17
  807078:	d8800d15 	stw	r2,52(sp)
  80707c:	080fc5c0 	call	80fc5c <__ltdf2>
  807080:	10031716 	blt	r2,zero,807ce0 <_dtoa_r+0xe8c>
  807084:	d8c00d17 	ldw	r3,52(sp)
  807088:	00800584 	movi	r2,22
  80708c:	10c1482e 	bgeu	r2,r3,8075b0 <_dtoa_r+0x75c>
  807090:	01000044 	movi	r4,1
  807094:	d9000c15 	stw	r4,48(sp)
  807098:	bd85c83a 	sub	r2,r23,r22
  80709c:	11bfffc4 	addi	r6,r2,-1
  8070a0:	30030b16 	blt	r6,zero,807cd0 <_dtoa_r+0xe7c>
  8070a4:	d9800a15 	stw	r6,40(sp)
  8070a8:	d8001115 	stw	zero,68(sp)
  8070ac:	d8c00d17 	ldw	r3,52(sp)
  8070b0:	1802ff16 	blt	r3,zero,807cb0 <_dtoa_r+0xe5c>
  8070b4:	d9000a17 	ldw	r4,40(sp)
  8070b8:	d8c00915 	stw	r3,36(sp)
  8070bc:	d8001015 	stw	zero,64(sp)
  8070c0:	20c9883a 	add	r4,r4,r3
  8070c4:	d9000a15 	stw	r4,40(sp)
  8070c8:	d9001717 	ldw	r4,92(sp)
  8070cc:	00800244 	movi	r2,9
  8070d0:	11004636 	bltu	r2,r4,8071ec <_dtoa_r+0x398>
  8070d4:	00800144 	movi	r2,5
  8070d8:	11020416 	blt	r2,r4,8078ec <_dtoa_r+0xa98>
  8070dc:	04400044 	movi	r17,1
  8070e0:	d8c01717 	ldw	r3,92(sp)
  8070e4:	00800144 	movi	r2,5
  8070e8:	10c1ed36 	bltu	r2,r3,8078a0 <_dtoa_r+0xa4c>
  8070ec:	18c5883a 	add	r2,r3,r3
  8070f0:	1085883a 	add	r2,r2,r2
  8070f4:	00c02034 	movhi	r3,128
  8070f8:	18dc4204 	addi	r3,r3,28936
  8070fc:	10c5883a 	add	r2,r2,r3
  807100:	11000017 	ldw	r4,0(r2)
  807104:	2000683a 	jmp	r4
  807108:	008071f4 	movhi	r2,455
  80710c:	008071f4 	movhi	r2,455
  807110:	00807bf4 	movhi	r2,495
  807114:	00807bcc 	andi	r2,zero,495
  807118:	00807c10 	cmplti	r2,zero,496
  80711c:	00807c1c 	xori	r2,zero,496
  807120:	d9002717 	ldw	r4,156(sp)
  807124:	0089c3c4 	movi	r2,9999
  807128:	20800015 	stw	r2,0(r4)
  80712c:	a0001026 	beq	r20,zero,807170 <_dtoa_r+0x31c>
  807130:	00c02074 	movhi	r3,129
  807134:	18d41504 	addi	r3,r3,20564
  807138:	d9802917 	ldw	r6,164(sp)
  80713c:	303f7926 	beq	r6,zero,806f24 <_dtoa_r+0xd0>
  807140:	188000c7 	ldb	r2,3(r3)
  807144:	190000c4 	addi	r4,r3,3
  807148:	1000101e 	bne	r2,zero,80718c <_dtoa_r+0x338>
  80714c:	d8802917 	ldw	r2,164(sp)
  807150:	11000015 	stw	r4,0(r2)
  807154:	003f7306 	br	806f24 <_dtoa_r+0xd0>
  807158:	00a00034 	movhi	r2,32768
  80715c:	10bfffc4 	addi	r2,r2,-1
  807160:	00c00044 	movi	r3,1
  807164:	88aa703a 	and	r21,r17,r2
  807168:	90c00015 	stw	r3,0(r18)
  80716c:	003f5806 	br	806ed0 <_dtoa_r+0x7c>
  807170:	00800434 	movhi	r2,16
  807174:	10bfffc4 	addi	r2,r2,-1
  807178:	a884703a 	and	r2,r21,r2
  80717c:	103fec1e 	bne	r2,zero,807130 <_dtoa_r+0x2dc>
  807180:	00c02074 	movhi	r3,129
  807184:	18d41204 	addi	r3,r3,20552
  807188:	003feb06 	br	807138 <_dtoa_r+0x2e4>
  80718c:	d8802917 	ldw	r2,164(sp)
  807190:	19000204 	addi	r4,r3,8
  807194:	11000015 	stw	r4,0(r2)
  807198:	003f6206 	br	806f24 <_dtoa_r+0xd0>
  80719c:	ddc00117 	ldw	r23,4(sp)
  8071a0:	d8800217 	ldw	r2,8(sp)
  8071a4:	01000804 	movi	r4,32
  8071a8:	b8c10c84 	addi	r3,r23,1074
  8071ac:	18a3883a 	add	r17,r3,r2
  8071b0:	2441b80e 	bge	r4,r17,807894 <_dtoa_r+0xa40>
  8071b4:	00c01004 	movi	r3,64
  8071b8:	1c47c83a 	sub	r3,r3,r17
  8071bc:	88bff804 	addi	r2,r17,-32
  8071c0:	a8c6983a 	sll	r3,r21,r3
  8071c4:	a084d83a 	srl	r2,r20,r2
  8071c8:	1888b03a 	or	r4,r3,r2
  8071cc:	080ffb00 	call	80ffb0 <__floatunsidf>
  8071d0:	1011883a 	mov	r8,r2
  8071d4:	00bf8434 	movhi	r2,65040
  8071d8:	01000044 	movi	r4,1
  8071dc:	10d3883a 	add	r9,r2,r3
  8071e0:	8dbef344 	addi	r22,r17,-1075
  8071e4:	d9000815 	stw	r4,32(sp)
  8071e8:	003f6f06 	br	806fa8 <_dtoa_r+0x154>
  8071ec:	d8001715 	stw	zero,92(sp)
  8071f0:	04400044 	movi	r17,1
  8071f4:	00bfffc4 	movi	r2,-1
  8071f8:	00c00044 	movi	r3,1
  8071fc:	d8800e15 	stw	r2,56(sp)
  807200:	d8002615 	stw	zero,152(sp)
  807204:	d8800f15 	stw	r2,60(sp)
  807208:	d8c00b15 	stw	r3,44(sp)
  80720c:	1021883a 	mov	r16,r2
  807210:	d8801617 	ldw	r2,88(sp)
  807214:	10001115 	stw	zero,68(r2)
  807218:	d8801617 	ldw	r2,88(sp)
  80721c:	11401117 	ldw	r5,68(r2)
  807220:	1009883a 	mov	r4,r2
  807224:	080964c0 	call	80964c <_Balloc>
  807228:	d8c01617 	ldw	r3,88(sp)
  80722c:	d8800515 	stw	r2,20(sp)
  807230:	18801015 	stw	r2,64(r3)
  807234:	00800384 	movi	r2,14
  807238:	14006836 	bltu	r2,r16,8073dc <_dtoa_r+0x588>
  80723c:	8805003a 	cmpeq	r2,r17,zero
  807240:	1000661e 	bne	r2,zero,8073dc <_dtoa_r+0x588>
  807244:	d9000d17 	ldw	r4,52(sp)
  807248:	0102300e 	bge	zero,r4,807b0c <_dtoa_r+0xcb8>
  80724c:	208003cc 	andi	r2,r4,15
  807250:	100490fa 	slli	r2,r2,3
  807254:	2025d13a 	srai	r18,r4,4
  807258:	00c02074 	movhi	r3,129
  80725c:	18d42604 	addi	r3,r3,20632
  807260:	10c5883a 	add	r2,r2,r3
  807264:	90c0040c 	andi	r3,r18,16
  807268:	14000017 	ldw	r16,0(r2)
  80726c:	14400117 	ldw	r17,4(r2)
  807270:	18036a1e 	bne	r3,zero,80801c <_dtoa_r+0x11c8>
  807274:	05800084 	movi	r22,2
  807278:	90001026 	beq	r18,zero,8072bc <_dtoa_r+0x468>
  80727c:	04c02074 	movhi	r19,129
  807280:	9cd45804 	addi	r19,r19,20832
  807284:	9080004c 	andi	r2,r18,1
  807288:	1005003a 	cmpeq	r2,r2,zero
  80728c:	1000081e 	bne	r2,zero,8072b0 <_dtoa_r+0x45c>
  807290:	99800017 	ldw	r6,0(r19)
  807294:	99c00117 	ldw	r7,4(r19)
  807298:	880b883a 	mov	r5,r17
  80729c:	8009883a 	mov	r4,r16
  8072a0:	080f4200 	call	80f420 <__muldf3>
  8072a4:	1021883a 	mov	r16,r2
  8072a8:	b5800044 	addi	r22,r22,1
  8072ac:	1823883a 	mov	r17,r3
  8072b0:	9025d07a 	srai	r18,r18,1
  8072b4:	9cc00204 	addi	r19,r19,8
  8072b8:	903ff21e 	bne	r18,zero,807284 <_dtoa_r+0x430>
  8072bc:	a80b883a 	mov	r5,r21
  8072c0:	a009883a 	mov	r4,r20
  8072c4:	880f883a 	mov	r7,r17
  8072c8:	800d883a 	mov	r6,r16
  8072cc:	080f7e40 	call	80f7e4 <__divdf3>
  8072d0:	1029883a 	mov	r20,r2
  8072d4:	182b883a 	mov	r21,r3
  8072d8:	d8c00c17 	ldw	r3,48(sp)
  8072dc:	1805003a 	cmpeq	r2,r3,zero
  8072e0:	1000081e 	bne	r2,zero,807304 <_dtoa_r+0x4b0>
  8072e4:	0005883a 	mov	r2,zero
  8072e8:	00cffc34 	movhi	r3,16368
  8072ec:	180f883a 	mov	r7,r3
  8072f0:	a009883a 	mov	r4,r20
  8072f4:	a80b883a 	mov	r5,r21
  8072f8:	100d883a 	mov	r6,r2
  8072fc:	080fc5c0 	call	80fc5c <__ltdf2>
  807300:	1003fe16 	blt	r2,zero,8082fc <_dtoa_r+0x14a8>
  807304:	b009883a 	mov	r4,r22
  807308:	080fd6c0 	call	80fd6c <__floatsidf>
  80730c:	180b883a 	mov	r5,r3
  807310:	1009883a 	mov	r4,r2
  807314:	a00d883a 	mov	r6,r20
  807318:	a80f883a 	mov	r7,r21
  80731c:	080f4200 	call	80f420 <__muldf3>
  807320:	0011883a 	mov	r8,zero
  807324:	02500734 	movhi	r9,16412
  807328:	1009883a 	mov	r4,r2
  80732c:	180b883a 	mov	r5,r3
  807330:	480f883a 	mov	r7,r9
  807334:	400d883a 	mov	r6,r8
  807338:	080f3ac0 	call	80f3ac <__adddf3>
  80733c:	d9000f17 	ldw	r4,60(sp)
  807340:	102d883a 	mov	r22,r2
  807344:	00bf3034 	movhi	r2,64704
  807348:	18b9883a 	add	fp,r3,r2
  80734c:	e02f883a 	mov	r23,fp
  807350:	20028f1e 	bne	r4,zero,807d90 <_dtoa_r+0xf3c>
  807354:	0005883a 	mov	r2,zero
  807358:	00d00534 	movhi	r3,16404
  80735c:	a009883a 	mov	r4,r20
  807360:	a80b883a 	mov	r5,r21
  807364:	180f883a 	mov	r7,r3
  807368:	100d883a 	mov	r6,r2
  80736c:	080f32c0 	call	80f32c <__subdf3>
  807370:	1009883a 	mov	r4,r2
  807374:	e00f883a 	mov	r7,fp
  807378:	180b883a 	mov	r5,r3
  80737c:	b00d883a 	mov	r6,r22
  807380:	1025883a 	mov	r18,r2
  807384:	1827883a 	mov	r19,r3
  807388:	080fb4c0 	call	80fb4c <__gtdf2>
  80738c:	00834f16 	blt	zero,r2,8080cc <_dtoa_r+0x1278>
  807390:	e0e0003c 	xorhi	r3,fp,32768
  807394:	9009883a 	mov	r4,r18
  807398:	980b883a 	mov	r5,r19
  80739c:	180f883a 	mov	r7,r3
  8073a0:	b00d883a 	mov	r6,r22
  8073a4:	080fc5c0 	call	80fc5c <__ltdf2>
  8073a8:	1000080e 	bge	r2,zero,8073cc <_dtoa_r+0x578>
  8073ac:	0027883a 	mov	r19,zero
  8073b0:	0025883a 	mov	r18,zero
  8073b4:	d8802617 	ldw	r2,152(sp)
  8073b8:	df000517 	ldw	fp,20(sp)
  8073bc:	d8000615 	stw	zero,24(sp)
  8073c0:	0084303a 	nor	r2,zero,r2
  8073c4:	d8800d15 	stw	r2,52(sp)
  8073c8:	00019b06 	br	807a38 <_dtoa_r+0xbe4>
  8073cc:	d9801217 	ldw	r6,72(sp)
  8073d0:	d8801317 	ldw	r2,76(sp)
  8073d4:	3029883a 	mov	r20,r6
  8073d8:	102b883a 	mov	r21,r2
  8073dc:	d8c00217 	ldw	r3,8(sp)
  8073e0:	18008516 	blt	r3,zero,8075f8 <_dtoa_r+0x7a4>
  8073e4:	d9000d17 	ldw	r4,52(sp)
  8073e8:	00800384 	movi	r2,14
  8073ec:	11008216 	blt	r2,r4,8075f8 <_dtoa_r+0x7a4>
  8073f0:	200490fa 	slli	r2,r4,3
  8073f4:	d9802617 	ldw	r6,152(sp)
  8073f8:	00c02074 	movhi	r3,129
  8073fc:	18d42604 	addi	r3,r3,20632
  807400:	10c5883a 	add	r2,r2,r3
  807404:	14800017 	ldw	r18,0(r2)
  807408:	14c00117 	ldw	r19,4(r2)
  80740c:	30031e16 	blt	r6,zero,808088 <_dtoa_r+0x1234>
  807410:	d9000517 	ldw	r4,20(sp)
  807414:	d8c00f17 	ldw	r3,60(sp)
  807418:	a823883a 	mov	r17,r21
  80741c:	a021883a 	mov	r16,r20
  807420:	192b883a 	add	r21,r3,r4
  807424:	2039883a 	mov	fp,r4
  807428:	00000f06 	br	807468 <_dtoa_r+0x614>
  80742c:	0005883a 	mov	r2,zero
  807430:	00d00934 	movhi	r3,16420
  807434:	5009883a 	mov	r4,r10
  807438:	580b883a 	mov	r5,r11
  80743c:	180f883a 	mov	r7,r3
  807440:	100d883a 	mov	r6,r2
  807444:	080f4200 	call	80f420 <__muldf3>
  807448:	180b883a 	mov	r5,r3
  80744c:	000d883a 	mov	r6,zero
  807450:	000f883a 	mov	r7,zero
  807454:	1009883a 	mov	r4,r2
  807458:	1021883a 	mov	r16,r2
  80745c:	1823883a 	mov	r17,r3
  807460:	080fac40 	call	80fac4 <__nedf2>
  807464:	10004526 	beq	r2,zero,80757c <_dtoa_r+0x728>
  807468:	900d883a 	mov	r6,r18
  80746c:	980f883a 	mov	r7,r19
  807470:	8009883a 	mov	r4,r16
  807474:	880b883a 	mov	r5,r17
  807478:	080f7e40 	call	80f7e4 <__divdf3>
  80747c:	180b883a 	mov	r5,r3
  807480:	1009883a 	mov	r4,r2
  807484:	080fe640 	call	80fe64 <__fixdfsi>
  807488:	1009883a 	mov	r4,r2
  80748c:	1029883a 	mov	r20,r2
  807490:	080fd6c0 	call	80fd6c <__floatsidf>
  807494:	180f883a 	mov	r7,r3
  807498:	9009883a 	mov	r4,r18
  80749c:	980b883a 	mov	r5,r19
  8074a0:	100d883a 	mov	r6,r2
  8074a4:	080f4200 	call	80f420 <__muldf3>
  8074a8:	180f883a 	mov	r7,r3
  8074ac:	880b883a 	mov	r5,r17
  8074b0:	8009883a 	mov	r4,r16
  8074b4:	100d883a 	mov	r6,r2
  8074b8:	080f32c0 	call	80f32c <__subdf3>
  8074bc:	1015883a 	mov	r10,r2
  8074c0:	a0800c04 	addi	r2,r20,48
  8074c4:	e0800005 	stb	r2,0(fp)
  8074c8:	e7000044 	addi	fp,fp,1
  8074cc:	1817883a 	mov	r11,r3
  8074d0:	e57fd61e 	bne	fp,r21,80742c <_dtoa_r+0x5d8>
  8074d4:	500d883a 	mov	r6,r10
  8074d8:	180f883a 	mov	r7,r3
  8074dc:	5009883a 	mov	r4,r10
  8074e0:	180b883a 	mov	r5,r3
  8074e4:	080f3ac0 	call	80f3ac <__adddf3>
  8074e8:	100d883a 	mov	r6,r2
  8074ec:	9009883a 	mov	r4,r18
  8074f0:	980b883a 	mov	r5,r19
  8074f4:	180f883a 	mov	r7,r3
  8074f8:	1021883a 	mov	r16,r2
  8074fc:	1823883a 	mov	r17,r3
  807500:	080fc5c0 	call	80fc5c <__ltdf2>
  807504:	10000816 	blt	r2,zero,807528 <_dtoa_r+0x6d4>
  807508:	980b883a 	mov	r5,r19
  80750c:	800d883a 	mov	r6,r16
  807510:	880f883a 	mov	r7,r17
  807514:	9009883a 	mov	r4,r18
  807518:	080fa3c0 	call	80fa3c <__eqdf2>
  80751c:	1000171e 	bne	r2,zero,80757c <_dtoa_r+0x728>
  807520:	a080004c 	andi	r2,r20,1
  807524:	10001526 	beq	r2,zero,80757c <_dtoa_r+0x728>
  807528:	d8800d17 	ldw	r2,52(sp)
  80752c:	d8800415 	stw	r2,16(sp)
  807530:	e009883a 	mov	r4,fp
  807534:	213fffc4 	addi	r4,r4,-1
  807538:	20c00007 	ldb	r3,0(r4)
  80753c:	00800e44 	movi	r2,57
  807540:	1880081e 	bne	r3,r2,807564 <_dtoa_r+0x710>
  807544:	d8800517 	ldw	r2,20(sp)
  807548:	113ffa1e 	bne	r2,r4,807534 <_dtoa_r+0x6e0>
  80754c:	d8c00417 	ldw	r3,16(sp)
  807550:	d9800517 	ldw	r6,20(sp)
  807554:	00800c04 	movi	r2,48
  807558:	18c00044 	addi	r3,r3,1
  80755c:	d8c00415 	stw	r3,16(sp)
  807560:	30800005 	stb	r2,0(r6)
  807564:	20800003 	ldbu	r2,0(r4)
  807568:	d8c00417 	ldw	r3,16(sp)
  80756c:	27000044 	addi	fp,r4,1
  807570:	10800044 	addi	r2,r2,1
  807574:	d8c00d15 	stw	r3,52(sp)
  807578:	20800005 	stb	r2,0(r4)
  80757c:	d9001617 	ldw	r4,88(sp)
  807580:	d9400717 	ldw	r5,28(sp)
  807584:	08090cc0 	call	8090cc <_Bfree>
  807588:	e0000005 	stb	zero,0(fp)
  80758c:	d9800d17 	ldw	r6,52(sp)
  807590:	d8c02717 	ldw	r3,156(sp)
  807594:	d9002917 	ldw	r4,164(sp)
  807598:	30800044 	addi	r2,r6,1
  80759c:	18800015 	stw	r2,0(r3)
  8075a0:	20029c26 	beq	r4,zero,808014 <_dtoa_r+0x11c0>
  8075a4:	d8c00517 	ldw	r3,20(sp)
  8075a8:	27000015 	stw	fp,0(r4)
  8075ac:	003e5d06 	br	806f24 <_dtoa_r+0xd0>
  8075b0:	d9800d17 	ldw	r6,52(sp)
  8075b4:	00c02074 	movhi	r3,129
  8075b8:	18d42604 	addi	r3,r3,20632
  8075bc:	d9001217 	ldw	r4,72(sp)
  8075c0:	300490fa 	slli	r2,r6,3
  8075c4:	d9401317 	ldw	r5,76(sp)
  8075c8:	10c5883a 	add	r2,r2,r3
  8075cc:	12000017 	ldw	r8,0(r2)
  8075d0:	12400117 	ldw	r9,4(r2)
  8075d4:	400d883a 	mov	r6,r8
  8075d8:	480f883a 	mov	r7,r9
  8075dc:	080fc5c0 	call	80fc5c <__ltdf2>
  8075e0:	1000030e 	bge	r2,zero,8075f0 <_dtoa_r+0x79c>
  8075e4:	d8800d17 	ldw	r2,52(sp)
  8075e8:	10bfffc4 	addi	r2,r2,-1
  8075ec:	d8800d15 	stw	r2,52(sp)
  8075f0:	d8000c15 	stw	zero,48(sp)
  8075f4:	003ea806 	br	807098 <_dtoa_r+0x244>
  8075f8:	d9000b17 	ldw	r4,44(sp)
  8075fc:	202cc03a 	cmpne	r22,r4,zero
  807600:	b000c71e 	bne	r22,zero,807920 <_dtoa_r+0xacc>
  807604:	dc001117 	ldw	r16,68(sp)
  807608:	dc801017 	ldw	r18,64(sp)
  80760c:	0027883a 	mov	r19,zero
  807610:	04000b0e 	bge	zero,r16,807640 <_dtoa_r+0x7ec>
  807614:	d8c00a17 	ldw	r3,40(sp)
  807618:	00c0090e 	bge	zero,r3,807640 <_dtoa_r+0x7ec>
  80761c:	8005883a 	mov	r2,r16
  807620:	1c011316 	blt	r3,r16,807a70 <_dtoa_r+0xc1c>
  807624:	d9000a17 	ldw	r4,40(sp)
  807628:	d9801117 	ldw	r6,68(sp)
  80762c:	80a1c83a 	sub	r16,r16,r2
  807630:	2089c83a 	sub	r4,r4,r2
  807634:	308dc83a 	sub	r6,r6,r2
  807638:	d9000a15 	stw	r4,40(sp)
  80763c:	d9801115 	stw	r6,68(sp)
  807640:	d8801017 	ldw	r2,64(sp)
  807644:	0080150e 	bge	zero,r2,80769c <_dtoa_r+0x848>
  807648:	d8c00b17 	ldw	r3,44(sp)
  80764c:	1805003a 	cmpeq	r2,r3,zero
  807650:	1001c91e 	bne	r2,zero,807d78 <_dtoa_r+0xf24>
  807654:	04800e0e 	bge	zero,r18,807690 <_dtoa_r+0x83c>
  807658:	d9001617 	ldw	r4,88(sp)
  80765c:	980b883a 	mov	r5,r19
  807660:	900d883a 	mov	r6,r18
  807664:	0809f180 	call	809f18 <__pow5mult>
  807668:	d9001617 	ldw	r4,88(sp)
  80766c:	d9800717 	ldw	r6,28(sp)
  807670:	100b883a 	mov	r5,r2
  807674:	1027883a 	mov	r19,r2
  807678:	0809b5c0 	call	809b5c <__multiply>
  80767c:	d9001617 	ldw	r4,88(sp)
  807680:	d9400717 	ldw	r5,28(sp)
  807684:	1023883a 	mov	r17,r2
  807688:	08090cc0 	call	8090cc <_Bfree>
  80768c:	dc400715 	stw	r17,28(sp)
  807690:	d9001017 	ldw	r4,64(sp)
  807694:	248dc83a 	sub	r6,r4,r18
  807698:	30010e1e 	bne	r6,zero,807ad4 <_dtoa_r+0xc80>
  80769c:	d9001617 	ldw	r4,88(sp)
  8076a0:	04400044 	movi	r17,1
  8076a4:	880b883a 	mov	r5,r17
  8076a8:	0809db00 	call	809db0 <__i2b>
  8076ac:	d9800917 	ldw	r6,36(sp)
  8076b0:	1025883a 	mov	r18,r2
  8076b4:	0180040e 	bge	zero,r6,8076c8 <_dtoa_r+0x874>
  8076b8:	d9001617 	ldw	r4,88(sp)
  8076bc:	100b883a 	mov	r5,r2
  8076c0:	0809f180 	call	809f18 <__pow5mult>
  8076c4:	1025883a 	mov	r18,r2
  8076c8:	d8801717 	ldw	r2,92(sp)
  8076cc:	8880f30e 	bge	r17,r2,807a9c <_dtoa_r+0xc48>
  8076d0:	0023883a 	mov	r17,zero
  8076d4:	d9800917 	ldw	r6,36(sp)
  8076d8:	30019e1e 	bne	r6,zero,807d54 <_dtoa_r+0xf00>
  8076dc:	00c00044 	movi	r3,1
  8076e0:	d9000a17 	ldw	r4,40(sp)
  8076e4:	20c5883a 	add	r2,r4,r3
  8076e8:	10c007cc 	andi	r3,r2,31
  8076ec:	1800841e 	bne	r3,zero,807900 <_dtoa_r+0xaac>
  8076f0:	00800704 	movi	r2,28
  8076f4:	d9000a17 	ldw	r4,40(sp)
  8076f8:	d9801117 	ldw	r6,68(sp)
  8076fc:	80a1883a 	add	r16,r16,r2
  807700:	2089883a 	add	r4,r4,r2
  807704:	308d883a 	add	r6,r6,r2
  807708:	d9000a15 	stw	r4,40(sp)
  80770c:	d9801115 	stw	r6,68(sp)
  807710:	d8801117 	ldw	r2,68(sp)
  807714:	0080050e 	bge	zero,r2,80772c <_dtoa_r+0x8d8>
  807718:	d9400717 	ldw	r5,28(sp)
  80771c:	d9001617 	ldw	r4,88(sp)
  807720:	100d883a 	mov	r6,r2
  807724:	0809a100 	call	809a10 <__lshift>
  807728:	d8800715 	stw	r2,28(sp)
  80772c:	d8c00a17 	ldw	r3,40(sp)
  807730:	00c0050e 	bge	zero,r3,807748 <_dtoa_r+0x8f4>
  807734:	d9001617 	ldw	r4,88(sp)
  807738:	900b883a 	mov	r5,r18
  80773c:	180d883a 	mov	r6,r3
  807740:	0809a100 	call	809a10 <__lshift>
  807744:	1025883a 	mov	r18,r2
  807748:	d9000c17 	ldw	r4,48(sp)
  80774c:	2005003a 	cmpeq	r2,r4,zero
  807750:	10016f26 	beq	r2,zero,807d10 <_dtoa_r+0xebc>
  807754:	d9000f17 	ldw	r4,60(sp)
  807758:	0102170e 	bge	zero,r4,807fb8 <_dtoa_r+0x1164>
  80775c:	d9800b17 	ldw	r6,44(sp)
  807760:	3005003a 	cmpeq	r2,r6,zero
  807764:	1000881e 	bne	r2,zero,807988 <_dtoa_r+0xb34>
  807768:	0400050e 	bge	zero,r16,807780 <_dtoa_r+0x92c>
  80776c:	d9001617 	ldw	r4,88(sp)
  807770:	980b883a 	mov	r5,r19
  807774:	800d883a 	mov	r6,r16
  807778:	0809a100 	call	809a10 <__lshift>
  80777c:	1027883a 	mov	r19,r2
  807780:	8804c03a 	cmpne	r2,r17,zero
  807784:	1002541e 	bne	r2,zero,8080d8 <_dtoa_r+0x1284>
  807788:	980b883a 	mov	r5,r19
  80778c:	dd800517 	ldw	r22,20(sp)
  807790:	dcc00615 	stw	r19,24(sp)
  807794:	a700004c 	andi	fp,r20,1
  807798:	2827883a 	mov	r19,r5
  80779c:	d9000717 	ldw	r4,28(sp)
  8077a0:	900b883a 	mov	r5,r18
  8077a4:	0806c100 	call	806c10 <quorem>
  8077a8:	d9000717 	ldw	r4,28(sp)
  8077ac:	d9400617 	ldw	r5,24(sp)
  8077b0:	1023883a 	mov	r17,r2
  8077b4:	8dc00c04 	addi	r23,r17,48
  8077b8:	08092280 	call	809228 <__mcmp>
  8077bc:	d9001617 	ldw	r4,88(sp)
  8077c0:	900b883a 	mov	r5,r18
  8077c4:	980d883a 	mov	r6,r19
  8077c8:	1029883a 	mov	r20,r2
  8077cc:	08098840 	call	809884 <__mdiff>
  8077d0:	102b883a 	mov	r21,r2
  8077d4:	10800317 	ldw	r2,12(r2)
  8077d8:	1001281e 	bne	r2,zero,807c7c <_dtoa_r+0xe28>
  8077dc:	d9000717 	ldw	r4,28(sp)
  8077e0:	a80b883a 	mov	r5,r21
  8077e4:	08092280 	call	809228 <__mcmp>
  8077e8:	d9001617 	ldw	r4,88(sp)
  8077ec:	1021883a 	mov	r16,r2
  8077f0:	a80b883a 	mov	r5,r21
  8077f4:	08090cc0 	call	8090cc <_Bfree>
  8077f8:	8000041e 	bne	r16,zero,80780c <_dtoa_r+0x9b8>
  8077fc:	d8801717 	ldw	r2,92(sp)
  807800:	1000021e 	bne	r2,zero,80780c <_dtoa_r+0x9b8>
  807804:	e004c03a 	cmpne	r2,fp,zero
  807808:	10011726 	beq	r2,zero,807c68 <_dtoa_r+0xe14>
  80780c:	a0010616 	blt	r20,zero,807c28 <_dtoa_r+0xdd4>
  807810:	a000041e 	bne	r20,zero,807824 <_dtoa_r+0x9d0>
  807814:	d8c01717 	ldw	r3,92(sp)
  807818:	1800021e 	bne	r3,zero,807824 <_dtoa_r+0x9d0>
  80781c:	e004c03a 	cmpne	r2,fp,zero
  807820:	10010126 	beq	r2,zero,807c28 <_dtoa_r+0xdd4>
  807824:	04023d16 	blt	zero,r16,80811c <_dtoa_r+0x12c8>
  807828:	b5c00005 	stb	r23,0(r22)
  80782c:	d9800517 	ldw	r6,20(sp)
  807830:	d9000f17 	ldw	r4,60(sp)
  807834:	b5800044 	addi	r22,r22,1
  807838:	3105883a 	add	r2,r6,r4
  80783c:	b0806526 	beq	r22,r2,8079d4 <_dtoa_r+0xb80>
  807840:	d9400717 	ldw	r5,28(sp)
  807844:	d9001617 	ldw	r4,88(sp)
  807848:	01800284 	movi	r6,10
  80784c:	000f883a 	mov	r7,zero
  807850:	0809dec0 	call	809dec <__multadd>
  807854:	d8800715 	stw	r2,28(sp)
  807858:	d8800617 	ldw	r2,24(sp)
  80785c:	14c10c26 	beq	r2,r19,807c90 <_dtoa_r+0xe3c>
  807860:	d9400617 	ldw	r5,24(sp)
  807864:	d9001617 	ldw	r4,88(sp)
  807868:	01800284 	movi	r6,10
  80786c:	000f883a 	mov	r7,zero
  807870:	0809dec0 	call	809dec <__multadd>
  807874:	d9001617 	ldw	r4,88(sp)
  807878:	980b883a 	mov	r5,r19
  80787c:	01800284 	movi	r6,10
  807880:	000f883a 	mov	r7,zero
  807884:	d8800615 	stw	r2,24(sp)
  807888:	0809dec0 	call	809dec <__multadd>
  80788c:	1027883a 	mov	r19,r2
  807890:	003fc206 	br	80779c <_dtoa_r+0x948>
  807894:	2445c83a 	sub	r2,r4,r17
  807898:	a088983a 	sll	r4,r20,r2
  80789c:	003e4b06 	br	8071cc <_dtoa_r+0x378>
  8078a0:	01bfffc4 	movi	r6,-1
  8078a4:	00800044 	movi	r2,1
  8078a8:	d9800e15 	stw	r6,56(sp)
  8078ac:	d9800f15 	stw	r6,60(sp)
  8078b0:	d8800b15 	stw	r2,44(sp)
  8078b4:	d8c01617 	ldw	r3,88(sp)
  8078b8:	008005c4 	movi	r2,23
  8078bc:	18001115 	stw	zero,68(r3)
  8078c0:	1580082e 	bgeu	r2,r22,8078e4 <_dtoa_r+0xa90>
  8078c4:	00c00104 	movi	r3,4
  8078c8:	0009883a 	mov	r4,zero
  8078cc:	18c7883a 	add	r3,r3,r3
  8078d0:	18800504 	addi	r2,r3,20
  8078d4:	21000044 	addi	r4,r4,1
  8078d8:	b0bffc2e 	bgeu	r22,r2,8078cc <_dtoa_r+0xa78>
  8078dc:	d9801617 	ldw	r6,88(sp)
  8078e0:	31001115 	stw	r4,68(r6)
  8078e4:	dc000f17 	ldw	r16,60(sp)
  8078e8:	003e4b06 	br	807218 <_dtoa_r+0x3c4>
  8078ec:	d9801717 	ldw	r6,92(sp)
  8078f0:	0023883a 	mov	r17,zero
  8078f4:	31bfff04 	addi	r6,r6,-4
  8078f8:	d9801715 	stw	r6,92(sp)
  8078fc:	003df806 	br	8070e0 <_dtoa_r+0x28c>
  807900:	00800804 	movi	r2,32
  807904:	10c9c83a 	sub	r4,r2,r3
  807908:	00c00104 	movi	r3,4
  80790c:	19005a16 	blt	r3,r4,807a78 <_dtoa_r+0xc24>
  807910:	008000c4 	movi	r2,3
  807914:	113f7e16 	blt	r2,r4,807710 <_dtoa_r+0x8bc>
  807918:	20800704 	addi	r2,r4,28
  80791c:	003f7506 	br	8076f4 <_dtoa_r+0x8a0>
  807920:	d9801717 	ldw	r6,92(sp)
  807924:	00800044 	movi	r2,1
  807928:	1180a10e 	bge	r2,r6,807bb0 <_dtoa_r+0xd5c>
  80792c:	d9800f17 	ldw	r6,60(sp)
  807930:	d8c01017 	ldw	r3,64(sp)
  807934:	30bfffc4 	addi	r2,r6,-1
  807938:	1881c616 	blt	r3,r2,808054 <_dtoa_r+0x1200>
  80793c:	18a5c83a 	sub	r18,r3,r2
  807940:	d8800f17 	ldw	r2,60(sp)
  807944:	10026216 	blt	r2,zero,8082d0 <_dtoa_r+0x147c>
  807948:	dc001117 	ldw	r16,68(sp)
  80794c:	1007883a 	mov	r3,r2
  807950:	d9800a17 	ldw	r6,40(sp)
  807954:	d8801117 	ldw	r2,68(sp)
  807958:	d9001617 	ldw	r4,88(sp)
  80795c:	30cd883a 	add	r6,r6,r3
  807960:	10c5883a 	add	r2,r2,r3
  807964:	01400044 	movi	r5,1
  807968:	d9800a15 	stw	r6,40(sp)
  80796c:	d8801115 	stw	r2,68(sp)
  807970:	0809db00 	call	809db0 <__i2b>
  807974:	1027883a 	mov	r19,r2
  807978:	003f2506 	br	807610 <_dtoa_r+0x7bc>
  80797c:	00c02074 	movhi	r3,129
  807980:	18d35e04 	addi	r3,r3,19832
  807984:	003d6706 	br	806f24 <_dtoa_r+0xd0>
  807988:	dd800517 	ldw	r22,20(sp)
  80798c:	04000044 	movi	r16,1
  807990:	00000706 	br	8079b0 <_dtoa_r+0xb5c>
  807994:	d9400717 	ldw	r5,28(sp)
  807998:	d9001617 	ldw	r4,88(sp)
  80799c:	01800284 	movi	r6,10
  8079a0:	000f883a 	mov	r7,zero
  8079a4:	0809dec0 	call	809dec <__multadd>
  8079a8:	d8800715 	stw	r2,28(sp)
  8079ac:	84000044 	addi	r16,r16,1
  8079b0:	d9000717 	ldw	r4,28(sp)
  8079b4:	900b883a 	mov	r5,r18
  8079b8:	0806c100 	call	806c10 <quorem>
  8079bc:	15c00c04 	addi	r23,r2,48
  8079c0:	b5c00005 	stb	r23,0(r22)
  8079c4:	d8c00f17 	ldw	r3,60(sp)
  8079c8:	b5800044 	addi	r22,r22,1
  8079cc:	80fff116 	blt	r16,r3,807994 <_dtoa_r+0xb40>
  8079d0:	d8000615 	stw	zero,24(sp)
  8079d4:	d9400717 	ldw	r5,28(sp)
  8079d8:	d9001617 	ldw	r4,88(sp)
  8079dc:	01800044 	movi	r6,1
  8079e0:	0809a100 	call	809a10 <__lshift>
  8079e4:	1009883a 	mov	r4,r2
  8079e8:	900b883a 	mov	r5,r18
  8079ec:	d8800715 	stw	r2,28(sp)
  8079f0:	08092280 	call	809228 <__mcmp>
  8079f4:	00803c0e 	bge	zero,r2,807ae8 <_dtoa_r+0xc94>
  8079f8:	b009883a 	mov	r4,r22
  8079fc:	213fffc4 	addi	r4,r4,-1
  807a00:	21400003 	ldbu	r5,0(r4)
  807a04:	00800e44 	movi	r2,57
  807a08:	28c03fcc 	andi	r3,r5,255
  807a0c:	18c0201c 	xori	r3,r3,128
  807a10:	18ffe004 	addi	r3,r3,-128
  807a14:	1881981e 	bne	r3,r2,808078 <_dtoa_r+0x1224>
  807a18:	d9800517 	ldw	r6,20(sp)
  807a1c:	21bff71e 	bne	r4,r6,8079fc <_dtoa_r+0xba8>
  807a20:	d8800d17 	ldw	r2,52(sp)
  807a24:	37000044 	addi	fp,r6,1
  807a28:	10800044 	addi	r2,r2,1
  807a2c:	d8800d15 	stw	r2,52(sp)
  807a30:	00800c44 	movi	r2,49
  807a34:	30800005 	stb	r2,0(r6)
  807a38:	d9001617 	ldw	r4,88(sp)
  807a3c:	900b883a 	mov	r5,r18
  807a40:	08090cc0 	call	8090cc <_Bfree>
  807a44:	983ecd26 	beq	r19,zero,80757c <_dtoa_r+0x728>
  807a48:	d8c00617 	ldw	r3,24(sp)
  807a4c:	18000426 	beq	r3,zero,807a60 <_dtoa_r+0xc0c>
  807a50:	1cc00326 	beq	r3,r19,807a60 <_dtoa_r+0xc0c>
  807a54:	d9001617 	ldw	r4,88(sp)
  807a58:	180b883a 	mov	r5,r3
  807a5c:	08090cc0 	call	8090cc <_Bfree>
  807a60:	d9001617 	ldw	r4,88(sp)
  807a64:	980b883a 	mov	r5,r19
  807a68:	08090cc0 	call	8090cc <_Bfree>
  807a6c:	003ec306 	br	80757c <_dtoa_r+0x728>
  807a70:	1805883a 	mov	r2,r3
  807a74:	003eeb06 	br	807624 <_dtoa_r+0x7d0>
  807a78:	d9800a17 	ldw	r6,40(sp)
  807a7c:	d8c01117 	ldw	r3,68(sp)
  807a80:	20bfff04 	addi	r2,r4,-4
  807a84:	308d883a 	add	r6,r6,r2
  807a88:	1887883a 	add	r3,r3,r2
  807a8c:	80a1883a 	add	r16,r16,r2
  807a90:	d9800a15 	stw	r6,40(sp)
  807a94:	d8c01115 	stw	r3,68(sp)
  807a98:	003f1d06 	br	807710 <_dtoa_r+0x8bc>
  807a9c:	a03f0c1e 	bne	r20,zero,8076d0 <_dtoa_r+0x87c>
  807aa0:	00800434 	movhi	r2,16
  807aa4:	10bfffc4 	addi	r2,r2,-1
  807aa8:	a884703a 	and	r2,r21,r2
  807aac:	103f081e 	bne	r2,zero,8076d0 <_dtoa_r+0x87c>
  807ab0:	a89ffc2c 	andhi	r2,r21,32752
  807ab4:	103f0626 	beq	r2,zero,8076d0 <_dtoa_r+0x87c>
  807ab8:	d8c01117 	ldw	r3,68(sp)
  807abc:	d9000a17 	ldw	r4,40(sp)
  807ac0:	18c00044 	addi	r3,r3,1
  807ac4:	21000044 	addi	r4,r4,1
  807ac8:	d8c01115 	stw	r3,68(sp)
  807acc:	d9000a15 	stw	r4,40(sp)
  807ad0:	003f0006 	br	8076d4 <_dtoa_r+0x880>
  807ad4:	d9400717 	ldw	r5,28(sp)
  807ad8:	d9001617 	ldw	r4,88(sp)
  807adc:	0809f180 	call	809f18 <__pow5mult>
  807ae0:	d8800715 	stw	r2,28(sp)
  807ae4:	003eed06 	br	80769c <_dtoa_r+0x848>
  807ae8:	1000021e 	bne	r2,zero,807af4 <_dtoa_r+0xca0>
  807aec:	b880004c 	andi	r2,r23,1
  807af0:	103fc11e 	bne	r2,zero,8079f8 <_dtoa_r+0xba4>
  807af4:	b5bfffc4 	addi	r22,r22,-1
  807af8:	b0c00007 	ldb	r3,0(r22)
  807afc:	00800c04 	movi	r2,48
  807b00:	18bffc26 	beq	r3,r2,807af4 <_dtoa_r+0xca0>
  807b04:	b7000044 	addi	fp,r22,1
  807b08:	003fcb06 	br	807a38 <_dtoa_r+0xbe4>
  807b0c:	d9800d17 	ldw	r6,52(sp)
  807b10:	018fc83a 	sub	r7,zero,r6
  807b14:	3801f726 	beq	r7,zero,8082f4 <_dtoa_r+0x14a0>
  807b18:	398003cc 	andi	r6,r7,15
  807b1c:	300c90fa 	slli	r6,r6,3
  807b20:	01402074 	movhi	r5,129
  807b24:	29542604 	addi	r5,r5,20632
  807b28:	d9001217 	ldw	r4,72(sp)
  807b2c:	314d883a 	add	r6,r6,r5
  807b30:	30c00117 	ldw	r3,4(r6)
  807b34:	30800017 	ldw	r2,0(r6)
  807b38:	d9401317 	ldw	r5,76(sp)
  807b3c:	3821d13a 	srai	r16,r7,4
  807b40:	100d883a 	mov	r6,r2
  807b44:	180f883a 	mov	r7,r3
  807b48:	080f4200 	call	80f420 <__muldf3>
  807b4c:	1011883a 	mov	r8,r2
  807b50:	1813883a 	mov	r9,r3
  807b54:	1029883a 	mov	r20,r2
  807b58:	182b883a 	mov	r21,r3
  807b5c:	8001e526 	beq	r16,zero,8082f4 <_dtoa_r+0x14a0>
  807b60:	05800084 	movi	r22,2
  807b64:	04402074 	movhi	r17,129
  807b68:	8c545804 	addi	r17,r17,20832
  807b6c:	8080004c 	andi	r2,r16,1
  807b70:	1005003a 	cmpeq	r2,r2,zero
  807b74:	1000081e 	bne	r2,zero,807b98 <_dtoa_r+0xd44>
  807b78:	89800017 	ldw	r6,0(r17)
  807b7c:	89c00117 	ldw	r7,4(r17)
  807b80:	480b883a 	mov	r5,r9
  807b84:	4009883a 	mov	r4,r8
  807b88:	080f4200 	call	80f420 <__muldf3>
  807b8c:	1011883a 	mov	r8,r2
  807b90:	b5800044 	addi	r22,r22,1
  807b94:	1813883a 	mov	r9,r3
  807b98:	8021d07a 	srai	r16,r16,1
  807b9c:	8c400204 	addi	r17,r17,8
  807ba0:	803ff21e 	bne	r16,zero,807b6c <_dtoa_r+0xd18>
  807ba4:	4029883a 	mov	r20,r8
  807ba8:	482b883a 	mov	r21,r9
  807bac:	003dca06 	br	8072d8 <_dtoa_r+0x484>
  807bb0:	d9000817 	ldw	r4,32(sp)
  807bb4:	2005003a 	cmpeq	r2,r4,zero
  807bb8:	1001f61e 	bne	r2,zero,808394 <_dtoa_r+0x1540>
  807bbc:	dc001117 	ldw	r16,68(sp)
  807bc0:	dc801017 	ldw	r18,64(sp)
  807bc4:	18c10cc4 	addi	r3,r3,1075
  807bc8:	003f6106 	br	807950 <_dtoa_r+0xafc>
  807bcc:	d8000b15 	stw	zero,44(sp)
  807bd0:	d9802617 	ldw	r6,152(sp)
  807bd4:	d8c00d17 	ldw	r3,52(sp)
  807bd8:	30800044 	addi	r2,r6,1
  807bdc:	18ad883a 	add	r22,r3,r2
  807be0:	b13fffc4 	addi	r4,r22,-1
  807be4:	d9000e15 	stw	r4,56(sp)
  807be8:	0581f60e 	bge	zero,r22,8083c4 <_dtoa_r+0x1570>
  807bec:	dd800f15 	stw	r22,60(sp)
  807bf0:	003f3006 	br	8078b4 <_dtoa_r+0xa60>
  807bf4:	d8000b15 	stw	zero,44(sp)
  807bf8:	d9002617 	ldw	r4,152(sp)
  807bfc:	0101eb0e 	bge	zero,r4,8083ac <_dtoa_r+0x1558>
  807c00:	202d883a 	mov	r22,r4
  807c04:	d9000e15 	stw	r4,56(sp)
  807c08:	d9000f15 	stw	r4,60(sp)
  807c0c:	003f2906 	br	8078b4 <_dtoa_r+0xa60>
  807c10:	01800044 	movi	r6,1
  807c14:	d9800b15 	stw	r6,44(sp)
  807c18:	003ff706 	br	807bf8 <_dtoa_r+0xda4>
  807c1c:	01000044 	movi	r4,1
  807c20:	d9000b15 	stw	r4,44(sp)
  807c24:	003fea06 	br	807bd0 <_dtoa_r+0xd7c>
  807c28:	04000c0e 	bge	zero,r16,807c5c <_dtoa_r+0xe08>
  807c2c:	d9400717 	ldw	r5,28(sp)
  807c30:	d9001617 	ldw	r4,88(sp)
  807c34:	01800044 	movi	r6,1
  807c38:	0809a100 	call	809a10 <__lshift>
  807c3c:	1009883a 	mov	r4,r2
  807c40:	900b883a 	mov	r5,r18
  807c44:	d8800715 	stw	r2,28(sp)
  807c48:	08092280 	call	809228 <__mcmp>
  807c4c:	0081e00e 	bge	zero,r2,8083d0 <_dtoa_r+0x157c>
  807c50:	bdc00044 	addi	r23,r23,1
  807c54:	00800e84 	movi	r2,58
  807c58:	b881a226 	beq	r23,r2,8082e4 <_dtoa_r+0x1490>
  807c5c:	b7000044 	addi	fp,r22,1
  807c60:	b5c00005 	stb	r23,0(r22)
  807c64:	003f7406 	br	807a38 <_dtoa_r+0xbe4>
  807c68:	00800e44 	movi	r2,57
  807c6c:	b8819d26 	beq	r23,r2,8082e4 <_dtoa_r+0x1490>
  807c70:	053ffa0e 	bge	zero,r20,807c5c <_dtoa_r+0xe08>
  807c74:	8dc00c44 	addi	r23,r17,49
  807c78:	003ff806 	br	807c5c <_dtoa_r+0xe08>
  807c7c:	d9001617 	ldw	r4,88(sp)
  807c80:	a80b883a 	mov	r5,r21
  807c84:	04000044 	movi	r16,1
  807c88:	08090cc0 	call	8090cc <_Bfree>
  807c8c:	003edf06 	br	80780c <_dtoa_r+0x9b8>
  807c90:	d9001617 	ldw	r4,88(sp)
  807c94:	980b883a 	mov	r5,r19
  807c98:	01800284 	movi	r6,10
  807c9c:	000f883a 	mov	r7,zero
  807ca0:	0809dec0 	call	809dec <__multadd>
  807ca4:	1027883a 	mov	r19,r2
  807ca8:	d8800615 	stw	r2,24(sp)
  807cac:	003ebb06 	br	80779c <_dtoa_r+0x948>
  807cb0:	d9801117 	ldw	r6,68(sp)
  807cb4:	d8800d17 	ldw	r2,52(sp)
  807cb8:	d8000915 	stw	zero,36(sp)
  807cbc:	308dc83a 	sub	r6,r6,r2
  807cc0:	0087c83a 	sub	r3,zero,r2
  807cc4:	d9801115 	stw	r6,68(sp)
  807cc8:	d8c01015 	stw	r3,64(sp)
  807ccc:	003cfe06 	br	8070c8 <_dtoa_r+0x274>
  807cd0:	018dc83a 	sub	r6,zero,r6
  807cd4:	d9801115 	stw	r6,68(sp)
  807cd8:	d8000a15 	stw	zero,40(sp)
  807cdc:	003cf306 	br	8070ac <_dtoa_r+0x258>
  807ce0:	d9000d17 	ldw	r4,52(sp)
  807ce4:	080fd6c0 	call	80fd6c <__floatsidf>
  807ce8:	880b883a 	mov	r5,r17
  807cec:	8009883a 	mov	r4,r16
  807cf0:	180f883a 	mov	r7,r3
  807cf4:	100d883a 	mov	r6,r2
  807cf8:	080fac40 	call	80fac4 <__nedf2>
  807cfc:	103ce126 	beq	r2,zero,807084 <_dtoa_r+0x230>
  807d00:	d9800d17 	ldw	r6,52(sp)
  807d04:	31bfffc4 	addi	r6,r6,-1
  807d08:	d9800d15 	stw	r6,52(sp)
  807d0c:	003cdd06 	br	807084 <_dtoa_r+0x230>
  807d10:	d9000717 	ldw	r4,28(sp)
  807d14:	900b883a 	mov	r5,r18
  807d18:	08092280 	call	809228 <__mcmp>
  807d1c:	103e8d0e 	bge	r2,zero,807754 <_dtoa_r+0x900>
  807d20:	d9400717 	ldw	r5,28(sp)
  807d24:	d9001617 	ldw	r4,88(sp)
  807d28:	01800284 	movi	r6,10
  807d2c:	000f883a 	mov	r7,zero
  807d30:	0809dec0 	call	809dec <__multadd>
  807d34:	d9800d17 	ldw	r6,52(sp)
  807d38:	d8800715 	stw	r2,28(sp)
  807d3c:	31bfffc4 	addi	r6,r6,-1
  807d40:	d9800d15 	stw	r6,52(sp)
  807d44:	b001a71e 	bne	r22,zero,8083e4 <_dtoa_r+0x1590>
  807d48:	d8800e17 	ldw	r2,56(sp)
  807d4c:	d8800f15 	stw	r2,60(sp)
  807d50:	003e8006 	br	807754 <_dtoa_r+0x900>
  807d54:	90800417 	ldw	r2,16(r18)
  807d58:	1085883a 	add	r2,r2,r2
  807d5c:	1085883a 	add	r2,r2,r2
  807d60:	1485883a 	add	r2,r2,r18
  807d64:	11000417 	ldw	r4,16(r2)
  807d68:	08090f40 	call	8090f4 <__hi0bits>
  807d6c:	00c00804 	movi	r3,32
  807d70:	1887c83a 	sub	r3,r3,r2
  807d74:	003e5a06 	br	8076e0 <_dtoa_r+0x88c>
  807d78:	d9400717 	ldw	r5,28(sp)
  807d7c:	d9801017 	ldw	r6,64(sp)
  807d80:	d9001617 	ldw	r4,88(sp)
  807d84:	0809f180 	call	809f18 <__pow5mult>
  807d88:	d8800715 	stw	r2,28(sp)
  807d8c:	003e4306 	br	80769c <_dtoa_r+0x848>
  807d90:	d9800f17 	ldw	r6,60(sp)
  807d94:	d8800d17 	ldw	r2,52(sp)
  807d98:	d9800315 	stw	r6,12(sp)
  807d9c:	d8800415 	stw	r2,16(sp)
  807da0:	d8c00b17 	ldw	r3,44(sp)
  807da4:	1805003a 	cmpeq	r2,r3,zero
  807da8:	1000e21e 	bne	r2,zero,808134 <_dtoa_r+0x12e0>
  807dac:	d9000317 	ldw	r4,12(sp)
  807db0:	0005883a 	mov	r2,zero
  807db4:	00cff834 	movhi	r3,16352
  807db8:	200c90fa 	slli	r6,r4,3
  807dbc:	01002074 	movhi	r4,129
  807dc0:	21142604 	addi	r4,r4,20632
  807dc4:	180b883a 	mov	r5,r3
  807dc8:	310d883a 	add	r6,r6,r4
  807dcc:	327fff17 	ldw	r9,-4(r6)
  807dd0:	323ffe17 	ldw	r8,-8(r6)
  807dd4:	1009883a 	mov	r4,r2
  807dd8:	480f883a 	mov	r7,r9
  807ddc:	400d883a 	mov	r6,r8
  807de0:	080f7e40 	call	80f7e4 <__divdf3>
  807de4:	180b883a 	mov	r5,r3
  807de8:	b00d883a 	mov	r6,r22
  807dec:	b80f883a 	mov	r7,r23
  807df0:	1009883a 	mov	r4,r2
  807df4:	080f32c0 	call	80f32c <__subdf3>
  807df8:	a80b883a 	mov	r5,r21
  807dfc:	a009883a 	mov	r4,r20
  807e00:	d8c01915 	stw	r3,100(sp)
  807e04:	d8801815 	stw	r2,96(sp)
  807e08:	080fe640 	call	80fe64 <__fixdfsi>
  807e0c:	1009883a 	mov	r4,r2
  807e10:	1027883a 	mov	r19,r2
  807e14:	080fd6c0 	call	80fd6c <__floatsidf>
  807e18:	a80b883a 	mov	r5,r21
  807e1c:	a009883a 	mov	r4,r20
  807e20:	180f883a 	mov	r7,r3
  807e24:	100d883a 	mov	r6,r2
  807e28:	080f32c0 	call	80f32c <__subdf3>
  807e2c:	d9801817 	ldw	r6,96(sp)
  807e30:	1823883a 	mov	r17,r3
  807e34:	d8801415 	stw	r2,80(sp)
  807e38:	302d883a 	mov	r22,r6
  807e3c:	d9800517 	ldw	r6,20(sp)
  807e40:	9cc00c04 	addi	r19,r19,48
  807e44:	dc401515 	stw	r17,84(sp)
  807e48:	d8c01917 	ldw	r3,100(sp)
  807e4c:	34c00005 	stb	r19,0(r6)
  807e50:	d8800517 	ldw	r2,20(sp)
  807e54:	d9401917 	ldw	r5,100(sp)
  807e58:	d9801417 	ldw	r6,80(sp)
  807e5c:	b009883a 	mov	r4,r22
  807e60:	880f883a 	mov	r7,r17
  807e64:	182f883a 	mov	r23,r3
  807e68:	17000044 	addi	fp,r2,1
  807e6c:	080fb4c0 	call	80fb4c <__gtdf2>
  807e70:	00804e16 	blt	zero,r2,807fac <_dtoa_r+0x1158>
  807e74:	d9801417 	ldw	r6,80(sp)
  807e78:	0005883a 	mov	r2,zero
  807e7c:	00cffc34 	movhi	r3,16368
  807e80:	180b883a 	mov	r5,r3
  807e84:	880f883a 	mov	r7,r17
  807e88:	1009883a 	mov	r4,r2
  807e8c:	080f32c0 	call	80f32c <__subdf3>
  807e90:	d9401917 	ldw	r5,100(sp)
  807e94:	180f883a 	mov	r7,r3
  807e98:	b009883a 	mov	r4,r22
  807e9c:	100d883a 	mov	r6,r2
  807ea0:	080fb4c0 	call	80fb4c <__gtdf2>
  807ea4:	00bda216 	blt	zero,r2,807530 <_dtoa_r+0x6dc>
  807ea8:	d8c00317 	ldw	r3,12(sp)
  807eac:	00800044 	movi	r2,1
  807eb0:	10c01216 	blt	r2,r3,807efc <_dtoa_r+0x10a8>
  807eb4:	003d4506 	br	8073cc <_dtoa_r+0x578>
  807eb8:	d9801417 	ldw	r6,80(sp)
  807ebc:	0005883a 	mov	r2,zero
  807ec0:	00cffc34 	movhi	r3,16368
  807ec4:	180b883a 	mov	r5,r3
  807ec8:	880f883a 	mov	r7,r17
  807ecc:	1009883a 	mov	r4,r2
  807ed0:	080f32c0 	call	80f32c <__subdf3>
  807ed4:	d9c01b17 	ldw	r7,108(sp)
  807ed8:	180b883a 	mov	r5,r3
  807edc:	1009883a 	mov	r4,r2
  807ee0:	b00d883a 	mov	r6,r22
  807ee4:	080fc5c0 	call	80fc5c <__ltdf2>
  807ee8:	103d9116 	blt	r2,zero,807530 <_dtoa_r+0x6dc>
  807eec:	d9800517 	ldw	r6,20(sp)
  807ef0:	d9000317 	ldw	r4,12(sp)
  807ef4:	3105883a 	add	r2,r6,r4
  807ef8:	e0bd3426 	beq	fp,r2,8073cc <_dtoa_r+0x578>
  807efc:	04500934 	movhi	r17,16420
  807f00:	0021883a 	mov	r16,zero
  807f04:	b80b883a 	mov	r5,r23
  807f08:	b009883a 	mov	r4,r22
  807f0c:	800d883a 	mov	r6,r16
  807f10:	880f883a 	mov	r7,r17
  807f14:	080f4200 	call	80f420 <__muldf3>
  807f18:	d9401517 	ldw	r5,84(sp)
  807f1c:	d9001417 	ldw	r4,80(sp)
  807f20:	880f883a 	mov	r7,r17
  807f24:	000d883a 	mov	r6,zero
  807f28:	d8801a15 	stw	r2,104(sp)
  807f2c:	d8c01b15 	stw	r3,108(sp)
  807f30:	080f4200 	call	80f420 <__muldf3>
  807f34:	180b883a 	mov	r5,r3
  807f38:	1009883a 	mov	r4,r2
  807f3c:	1823883a 	mov	r17,r3
  807f40:	1021883a 	mov	r16,r2
  807f44:	080fe640 	call	80fe64 <__fixdfsi>
  807f48:	1009883a 	mov	r4,r2
  807f4c:	102b883a 	mov	r21,r2
  807f50:	080fd6c0 	call	80fd6c <__floatsidf>
  807f54:	880b883a 	mov	r5,r17
  807f58:	8009883a 	mov	r4,r16
  807f5c:	180f883a 	mov	r7,r3
  807f60:	100d883a 	mov	r6,r2
  807f64:	080f32c0 	call	80f32c <__subdf3>
  807f68:	1021883a 	mov	r16,r2
  807f6c:	d9001b17 	ldw	r4,108(sp)
  807f70:	1823883a 	mov	r17,r3
  807f74:	dc001415 	stw	r16,80(sp)
  807f78:	ad400c04 	addi	r21,r21,48
  807f7c:	dc401515 	stw	r17,84(sp)
  807f80:	d8801a17 	ldw	r2,104(sp)
  807f84:	e5400005 	stb	r21,0(fp)
  807f88:	202f883a 	mov	r23,r4
  807f8c:	d9c01b17 	ldw	r7,108(sp)
  807f90:	d9001417 	ldw	r4,80(sp)
  807f94:	880b883a 	mov	r5,r17
  807f98:	100d883a 	mov	r6,r2
  807f9c:	102d883a 	mov	r22,r2
  807fa0:	e7000044 	addi	fp,fp,1
  807fa4:	080fc5c0 	call	80fc5c <__ltdf2>
  807fa8:	103fc30e 	bge	r2,zero,807eb8 <_dtoa_r+0x1064>
  807fac:	d9000417 	ldw	r4,16(sp)
  807fb0:	d9000d15 	stw	r4,52(sp)
  807fb4:	003d7106 	br	80757c <_dtoa_r+0x728>
  807fb8:	d9801717 	ldw	r6,92(sp)
  807fbc:	00800084 	movi	r2,2
  807fc0:	11bde60e 	bge	r2,r6,80775c <_dtoa_r+0x908>
  807fc4:	203cfb1e 	bne	r4,zero,8073b4 <_dtoa_r+0x560>
  807fc8:	d9001617 	ldw	r4,88(sp)
  807fcc:	900b883a 	mov	r5,r18
  807fd0:	01800144 	movi	r6,5
  807fd4:	000f883a 	mov	r7,zero
  807fd8:	0809dec0 	call	809dec <__multadd>
  807fdc:	d9000717 	ldw	r4,28(sp)
  807fe0:	100b883a 	mov	r5,r2
  807fe4:	1025883a 	mov	r18,r2
  807fe8:	08092280 	call	809228 <__mcmp>
  807fec:	00bcf10e 	bge	zero,r2,8073b4 <_dtoa_r+0x560>
  807ff0:	d8c00d17 	ldw	r3,52(sp)
  807ff4:	d9000517 	ldw	r4,20(sp)
  807ff8:	d8000615 	stw	zero,24(sp)
  807ffc:	18c00044 	addi	r3,r3,1
  808000:	d8c00d15 	stw	r3,52(sp)
  808004:	00800c44 	movi	r2,49
  808008:	27000044 	addi	fp,r4,1
  80800c:	20800005 	stb	r2,0(r4)
  808010:	003e8906 	br	807a38 <_dtoa_r+0xbe4>
  808014:	d8c00517 	ldw	r3,20(sp)
  808018:	003bc206 	br	806f24 <_dtoa_r+0xd0>
  80801c:	01802074 	movhi	r6,129
  808020:	31945804 	addi	r6,r6,20832
  808024:	30c00917 	ldw	r3,36(r6)
  808028:	30800817 	ldw	r2,32(r6)
  80802c:	d9001217 	ldw	r4,72(sp)
  808030:	d9401317 	ldw	r5,76(sp)
  808034:	180f883a 	mov	r7,r3
  808038:	100d883a 	mov	r6,r2
  80803c:	080f7e40 	call	80f7e4 <__divdf3>
  808040:	948003cc 	andi	r18,r18,15
  808044:	058000c4 	movi	r22,3
  808048:	1029883a 	mov	r20,r2
  80804c:	182b883a 	mov	r21,r3
  808050:	003c8906 	br	807278 <_dtoa_r+0x424>
  808054:	d9001017 	ldw	r4,64(sp)
  808058:	d9800917 	ldw	r6,36(sp)
  80805c:	0025883a 	mov	r18,zero
  808060:	1105c83a 	sub	r2,r2,r4
  808064:	2089883a 	add	r4,r4,r2
  808068:	308d883a 	add	r6,r6,r2
  80806c:	d9001015 	stw	r4,64(sp)
  808070:	d9800915 	stw	r6,36(sp)
  808074:	003e3206 	br	807940 <_dtoa_r+0xaec>
  808078:	28800044 	addi	r2,r5,1
  80807c:	27000044 	addi	fp,r4,1
  808080:	20800005 	stb	r2,0(r4)
  808084:	003e6c06 	br	807a38 <_dtoa_r+0xbe4>
  808088:	d8800f17 	ldw	r2,60(sp)
  80808c:	00bce016 	blt	zero,r2,807410 <_dtoa_r+0x5bc>
  808090:	d9800f17 	ldw	r6,60(sp)
  808094:	303cc51e 	bne	r6,zero,8073ac <_dtoa_r+0x558>
  808098:	0005883a 	mov	r2,zero
  80809c:	00d00534 	movhi	r3,16404
  8080a0:	980b883a 	mov	r5,r19
  8080a4:	180f883a 	mov	r7,r3
  8080a8:	9009883a 	mov	r4,r18
  8080ac:	100d883a 	mov	r6,r2
  8080b0:	080f4200 	call	80f420 <__muldf3>
  8080b4:	180b883a 	mov	r5,r3
  8080b8:	a80f883a 	mov	r7,r21
  8080bc:	1009883a 	mov	r4,r2
  8080c0:	a00d883a 	mov	r6,r20
  8080c4:	080fbd40 	call	80fbd4 <__gedf2>
  8080c8:	103cb80e 	bge	r2,zero,8073ac <_dtoa_r+0x558>
  8080cc:	0027883a 	mov	r19,zero
  8080d0:	0025883a 	mov	r18,zero
  8080d4:	003fc606 	br	807ff0 <_dtoa_r+0x119c>
  8080d8:	99400117 	ldw	r5,4(r19)
  8080dc:	d9001617 	ldw	r4,88(sp)
  8080e0:	080964c0 	call	80964c <_Balloc>
  8080e4:	99800417 	ldw	r6,16(r19)
  8080e8:	11000304 	addi	r4,r2,12
  8080ec:	99400304 	addi	r5,r19,12
  8080f0:	318d883a 	add	r6,r6,r6
  8080f4:	318d883a 	add	r6,r6,r6
  8080f8:	31800204 	addi	r6,r6,8
  8080fc:	1023883a 	mov	r17,r2
  808100:	0808f4c0 	call	808f4c <memcpy>
  808104:	d9001617 	ldw	r4,88(sp)
  808108:	880b883a 	mov	r5,r17
  80810c:	01800044 	movi	r6,1
  808110:	0809a100 	call	809a10 <__lshift>
  808114:	100b883a 	mov	r5,r2
  808118:	003d9c06 	br	80778c <_dtoa_r+0x938>
  80811c:	00800e44 	movi	r2,57
  808120:	b8807026 	beq	r23,r2,8082e4 <_dtoa_r+0x1490>
  808124:	b8800044 	addi	r2,r23,1
  808128:	b7000044 	addi	fp,r22,1
  80812c:	b0800005 	stb	r2,0(r22)
  808130:	003e4106 	br	807a38 <_dtoa_r+0xbe4>
  808134:	d8800317 	ldw	r2,12(sp)
  808138:	01802074 	movhi	r6,129
  80813c:	31942604 	addi	r6,r6,20632
  808140:	b009883a 	mov	r4,r22
  808144:	100e90fa 	slli	r7,r2,3
  808148:	b80b883a 	mov	r5,r23
  80814c:	398f883a 	add	r7,r7,r6
  808150:	38bffe17 	ldw	r2,-8(r7)
  808154:	d9800517 	ldw	r6,20(sp)
  808158:	38ffff17 	ldw	r3,-4(r7)
  80815c:	37000044 	addi	fp,r6,1
  808160:	180f883a 	mov	r7,r3
  808164:	100d883a 	mov	r6,r2
  808168:	080f4200 	call	80f420 <__muldf3>
  80816c:	a80b883a 	mov	r5,r21
  808170:	a009883a 	mov	r4,r20
  808174:	182f883a 	mov	r23,r3
  808178:	102d883a 	mov	r22,r2
  80817c:	080fe640 	call	80fe64 <__fixdfsi>
  808180:	1009883a 	mov	r4,r2
  808184:	1027883a 	mov	r19,r2
  808188:	080fd6c0 	call	80fd6c <__floatsidf>
  80818c:	a80b883a 	mov	r5,r21
  808190:	a009883a 	mov	r4,r20
  808194:	180f883a 	mov	r7,r3
  808198:	100d883a 	mov	r6,r2
  80819c:	080f32c0 	call	80f32c <__subdf3>
  8081a0:	180b883a 	mov	r5,r3
  8081a4:	d8c00517 	ldw	r3,20(sp)
  8081a8:	9cc00c04 	addi	r19,r19,48
  8081ac:	1009883a 	mov	r4,r2
  8081b0:	1cc00005 	stb	r19,0(r3)
  8081b4:	2021883a 	mov	r16,r4
  8081b8:	d9000317 	ldw	r4,12(sp)
  8081bc:	00800044 	movi	r2,1
  8081c0:	2823883a 	mov	r17,r5
  8081c4:	20802226 	beq	r4,r2,808250 <_dtoa_r+0x13fc>
  8081c8:	1029883a 	mov	r20,r2
  8081cc:	0005883a 	mov	r2,zero
  8081d0:	00d00934 	movhi	r3,16420
  8081d4:	180f883a 	mov	r7,r3
  8081d8:	100d883a 	mov	r6,r2
  8081dc:	880b883a 	mov	r5,r17
  8081e0:	8009883a 	mov	r4,r16
  8081e4:	080f4200 	call	80f420 <__muldf3>
  8081e8:	180b883a 	mov	r5,r3
  8081ec:	1009883a 	mov	r4,r2
  8081f0:	1823883a 	mov	r17,r3
  8081f4:	1021883a 	mov	r16,r2
  8081f8:	080fe640 	call	80fe64 <__fixdfsi>
  8081fc:	1009883a 	mov	r4,r2
  808200:	102b883a 	mov	r21,r2
  808204:	080fd6c0 	call	80fd6c <__floatsidf>
  808208:	880b883a 	mov	r5,r17
  80820c:	8009883a 	mov	r4,r16
  808210:	180f883a 	mov	r7,r3
  808214:	100d883a 	mov	r6,r2
  808218:	080f32c0 	call	80f32c <__subdf3>
  80821c:	180b883a 	mov	r5,r3
  808220:	d8c00517 	ldw	r3,20(sp)
  808224:	1009883a 	mov	r4,r2
  808228:	ad400c04 	addi	r21,r21,48
  80822c:	1d05883a 	add	r2,r3,r20
  808230:	15400005 	stb	r21,0(r2)
  808234:	2021883a 	mov	r16,r4
  808238:	d9000317 	ldw	r4,12(sp)
  80823c:	a5000044 	addi	r20,r20,1
  808240:	2823883a 	mov	r17,r5
  808244:	a13fe11e 	bne	r20,r4,8081cc <_dtoa_r+0x1378>
  808248:	e505883a 	add	r2,fp,r20
  80824c:	173fffc4 	addi	fp,r2,-1
  808250:	0025883a 	mov	r18,zero
  808254:	04cff834 	movhi	r19,16352
  808258:	b009883a 	mov	r4,r22
  80825c:	b80b883a 	mov	r5,r23
  808260:	900d883a 	mov	r6,r18
  808264:	980f883a 	mov	r7,r19
  808268:	080f3ac0 	call	80f3ac <__adddf3>
  80826c:	180b883a 	mov	r5,r3
  808270:	1009883a 	mov	r4,r2
  808274:	800d883a 	mov	r6,r16
  808278:	880f883a 	mov	r7,r17
  80827c:	080fc5c0 	call	80fc5c <__ltdf2>
  808280:	103cab16 	blt	r2,zero,807530 <_dtoa_r+0x6dc>
  808284:	0009883a 	mov	r4,zero
  808288:	980b883a 	mov	r5,r19
  80828c:	b80f883a 	mov	r7,r23
  808290:	b00d883a 	mov	r6,r22
  808294:	080f32c0 	call	80f32c <__subdf3>
  808298:	180b883a 	mov	r5,r3
  80829c:	880f883a 	mov	r7,r17
  8082a0:	1009883a 	mov	r4,r2
  8082a4:	800d883a 	mov	r6,r16
  8082a8:	080fb4c0 	call	80fb4c <__gtdf2>
  8082ac:	00bc470e 	bge	zero,r2,8073cc <_dtoa_r+0x578>
  8082b0:	00c00c04 	movi	r3,48
  8082b4:	e73fffc4 	addi	fp,fp,-1
  8082b8:	e0800007 	ldb	r2,0(fp)
  8082bc:	10fffd26 	beq	r2,r3,8082b4 <_dtoa_r+0x1460>
  8082c0:	d9800417 	ldw	r6,16(sp)
  8082c4:	e7000044 	addi	fp,fp,1
  8082c8:	d9800d15 	stw	r6,52(sp)
  8082cc:	003cab06 	br	80757c <_dtoa_r+0x728>
  8082d0:	d8c00f17 	ldw	r3,60(sp)
  8082d4:	d9001117 	ldw	r4,68(sp)
  8082d8:	20e1c83a 	sub	r16,r4,r3
  8082dc:	0007883a 	mov	r3,zero
  8082e0:	003d9b06 	br	807950 <_dtoa_r+0xafc>
  8082e4:	00800e44 	movi	r2,57
  8082e8:	b0800005 	stb	r2,0(r22)
  8082ec:	b5800044 	addi	r22,r22,1
  8082f0:	003dc106 	br	8079f8 <_dtoa_r+0xba4>
  8082f4:	05800084 	movi	r22,2
  8082f8:	003bf706 	br	8072d8 <_dtoa_r+0x484>
  8082fc:	d9000f17 	ldw	r4,60(sp)
  808300:	013c000e 	bge	zero,r4,807304 <_dtoa_r+0x4b0>
  808304:	d9800e17 	ldw	r6,56(sp)
  808308:	01bc300e 	bge	zero,r6,8073cc <_dtoa_r+0x578>
  80830c:	0005883a 	mov	r2,zero
  808310:	00d00934 	movhi	r3,16420
  808314:	a80b883a 	mov	r5,r21
  808318:	180f883a 	mov	r7,r3
  80831c:	a009883a 	mov	r4,r20
  808320:	100d883a 	mov	r6,r2
  808324:	080f4200 	call	80f420 <__muldf3>
  808328:	b1000044 	addi	r4,r22,1
  80832c:	1021883a 	mov	r16,r2
  808330:	1823883a 	mov	r17,r3
  808334:	080fd6c0 	call	80fd6c <__floatsidf>
  808338:	880b883a 	mov	r5,r17
  80833c:	8009883a 	mov	r4,r16
  808340:	180f883a 	mov	r7,r3
  808344:	100d883a 	mov	r6,r2
  808348:	080f4200 	call	80f420 <__muldf3>
  80834c:	0011883a 	mov	r8,zero
  808350:	02500734 	movhi	r9,16412
  808354:	180b883a 	mov	r5,r3
  808358:	480f883a 	mov	r7,r9
  80835c:	1009883a 	mov	r4,r2
  808360:	400d883a 	mov	r6,r8
  808364:	080f3ac0 	call	80f3ac <__adddf3>
  808368:	102d883a 	mov	r22,r2
  80836c:	00bf3034 	movhi	r2,64704
  808370:	10ef883a 	add	r23,r2,r3
  808374:	d8800d17 	ldw	r2,52(sp)
  808378:	d8c00e17 	ldw	r3,56(sp)
  80837c:	8029883a 	mov	r20,r16
  808380:	10bfffc4 	addi	r2,r2,-1
  808384:	882b883a 	mov	r21,r17
  808388:	d8800415 	stw	r2,16(sp)
  80838c:	d8c00315 	stw	r3,12(sp)
  808390:	003e8306 	br	807da0 <_dtoa_r+0xf4c>
  808394:	d8800117 	ldw	r2,4(sp)
  808398:	dc001117 	ldw	r16,68(sp)
  80839c:	dc801017 	ldw	r18,64(sp)
  8083a0:	00c00d84 	movi	r3,54
  8083a4:	1887c83a 	sub	r3,r3,r2
  8083a8:	003d6906 	br	807950 <_dtoa_r+0xafc>
  8083ac:	01800044 	movi	r6,1
  8083b0:	3021883a 	mov	r16,r6
  8083b4:	d9800f15 	stw	r6,60(sp)
  8083b8:	d9802615 	stw	r6,152(sp)
  8083bc:	d9800e15 	stw	r6,56(sp)
  8083c0:	003b9306 	br	807210 <_dtoa_r+0x3bc>
  8083c4:	b021883a 	mov	r16,r22
  8083c8:	dd800f15 	stw	r22,60(sp)
  8083cc:	003b9006 	br	807210 <_dtoa_r+0x3bc>
  8083d0:	103e221e 	bne	r2,zero,807c5c <_dtoa_r+0xe08>
  8083d4:	b880004c 	andi	r2,r23,1
  8083d8:	1005003a 	cmpeq	r2,r2,zero
  8083dc:	103e1f1e 	bne	r2,zero,807c5c <_dtoa_r+0xe08>
  8083e0:	003e1b06 	br	807c50 <_dtoa_r+0xdfc>
  8083e4:	d9001617 	ldw	r4,88(sp)
  8083e8:	980b883a 	mov	r5,r19
  8083ec:	01800284 	movi	r6,10
  8083f0:	000f883a 	mov	r7,zero
  8083f4:	0809dec0 	call	809dec <__multadd>
  8083f8:	d8c00e17 	ldw	r3,56(sp)
  8083fc:	1027883a 	mov	r19,r2
  808400:	d8c00f15 	stw	r3,60(sp)
  808404:	003cd306 	br	807754 <_dtoa_r+0x900>

00808408 <__sflags>:
  808408:	28c00007 	ldb	r3,0(r5)
  80840c:	00801c84 	movi	r2,114
  808410:	18800926 	beq	r3,r2,808438 <__sflags+0x30>
  808414:	00801dc4 	movi	r2,119
  808418:	18801426 	beq	r3,r2,80846c <__sflags+0x64>
  80841c:	00801844 	movi	r2,97
  808420:	18801626 	beq	r3,r2,80847c <__sflags+0x74>
  808424:	0007883a 	mov	r3,zero
  808428:	00800584 	movi	r2,22
  80842c:	20800015 	stw	r2,0(r4)
  808430:	1805883a 	mov	r2,r3
  808434:	f800283a 	ret
  808438:	000f883a 	mov	r7,zero
  80843c:	0011883a 	mov	r8,zero
  808440:	00c00104 	movi	r3,4
  808444:	28800047 	ldb	r2,1(r5)
  808448:	10000426 	beq	r2,zero,80845c <__sflags+0x54>
  80844c:	01000ac4 	movi	r4,43
  808450:	11000e26 	beq	r2,r4,80848c <__sflags+0x84>
  808454:	28800087 	ldb	r2,2(r5)
  808458:	11000c26 	beq	r2,r4,80848c <__sflags+0x84>
  80845c:	3a04b03a 	or	r2,r7,r8
  808460:	30800015 	stw	r2,0(r6)
  808464:	1805883a 	mov	r2,r3
  808468:	f800283a 	ret
  80846c:	01c00044 	movi	r7,1
  808470:	02018004 	movi	r8,1536
  808474:	00c00204 	movi	r3,8
  808478:	003ff206 	br	808444 <__sflags+0x3c>
  80847c:	01c00044 	movi	r7,1
  808480:	02008204 	movi	r8,520
  808484:	00c04204 	movi	r3,264
  808488:	003fee06 	br	808444 <__sflags+0x3c>
  80848c:	00bffcc4 	movi	r2,-13
  808490:	1884703a 	and	r2,r3,r2
  808494:	01c00084 	movi	r7,2
  808498:	10c00414 	ori	r3,r2,16
  80849c:	3a04b03a 	or	r2,r7,r8
  8084a0:	30800015 	stw	r2,0(r6)
  8084a4:	003fef06 	br	808464 <__sflags+0x5c>

008084a8 <_fread_r>:
  8084a8:	defff504 	addi	sp,sp,-44
  8084ac:	dd800715 	stw	r22,28(sp)
  8084b0:	dc000115 	stw	r16,4(sp)
  8084b4:	202d883a 	mov	r22,r4
  8084b8:	2821883a 	mov	r16,r5
  8084bc:	3809883a 	mov	r4,r7
  8084c0:	300b883a 	mov	r5,r6
  8084c4:	df000915 	stw	fp,36(sp)
  8084c8:	ddc00815 	stw	r23,32(sp)
  8084cc:	dcc00415 	stw	r19,16(sp)
  8084d0:	dfc00a15 	stw	ra,40(sp)
  8084d4:	dd400615 	stw	r21,24(sp)
  8084d8:	dd000515 	stw	r20,20(sp)
  8084dc:	dc800315 	stw	r18,12(sp)
  8084e0:	dc400215 	stw	r17,8(sp)
  8084e4:	d9800015 	stw	r6,0(sp)
  8084e8:	3839883a 	mov	fp,r7
  8084ec:	08102900 	call	810290 <__mulsi3>
  8084f0:	102f883a 	mov	r23,r2
  8084f4:	dcc00b17 	ldw	r19,44(sp)
  8084f8:	10005926 	beq	r2,zero,808660 <_fread_r+0x1b8>
  8084fc:	b0000226 	beq	r22,zero,808508 <_fread_r+0x60>
  808500:	b0800e17 	ldw	r2,56(r22)
  808504:	10005826 	beq	r2,zero,808668 <_fread_r+0x1c0>
  808508:	9c400117 	ldw	r17,4(r19)
  80850c:	88005a16 	blt	r17,zero,808678 <_fread_r+0x1d0>
  808510:	9880030b 	ldhu	r2,12(r19)
  808514:	8029883a 	mov	r20,r16
  808518:	1080008c 	andi	r2,r2,2
  80851c:	1000221e 	bne	r2,zero,8085a8 <_fread_r+0x100>
  808520:	b825883a 	mov	r18,r23
  808524:	00000106 	br	80852c <_fread_r+0x84>
  808528:	9c400117 	ldw	r17,4(r19)
  80852c:	a009883a 	mov	r4,r20
  808530:	880d883a 	mov	r6,r17
  808534:	8c80552e 	bgeu	r17,r18,80868c <_fread_r+0x1e4>
  808538:	99400017 	ldw	r5,0(r19)
  80853c:	a469883a 	add	r20,r20,r17
  808540:	9465c83a 	sub	r18,r18,r17
  808544:	0808f4c0 	call	808f4c <memcpy>
  808548:	98800017 	ldw	r2,0(r19)
  80854c:	b009883a 	mov	r4,r22
  808550:	980b883a 	mov	r5,r19
  808554:	1461883a 	add	r16,r2,r17
  808558:	9c000015 	stw	r16,0(r19)
  80855c:	0802da00 	call	802da0 <__srefill_r>
  808560:	103ff126 	beq	r2,zero,808528 <_fread_r+0x80>
  808564:	d9400017 	ldw	r5,0(sp)
  808568:	bc89c83a 	sub	r4,r23,r18
  80856c:	08102800 	call	810280 <__udivsi3>
  808570:	1039883a 	mov	fp,r2
  808574:	e005883a 	mov	r2,fp
  808578:	dfc00a17 	ldw	ra,40(sp)
  80857c:	df000917 	ldw	fp,36(sp)
  808580:	ddc00817 	ldw	r23,32(sp)
  808584:	dd800717 	ldw	r22,28(sp)
  808588:	dd400617 	ldw	r21,24(sp)
  80858c:	dd000517 	ldw	r20,20(sp)
  808590:	dcc00417 	ldw	r19,16(sp)
  808594:	dc800317 	ldw	r18,12(sp)
  808598:	dc400217 	ldw	r17,8(sp)
  80859c:	dc000117 	ldw	r16,4(sp)
  8085a0:	dec00b04 	addi	sp,sp,44
  8085a4:	f800283a 	ret
  8085a8:	b825883a 	mov	r18,r23
  8085ac:	8dc03536 	bltu	r17,r23,808684 <_fread_r+0x1dc>
  8085b0:	99400017 	ldw	r5,0(r19)
  8085b4:	a009883a 	mov	r4,r20
  8085b8:	900d883a 	mov	r6,r18
  8085bc:	0808f4c0 	call	808f4c <memcpy>
  8085c0:	9c000017 	ldw	r16,0(r19)
  8085c4:	98800117 	ldw	r2,4(r19)
  8085c8:	99400c17 	ldw	r5,48(r19)
  8085cc:	84a1883a 	add	r16,r16,r18
  8085d0:	14a3c83a 	sub	r17,r2,r18
  8085d4:	a4ab883a 	add	r21,r20,r18
  8085d8:	9c400115 	stw	r17,4(r19)
  8085dc:	9c000015 	stw	r16,0(r19)
  8085e0:	bca9c83a 	sub	r20,r23,r18
  8085e4:	28000826 	beq	r5,zero,808608 <_fread_r+0x160>
  8085e8:	a03fe226 	beq	r20,zero,808574 <_fread_r+0xcc>
  8085ec:	98801004 	addi	r2,r19,64
  8085f0:	28800326 	beq	r5,r2,808600 <_fread_r+0x158>
  8085f4:	b009883a 	mov	r4,r22
  8085f8:	08016f00 	call	8016f0 <_free_r>
  8085fc:	9c000017 	ldw	r16,0(r19)
  808600:	98000c15 	stw	zero,48(r19)
  808604:	00000106 	br	80860c <_fread_r+0x164>
  808608:	a03fda26 	beq	r20,zero,808574 <_fread_r+0xcc>
  80860c:	9c800417 	ldw	r18,16(r19)
  808610:	9c400517 	ldw	r17,20(r19)
  808614:	9d400015 	stw	r21,0(r19)
  808618:	9d400415 	stw	r21,16(r19)
  80861c:	9d000515 	stw	r20,20(r19)
  808620:	b009883a 	mov	r4,r22
  808624:	980b883a 	mov	r5,r19
  808628:	0802da00 	call	802da0 <__srefill_r>
  80862c:	98c00117 	ldw	r3,4(r19)
  808630:	9c800415 	stw	r18,16(r19)
  808634:	9c400515 	stw	r17,20(r19)
  808638:	a8eb883a 	add	r21,r21,r3
  80863c:	9c000015 	stw	r16,0(r19)
  808640:	a0e9c83a 	sub	r20,r20,r3
  808644:	98000115 	stw	zero,4(r19)
  808648:	103fef26 	beq	r2,zero,808608 <_fread_r+0x160>
  80864c:	d9400017 	ldw	r5,0(sp)
  808650:	bd09c83a 	sub	r4,r23,r20
  808654:	08102800 	call	810280 <__udivsi3>
  808658:	1039883a 	mov	fp,r2
  80865c:	003fc506 	br	808574 <_fread_r+0xcc>
  808660:	0039883a 	mov	fp,zero
  808664:	003fc306 	br	808574 <_fread_r+0xcc>
  808668:	b009883a 	mov	r4,r22
  80866c:	08011c80 	call	8011c8 <__sinit>
  808670:	9c400117 	ldw	r17,4(r19)
  808674:	883fa60e 	bge	r17,zero,808510 <_fread_r+0x68>
  808678:	0023883a 	mov	r17,zero
  80867c:	98000115 	stw	zero,4(r19)
  808680:	003fa306 	br	808510 <_fread_r+0x68>
  808684:	8825883a 	mov	r18,r17
  808688:	003fc906 	br	8085b0 <_fread_r+0x108>
  80868c:	99400017 	ldw	r5,0(r19)
  808690:	900d883a 	mov	r6,r18
  808694:	0808f4c0 	call	808f4c <memcpy>
  808698:	98c00117 	ldw	r3,4(r19)
  80869c:	98800017 	ldw	r2,0(r19)
  8086a0:	1c87c83a 	sub	r3,r3,r18
  8086a4:	1485883a 	add	r2,r2,r18
  8086a8:	98800015 	stw	r2,0(r19)
  8086ac:	98c00115 	stw	r3,4(r19)
  8086b0:	003fb006 	br	808574 <_fread_r+0xcc>

008086b4 <fread>:
  8086b4:	00802074 	movhi	r2,129
  8086b8:	109bb804 	addi	r2,r2,28384
  8086bc:	2017883a 	mov	r11,r4
  8086c0:	11000017 	ldw	r4,0(r2)
  8086c4:	defffe04 	addi	sp,sp,-8
  8086c8:	3013883a 	mov	r9,r6
  8086cc:	2805883a 	mov	r2,r5
  8086d0:	d9c00015 	stw	r7,0(sp)
  8086d4:	580b883a 	mov	r5,r11
  8086d8:	100d883a 	mov	r6,r2
  8086dc:	480f883a 	mov	r7,r9
  8086e0:	dfc00115 	stw	ra,4(sp)
  8086e4:	08084a80 	call	8084a8 <_fread_r>
  8086e8:	dfc00117 	ldw	ra,4(sp)
  8086ec:	dec00204 	addi	sp,sp,8
  8086f0:	f800283a 	ret

008086f4 <__sfvwrite_r>:
  8086f4:	30800217 	ldw	r2,8(r6)
  8086f8:	defff504 	addi	sp,sp,-44
  8086fc:	df000915 	stw	fp,36(sp)
  808700:	dd800715 	stw	r22,28(sp)
  808704:	dc800315 	stw	r18,12(sp)
  808708:	dfc00a15 	stw	ra,40(sp)
  80870c:	ddc00815 	stw	r23,32(sp)
  808710:	dd400615 	stw	r21,24(sp)
  808714:	dd000515 	stw	r20,20(sp)
  808718:	dcc00415 	stw	r19,16(sp)
  80871c:	dc400215 	stw	r17,8(sp)
  808720:	dc000115 	stw	r16,4(sp)
  808724:	302d883a 	mov	r22,r6
  808728:	2039883a 	mov	fp,r4
  80872c:	2825883a 	mov	r18,r5
  808730:	10001c26 	beq	r2,zero,8087a4 <__sfvwrite_r+0xb0>
  808734:	29c0030b 	ldhu	r7,12(r5)
  808738:	3880020c 	andi	r2,r7,8
  80873c:	10002726 	beq	r2,zero,8087dc <__sfvwrite_r+0xe8>
  808740:	28800417 	ldw	r2,16(r5)
  808744:	10002526 	beq	r2,zero,8087dc <__sfvwrite_r+0xe8>
  808748:	3880008c 	andi	r2,r7,2
  80874c:	b5400017 	ldw	r21,0(r22)
  808750:	10002826 	beq	r2,zero,8087f4 <__sfvwrite_r+0x100>
  808754:	0021883a 	mov	r16,zero
  808758:	0023883a 	mov	r17,zero
  80875c:	880d883a 	mov	r6,r17
  808760:	e009883a 	mov	r4,fp
  808764:	00810004 	movi	r2,1024
  808768:	80006e26 	beq	r16,zero,808924 <__sfvwrite_r+0x230>
  80876c:	800f883a 	mov	r7,r16
  808770:	91400717 	ldw	r5,28(r18)
  808774:	1400012e 	bgeu	r2,r16,80877c <__sfvwrite_r+0x88>
  808778:	100f883a 	mov	r7,r2
  80877c:	90c00917 	ldw	r3,36(r18)
  808780:	183ee83a 	callr	r3
  808784:	1007883a 	mov	r3,r2
  808788:	80a1c83a 	sub	r16,r16,r2
  80878c:	88a3883a 	add	r17,r17,r2
  808790:	00806d0e 	bge	zero,r2,808948 <__sfvwrite_r+0x254>
  808794:	b0800217 	ldw	r2,8(r22)
  808798:	10c5c83a 	sub	r2,r2,r3
  80879c:	b0800215 	stw	r2,8(r22)
  8087a0:	103fee1e 	bne	r2,zero,80875c <__sfvwrite_r+0x68>
  8087a4:	0009883a 	mov	r4,zero
  8087a8:	2005883a 	mov	r2,r4
  8087ac:	dfc00a17 	ldw	ra,40(sp)
  8087b0:	df000917 	ldw	fp,36(sp)
  8087b4:	ddc00817 	ldw	r23,32(sp)
  8087b8:	dd800717 	ldw	r22,28(sp)
  8087bc:	dd400617 	ldw	r21,24(sp)
  8087c0:	dd000517 	ldw	r20,20(sp)
  8087c4:	dcc00417 	ldw	r19,16(sp)
  8087c8:	dc800317 	ldw	r18,12(sp)
  8087cc:	dc400217 	ldw	r17,8(sp)
  8087d0:	dc000117 	ldw	r16,4(sp)
  8087d4:	dec00b04 	addi	sp,sp,44
  8087d8:	f800283a 	ret
  8087dc:	0806a640 	call	806a64 <__swsetup_r>
  8087e0:	1000e41e 	bne	r2,zero,808b74 <__sfvwrite_r+0x480>
  8087e4:	91c0030b 	ldhu	r7,12(r18)
  8087e8:	b5400017 	ldw	r21,0(r22)
  8087ec:	3880008c 	andi	r2,r7,2
  8087f0:	103fd81e 	bne	r2,zero,808754 <__sfvwrite_r+0x60>
  8087f4:	3880004c 	andi	r2,r7,1
  8087f8:	1005003a 	cmpeq	r2,r2,zero
  8087fc:	10005726 	beq	r2,zero,80895c <__sfvwrite_r+0x268>
  808800:	0029883a 	mov	r20,zero
  808804:	002f883a 	mov	r23,zero
  808808:	a0004226 	beq	r20,zero,808914 <__sfvwrite_r+0x220>
  80880c:	3880800c 	andi	r2,r7,512
  808810:	94000217 	ldw	r16,8(r18)
  808814:	10008b26 	beq	r2,zero,808a44 <__sfvwrite_r+0x350>
  808818:	800d883a 	mov	r6,r16
  80881c:	a400a536 	bltu	r20,r16,808ab4 <__sfvwrite_r+0x3c0>
  808820:	3881200c 	andi	r2,r7,1152
  808824:	10002726 	beq	r2,zero,8088c4 <__sfvwrite_r+0x1d0>
  808828:	90800517 	ldw	r2,20(r18)
  80882c:	92000417 	ldw	r8,16(r18)
  808830:	91400017 	ldw	r5,0(r18)
  808834:	1087883a 	add	r3,r2,r2
  808838:	1887883a 	add	r3,r3,r2
  80883c:	1808d7fa 	srli	r4,r3,31
  808840:	2a21c83a 	sub	r16,r5,r8
  808844:	80800044 	addi	r2,r16,1
  808848:	20c9883a 	add	r4,r4,r3
  80884c:	2027d07a 	srai	r19,r4,1
  808850:	a085883a 	add	r2,r20,r2
  808854:	980d883a 	mov	r6,r19
  808858:	9880022e 	bgeu	r19,r2,808864 <__sfvwrite_r+0x170>
  80885c:	1027883a 	mov	r19,r2
  808860:	100d883a 	mov	r6,r2
  808864:	3881000c 	andi	r2,r7,1024
  808868:	1000b826 	beq	r2,zero,808b4c <__sfvwrite_r+0x458>
  80886c:	300b883a 	mov	r5,r6
  808870:	e009883a 	mov	r4,fp
  808874:	08024000 	call	802400 <_malloc_r>
  808878:	10003126 	beq	r2,zero,808940 <__sfvwrite_r+0x24c>
  80887c:	91400417 	ldw	r5,16(r18)
  808880:	1009883a 	mov	r4,r2
  808884:	800d883a 	mov	r6,r16
  808888:	1023883a 	mov	r17,r2
  80888c:	0808f4c0 	call	808f4c <memcpy>
  808890:	90c0030b 	ldhu	r3,12(r18)
  808894:	00beffc4 	movi	r2,-1025
  808898:	1886703a 	and	r3,r3,r2
  80889c:	18c02014 	ori	r3,r3,128
  8088a0:	90c0030d 	sth	r3,12(r18)
  8088a4:	9c07c83a 	sub	r3,r19,r16
  8088a8:	8c05883a 	add	r2,r17,r16
  8088ac:	a00d883a 	mov	r6,r20
  8088b0:	a021883a 	mov	r16,r20
  8088b4:	90800015 	stw	r2,0(r18)
  8088b8:	90c00215 	stw	r3,8(r18)
  8088bc:	94400415 	stw	r17,16(r18)
  8088c0:	94c00515 	stw	r19,20(r18)
  8088c4:	91000017 	ldw	r4,0(r18)
  8088c8:	b80b883a 	mov	r5,r23
  8088cc:	a023883a 	mov	r17,r20
  8088d0:	0808fec0 	call	808fec <memmove>
  8088d4:	90c00217 	ldw	r3,8(r18)
  8088d8:	90800017 	ldw	r2,0(r18)
  8088dc:	a027883a 	mov	r19,r20
  8088e0:	1c07c83a 	sub	r3,r3,r16
  8088e4:	1405883a 	add	r2,r2,r16
  8088e8:	90c00215 	stw	r3,8(r18)
  8088ec:	a021883a 	mov	r16,r20
  8088f0:	90800015 	stw	r2,0(r18)
  8088f4:	b0800217 	ldw	r2,8(r22)
  8088f8:	1405c83a 	sub	r2,r2,r16
  8088fc:	b0800215 	stw	r2,8(r22)
  808900:	103fa826 	beq	r2,zero,8087a4 <__sfvwrite_r+0xb0>
  808904:	a469c83a 	sub	r20,r20,r17
  808908:	91c0030b 	ldhu	r7,12(r18)
  80890c:	bcef883a 	add	r23,r23,r19
  808910:	a03fbe1e 	bne	r20,zero,80880c <__sfvwrite_r+0x118>
  808914:	adc00017 	ldw	r23,0(r21)
  808918:	ad000117 	ldw	r20,4(r21)
  80891c:	ad400204 	addi	r21,r21,8
  808920:	003fb906 	br	808808 <__sfvwrite_r+0x114>
  808924:	ac400017 	ldw	r17,0(r21)
  808928:	ac000117 	ldw	r16,4(r21)
  80892c:	ad400204 	addi	r21,r21,8
  808930:	003f8a06 	br	80875c <__sfvwrite_r+0x68>
  808934:	91400417 	ldw	r5,16(r18)
  808938:	e009883a 	mov	r4,fp
  80893c:	08016f00 	call	8016f0 <_free_r>
  808940:	00800304 	movi	r2,12
  808944:	e0800015 	stw	r2,0(fp)
  808948:	9080030b 	ldhu	r2,12(r18)
  80894c:	013fffc4 	movi	r4,-1
  808950:	10801014 	ori	r2,r2,64
  808954:	9080030d 	sth	r2,12(r18)
  808958:	003f9306 	br	8087a8 <__sfvwrite_r+0xb4>
  80895c:	0027883a 	mov	r19,zero
  808960:	002f883a 	mov	r23,zero
  808964:	d8000015 	stw	zero,0(sp)
  808968:	0029883a 	mov	r20,zero
  80896c:	98001e26 	beq	r19,zero,8089e8 <__sfvwrite_r+0x2f4>
  808970:	d8c00017 	ldw	r3,0(sp)
  808974:	1804c03a 	cmpne	r2,r3,zero
  808978:	10005e26 	beq	r2,zero,808af4 <__sfvwrite_r+0x400>
  80897c:	9821883a 	mov	r16,r19
  808980:	a4c0012e 	bgeu	r20,r19,808988 <__sfvwrite_r+0x294>
  808984:	a021883a 	mov	r16,r20
  808988:	91000017 	ldw	r4,0(r18)
  80898c:	90800417 	ldw	r2,16(r18)
  808990:	91800217 	ldw	r6,8(r18)
  808994:	91c00517 	ldw	r7,20(r18)
  808998:	1100022e 	bgeu	r2,r4,8089a4 <__sfvwrite_r+0x2b0>
  80899c:	31e3883a 	add	r17,r6,r7
  8089a0:	8c001616 	blt	r17,r16,8089fc <__sfvwrite_r+0x308>
  8089a4:	81c03816 	blt	r16,r7,808a88 <__sfvwrite_r+0x394>
  8089a8:	90c00917 	ldw	r3,36(r18)
  8089ac:	91400717 	ldw	r5,28(r18)
  8089b0:	e009883a 	mov	r4,fp
  8089b4:	b80d883a 	mov	r6,r23
  8089b8:	183ee83a 	callr	r3
  8089bc:	1023883a 	mov	r17,r2
  8089c0:	00bfe10e 	bge	zero,r2,808948 <__sfvwrite_r+0x254>
  8089c4:	a469c83a 	sub	r20,r20,r17
  8089c8:	a0001826 	beq	r20,zero,808a2c <__sfvwrite_r+0x338>
  8089cc:	b0800217 	ldw	r2,8(r22)
  8089d0:	1445c83a 	sub	r2,r2,r17
  8089d4:	b0800215 	stw	r2,8(r22)
  8089d8:	103f7226 	beq	r2,zero,8087a4 <__sfvwrite_r+0xb0>
  8089dc:	9c67c83a 	sub	r19,r19,r17
  8089e0:	bc6f883a 	add	r23,r23,r17
  8089e4:	983fe21e 	bne	r19,zero,808970 <__sfvwrite_r+0x27c>
  8089e8:	adc00017 	ldw	r23,0(r21)
  8089ec:	acc00117 	ldw	r19,4(r21)
  8089f0:	ad400204 	addi	r21,r21,8
  8089f4:	d8000015 	stw	zero,0(sp)
  8089f8:	003fdc06 	br	80896c <__sfvwrite_r+0x278>
  8089fc:	b80b883a 	mov	r5,r23
  808a00:	880d883a 	mov	r6,r17
  808a04:	0808fec0 	call	808fec <memmove>
  808a08:	90c00017 	ldw	r3,0(r18)
  808a0c:	e009883a 	mov	r4,fp
  808a10:	900b883a 	mov	r5,r18
  808a14:	1c47883a 	add	r3,r3,r17
  808a18:	90c00015 	stw	r3,0(r18)
  808a1c:	0800f300 	call	800f30 <_fflush_r>
  808a20:	103fc91e 	bne	r2,zero,808948 <__sfvwrite_r+0x254>
  808a24:	a469c83a 	sub	r20,r20,r17
  808a28:	a03fe81e 	bne	r20,zero,8089cc <__sfvwrite_r+0x2d8>
  808a2c:	e009883a 	mov	r4,fp
  808a30:	900b883a 	mov	r5,r18
  808a34:	0800f300 	call	800f30 <_fflush_r>
  808a38:	103fc31e 	bne	r2,zero,808948 <__sfvwrite_r+0x254>
  808a3c:	d8000015 	stw	zero,0(sp)
  808a40:	003fe206 	br	8089cc <__sfvwrite_r+0x2d8>
  808a44:	91000017 	ldw	r4,0(r18)
  808a48:	90800417 	ldw	r2,16(r18)
  808a4c:	1100022e 	bgeu	r2,r4,808a58 <__sfvwrite_r+0x364>
  808a50:	8023883a 	mov	r17,r16
  808a54:	85003136 	bltu	r16,r20,808b1c <__sfvwrite_r+0x428>
  808a58:	91c00517 	ldw	r7,20(r18)
  808a5c:	a1c01836 	bltu	r20,r7,808ac0 <__sfvwrite_r+0x3cc>
  808a60:	90c00917 	ldw	r3,36(r18)
  808a64:	91400717 	ldw	r5,28(r18)
  808a68:	e009883a 	mov	r4,fp
  808a6c:	b80d883a 	mov	r6,r23
  808a70:	183ee83a 	callr	r3
  808a74:	1021883a 	mov	r16,r2
  808a78:	00bfb30e 	bge	zero,r2,808948 <__sfvwrite_r+0x254>
  808a7c:	1023883a 	mov	r17,r2
  808a80:	1027883a 	mov	r19,r2
  808a84:	003f9b06 	br	8088f4 <__sfvwrite_r+0x200>
  808a88:	b80b883a 	mov	r5,r23
  808a8c:	800d883a 	mov	r6,r16
  808a90:	0808fec0 	call	808fec <memmove>
  808a94:	90c00217 	ldw	r3,8(r18)
  808a98:	90800017 	ldw	r2,0(r18)
  808a9c:	8023883a 	mov	r17,r16
  808aa0:	1c07c83a 	sub	r3,r3,r16
  808aa4:	1405883a 	add	r2,r2,r16
  808aa8:	90c00215 	stw	r3,8(r18)
  808aac:	90800015 	stw	r2,0(r18)
  808ab0:	003fc406 	br	8089c4 <__sfvwrite_r+0x2d0>
  808ab4:	a00d883a 	mov	r6,r20
  808ab8:	a021883a 	mov	r16,r20
  808abc:	003f8106 	br	8088c4 <__sfvwrite_r+0x1d0>
  808ac0:	b80b883a 	mov	r5,r23
  808ac4:	a00d883a 	mov	r6,r20
  808ac8:	0808fec0 	call	808fec <memmove>
  808acc:	90c00217 	ldw	r3,8(r18)
  808ad0:	90800017 	ldw	r2,0(r18)
  808ad4:	a021883a 	mov	r16,r20
  808ad8:	1d07c83a 	sub	r3,r3,r20
  808adc:	1505883a 	add	r2,r2,r20
  808ae0:	a023883a 	mov	r17,r20
  808ae4:	a027883a 	mov	r19,r20
  808ae8:	90c00215 	stw	r3,8(r18)
  808aec:	90800015 	stw	r2,0(r18)
  808af0:	003f8006 	br	8088f4 <__sfvwrite_r+0x200>
  808af4:	b809883a 	mov	r4,r23
  808af8:	01400284 	movi	r5,10
  808afc:	980d883a 	mov	r6,r19
  808b00:	0808e680 	call	808e68 <memchr>
  808b04:	10001726 	beq	r2,zero,808b64 <__sfvwrite_r+0x470>
  808b08:	15c5c83a 	sub	r2,r2,r23
  808b0c:	15000044 	addi	r20,r2,1
  808b10:	00800044 	movi	r2,1
  808b14:	d8800015 	stw	r2,0(sp)
  808b18:	003f9806 	br	80897c <__sfvwrite_r+0x288>
  808b1c:	b80b883a 	mov	r5,r23
  808b20:	800d883a 	mov	r6,r16
  808b24:	0808fec0 	call	808fec <memmove>
  808b28:	90c00017 	ldw	r3,0(r18)
  808b2c:	e009883a 	mov	r4,fp
  808b30:	900b883a 	mov	r5,r18
  808b34:	1c07883a 	add	r3,r3,r16
  808b38:	90c00015 	stw	r3,0(r18)
  808b3c:	8027883a 	mov	r19,r16
  808b40:	0800f300 	call	800f30 <_fflush_r>
  808b44:	103f6b26 	beq	r2,zero,8088f4 <__sfvwrite_r+0x200>
  808b48:	003f7f06 	br	808948 <__sfvwrite_r+0x254>
  808b4c:	400b883a 	mov	r5,r8
  808b50:	e009883a 	mov	r4,fp
  808b54:	080a3bc0 	call	80a3bc <_realloc_r>
  808b58:	103f7626 	beq	r2,zero,808934 <__sfvwrite_r+0x240>
  808b5c:	1023883a 	mov	r17,r2
  808b60:	003f5006 	br	8088a4 <__sfvwrite_r+0x1b0>
  808b64:	00c00044 	movi	r3,1
  808b68:	9d000044 	addi	r20,r19,1
  808b6c:	d8c00015 	stw	r3,0(sp)
  808b70:	003f8206 	br	80897c <__sfvwrite_r+0x288>
  808b74:	9080030b 	ldhu	r2,12(r18)
  808b78:	00c00244 	movi	r3,9
  808b7c:	013fffc4 	movi	r4,-1
  808b80:	10801014 	ori	r2,r2,64
  808b84:	9080030d 	sth	r2,12(r18)
  808b88:	e0c00015 	stw	r3,0(fp)
  808b8c:	003f0606 	br	8087a8 <__sfvwrite_r+0xb4>

00808b90 <_isatty_r>:
  808b90:	defffd04 	addi	sp,sp,-12
  808b94:	dc000015 	stw	r16,0(sp)
  808b98:	040020b4 	movhi	r16,130
  808b9c:	8422bf04 	addi	r16,r16,-29956
  808ba0:	dc400115 	stw	r17,4(sp)
  808ba4:	80000015 	stw	zero,0(r16)
  808ba8:	2023883a 	mov	r17,r4
  808bac:	2809883a 	mov	r4,r5
  808bb0:	dfc00215 	stw	ra,8(sp)
  808bb4:	08110e80 	call	8110e8 <isatty>
  808bb8:	1007883a 	mov	r3,r2
  808bbc:	00bfffc4 	movi	r2,-1
  808bc0:	18800626 	beq	r3,r2,808bdc <_isatty_r+0x4c>
  808bc4:	1805883a 	mov	r2,r3
  808bc8:	dfc00217 	ldw	ra,8(sp)
  808bcc:	dc400117 	ldw	r17,4(sp)
  808bd0:	dc000017 	ldw	r16,0(sp)
  808bd4:	dec00304 	addi	sp,sp,12
  808bd8:	f800283a 	ret
  808bdc:	80800017 	ldw	r2,0(r16)
  808be0:	103ff826 	beq	r2,zero,808bc4 <_isatty_r+0x34>
  808be4:	88800015 	stw	r2,0(r17)
  808be8:	1805883a 	mov	r2,r3
  808bec:	dfc00217 	ldw	ra,8(sp)
  808bf0:	dc400117 	ldw	r17,4(sp)
  808bf4:	dc000017 	ldw	r16,0(sp)
  808bf8:	dec00304 	addi	sp,sp,12
  808bfc:	f800283a 	ret

00808c00 <iswspace>:
  808c00:	00803fc4 	movi	r2,255
  808c04:	0007883a 	mov	r3,zero
  808c08:	11000636 	bltu	r2,r4,808c24 <iswspace+0x24>
  808c0c:	00802074 	movhi	r2,129
  808c10:	109bbc04 	addi	r2,r2,28400
  808c14:	10c00017 	ldw	r3,0(r2)
  808c18:	1907883a 	add	r3,r3,r4
  808c1c:	18800003 	ldbu	r2,0(r3)
  808c20:	10c0020c 	andi	r3,r2,8
  808c24:	1805883a 	mov	r2,r3
  808c28:	f800283a 	ret

00808c2c <__locale_charset>:
  808c2c:	d0a00617 	ldw	r2,-32744(gp)
  808c30:	f800283a 	ret

00808c34 <_localeconv_r>:
  808c34:	00802074 	movhi	r2,129
  808c38:	10941a04 	addi	r2,r2,20584
  808c3c:	f800283a 	ret

00808c40 <localeconv>:
  808c40:	00802074 	movhi	r2,129
  808c44:	109bb804 	addi	r2,r2,28384
  808c48:	11000017 	ldw	r4,0(r2)
  808c4c:	0808c341 	jmpi	808c34 <_localeconv_r>

00808c50 <_setlocale_r>:
  808c50:	defffc04 	addi	sp,sp,-16
  808c54:	00c02074 	movhi	r3,129
  808c58:	18d34504 	addi	r3,r3,19732
  808c5c:	dc800215 	stw	r18,8(sp)
  808c60:	dc400115 	stw	r17,4(sp)
  808c64:	dc000015 	stw	r16,0(sp)
  808c68:	2023883a 	mov	r17,r4
  808c6c:	2825883a 	mov	r18,r5
  808c70:	dfc00315 	stw	ra,12(sp)
  808c74:	3021883a 	mov	r16,r6
  808c78:	3009883a 	mov	r4,r6
  808c7c:	180b883a 	mov	r5,r3
  808c80:	30000926 	beq	r6,zero,808ca8 <_setlocale_r+0x58>
  808c84:	080abbc0 	call	80abbc <strcmp>
  808c88:	8009883a 	mov	r4,r16
  808c8c:	01402074 	movhi	r5,129
  808c90:	29535604 	addi	r5,r5,19800
  808c94:	10000b1e 	bne	r2,zero,808cc4 <_setlocale_r+0x74>
  808c98:	8c000d15 	stw	r16,52(r17)
  808c9c:	8c800c15 	stw	r18,48(r17)
  808ca0:	00c02074 	movhi	r3,129
  808ca4:	18d34504 	addi	r3,r3,19732
  808ca8:	1805883a 	mov	r2,r3
  808cac:	dfc00317 	ldw	ra,12(sp)
  808cb0:	dc800217 	ldw	r18,8(sp)
  808cb4:	dc400117 	ldw	r17,4(sp)
  808cb8:	dc000017 	ldw	r16,0(sp)
  808cbc:	dec00404 	addi	sp,sp,16
  808cc0:	f800283a 	ret
  808cc4:	080abbc0 	call	80abbc <strcmp>
  808cc8:	0007883a 	mov	r3,zero
  808ccc:	103ff226 	beq	r2,zero,808c98 <_setlocale_r+0x48>
  808cd0:	003ff506 	br	808ca8 <_setlocale_r+0x58>

00808cd4 <setlocale>:
  808cd4:	01802074 	movhi	r6,129
  808cd8:	319bb804 	addi	r6,r6,28384
  808cdc:	2007883a 	mov	r3,r4
  808ce0:	31000017 	ldw	r4,0(r6)
  808ce4:	280d883a 	mov	r6,r5
  808ce8:	180b883a 	mov	r5,r3
  808cec:	0808c501 	jmpi	808c50 <_setlocale_r>

00808cf0 <_lseek_r>:
  808cf0:	defffd04 	addi	sp,sp,-12
  808cf4:	dc000015 	stw	r16,0(sp)
  808cf8:	040020b4 	movhi	r16,130
  808cfc:	8422bf04 	addi	r16,r16,-29956
  808d00:	dc400115 	stw	r17,4(sp)
  808d04:	80000015 	stw	zero,0(r16)
  808d08:	2023883a 	mov	r17,r4
  808d0c:	2809883a 	mov	r4,r5
  808d10:	300b883a 	mov	r5,r6
  808d14:	380d883a 	mov	r6,r7
  808d18:	dfc00215 	stw	ra,8(sp)
  808d1c:	08112f80 	call	8112f8 <lseek>
  808d20:	1007883a 	mov	r3,r2
  808d24:	00bfffc4 	movi	r2,-1
  808d28:	18800626 	beq	r3,r2,808d44 <_lseek_r+0x54>
  808d2c:	1805883a 	mov	r2,r3
  808d30:	dfc00217 	ldw	ra,8(sp)
  808d34:	dc400117 	ldw	r17,4(sp)
  808d38:	dc000017 	ldw	r16,0(sp)
  808d3c:	dec00304 	addi	sp,sp,12
  808d40:	f800283a 	ret
  808d44:	80800017 	ldw	r2,0(r16)
  808d48:	103ff826 	beq	r2,zero,808d2c <_lseek_r+0x3c>
  808d4c:	88800015 	stw	r2,0(r17)
  808d50:	1805883a 	mov	r2,r3
  808d54:	dfc00217 	ldw	ra,8(sp)
  808d58:	dc400117 	ldw	r17,4(sp)
  808d5c:	dc000017 	ldw	r16,0(sp)
  808d60:	dec00304 	addi	sp,sp,12
  808d64:	f800283a 	ret

00808d68 <_mbrtowc_r>:
  808d68:	defffc04 	addi	sp,sp,-16
  808d6c:	dc400215 	stw	r17,8(sp)
  808d70:	dc000115 	stw	r16,4(sp)
  808d74:	dfc00315 	stw	ra,12(sp)
  808d78:	dc000417 	ldw	r16,16(sp)
  808d7c:	2023883a 	mov	r17,r4
  808d80:	30000f26 	beq	r6,zero,808dc0 <_mbrtowc_r+0x58>
  808d84:	dc000015 	stw	r16,0(sp)
  808d88:	0808e280 	call	808e28 <_mbtowc_r>
  808d8c:	1007883a 	mov	r3,r2
  808d90:	00bfffc4 	movi	r2,-1
  808d94:	1809883a 	mov	r4,r3
  808d98:	1880111e 	bne	r3,r2,808de0 <_mbrtowc_r+0x78>
  808d9c:	80000015 	stw	zero,0(r16)
  808da0:	00802284 	movi	r2,138
  808da4:	88800015 	stw	r2,0(r17)
  808da8:	2005883a 	mov	r2,r4
  808dac:	dfc00317 	ldw	ra,12(sp)
  808db0:	dc400217 	ldw	r17,8(sp)
  808db4:	dc000117 	ldw	r16,4(sp)
  808db8:	dec00404 	addi	sp,sp,16
  808dbc:	f800283a 	ret
  808dc0:	000b883a 	mov	r5,zero
  808dc4:	01802074 	movhi	r6,129
  808dc8:	31935604 	addi	r6,r6,19800
  808dcc:	01c00044 	movi	r7,1
  808dd0:	dc000015 	stw	r16,0(sp)
  808dd4:	0808e280 	call	808e28 <_mbtowc_r>
  808dd8:	1007883a 	mov	r3,r2
  808ddc:	003fec06 	br	808d90 <_mbrtowc_r+0x28>
  808de0:	1809883a 	mov	r4,r3
  808de4:	003ff006 	br	808da8 <_mbrtowc_r+0x40>

00808de8 <mbrtowc>:
  808de8:	00802074 	movhi	r2,129
  808dec:	109bb804 	addi	r2,r2,28384
  808df0:	2017883a 	mov	r11,r4
  808df4:	11000017 	ldw	r4,0(r2)
  808df8:	defffe04 	addi	sp,sp,-8
  808dfc:	3013883a 	mov	r9,r6
  808e00:	2805883a 	mov	r2,r5
  808e04:	d9c00015 	stw	r7,0(sp)
  808e08:	580b883a 	mov	r5,r11
  808e0c:	100d883a 	mov	r6,r2
  808e10:	480f883a 	mov	r7,r9
  808e14:	dfc00115 	stw	ra,4(sp)
  808e18:	0808d680 	call	808d68 <_mbrtowc_r>
  808e1c:	dfc00117 	ldw	ra,4(sp)
  808e20:	dec00204 	addi	sp,sp,8
  808e24:	f800283a 	ret

00808e28 <_mbtowc_r>:
  808e28:	deffff04 	addi	sp,sp,-4
  808e2c:	0005883a 	mov	r2,zero
  808e30:	28000326 	beq	r5,zero,808e40 <_mbtowc_r+0x18>
  808e34:	3000041e 	bne	r6,zero,808e48 <_mbtowc_r+0x20>
  808e38:	dec00104 	addi	sp,sp,4
  808e3c:	f800283a 	ret
  808e40:	d80b883a 	mov	r5,sp
  808e44:	303ffc26 	beq	r6,zero,808e38 <_mbtowc_r+0x10>
  808e48:	00bfff84 	movi	r2,-2
  808e4c:	383ffa26 	beq	r7,zero,808e38 <_mbtowc_r+0x10>
  808e50:	30800003 	ldbu	r2,0(r6)
  808e54:	28800015 	stw	r2,0(r5)
  808e58:	30c00003 	ldbu	r3,0(r6)
  808e5c:	1804c03a 	cmpne	r2,r3,zero
  808e60:	dec00104 	addi	sp,sp,4
  808e64:	f800283a 	ret

00808e68 <memchr>:
  808e68:	008000c4 	movi	r2,3
  808e6c:	29403fcc 	andi	r5,r5,255
  808e70:	2007883a 	mov	r3,r4
  808e74:	1180022e 	bgeu	r2,r6,808e80 <memchr+0x18>
  808e78:	2084703a 	and	r2,r4,r2
  808e7c:	10000b26 	beq	r2,zero,808eac <memchr+0x44>
  808e80:	313fffc4 	addi	r4,r6,-1
  808e84:	3000051e 	bne	r6,zero,808e9c <memchr+0x34>
  808e88:	00002c06 	br	808f3c <memchr+0xd4>
  808e8c:	213fffc4 	addi	r4,r4,-1
  808e90:	00bfffc4 	movi	r2,-1
  808e94:	18c00044 	addi	r3,r3,1
  808e98:	20802826 	beq	r4,r2,808f3c <memchr+0xd4>
  808e9c:	18800003 	ldbu	r2,0(r3)
  808ea0:	28bffa1e 	bne	r5,r2,808e8c <memchr+0x24>
  808ea4:	1805883a 	mov	r2,r3
  808ea8:	f800283a 	ret
  808eac:	0011883a 	mov	r8,zero
  808eb0:	0007883a 	mov	r3,zero
  808eb4:	01c00104 	movi	r7,4
  808eb8:	4004923a 	slli	r2,r8,8
  808ebc:	18c00044 	addi	r3,r3,1
  808ec0:	1151883a 	add	r8,r2,r5
  808ec4:	19fffc1e 	bne	r3,r7,808eb8 <memchr+0x50>
  808ec8:	02bfbff4 	movhi	r10,65279
  808ecc:	52bfbfc4 	addi	r10,r10,-257
  808ed0:	02602074 	movhi	r9,32897
  808ed4:	4a602004 	addi	r9,r9,-32640
  808ed8:	02c000c4 	movi	r11,3
  808edc:	20800017 	ldw	r2,0(r4)
  808ee0:	31bfff04 	addi	r6,r6,-4
  808ee4:	200f883a 	mov	r7,r4
  808ee8:	1204f03a 	xor	r2,r2,r8
  808eec:	1287883a 	add	r3,r2,r10
  808ef0:	1a46703a 	and	r3,r3,r9
  808ef4:	0084303a 	nor	r2,zero,r2
  808ef8:	10c4703a 	and	r2,r2,r3
  808efc:	10000b26 	beq	r2,zero,808f2c <memchr+0xc4>
  808f00:	20800003 	ldbu	r2,0(r4)
  808f04:	28800f26 	beq	r5,r2,808f44 <memchr+0xdc>
  808f08:	20800043 	ldbu	r2,1(r4)
  808f0c:	21c00044 	addi	r7,r4,1
  808f10:	28800c26 	beq	r5,r2,808f44 <memchr+0xdc>
  808f14:	20800083 	ldbu	r2,2(r4)
  808f18:	21c00084 	addi	r7,r4,2
  808f1c:	28800926 	beq	r5,r2,808f44 <memchr+0xdc>
  808f20:	208000c3 	ldbu	r2,3(r4)
  808f24:	21c000c4 	addi	r7,r4,3
  808f28:	28800626 	beq	r5,r2,808f44 <memchr+0xdc>
  808f2c:	21000104 	addi	r4,r4,4
  808f30:	59bfea36 	bltu	r11,r6,808edc <memchr+0x74>
  808f34:	2007883a 	mov	r3,r4
  808f38:	003fd106 	br	808e80 <memchr+0x18>
  808f3c:	0005883a 	mov	r2,zero
  808f40:	f800283a 	ret
  808f44:	3805883a 	mov	r2,r7
  808f48:	f800283a 	ret

00808f4c <memcpy>:
  808f4c:	01c003c4 	movi	r7,15
  808f50:	2007883a 	mov	r3,r4
  808f54:	3980032e 	bgeu	r7,r6,808f64 <memcpy+0x18>
  808f58:	2904b03a 	or	r2,r5,r4
  808f5c:	108000cc 	andi	r2,r2,3
  808f60:	10000926 	beq	r2,zero,808f88 <memcpy+0x3c>
  808f64:	30000626 	beq	r6,zero,808f80 <memcpy+0x34>
  808f68:	30cd883a 	add	r6,r6,r3
  808f6c:	28800003 	ldbu	r2,0(r5)
  808f70:	29400044 	addi	r5,r5,1
  808f74:	18800005 	stb	r2,0(r3)
  808f78:	18c00044 	addi	r3,r3,1
  808f7c:	30fffb1e 	bne	r6,r3,808f6c <memcpy+0x20>
  808f80:	2005883a 	mov	r2,r4
  808f84:	f800283a 	ret
  808f88:	3811883a 	mov	r8,r7
  808f8c:	200f883a 	mov	r7,r4
  808f90:	28c00017 	ldw	r3,0(r5)
  808f94:	31bffc04 	addi	r6,r6,-16
  808f98:	38c00015 	stw	r3,0(r7)
  808f9c:	28800117 	ldw	r2,4(r5)
  808fa0:	38800115 	stw	r2,4(r7)
  808fa4:	28c00217 	ldw	r3,8(r5)
  808fa8:	38c00215 	stw	r3,8(r7)
  808fac:	28800317 	ldw	r2,12(r5)
  808fb0:	29400404 	addi	r5,r5,16
  808fb4:	38800315 	stw	r2,12(r7)
  808fb8:	39c00404 	addi	r7,r7,16
  808fbc:	41bff436 	bltu	r8,r6,808f90 <memcpy+0x44>
  808fc0:	008000c4 	movi	r2,3
  808fc4:	1180072e 	bgeu	r2,r6,808fe4 <memcpy+0x98>
  808fc8:	1007883a 	mov	r3,r2
  808fcc:	28800017 	ldw	r2,0(r5)
  808fd0:	31bfff04 	addi	r6,r6,-4
  808fd4:	29400104 	addi	r5,r5,4
  808fd8:	38800015 	stw	r2,0(r7)
  808fdc:	39c00104 	addi	r7,r7,4
  808fe0:	19bffa36 	bltu	r3,r6,808fcc <memcpy+0x80>
  808fe4:	3807883a 	mov	r3,r7
  808fe8:	003fde06 	br	808f64 <memcpy+0x18>

00808fec <memmove>:
  808fec:	2807883a 	mov	r3,r5
  808ff0:	2011883a 	mov	r8,r4
  808ff4:	29000c2e 	bgeu	r5,r4,809028 <memmove+0x3c>
  808ff8:	298f883a 	add	r7,r5,r6
  808ffc:	21c00a2e 	bgeu	r4,r7,809028 <memmove+0x3c>
  809000:	30000726 	beq	r6,zero,809020 <memmove+0x34>
  809004:	2187883a 	add	r3,r4,r6
  809008:	198dc83a 	sub	r6,r3,r6
  80900c:	39ffffc4 	addi	r7,r7,-1
  809010:	38800003 	ldbu	r2,0(r7)
  809014:	18ffffc4 	addi	r3,r3,-1
  809018:	18800005 	stb	r2,0(r3)
  80901c:	19bffb1e 	bne	r3,r6,80900c <memmove+0x20>
  809020:	2005883a 	mov	r2,r4
  809024:	f800283a 	ret
  809028:	01c003c4 	movi	r7,15
  80902c:	39800a36 	bltu	r7,r6,809058 <memmove+0x6c>
  809030:	303ffb26 	beq	r6,zero,809020 <memmove+0x34>
  809034:	400f883a 	mov	r7,r8
  809038:	320d883a 	add	r6,r6,r8
  80903c:	28800003 	ldbu	r2,0(r5)
  809040:	29400044 	addi	r5,r5,1
  809044:	38800005 	stb	r2,0(r7)
  809048:	39c00044 	addi	r7,r7,1
  80904c:	39bffb1e 	bne	r7,r6,80903c <memmove+0x50>
  809050:	2005883a 	mov	r2,r4
  809054:	f800283a 	ret
  809058:	1904b03a 	or	r2,r3,r4
  80905c:	108000cc 	andi	r2,r2,3
  809060:	103ff31e 	bne	r2,zero,809030 <memmove+0x44>
  809064:	3811883a 	mov	r8,r7
  809068:	180b883a 	mov	r5,r3
  80906c:	200f883a 	mov	r7,r4
  809070:	28c00017 	ldw	r3,0(r5)
  809074:	31bffc04 	addi	r6,r6,-16
  809078:	38c00015 	stw	r3,0(r7)
  80907c:	28800117 	ldw	r2,4(r5)
  809080:	38800115 	stw	r2,4(r7)
  809084:	28c00217 	ldw	r3,8(r5)
  809088:	38c00215 	stw	r3,8(r7)
  80908c:	28800317 	ldw	r2,12(r5)
  809090:	29400404 	addi	r5,r5,16
  809094:	38800315 	stw	r2,12(r7)
  809098:	39c00404 	addi	r7,r7,16
  80909c:	41bff436 	bltu	r8,r6,809070 <memmove+0x84>
  8090a0:	008000c4 	movi	r2,3
  8090a4:	1180072e 	bgeu	r2,r6,8090c4 <memmove+0xd8>
  8090a8:	1007883a 	mov	r3,r2
  8090ac:	28800017 	ldw	r2,0(r5)
  8090b0:	31bfff04 	addi	r6,r6,-4
  8090b4:	29400104 	addi	r5,r5,4
  8090b8:	38800015 	stw	r2,0(r7)
  8090bc:	39c00104 	addi	r7,r7,4
  8090c0:	19bffa36 	bltu	r3,r6,8090ac <memmove+0xc0>
  8090c4:	3811883a 	mov	r8,r7
  8090c8:	003fd906 	br	809030 <memmove+0x44>

008090cc <_Bfree>:
  8090cc:	28000826 	beq	r5,zero,8090f0 <_Bfree+0x24>
  8090d0:	28800117 	ldw	r2,4(r5)
  8090d4:	21001317 	ldw	r4,76(r4)
  8090d8:	1085883a 	add	r2,r2,r2
  8090dc:	1085883a 	add	r2,r2,r2
  8090e0:	1105883a 	add	r2,r2,r4
  8090e4:	10c00017 	ldw	r3,0(r2)
  8090e8:	28c00015 	stw	r3,0(r5)
  8090ec:	11400015 	stw	r5,0(r2)
  8090f0:	f800283a 	ret

008090f4 <__hi0bits>:
  8090f4:	20bfffec 	andhi	r2,r4,65535
  8090f8:	10001426 	beq	r2,zero,80914c <__hi0bits+0x58>
  8090fc:	0007883a 	mov	r3,zero
  809100:	20bfc02c 	andhi	r2,r4,65280
  809104:	1000021e 	bne	r2,zero,809110 <__hi0bits+0x1c>
  809108:	2008923a 	slli	r4,r4,8
  80910c:	18c00204 	addi	r3,r3,8
  809110:	20bc002c 	andhi	r2,r4,61440
  809114:	1000021e 	bne	r2,zero,809120 <__hi0bits+0x2c>
  809118:	2008913a 	slli	r4,r4,4
  80911c:	18c00104 	addi	r3,r3,4
  809120:	20b0002c 	andhi	r2,r4,49152
  809124:	1000031e 	bne	r2,zero,809134 <__hi0bits+0x40>
  809128:	2105883a 	add	r2,r4,r4
  80912c:	18c00084 	addi	r3,r3,2
  809130:	1089883a 	add	r4,r2,r2
  809134:	20000316 	blt	r4,zero,809144 <__hi0bits+0x50>
  809138:	2090002c 	andhi	r2,r4,16384
  80913c:	10000626 	beq	r2,zero,809158 <__hi0bits+0x64>
  809140:	18c00044 	addi	r3,r3,1
  809144:	1805883a 	mov	r2,r3
  809148:	f800283a 	ret
  80914c:	2008943a 	slli	r4,r4,16
  809150:	00c00404 	movi	r3,16
  809154:	003fea06 	br	809100 <__hi0bits+0xc>
  809158:	00c00804 	movi	r3,32
  80915c:	1805883a 	mov	r2,r3
  809160:	f800283a 	ret

00809164 <__lo0bits>:
  809164:	20c00017 	ldw	r3,0(r4)
  809168:	188001cc 	andi	r2,r3,7
  80916c:	10000a26 	beq	r2,zero,809198 <__lo0bits+0x34>
  809170:	1880004c 	andi	r2,r3,1
  809174:	1005003a 	cmpeq	r2,r2,zero
  809178:	10002126 	beq	r2,zero,809200 <__lo0bits+0x9c>
  80917c:	1880008c 	andi	r2,r3,2
  809180:	1000251e 	bne	r2,zero,809218 <__lo0bits+0xb4>
  809184:	1804d0ba 	srli	r2,r3,2
  809188:	01400084 	movi	r5,2
  80918c:	20800015 	stw	r2,0(r4)
  809190:	2805883a 	mov	r2,r5
  809194:	f800283a 	ret
  809198:	18bfffcc 	andi	r2,r3,65535
  80919c:	10001526 	beq	r2,zero,8091f4 <__lo0bits+0x90>
  8091a0:	000b883a 	mov	r5,zero
  8091a4:	18803fcc 	andi	r2,r3,255
  8091a8:	1000021e 	bne	r2,zero,8091b4 <__lo0bits+0x50>
  8091ac:	1806d23a 	srli	r3,r3,8
  8091b0:	29400204 	addi	r5,r5,8
  8091b4:	188003cc 	andi	r2,r3,15
  8091b8:	1000021e 	bne	r2,zero,8091c4 <__lo0bits+0x60>
  8091bc:	1806d13a 	srli	r3,r3,4
  8091c0:	29400104 	addi	r5,r5,4
  8091c4:	188000cc 	andi	r2,r3,3
  8091c8:	1000021e 	bne	r2,zero,8091d4 <__lo0bits+0x70>
  8091cc:	1806d0ba 	srli	r3,r3,2
  8091d0:	29400084 	addi	r5,r5,2
  8091d4:	1880004c 	andi	r2,r3,1
  8091d8:	1000031e 	bne	r2,zero,8091e8 <__lo0bits+0x84>
  8091dc:	1806d07a 	srli	r3,r3,1
  8091e0:	18000a26 	beq	r3,zero,80920c <__lo0bits+0xa8>
  8091e4:	29400044 	addi	r5,r5,1
  8091e8:	2805883a 	mov	r2,r5
  8091ec:	20c00015 	stw	r3,0(r4)
  8091f0:	f800283a 	ret
  8091f4:	1806d43a 	srli	r3,r3,16
  8091f8:	01400404 	movi	r5,16
  8091fc:	003fe906 	br	8091a4 <__lo0bits+0x40>
  809200:	000b883a 	mov	r5,zero
  809204:	2805883a 	mov	r2,r5
  809208:	f800283a 	ret
  80920c:	01400804 	movi	r5,32
  809210:	2805883a 	mov	r2,r5
  809214:	f800283a 	ret
  809218:	1804d07a 	srli	r2,r3,1
  80921c:	01400044 	movi	r5,1
  809220:	20800015 	stw	r2,0(r4)
  809224:	003fda06 	br	809190 <__lo0bits+0x2c>

00809228 <__mcmp>:
  809228:	20800417 	ldw	r2,16(r4)
  80922c:	28c00417 	ldw	r3,16(r5)
  809230:	10cfc83a 	sub	r7,r2,r3
  809234:	38000c1e 	bne	r7,zero,809268 <__mcmp+0x40>
  809238:	18c5883a 	add	r2,r3,r3
  80923c:	1085883a 	add	r2,r2,r2
  809240:	10c00504 	addi	r3,r2,20
  809244:	21000504 	addi	r4,r4,20
  809248:	28cb883a 	add	r5,r5,r3
  80924c:	2085883a 	add	r2,r4,r2
  809250:	10bfff04 	addi	r2,r2,-4
  809254:	297fff04 	addi	r5,r5,-4
  809258:	11800017 	ldw	r6,0(r2)
  80925c:	28c00017 	ldw	r3,0(r5)
  809260:	30c0031e 	bne	r6,r3,809270 <__mcmp+0x48>
  809264:	20bffa36 	bltu	r4,r2,809250 <__mcmp+0x28>
  809268:	3805883a 	mov	r2,r7
  80926c:	f800283a 	ret
  809270:	30c00336 	bltu	r6,r3,809280 <__mcmp+0x58>
  809274:	01c00044 	movi	r7,1
  809278:	3805883a 	mov	r2,r7
  80927c:	f800283a 	ret
  809280:	01ffffc4 	movi	r7,-1
  809284:	003ff806 	br	809268 <__mcmp+0x40>

00809288 <__ulp>:
  809288:	295ffc2c 	andhi	r5,r5,32752
  80928c:	013f3034 	movhi	r4,64704
  809290:	290b883a 	add	r5,r5,r4
  809294:	0145c83a 	sub	r2,zero,r5
  809298:	1007d53a 	srai	r3,r2,20
  80929c:	000d883a 	mov	r6,zero
  8092a0:	0140040e 	bge	zero,r5,8092b4 <__ulp+0x2c>
  8092a4:	280f883a 	mov	r7,r5
  8092a8:	3807883a 	mov	r3,r7
  8092ac:	3005883a 	mov	r2,r6
  8092b0:	f800283a 	ret
  8092b4:	008004c4 	movi	r2,19
  8092b8:	193ffb04 	addi	r4,r3,-20
  8092bc:	10c00c0e 	bge	r2,r3,8092f0 <__ulp+0x68>
  8092c0:	008007c4 	movi	r2,31
  8092c4:	1107c83a 	sub	r3,r2,r4
  8092c8:	00800784 	movi	r2,30
  8092cc:	01400044 	movi	r5,1
  8092d0:	11000216 	blt	r2,r4,8092dc <__ulp+0x54>
  8092d4:	00800044 	movi	r2,1
  8092d8:	10ca983a 	sll	r5,r2,r3
  8092dc:	000f883a 	mov	r7,zero
  8092e0:	280d883a 	mov	r6,r5
  8092e4:	3807883a 	mov	r3,r7
  8092e8:	3005883a 	mov	r2,r6
  8092ec:	f800283a 	ret
  8092f0:	00800234 	movhi	r2,8
  8092f4:	10cfd83a 	sra	r7,r2,r3
  8092f8:	000d883a 	mov	r6,zero
  8092fc:	3005883a 	mov	r2,r6
  809300:	3807883a 	mov	r3,r7
  809304:	f800283a 	ret

00809308 <__b2d>:
  809308:	20800417 	ldw	r2,16(r4)
  80930c:	defff904 	addi	sp,sp,-28
  809310:	dd000415 	stw	r20,16(sp)
  809314:	1085883a 	add	r2,r2,r2
  809318:	25000504 	addi	r20,r4,20
  80931c:	1085883a 	add	r2,r2,r2
  809320:	dc000015 	stw	r16,0(sp)
  809324:	a0a1883a 	add	r16,r20,r2
  809328:	dd400515 	stw	r21,20(sp)
  80932c:	857fff17 	ldw	r21,-4(r16)
  809330:	dc400115 	stw	r17,4(sp)
  809334:	dfc00615 	stw	ra,24(sp)
  809338:	a809883a 	mov	r4,r21
  80933c:	2823883a 	mov	r17,r5
  809340:	dcc00315 	stw	r19,12(sp)
  809344:	dc800215 	stw	r18,8(sp)
  809348:	08090f40 	call	8090f4 <__hi0bits>
  80934c:	100b883a 	mov	r5,r2
  809350:	00800804 	movi	r2,32
  809354:	1145c83a 	sub	r2,r2,r5
  809358:	88800015 	stw	r2,0(r17)
  80935c:	00800284 	movi	r2,10
  809360:	80ffff04 	addi	r3,r16,-4
  809364:	11401416 	blt	r2,r5,8093b8 <__b2d+0xb0>
  809368:	008002c4 	movi	r2,11
  80936c:	1149c83a 	sub	r4,r2,r5
  809370:	a0c02736 	bltu	r20,r3,809410 <__b2d+0x108>
  809374:	000d883a 	mov	r6,zero
  809378:	28800544 	addi	r2,r5,21
  80937c:	a906d83a 	srl	r3,r21,r4
  809380:	a884983a 	sll	r2,r21,r2
  809384:	1ccffc34 	orhi	r19,r3,16368
  809388:	11a4b03a 	or	r18,r2,r6
  80938c:	9005883a 	mov	r2,r18
  809390:	9807883a 	mov	r3,r19
  809394:	dfc00617 	ldw	ra,24(sp)
  809398:	dd400517 	ldw	r21,20(sp)
  80939c:	dd000417 	ldw	r20,16(sp)
  8093a0:	dcc00317 	ldw	r19,12(sp)
  8093a4:	dc800217 	ldw	r18,8(sp)
  8093a8:	dc400117 	ldw	r17,4(sp)
  8093ac:	dc000017 	ldw	r16,0(sp)
  8093b0:	dec00704 	addi	sp,sp,28
  8093b4:	f800283a 	ret
  8093b8:	a0c00e36 	bltu	r20,r3,8093f4 <__b2d+0xec>
  8093bc:	293ffd44 	addi	r4,r5,-11
  8093c0:	000d883a 	mov	r6,zero
  8093c4:	20000f26 	beq	r4,zero,809404 <__b2d+0xfc>
  8093c8:	00800804 	movi	r2,32
  8093cc:	110bc83a 	sub	r5,r2,r4
  8093d0:	a0c01236 	bltu	r20,r3,80941c <__b2d+0x114>
  8093d4:	000f883a 	mov	r7,zero
  8093d8:	a904983a 	sll	r2,r21,r4
  8093dc:	3146d83a 	srl	r3,r6,r5
  8093e0:	3108983a 	sll	r4,r6,r4
  8093e4:	108ffc34 	orhi	r2,r2,16368
  8093e8:	18a6b03a 	or	r19,r3,r2
  8093ec:	3924b03a 	or	r18,r7,r4
  8093f0:	003fe606 	br	80938c <__b2d+0x84>
  8093f4:	293ffd44 	addi	r4,r5,-11
  8093f8:	81bffe17 	ldw	r6,-8(r16)
  8093fc:	80fffe04 	addi	r3,r16,-8
  809400:	203ff11e 	bne	r4,zero,8093c8 <__b2d+0xc0>
  809404:	accffc34 	orhi	r19,r21,16368
  809408:	3025883a 	mov	r18,r6
  80940c:	003fdf06 	br	80938c <__b2d+0x84>
  809410:	18bfff17 	ldw	r2,-4(r3)
  809414:	110cd83a 	srl	r6,r2,r4
  809418:	003fd706 	br	809378 <__b2d+0x70>
  80941c:	18bfff17 	ldw	r2,-4(r3)
  809420:	114ed83a 	srl	r7,r2,r5
  809424:	003fec06 	br	8093d8 <__b2d+0xd0>

00809428 <__ratio>:
  809428:	defff904 	addi	sp,sp,-28
  80942c:	dc400215 	stw	r17,8(sp)
  809430:	2823883a 	mov	r17,r5
  809434:	d80b883a 	mov	r5,sp
  809438:	dfc00615 	stw	ra,24(sp)
  80943c:	dd000515 	stw	r20,20(sp)
  809440:	dcc00415 	stw	r19,16(sp)
  809444:	dc800315 	stw	r18,12(sp)
  809448:	2025883a 	mov	r18,r4
  80944c:	08093080 	call	809308 <__b2d>
  809450:	8809883a 	mov	r4,r17
  809454:	d9400104 	addi	r5,sp,4
  809458:	1027883a 	mov	r19,r2
  80945c:	1829883a 	mov	r20,r3
  809460:	08093080 	call	809308 <__b2d>
  809464:	89000417 	ldw	r4,16(r17)
  809468:	91c00417 	ldw	r7,16(r18)
  80946c:	d9800117 	ldw	r6,4(sp)
  809470:	180b883a 	mov	r5,r3
  809474:	390fc83a 	sub	r7,r7,r4
  809478:	1009883a 	mov	r4,r2
  80947c:	d8800017 	ldw	r2,0(sp)
  809480:	380e917a 	slli	r7,r7,5
  809484:	2011883a 	mov	r8,r4
  809488:	1185c83a 	sub	r2,r2,r6
  80948c:	11c5883a 	add	r2,r2,r7
  809490:	1006953a 	slli	r3,r2,20
  809494:	2813883a 	mov	r9,r5
  809498:	00800d0e 	bge	zero,r2,8094d0 <__ratio+0xa8>
  80949c:	1d29883a 	add	r20,r3,r20
  8094a0:	a00b883a 	mov	r5,r20
  8094a4:	480f883a 	mov	r7,r9
  8094a8:	9809883a 	mov	r4,r19
  8094ac:	400d883a 	mov	r6,r8
  8094b0:	080f7e40 	call	80f7e4 <__divdf3>
  8094b4:	dfc00617 	ldw	ra,24(sp)
  8094b8:	dd000517 	ldw	r20,20(sp)
  8094bc:	dcc00417 	ldw	r19,16(sp)
  8094c0:	dc800317 	ldw	r18,12(sp)
  8094c4:	dc400217 	ldw	r17,8(sp)
  8094c8:	dec00704 	addi	sp,sp,28
  8094cc:	f800283a 	ret
  8094d0:	28d3c83a 	sub	r9,r5,r3
  8094d4:	003ff206 	br	8094a0 <__ratio+0x78>

008094d8 <_mprec_log10>:
  8094d8:	defffe04 	addi	sp,sp,-8
  8094dc:	008005c4 	movi	r2,23
  8094e0:	dc000015 	stw	r16,0(sp)
  8094e4:	dfc00115 	stw	ra,4(sp)
  8094e8:	2021883a 	mov	r16,r4
  8094ec:	11000c16 	blt	r2,r4,809520 <_mprec_log10+0x48>
  8094f0:	200490fa 	slli	r2,r4,3
  8094f4:	00c02074 	movhi	r3,129
  8094f8:	18d42604 	addi	r3,r3,20632
  8094fc:	10c5883a 	add	r2,r2,r3
  809500:	12400117 	ldw	r9,4(r2)
  809504:	12000017 	ldw	r8,0(r2)
  809508:	4807883a 	mov	r3,r9
  80950c:	4005883a 	mov	r2,r8
  809510:	dfc00117 	ldw	ra,4(sp)
  809514:	dc000017 	ldw	r16,0(sp)
  809518:	dec00204 	addi	sp,sp,8
  80951c:	f800283a 	ret
  809520:	0011883a 	mov	r8,zero
  809524:	024ffc34 	movhi	r9,16368
  809528:	0005883a 	mov	r2,zero
  80952c:	00d00934 	movhi	r3,16420
  809530:	480b883a 	mov	r5,r9
  809534:	4009883a 	mov	r4,r8
  809538:	180f883a 	mov	r7,r3
  80953c:	100d883a 	mov	r6,r2
  809540:	080f4200 	call	80f420 <__muldf3>
  809544:	843fffc4 	addi	r16,r16,-1
  809548:	1011883a 	mov	r8,r2
  80954c:	1813883a 	mov	r9,r3
  809550:	803ff51e 	bne	r16,zero,809528 <_mprec_log10+0x50>
  809554:	4005883a 	mov	r2,r8
  809558:	4807883a 	mov	r3,r9
  80955c:	dfc00117 	ldw	ra,4(sp)
  809560:	dc000017 	ldw	r16,0(sp)
  809564:	dec00204 	addi	sp,sp,8
  809568:	f800283a 	ret

0080956c <__copybits>:
  80956c:	297fffc4 	addi	r5,r5,-1
  809570:	30800417 	ldw	r2,16(r6)
  809574:	280bd17a 	srai	r5,r5,5
  809578:	31800504 	addi	r6,r6,20
  80957c:	1085883a 	add	r2,r2,r2
  809580:	294b883a 	add	r5,r5,r5
  809584:	294b883a 	add	r5,r5,r5
  809588:	1085883a 	add	r2,r2,r2
  80958c:	290b883a 	add	r5,r5,r4
  809590:	3087883a 	add	r3,r6,r2
  809594:	29400104 	addi	r5,r5,4
  809598:	30c0052e 	bgeu	r6,r3,8095b0 <__copybits+0x44>
  80959c:	30800017 	ldw	r2,0(r6)
  8095a0:	31800104 	addi	r6,r6,4
  8095a4:	20800015 	stw	r2,0(r4)
  8095a8:	21000104 	addi	r4,r4,4
  8095ac:	30fffb36 	bltu	r6,r3,80959c <__copybits+0x30>
  8095b0:	2140032e 	bgeu	r4,r5,8095c0 <__copybits+0x54>
  8095b4:	20000015 	stw	zero,0(r4)
  8095b8:	21000104 	addi	r4,r4,4
  8095bc:	217ffd36 	bltu	r4,r5,8095b4 <__copybits+0x48>
  8095c0:	f800283a 	ret

008095c4 <__any_on>:
  8095c4:	20800417 	ldw	r2,16(r4)
  8095c8:	2807d17a 	srai	r3,r5,5
  8095cc:	21000504 	addi	r4,r4,20
  8095d0:	10c00d0e 	bge	r2,r3,809608 <__any_on+0x44>
  8095d4:	1085883a 	add	r2,r2,r2
  8095d8:	1085883a 	add	r2,r2,r2
  8095dc:	208d883a 	add	r6,r4,r2
  8095e0:	2180182e 	bgeu	r4,r6,809644 <__any_on+0x80>
  8095e4:	30bfff17 	ldw	r2,-4(r6)
  8095e8:	30ffff04 	addi	r3,r6,-4
  8095ec:	1000041e 	bne	r2,zero,809600 <__any_on+0x3c>
  8095f0:	20c0142e 	bgeu	r4,r3,809644 <__any_on+0x80>
  8095f4:	18ffff04 	addi	r3,r3,-4
  8095f8:	18800017 	ldw	r2,0(r3)
  8095fc:	103ffc26 	beq	r2,zero,8095f0 <__any_on+0x2c>
  809600:	00800044 	movi	r2,1
  809604:	f800283a 	ret
  809608:	18800a0e 	bge	r3,r2,809634 <__any_on+0x70>
  80960c:	294007cc 	andi	r5,r5,31
  809610:	28000826 	beq	r5,zero,809634 <__any_on+0x70>
  809614:	18c5883a 	add	r2,r3,r3
  809618:	1085883a 	add	r2,r2,r2
  80961c:	208d883a 	add	r6,r4,r2
  809620:	30c00017 	ldw	r3,0(r6)
  809624:	1944d83a 	srl	r2,r3,r5
  809628:	1144983a 	sll	r2,r2,r5
  80962c:	18bff41e 	bne	r3,r2,809600 <__any_on+0x3c>
  809630:	003feb06 	br	8095e0 <__any_on+0x1c>
  809634:	18c5883a 	add	r2,r3,r3
  809638:	1085883a 	add	r2,r2,r2
  80963c:	208d883a 	add	r6,r4,r2
  809640:	003fe706 	br	8095e0 <__any_on+0x1c>
  809644:	0005883a 	mov	r2,zero
  809648:	f800283a 	ret

0080964c <_Balloc>:
  80964c:	20c01317 	ldw	r3,76(r4)
  809650:	defffb04 	addi	sp,sp,-20
  809654:	dcc00315 	stw	r19,12(sp)
  809658:	dc800215 	stw	r18,8(sp)
  80965c:	dfc00415 	stw	ra,16(sp)
  809660:	2825883a 	mov	r18,r5
  809664:	dc400115 	stw	r17,4(sp)
  809668:	dc000015 	stw	r16,0(sp)
  80966c:	2027883a 	mov	r19,r4
  809670:	01800404 	movi	r6,16
  809674:	01400104 	movi	r5,4
  809678:	18001726 	beq	r3,zero,8096d8 <_Balloc+0x8c>
  80967c:	01400044 	movi	r5,1
  809680:	9485883a 	add	r2,r18,r18
  809684:	2ca2983a 	sll	r17,r5,r18
  809688:	1085883a 	add	r2,r2,r2
  80968c:	10c7883a 	add	r3,r2,r3
  809690:	1c000017 	ldw	r16,0(r3)
  809694:	8c4d883a 	add	r6,r17,r17
  809698:	318d883a 	add	r6,r6,r6
  80969c:	9809883a 	mov	r4,r19
  8096a0:	31800504 	addi	r6,r6,20
  8096a4:	80001226 	beq	r16,zero,8096f0 <_Balloc+0xa4>
  8096a8:	80800017 	ldw	r2,0(r16)
  8096ac:	18800015 	stw	r2,0(r3)
  8096b0:	80000415 	stw	zero,16(r16)
  8096b4:	80000315 	stw	zero,12(r16)
  8096b8:	8005883a 	mov	r2,r16
  8096bc:	dfc00417 	ldw	ra,16(sp)
  8096c0:	dcc00317 	ldw	r19,12(sp)
  8096c4:	dc800217 	ldw	r18,8(sp)
  8096c8:	dc400117 	ldw	r17,4(sp)
  8096cc:	dc000017 	ldw	r16,0(sp)
  8096d0:	dec00504 	addi	sp,sp,20
  8096d4:	f800283a 	ret
  8096d8:	080d28c0 	call	80d28c <_calloc_r>
  8096dc:	1007883a 	mov	r3,r2
  8096e0:	0021883a 	mov	r16,zero
  8096e4:	98801315 	stw	r2,76(r19)
  8096e8:	103fe41e 	bne	r2,zero,80967c <_Balloc+0x30>
  8096ec:	003ff206 	br	8096b8 <_Balloc+0x6c>
  8096f0:	080d28c0 	call	80d28c <_calloc_r>
  8096f4:	103ff026 	beq	r2,zero,8096b8 <_Balloc+0x6c>
  8096f8:	1021883a 	mov	r16,r2
  8096fc:	14800115 	stw	r18,4(r2)
  809700:	14400215 	stw	r17,8(r2)
  809704:	003fea06 	br	8096b0 <_Balloc+0x64>

00809708 <__d2b>:
  809708:	defff504 	addi	sp,sp,-44
  80970c:	dcc00515 	stw	r19,20(sp)
  809710:	04c00044 	movi	r19,1
  809714:	dc000215 	stw	r16,8(sp)
  809718:	2821883a 	mov	r16,r5
  80971c:	980b883a 	mov	r5,r19
  809720:	ddc00915 	stw	r23,36(sp)
  809724:	dd800815 	stw	r22,32(sp)
  809728:	dd400715 	stw	r21,28(sp)
  80972c:	dd000615 	stw	r20,24(sp)
  809730:	dc800415 	stw	r18,16(sp)
  809734:	dc400315 	stw	r17,12(sp)
  809738:	dfc00a15 	stw	ra,40(sp)
  80973c:	3023883a 	mov	r17,r6
  809740:	382d883a 	mov	r22,r7
  809744:	ddc00b17 	ldw	r23,44(sp)
  809748:	080964c0 	call	80964c <_Balloc>
  80974c:	1025883a 	mov	r18,r2
  809750:	00a00034 	movhi	r2,32768
  809754:	10bfffc4 	addi	r2,r2,-1
  809758:	8888703a 	and	r4,r17,r2
  80975c:	202ad53a 	srli	r21,r4,20
  809760:	00800434 	movhi	r2,16
  809764:	10bfffc4 	addi	r2,r2,-1
  809768:	8886703a 	and	r3,r17,r2
  80976c:	a829003a 	cmpeq	r20,r21,zero
  809770:	800b883a 	mov	r5,r16
  809774:	d8c00115 	stw	r3,4(sp)
  809778:	94000504 	addi	r16,r18,20
  80977c:	a000021e 	bne	r20,zero,809788 <__d2b+0x80>
  809780:	18c00434 	orhi	r3,r3,16
  809784:	d8c00115 	stw	r3,4(sp)
  809788:	28002726 	beq	r5,zero,809828 <__d2b+0x120>
  80978c:	d809883a 	mov	r4,sp
  809790:	d9400015 	stw	r5,0(sp)
  809794:	08091640 	call	809164 <__lo0bits>
  809798:	100d883a 	mov	r6,r2
  80979c:	10003526 	beq	r2,zero,809874 <__d2b+0x16c>
  8097a0:	d8c00117 	ldw	r3,4(sp)
  8097a4:	00800804 	movi	r2,32
  8097a8:	1185c83a 	sub	r2,r2,r6
  8097ac:	d9000017 	ldw	r4,0(sp)
  8097b0:	1886983a 	sll	r3,r3,r2
  8097b4:	1906b03a 	or	r3,r3,r4
  8097b8:	90c00515 	stw	r3,20(r18)
  8097bc:	d8c00117 	ldw	r3,4(sp)
  8097c0:	1986d83a 	srl	r3,r3,r6
  8097c4:	d8c00115 	stw	r3,4(sp)
  8097c8:	180b003a 	cmpeq	r5,r3,zero
  8097cc:	00800084 	movi	r2,2
  8097d0:	114bc83a 	sub	r5,r2,r5
  8097d4:	80c00115 	stw	r3,4(r16)
  8097d8:	91400415 	stw	r5,16(r18)
  8097dc:	a0001a1e 	bne	r20,zero,809848 <__d2b+0x140>
  8097e0:	3545883a 	add	r2,r6,r21
  8097e4:	10bef344 	addi	r2,r2,-1075
  8097e8:	00c00d44 	movi	r3,53
  8097ec:	b0800015 	stw	r2,0(r22)
  8097f0:	1987c83a 	sub	r3,r3,r6
  8097f4:	b8c00015 	stw	r3,0(r23)
  8097f8:	9005883a 	mov	r2,r18
  8097fc:	dfc00a17 	ldw	ra,40(sp)
  809800:	ddc00917 	ldw	r23,36(sp)
  809804:	dd800817 	ldw	r22,32(sp)
  809808:	dd400717 	ldw	r21,28(sp)
  80980c:	dd000617 	ldw	r20,24(sp)
  809810:	dcc00517 	ldw	r19,20(sp)
  809814:	dc800417 	ldw	r18,16(sp)
  809818:	dc400317 	ldw	r17,12(sp)
  80981c:	dc000217 	ldw	r16,8(sp)
  809820:	dec00b04 	addi	sp,sp,44
  809824:	f800283a 	ret
  809828:	d9000104 	addi	r4,sp,4
  80982c:	08091640 	call	809164 <__lo0bits>
  809830:	11800804 	addi	r6,r2,32
  809834:	d8800117 	ldw	r2,4(sp)
  809838:	94c00415 	stw	r19,16(r18)
  80983c:	980b883a 	mov	r5,r19
  809840:	90800515 	stw	r2,20(r18)
  809844:	a03fe626 	beq	r20,zero,8097e0 <__d2b+0xd8>
  809848:	2945883a 	add	r2,r5,r5
  80984c:	1085883a 	add	r2,r2,r2
  809850:	1405883a 	add	r2,r2,r16
  809854:	113fff17 	ldw	r4,-4(r2)
  809858:	30fef384 	addi	r3,r6,-1074
  80985c:	2820917a 	slli	r16,r5,5
  809860:	b0c00015 	stw	r3,0(r22)
  809864:	08090f40 	call	8090f4 <__hi0bits>
  809868:	80a1c83a 	sub	r16,r16,r2
  80986c:	bc000015 	stw	r16,0(r23)
  809870:	003fe106 	br	8097f8 <__d2b+0xf0>
  809874:	d8800017 	ldw	r2,0(sp)
  809878:	90800515 	stw	r2,20(r18)
  80987c:	d8c00117 	ldw	r3,4(sp)
  809880:	003fd106 	br	8097c8 <__d2b+0xc0>

00809884 <__mdiff>:
  809884:	defffb04 	addi	sp,sp,-20
  809888:	dc000015 	stw	r16,0(sp)
  80988c:	2821883a 	mov	r16,r5
  809890:	dc800215 	stw	r18,8(sp)
  809894:	300b883a 	mov	r5,r6
  809898:	2025883a 	mov	r18,r4
  80989c:	8009883a 	mov	r4,r16
  8098a0:	dc400115 	stw	r17,4(sp)
  8098a4:	dfc00415 	stw	ra,16(sp)
  8098a8:	dcc00315 	stw	r19,12(sp)
  8098ac:	3023883a 	mov	r17,r6
  8098b0:	08092280 	call	809228 <__mcmp>
  8098b4:	10004226 	beq	r2,zero,8099c0 <__mdiff+0x13c>
  8098b8:	10005016 	blt	r2,zero,8099fc <__mdiff+0x178>
  8098bc:	0027883a 	mov	r19,zero
  8098c0:	81400117 	ldw	r5,4(r16)
  8098c4:	9009883a 	mov	r4,r18
  8098c8:	080964c0 	call	80964c <_Balloc>
  8098cc:	1019883a 	mov	r12,r2
  8098d0:	82800417 	ldw	r10,16(r16)
  8098d4:	88800417 	ldw	r2,16(r17)
  8098d8:	81800504 	addi	r6,r16,20
  8098dc:	5287883a 	add	r3,r10,r10
  8098e0:	1085883a 	add	r2,r2,r2
  8098e4:	18c7883a 	add	r3,r3,r3
  8098e8:	1085883a 	add	r2,r2,r2
  8098ec:	8a000504 	addi	r8,r17,20
  8098f0:	64c00315 	stw	r19,12(r12)
  8098f4:	30db883a 	add	r13,r6,r3
  8098f8:	4097883a 	add	r11,r8,r2
  8098fc:	61c00504 	addi	r7,r12,20
  809900:	0013883a 	mov	r9,zero
  809904:	31000017 	ldw	r4,0(r6)
  809908:	41400017 	ldw	r5,0(r8)
  80990c:	42000104 	addi	r8,r8,4
  809910:	20bfffcc 	andi	r2,r4,65535
  809914:	28ffffcc 	andi	r3,r5,65535
  809918:	10c5c83a 	sub	r2,r2,r3
  80991c:	1245883a 	add	r2,r2,r9
  809920:	2008d43a 	srli	r4,r4,16
  809924:	280ad43a 	srli	r5,r5,16
  809928:	1007d43a 	srai	r3,r2,16
  80992c:	3880000d 	sth	r2,0(r7)
  809930:	2149c83a 	sub	r4,r4,r5
  809934:	20c9883a 	add	r4,r4,r3
  809938:	3900008d 	sth	r4,2(r7)
  80993c:	31800104 	addi	r6,r6,4
  809940:	39c00104 	addi	r7,r7,4
  809944:	2013d43a 	srai	r9,r4,16
  809948:	42ffee36 	bltu	r8,r11,809904 <__mdiff+0x80>
  80994c:	33400c2e 	bgeu	r6,r13,809980 <__mdiff+0xfc>
  809950:	30800017 	ldw	r2,0(r6)
  809954:	31800104 	addi	r6,r6,4
  809958:	10ffffcc 	andi	r3,r2,65535
  80995c:	1a47883a 	add	r3,r3,r9
  809960:	1004d43a 	srli	r2,r2,16
  809964:	1809d43a 	srai	r4,r3,16
  809968:	38c0000d 	sth	r3,0(r7)
  80996c:	1105883a 	add	r2,r2,r4
  809970:	3880008d 	sth	r2,2(r7)
  809974:	1013d43a 	srai	r9,r2,16
  809978:	39c00104 	addi	r7,r7,4
  80997c:	337ff436 	bltu	r6,r13,809950 <__mdiff+0xcc>
  809980:	38bfff17 	ldw	r2,-4(r7)
  809984:	38ffff04 	addi	r3,r7,-4
  809988:	1000041e 	bne	r2,zero,80999c <__mdiff+0x118>
  80998c:	18ffff04 	addi	r3,r3,-4
  809990:	18800017 	ldw	r2,0(r3)
  809994:	52bfffc4 	addi	r10,r10,-1
  809998:	103ffc26 	beq	r2,zero,80998c <__mdiff+0x108>
  80999c:	6005883a 	mov	r2,r12
  8099a0:	62800415 	stw	r10,16(r12)
  8099a4:	dfc00417 	ldw	ra,16(sp)
  8099a8:	dcc00317 	ldw	r19,12(sp)
  8099ac:	dc800217 	ldw	r18,8(sp)
  8099b0:	dc400117 	ldw	r17,4(sp)
  8099b4:	dc000017 	ldw	r16,0(sp)
  8099b8:	dec00504 	addi	sp,sp,20
  8099bc:	f800283a 	ret
  8099c0:	9009883a 	mov	r4,r18
  8099c4:	000b883a 	mov	r5,zero
  8099c8:	080964c0 	call	80964c <_Balloc>
  8099cc:	1019883a 	mov	r12,r2
  8099d0:	00800044 	movi	r2,1
  8099d4:	60800415 	stw	r2,16(r12)
  8099d8:	6005883a 	mov	r2,r12
  8099dc:	60000515 	stw	zero,20(r12)
  8099e0:	dfc00417 	ldw	ra,16(sp)
  8099e4:	dcc00317 	ldw	r19,12(sp)
  8099e8:	dc800217 	ldw	r18,8(sp)
  8099ec:	dc400117 	ldw	r17,4(sp)
  8099f0:	dc000017 	ldw	r16,0(sp)
  8099f4:	dec00504 	addi	sp,sp,20
  8099f8:	f800283a 	ret
  8099fc:	880d883a 	mov	r6,r17
  809a00:	04c00044 	movi	r19,1
  809a04:	8023883a 	mov	r17,r16
  809a08:	3021883a 	mov	r16,r6
  809a0c:	003fac06 	br	8098c0 <__mdiff+0x3c>

00809a10 <__lshift>:
  809a10:	defff904 	addi	sp,sp,-28
  809a14:	28800417 	ldw	r2,16(r5)
  809a18:	dc000015 	stw	r16,0(sp)
  809a1c:	3021d17a 	srai	r16,r6,5
  809a20:	28c00217 	ldw	r3,8(r5)
  809a24:	10800044 	addi	r2,r2,1
  809a28:	dc400115 	stw	r17,4(sp)
  809a2c:	80a3883a 	add	r17,r16,r2
  809a30:	dd400515 	stw	r21,20(sp)
  809a34:	dd000415 	stw	r20,16(sp)
  809a38:	dc800215 	stw	r18,8(sp)
  809a3c:	dfc00615 	stw	ra,24(sp)
  809a40:	2825883a 	mov	r18,r5
  809a44:	dcc00315 	stw	r19,12(sp)
  809a48:	3029883a 	mov	r20,r6
  809a4c:	202b883a 	mov	r21,r4
  809a50:	29400117 	ldw	r5,4(r5)
  809a54:	1c40030e 	bge	r3,r17,809a64 <__lshift+0x54>
  809a58:	18c7883a 	add	r3,r3,r3
  809a5c:	29400044 	addi	r5,r5,1
  809a60:	1c7ffd16 	blt	r3,r17,809a58 <__lshift+0x48>
  809a64:	a809883a 	mov	r4,r21
  809a68:	080964c0 	call	80964c <_Balloc>
  809a6c:	1027883a 	mov	r19,r2
  809a70:	11400504 	addi	r5,r2,20
  809a74:	0400090e 	bge	zero,r16,809a9c <__lshift+0x8c>
  809a78:	2805883a 	mov	r2,r5
  809a7c:	0007883a 	mov	r3,zero
  809a80:	18c00044 	addi	r3,r3,1
  809a84:	10000015 	stw	zero,0(r2)
  809a88:	10800104 	addi	r2,r2,4
  809a8c:	80fffc1e 	bne	r16,r3,809a80 <__lshift+0x70>
  809a90:	8405883a 	add	r2,r16,r16
  809a94:	1085883a 	add	r2,r2,r2
  809a98:	288b883a 	add	r5,r5,r2
  809a9c:	90800417 	ldw	r2,16(r18)
  809aa0:	91000504 	addi	r4,r18,20
  809aa4:	a18007cc 	andi	r6,r20,31
  809aa8:	1085883a 	add	r2,r2,r2
  809aac:	1085883a 	add	r2,r2,r2
  809ab0:	208f883a 	add	r7,r4,r2
  809ab4:	30001e26 	beq	r6,zero,809b30 <__lshift+0x120>
  809ab8:	00800804 	movi	r2,32
  809abc:	1191c83a 	sub	r8,r2,r6
  809ac0:	0007883a 	mov	r3,zero
  809ac4:	20800017 	ldw	r2,0(r4)
  809ac8:	1184983a 	sll	r2,r2,r6
  809acc:	1884b03a 	or	r2,r3,r2
  809ad0:	28800015 	stw	r2,0(r5)
  809ad4:	20c00017 	ldw	r3,0(r4)
  809ad8:	21000104 	addi	r4,r4,4
  809adc:	29400104 	addi	r5,r5,4
  809ae0:	1a06d83a 	srl	r3,r3,r8
  809ae4:	21fff736 	bltu	r4,r7,809ac4 <__lshift+0xb4>
  809ae8:	28c00015 	stw	r3,0(r5)
  809aec:	18000126 	beq	r3,zero,809af4 <__lshift+0xe4>
  809af0:	8c400044 	addi	r17,r17,1
  809af4:	88bfffc4 	addi	r2,r17,-1
  809af8:	98800415 	stw	r2,16(r19)
  809afc:	a809883a 	mov	r4,r21
  809b00:	900b883a 	mov	r5,r18
  809b04:	08090cc0 	call	8090cc <_Bfree>
  809b08:	9805883a 	mov	r2,r19
  809b0c:	dfc00617 	ldw	ra,24(sp)
  809b10:	dd400517 	ldw	r21,20(sp)
  809b14:	dd000417 	ldw	r20,16(sp)
  809b18:	dcc00317 	ldw	r19,12(sp)
  809b1c:	dc800217 	ldw	r18,8(sp)
  809b20:	dc400117 	ldw	r17,4(sp)
  809b24:	dc000017 	ldw	r16,0(sp)
  809b28:	dec00704 	addi	sp,sp,28
  809b2c:	f800283a 	ret
  809b30:	20800017 	ldw	r2,0(r4)
  809b34:	21000104 	addi	r4,r4,4
  809b38:	28800015 	stw	r2,0(r5)
  809b3c:	29400104 	addi	r5,r5,4
  809b40:	21ffec2e 	bgeu	r4,r7,809af4 <__lshift+0xe4>
  809b44:	20800017 	ldw	r2,0(r4)
  809b48:	21000104 	addi	r4,r4,4
  809b4c:	28800015 	stw	r2,0(r5)
  809b50:	29400104 	addi	r5,r5,4
  809b54:	21fff636 	bltu	r4,r7,809b30 <__lshift+0x120>
  809b58:	003fe606 	br	809af4 <__lshift+0xe4>

00809b5c <__multiply>:
  809b5c:	defff004 	addi	sp,sp,-64
  809b60:	dc800815 	stw	r18,32(sp)
  809b64:	dc400715 	stw	r17,28(sp)
  809b68:	2c800417 	ldw	r18,16(r5)
  809b6c:	34400417 	ldw	r17,16(r6)
  809b70:	dcc00915 	stw	r19,36(sp)
  809b74:	dc000615 	stw	r16,24(sp)
  809b78:	dfc00f15 	stw	ra,60(sp)
  809b7c:	df000e15 	stw	fp,56(sp)
  809b80:	ddc00d15 	stw	r23,52(sp)
  809b84:	dd800c15 	stw	r22,48(sp)
  809b88:	dd400b15 	stw	r21,44(sp)
  809b8c:	dd000a15 	stw	r20,40(sp)
  809b90:	2821883a 	mov	r16,r5
  809b94:	3027883a 	mov	r19,r6
  809b98:	9440040e 	bge	r18,r17,809bac <__multiply+0x50>
  809b9c:	8825883a 	mov	r18,r17
  809ba0:	2c400417 	ldw	r17,16(r5)
  809ba4:	2827883a 	mov	r19,r5
  809ba8:	3021883a 	mov	r16,r6
  809bac:	80800217 	ldw	r2,8(r16)
  809bb0:	9447883a 	add	r3,r18,r17
  809bb4:	d8c00415 	stw	r3,16(sp)
  809bb8:	81400117 	ldw	r5,4(r16)
  809bbc:	10c0010e 	bge	r2,r3,809bc4 <__multiply+0x68>
  809bc0:	29400044 	addi	r5,r5,1
  809bc4:	080964c0 	call	80964c <_Balloc>
  809bc8:	d8800515 	stw	r2,20(sp)
  809bcc:	d9000417 	ldw	r4,16(sp)
  809bd0:	d8c00517 	ldw	r3,20(sp)
  809bd4:	2105883a 	add	r2,r4,r4
  809bd8:	1085883a 	add	r2,r2,r2
  809bdc:	19000504 	addi	r4,r3,20
  809be0:	2085883a 	add	r2,r4,r2
  809be4:	d8800315 	stw	r2,12(sp)
  809be8:	2080052e 	bgeu	r4,r2,809c00 <__multiply+0xa4>
  809bec:	2005883a 	mov	r2,r4
  809bf0:	d8c00317 	ldw	r3,12(sp)
  809bf4:	10000015 	stw	zero,0(r2)
  809bf8:	10800104 	addi	r2,r2,4
  809bfc:	10fffc36 	bltu	r2,r3,809bf0 <__multiply+0x94>
  809c00:	8c45883a 	add	r2,r17,r17
  809c04:	9487883a 	add	r3,r18,r18
  809c08:	9dc00504 	addi	r23,r19,20
  809c0c:	1085883a 	add	r2,r2,r2
  809c10:	84000504 	addi	r16,r16,20
  809c14:	18c7883a 	add	r3,r3,r3
  809c18:	b885883a 	add	r2,r23,r2
  809c1c:	dc000015 	stw	r16,0(sp)
  809c20:	d8800215 	stw	r2,8(sp)
  809c24:	80f9883a 	add	fp,r16,r3
  809c28:	b880432e 	bgeu	r23,r2,809d38 <__multiply+0x1dc>
  809c2c:	d9000115 	stw	r4,4(sp)
  809c30:	b9000017 	ldw	r4,0(r23)
  809c34:	253fffcc 	andi	r20,r4,65535
  809c38:	a0001a26 	beq	r20,zero,809ca4 <__multiply+0x148>
  809c3c:	dcc00017 	ldw	r19,0(sp)
  809c40:	dc800117 	ldw	r18,4(sp)
  809c44:	002b883a 	mov	r21,zero
  809c48:	9c400017 	ldw	r17,0(r19)
  809c4c:	94000017 	ldw	r16,0(r18)
  809c50:	a009883a 	mov	r4,r20
  809c54:	897fffcc 	andi	r5,r17,65535
  809c58:	08102900 	call	810290 <__mulsi3>
  809c5c:	880ad43a 	srli	r5,r17,16
  809c60:	80ffffcc 	andi	r3,r16,65535
  809c64:	a8c7883a 	add	r3,r21,r3
  809c68:	a009883a 	mov	r4,r20
  809c6c:	10e3883a 	add	r17,r2,r3
  809c70:	8020d43a 	srli	r16,r16,16
  809c74:	08102900 	call	810290 <__mulsi3>
  809c78:	8806d43a 	srli	r3,r17,16
  809c7c:	1405883a 	add	r2,r2,r16
  809c80:	9cc00104 	addi	r19,r19,4
  809c84:	1887883a 	add	r3,r3,r2
  809c88:	90c0008d 	sth	r3,2(r18)
  809c8c:	9440000d 	sth	r17,0(r18)
  809c90:	182ad43a 	srli	r21,r3,16
  809c94:	94800104 	addi	r18,r18,4
  809c98:	9f3feb36 	bltu	r19,fp,809c48 <__multiply+0xec>
  809c9c:	95400015 	stw	r21,0(r18)
  809ca0:	b9000017 	ldw	r4,0(r23)
  809ca4:	202ad43a 	srli	r21,r4,16
  809ca8:	a8001c26 	beq	r21,zero,809d1c <__multiply+0x1c0>
  809cac:	d9000117 	ldw	r4,4(sp)
  809cb0:	dd000017 	ldw	r20,0(sp)
  809cb4:	002d883a 	mov	r22,zero
  809cb8:	24c00017 	ldw	r19,0(r4)
  809cbc:	2025883a 	mov	r18,r4
  809cc0:	9823883a 	mov	r17,r19
  809cc4:	a4000017 	ldw	r16,0(r20)
  809cc8:	a809883a 	mov	r4,r21
  809ccc:	a5000104 	addi	r20,r20,4
  809cd0:	817fffcc 	andi	r5,r16,65535
  809cd4:	08102900 	call	810290 <__mulsi3>
  809cd8:	8806d43a 	srli	r3,r17,16
  809cdc:	800ad43a 	srli	r5,r16,16
  809ce0:	94c0000d 	sth	r19,0(r18)
  809ce4:	b0c7883a 	add	r3,r22,r3
  809ce8:	10e1883a 	add	r16,r2,r3
  809cec:	9400008d 	sth	r16,2(r18)
  809cf0:	a809883a 	mov	r4,r21
  809cf4:	94800104 	addi	r18,r18,4
  809cf8:	08102900 	call	810290 <__mulsi3>
  809cfc:	94400017 	ldw	r17,0(r18)
  809d00:	8020d43a 	srli	r16,r16,16
  809d04:	88ffffcc 	andi	r3,r17,65535
  809d08:	10c5883a 	add	r2,r2,r3
  809d0c:	80a7883a 	add	r19,r16,r2
  809d10:	982cd43a 	srli	r22,r19,16
  809d14:	a73feb36 	bltu	r20,fp,809cc4 <__multiply+0x168>
  809d18:	94c00015 	stw	r19,0(r18)
  809d1c:	d8800217 	ldw	r2,8(sp)
  809d20:	bdc00104 	addi	r23,r23,4
  809d24:	b880042e 	bgeu	r23,r2,809d38 <__multiply+0x1dc>
  809d28:	d8c00117 	ldw	r3,4(sp)
  809d2c:	18c00104 	addi	r3,r3,4
  809d30:	d8c00115 	stw	r3,4(sp)
  809d34:	003fbe06 	br	809c30 <__multiply+0xd4>
  809d38:	d9000417 	ldw	r4,16(sp)
  809d3c:	01000c0e 	bge	zero,r4,809d70 <__multiply+0x214>
  809d40:	d8c00317 	ldw	r3,12(sp)
  809d44:	18bfff17 	ldw	r2,-4(r3)
  809d48:	18ffff04 	addi	r3,r3,-4
  809d4c:	10000326 	beq	r2,zero,809d5c <__multiply+0x200>
  809d50:	00000706 	br	809d70 <__multiply+0x214>
  809d54:	18800017 	ldw	r2,0(r3)
  809d58:	1000051e 	bne	r2,zero,809d70 <__multiply+0x214>
  809d5c:	d9000417 	ldw	r4,16(sp)
  809d60:	18ffff04 	addi	r3,r3,-4
  809d64:	213fffc4 	addi	r4,r4,-1
  809d68:	d9000415 	stw	r4,16(sp)
  809d6c:	203ff91e 	bne	r4,zero,809d54 <__multiply+0x1f8>
  809d70:	d8800417 	ldw	r2,16(sp)
  809d74:	d8c00517 	ldw	r3,20(sp)
  809d78:	18800415 	stw	r2,16(r3)
  809d7c:	1805883a 	mov	r2,r3
  809d80:	dfc00f17 	ldw	ra,60(sp)
  809d84:	df000e17 	ldw	fp,56(sp)
  809d88:	ddc00d17 	ldw	r23,52(sp)
  809d8c:	dd800c17 	ldw	r22,48(sp)
  809d90:	dd400b17 	ldw	r21,44(sp)
  809d94:	dd000a17 	ldw	r20,40(sp)
  809d98:	dcc00917 	ldw	r19,36(sp)
  809d9c:	dc800817 	ldw	r18,32(sp)
  809da0:	dc400717 	ldw	r17,28(sp)
  809da4:	dc000617 	ldw	r16,24(sp)
  809da8:	dec01004 	addi	sp,sp,64
  809dac:	f800283a 	ret

00809db0 <__i2b>:
  809db0:	defffd04 	addi	sp,sp,-12
  809db4:	dc000015 	stw	r16,0(sp)
  809db8:	04000044 	movi	r16,1
  809dbc:	dc800115 	stw	r18,4(sp)
  809dc0:	2825883a 	mov	r18,r5
  809dc4:	800b883a 	mov	r5,r16
  809dc8:	dfc00215 	stw	ra,8(sp)
  809dcc:	080964c0 	call	80964c <_Balloc>
  809dd0:	14000415 	stw	r16,16(r2)
  809dd4:	14800515 	stw	r18,20(r2)
  809dd8:	dfc00217 	ldw	ra,8(sp)
  809ddc:	dc800117 	ldw	r18,4(sp)
  809de0:	dc000017 	ldw	r16,0(sp)
  809de4:	dec00304 	addi	sp,sp,12
  809de8:	f800283a 	ret

00809dec <__multadd>:
  809dec:	defff604 	addi	sp,sp,-40
  809df0:	dd800615 	stw	r22,24(sp)
  809df4:	2d800417 	ldw	r22,16(r5)
  809df8:	df000815 	stw	fp,32(sp)
  809dfc:	ddc00715 	stw	r23,28(sp)
  809e00:	dd400515 	stw	r21,20(sp)
  809e04:	dd000415 	stw	r20,16(sp)
  809e08:	dcc00315 	stw	r19,12(sp)
  809e0c:	dc800215 	stw	r18,8(sp)
  809e10:	dfc00915 	stw	ra,36(sp)
  809e14:	dc400115 	stw	r17,4(sp)
  809e18:	dc000015 	stw	r16,0(sp)
  809e1c:	282f883a 	mov	r23,r5
  809e20:	2039883a 	mov	fp,r4
  809e24:	302b883a 	mov	r21,r6
  809e28:	3829883a 	mov	r20,r7
  809e2c:	2c800504 	addi	r18,r5,20
  809e30:	0027883a 	mov	r19,zero
  809e34:	94400017 	ldw	r17,0(r18)
  809e38:	a80b883a 	mov	r5,r21
  809e3c:	9cc00044 	addi	r19,r19,1
  809e40:	893fffcc 	andi	r4,r17,65535
  809e44:	08102900 	call	810290 <__mulsi3>
  809e48:	8808d43a 	srli	r4,r17,16
  809e4c:	1521883a 	add	r16,r2,r20
  809e50:	a80b883a 	mov	r5,r21
  809e54:	08102900 	call	810290 <__mulsi3>
  809e58:	8008d43a 	srli	r4,r16,16
  809e5c:	843fffcc 	andi	r16,r16,65535
  809e60:	1105883a 	add	r2,r2,r4
  809e64:	1006943a 	slli	r3,r2,16
  809e68:	1028d43a 	srli	r20,r2,16
  809e6c:	1c07883a 	add	r3,r3,r16
  809e70:	90c00015 	stw	r3,0(r18)
  809e74:	94800104 	addi	r18,r18,4
  809e78:	9dbfee16 	blt	r19,r22,809e34 <__multadd+0x48>
  809e7c:	a0000826 	beq	r20,zero,809ea0 <__multadd+0xb4>
  809e80:	b8800217 	ldw	r2,8(r23)
  809e84:	b080130e 	bge	r22,r2,809ed4 <__multadd+0xe8>
  809e88:	b585883a 	add	r2,r22,r22
  809e8c:	1085883a 	add	r2,r2,r2
  809e90:	15c5883a 	add	r2,r2,r23
  809e94:	b0c00044 	addi	r3,r22,1
  809e98:	15000515 	stw	r20,20(r2)
  809e9c:	b8c00415 	stw	r3,16(r23)
  809ea0:	b805883a 	mov	r2,r23
  809ea4:	dfc00917 	ldw	ra,36(sp)
  809ea8:	df000817 	ldw	fp,32(sp)
  809eac:	ddc00717 	ldw	r23,28(sp)
  809eb0:	dd800617 	ldw	r22,24(sp)
  809eb4:	dd400517 	ldw	r21,20(sp)
  809eb8:	dd000417 	ldw	r20,16(sp)
  809ebc:	dcc00317 	ldw	r19,12(sp)
  809ec0:	dc800217 	ldw	r18,8(sp)
  809ec4:	dc400117 	ldw	r17,4(sp)
  809ec8:	dc000017 	ldw	r16,0(sp)
  809ecc:	dec00a04 	addi	sp,sp,40
  809ed0:	f800283a 	ret
  809ed4:	b9400117 	ldw	r5,4(r23)
  809ed8:	e009883a 	mov	r4,fp
  809edc:	29400044 	addi	r5,r5,1
  809ee0:	080964c0 	call	80964c <_Balloc>
  809ee4:	b9800417 	ldw	r6,16(r23)
  809ee8:	b9400304 	addi	r5,r23,12
  809eec:	11000304 	addi	r4,r2,12
  809ef0:	318d883a 	add	r6,r6,r6
  809ef4:	318d883a 	add	r6,r6,r6
  809ef8:	31800204 	addi	r6,r6,8
  809efc:	1023883a 	mov	r17,r2
  809f00:	0808f4c0 	call	808f4c <memcpy>
  809f04:	b80b883a 	mov	r5,r23
  809f08:	e009883a 	mov	r4,fp
  809f0c:	08090cc0 	call	8090cc <_Bfree>
  809f10:	882f883a 	mov	r23,r17
  809f14:	003fdc06 	br	809e88 <__multadd+0x9c>

00809f18 <__pow5mult>:
  809f18:	defffa04 	addi	sp,sp,-24
  809f1c:	308000cc 	andi	r2,r6,3
  809f20:	dd000415 	stw	r20,16(sp)
  809f24:	dcc00315 	stw	r19,12(sp)
  809f28:	dc000015 	stw	r16,0(sp)
  809f2c:	dfc00515 	stw	ra,20(sp)
  809f30:	dc800215 	stw	r18,8(sp)
  809f34:	dc400115 	stw	r17,4(sp)
  809f38:	3021883a 	mov	r16,r6
  809f3c:	2027883a 	mov	r19,r4
  809f40:	2829883a 	mov	r20,r5
  809f44:	10002b1e 	bne	r2,zero,809ff4 <__pow5mult+0xdc>
  809f48:	8025d0ba 	srai	r18,r16,2
  809f4c:	90001b26 	beq	r18,zero,809fbc <__pow5mult+0xa4>
  809f50:	9c001217 	ldw	r16,72(r19)
  809f54:	8000081e 	bne	r16,zero,809f78 <__pow5mult+0x60>
  809f58:	00003006 	br	80a01c <__pow5mult+0x104>
  809f5c:	800b883a 	mov	r5,r16
  809f60:	800d883a 	mov	r6,r16
  809f64:	9809883a 	mov	r4,r19
  809f68:	90001426 	beq	r18,zero,809fbc <__pow5mult+0xa4>
  809f6c:	80800017 	ldw	r2,0(r16)
  809f70:	10001b26 	beq	r2,zero,809fe0 <__pow5mult+0xc8>
  809f74:	1021883a 	mov	r16,r2
  809f78:	9080004c 	andi	r2,r18,1
  809f7c:	1005003a 	cmpeq	r2,r2,zero
  809f80:	9025d07a 	srai	r18,r18,1
  809f84:	800d883a 	mov	r6,r16
  809f88:	9809883a 	mov	r4,r19
  809f8c:	a00b883a 	mov	r5,r20
  809f90:	103ff21e 	bne	r2,zero,809f5c <__pow5mult+0x44>
  809f94:	0809b5c0 	call	809b5c <__multiply>
  809f98:	a00b883a 	mov	r5,r20
  809f9c:	9809883a 	mov	r4,r19
  809fa0:	1023883a 	mov	r17,r2
  809fa4:	08090cc0 	call	8090cc <_Bfree>
  809fa8:	8829883a 	mov	r20,r17
  809fac:	800b883a 	mov	r5,r16
  809fb0:	800d883a 	mov	r6,r16
  809fb4:	9809883a 	mov	r4,r19
  809fb8:	903fec1e 	bne	r18,zero,809f6c <__pow5mult+0x54>
  809fbc:	a005883a 	mov	r2,r20
  809fc0:	dfc00517 	ldw	ra,20(sp)
  809fc4:	dd000417 	ldw	r20,16(sp)
  809fc8:	dcc00317 	ldw	r19,12(sp)
  809fcc:	dc800217 	ldw	r18,8(sp)
  809fd0:	dc400117 	ldw	r17,4(sp)
  809fd4:	dc000017 	ldw	r16,0(sp)
  809fd8:	dec00604 	addi	sp,sp,24
  809fdc:	f800283a 	ret
  809fe0:	0809b5c0 	call	809b5c <__multiply>
  809fe4:	80800015 	stw	r2,0(r16)
  809fe8:	1021883a 	mov	r16,r2
  809fec:	10000015 	stw	zero,0(r2)
  809ff0:	003fe106 	br	809f78 <__pow5mult+0x60>
  809ff4:	1085883a 	add	r2,r2,r2
  809ff8:	00c02074 	movhi	r3,129
  809ffc:	18d46c04 	addi	r3,r3,20912
  80a000:	1085883a 	add	r2,r2,r2
  80a004:	10c5883a 	add	r2,r2,r3
  80a008:	11bfff17 	ldw	r6,-4(r2)
  80a00c:	000f883a 	mov	r7,zero
  80a010:	0809dec0 	call	809dec <__multadd>
  80a014:	1029883a 	mov	r20,r2
  80a018:	003fcb06 	br	809f48 <__pow5mult+0x30>
  80a01c:	9809883a 	mov	r4,r19
  80a020:	01409c44 	movi	r5,625
  80a024:	0809db00 	call	809db0 <__i2b>
  80a028:	98801215 	stw	r2,72(r19)
  80a02c:	1021883a 	mov	r16,r2
  80a030:	10000015 	stw	zero,0(r2)
  80a034:	003fd006 	br	809f78 <__pow5mult+0x60>

0080a038 <__s2b>:
  80a038:	defff904 	addi	sp,sp,-28
  80a03c:	dcc00315 	stw	r19,12(sp)
  80a040:	dc800215 	stw	r18,8(sp)
  80a044:	2827883a 	mov	r19,r5
  80a048:	2025883a 	mov	r18,r4
  80a04c:	01400244 	movi	r5,9
  80a050:	39000204 	addi	r4,r7,8
  80a054:	dd000415 	stw	r20,16(sp)
  80a058:	dc400115 	stw	r17,4(sp)
  80a05c:	dfc00615 	stw	ra,24(sp)
  80a060:	dd400515 	stw	r21,20(sp)
  80a064:	dc000015 	stw	r16,0(sp)
  80a068:	3829883a 	mov	r20,r7
  80a06c:	3023883a 	mov	r17,r6
  80a070:	08101c00 	call	8101c0 <__divsi3>
  80a074:	00c00044 	movi	r3,1
  80a078:	1880350e 	bge	r3,r2,80a150 <__s2b+0x118>
  80a07c:	000b883a 	mov	r5,zero
  80a080:	18c7883a 	add	r3,r3,r3
  80a084:	29400044 	addi	r5,r5,1
  80a088:	18bffd16 	blt	r3,r2,80a080 <__s2b+0x48>
  80a08c:	9009883a 	mov	r4,r18
  80a090:	080964c0 	call	80964c <_Balloc>
  80a094:	1011883a 	mov	r8,r2
  80a098:	d8800717 	ldw	r2,28(sp)
  80a09c:	00c00044 	movi	r3,1
  80a0a0:	01800244 	movi	r6,9
  80a0a4:	40800515 	stw	r2,20(r8)
  80a0a8:	40c00415 	stw	r3,16(r8)
  80a0ac:	3440260e 	bge	r6,r17,80a148 <__s2b+0x110>
  80a0b0:	3021883a 	mov	r16,r6
  80a0b4:	99ab883a 	add	r21,r19,r6
  80a0b8:	9c05883a 	add	r2,r19,r16
  80a0bc:	11c00007 	ldb	r7,0(r2)
  80a0c0:	400b883a 	mov	r5,r8
  80a0c4:	9009883a 	mov	r4,r18
  80a0c8:	39fff404 	addi	r7,r7,-48
  80a0cc:	01800284 	movi	r6,10
  80a0d0:	0809dec0 	call	809dec <__multadd>
  80a0d4:	84000044 	addi	r16,r16,1
  80a0d8:	1011883a 	mov	r8,r2
  80a0dc:	8c3ff61e 	bne	r17,r16,80a0b8 <__s2b+0x80>
  80a0e0:	ac45883a 	add	r2,r21,r17
  80a0e4:	117ffe04 	addi	r5,r2,-8
  80a0e8:	880d883a 	mov	r6,r17
  80a0ec:	35000c0e 	bge	r6,r20,80a120 <__s2b+0xe8>
  80a0f0:	a185c83a 	sub	r2,r20,r6
  80a0f4:	2821883a 	mov	r16,r5
  80a0f8:	28a3883a 	add	r17,r5,r2
  80a0fc:	81c00007 	ldb	r7,0(r16)
  80a100:	400b883a 	mov	r5,r8
  80a104:	9009883a 	mov	r4,r18
  80a108:	39fff404 	addi	r7,r7,-48
  80a10c:	01800284 	movi	r6,10
  80a110:	0809dec0 	call	809dec <__multadd>
  80a114:	84000044 	addi	r16,r16,1
  80a118:	1011883a 	mov	r8,r2
  80a11c:	847ff71e 	bne	r16,r17,80a0fc <__s2b+0xc4>
  80a120:	4005883a 	mov	r2,r8
  80a124:	dfc00617 	ldw	ra,24(sp)
  80a128:	dd400517 	ldw	r21,20(sp)
  80a12c:	dd000417 	ldw	r20,16(sp)
  80a130:	dcc00317 	ldw	r19,12(sp)
  80a134:	dc800217 	ldw	r18,8(sp)
  80a138:	dc400117 	ldw	r17,4(sp)
  80a13c:	dc000017 	ldw	r16,0(sp)
  80a140:	dec00704 	addi	sp,sp,28
  80a144:	f800283a 	ret
  80a148:	99400284 	addi	r5,r19,10
  80a14c:	003fe706 	br	80a0ec <__s2b+0xb4>
  80a150:	000b883a 	mov	r5,zero
  80a154:	003fcd06 	br	80a08c <__s2b+0x54>

0080a158 <putc>:
  80a158:	defffc04 	addi	sp,sp,-16
  80a15c:	dc800215 	stw	r18,8(sp)
  80a160:	04802074 	movhi	r18,129
  80a164:	949bb804 	addi	r18,r18,28384
  80a168:	90c00017 	ldw	r3,0(r18)
  80a16c:	dc400115 	stw	r17,4(sp)
  80a170:	dc000015 	stw	r16,0(sp)
  80a174:	dfc00315 	stw	ra,12(sp)
  80a178:	2023883a 	mov	r17,r4
  80a17c:	2821883a 	mov	r16,r5
  80a180:	18000226 	beq	r3,zero,80a18c <putc+0x34>
  80a184:	18800e17 	ldw	r2,56(r3)
  80a188:	10001126 	beq	r2,zero,80a1d0 <putc+0x78>
  80a18c:	80800217 	ldw	r2,8(r16)
  80a190:	10ffffc4 	addi	r3,r2,-1
  80a194:	80c00215 	stw	r3,8(r16)
  80a198:	18001316 	blt	r3,zero,80a1e8 <putc+0x90>
  80a19c:	80800017 	ldw	r2,0(r16)
  80a1a0:	14400005 	stb	r17,0(r2)
  80a1a4:	80c00017 	ldw	r3,0(r16)
  80a1a8:	18800044 	addi	r2,r3,1
  80a1ac:	18c00003 	ldbu	r3,0(r3)
  80a1b0:	80800015 	stw	r2,0(r16)
  80a1b4:	1805883a 	mov	r2,r3
  80a1b8:	dfc00317 	ldw	ra,12(sp)
  80a1bc:	dc800217 	ldw	r18,8(sp)
  80a1c0:	dc400117 	ldw	r17,4(sp)
  80a1c4:	dc000017 	ldw	r16,0(sp)
  80a1c8:	dec00404 	addi	sp,sp,16
  80a1cc:	f800283a 	ret
  80a1d0:	1809883a 	mov	r4,r3
  80a1d4:	08011c80 	call	8011c8 <__sinit>
  80a1d8:	80800217 	ldw	r2,8(r16)
  80a1dc:	10ffffc4 	addi	r3,r2,-1
  80a1e0:	80c00215 	stw	r3,8(r16)
  80a1e4:	183fed0e 	bge	r3,zero,80a19c <putc+0x44>
  80a1e8:	80800617 	ldw	r2,24(r16)
  80a1ec:	18800f16 	blt	r3,r2,80a22c <putc+0xd4>
  80a1f0:	80800017 	ldw	r2,0(r16)
  80a1f4:	14400005 	stb	r17,0(r2)
  80a1f8:	81000017 	ldw	r4,0(r16)
  80a1fc:	00800284 	movi	r2,10
  80a200:	20c00003 	ldbu	r3,0(r4)
  80a204:	18801226 	beq	r3,r2,80a250 <putc+0xf8>
  80a208:	20800044 	addi	r2,r4,1
  80a20c:	80800015 	stw	r2,0(r16)
  80a210:	1805883a 	mov	r2,r3
  80a214:	dfc00317 	ldw	ra,12(sp)
  80a218:	dc800217 	ldw	r18,8(sp)
  80a21c:	dc400117 	ldw	r17,4(sp)
  80a220:	dc000017 	ldw	r16,0(sp)
  80a224:	dec00404 	addi	sp,sp,16
  80a228:	f800283a 	ret
  80a22c:	91000017 	ldw	r4,0(r18)
  80a230:	880b883a 	mov	r5,r17
  80a234:	800d883a 	mov	r6,r16
  80a238:	dfc00317 	ldw	ra,12(sp)
  80a23c:	dc800217 	ldw	r18,8(sp)
  80a240:	dc400117 	ldw	r17,4(sp)
  80a244:	dc000017 	ldw	r16,0(sp)
  80a248:	dec00404 	addi	sp,sp,16
  80a24c:	080d1401 	jmpi	80d140 <__swbuf_r>
  80a250:	91000017 	ldw	r4,0(r18)
  80a254:	180b883a 	mov	r5,r3
  80a258:	003ff606 	br	80a234 <putc+0xdc>

0080a25c <_putc_r>:
  80a25c:	defffc04 	addi	sp,sp,-16
  80a260:	dc400215 	stw	r17,8(sp)
  80a264:	dc000115 	stw	r16,4(sp)
  80a268:	dfc00315 	stw	ra,12(sp)
  80a26c:	2021883a 	mov	r16,r4
  80a270:	2823883a 	mov	r17,r5
  80a274:	20000226 	beq	r4,zero,80a280 <_putc_r+0x24>
  80a278:	20800e17 	ldw	r2,56(r4)
  80a27c:	10001026 	beq	r2,zero,80a2c0 <_putc_r+0x64>
  80a280:	30800217 	ldw	r2,8(r6)
  80a284:	10ffffc4 	addi	r3,r2,-1
  80a288:	30c00215 	stw	r3,8(r6)
  80a28c:	18001316 	blt	r3,zero,80a2dc <_putc_r+0x80>
  80a290:	30800017 	ldw	r2,0(r6)
  80a294:	14400005 	stb	r17,0(r2)
  80a298:	30c00017 	ldw	r3,0(r6)
  80a29c:	18800044 	addi	r2,r3,1
  80a2a0:	18c00003 	ldbu	r3,0(r3)
  80a2a4:	30800015 	stw	r2,0(r6)
  80a2a8:	1805883a 	mov	r2,r3
  80a2ac:	dfc00317 	ldw	ra,12(sp)
  80a2b0:	dc400217 	ldw	r17,8(sp)
  80a2b4:	dc000117 	ldw	r16,4(sp)
  80a2b8:	dec00404 	addi	sp,sp,16
  80a2bc:	f800283a 	ret
  80a2c0:	d9800015 	stw	r6,0(sp)
  80a2c4:	08011c80 	call	8011c8 <__sinit>
  80a2c8:	d9800017 	ldw	r6,0(sp)
  80a2cc:	30800217 	ldw	r2,8(r6)
  80a2d0:	10ffffc4 	addi	r3,r2,-1
  80a2d4:	30c00215 	stw	r3,8(r6)
  80a2d8:	183fed0e 	bge	r3,zero,80a290 <_putc_r+0x34>
  80a2dc:	30800617 	ldw	r2,24(r6)
  80a2e0:	18800e16 	blt	r3,r2,80a31c <_putc_r+0xc0>
  80a2e4:	30800017 	ldw	r2,0(r6)
  80a2e8:	14400005 	stb	r17,0(r2)
  80a2ec:	31000017 	ldw	r4,0(r6)
  80a2f0:	00800284 	movi	r2,10
  80a2f4:	20c00003 	ldbu	r3,0(r4)
  80a2f8:	18800f26 	beq	r3,r2,80a338 <_putc_r+0xdc>
  80a2fc:	20800044 	addi	r2,r4,1
  80a300:	30800015 	stw	r2,0(r6)
  80a304:	1805883a 	mov	r2,r3
  80a308:	dfc00317 	ldw	ra,12(sp)
  80a30c:	dc400217 	ldw	r17,8(sp)
  80a310:	dc000117 	ldw	r16,4(sp)
  80a314:	dec00404 	addi	sp,sp,16
  80a318:	f800283a 	ret
  80a31c:	8009883a 	mov	r4,r16
  80a320:	880b883a 	mov	r5,r17
  80a324:	dfc00317 	ldw	ra,12(sp)
  80a328:	dc400217 	ldw	r17,8(sp)
  80a32c:	dc000117 	ldw	r16,4(sp)
  80a330:	dec00404 	addi	sp,sp,16
  80a334:	080d1401 	jmpi	80d140 <__swbuf_r>
  80a338:	8009883a 	mov	r4,r16
  80a33c:	180b883a 	mov	r5,r3
  80a340:	003ff806 	br	80a324 <_putc_r+0xc8>

0080a344 <_read_r>:
  80a344:	defffd04 	addi	sp,sp,-12
  80a348:	dc000015 	stw	r16,0(sp)
  80a34c:	040020b4 	movhi	r16,130
  80a350:	8422bf04 	addi	r16,r16,-29956
  80a354:	dc400115 	stw	r17,4(sp)
  80a358:	80000015 	stw	zero,0(r16)
  80a35c:	2023883a 	mov	r17,r4
  80a360:	2809883a 	mov	r4,r5
  80a364:	300b883a 	mov	r5,r6
  80a368:	380d883a 	mov	r6,r7
  80a36c:	dfc00215 	stw	ra,8(sp)
  80a370:	08117dc0 	call	8117dc <read>
  80a374:	1007883a 	mov	r3,r2
  80a378:	00bfffc4 	movi	r2,-1
  80a37c:	18800626 	beq	r3,r2,80a398 <_read_r+0x54>
  80a380:	1805883a 	mov	r2,r3
  80a384:	dfc00217 	ldw	ra,8(sp)
  80a388:	dc400117 	ldw	r17,4(sp)
  80a38c:	dc000017 	ldw	r16,0(sp)
  80a390:	dec00304 	addi	sp,sp,12
  80a394:	f800283a 	ret
  80a398:	80800017 	ldw	r2,0(r16)
  80a39c:	103ff826 	beq	r2,zero,80a380 <_read_r+0x3c>
  80a3a0:	88800015 	stw	r2,0(r17)
  80a3a4:	1805883a 	mov	r2,r3
  80a3a8:	dfc00217 	ldw	ra,8(sp)
  80a3ac:	dc400117 	ldw	r17,4(sp)
  80a3b0:	dc000017 	ldw	r16,0(sp)
  80a3b4:	dec00304 	addi	sp,sp,12
  80a3b8:	f800283a 	ret

0080a3bc <_realloc_r>:
  80a3bc:	defff404 	addi	sp,sp,-48
  80a3c0:	dd800815 	stw	r22,32(sp)
  80a3c4:	dc800415 	stw	r18,16(sp)
  80a3c8:	dc400315 	stw	r17,12(sp)
  80a3cc:	dfc00b15 	stw	ra,44(sp)
  80a3d0:	df000a15 	stw	fp,40(sp)
  80a3d4:	ddc00915 	stw	r23,36(sp)
  80a3d8:	dd400715 	stw	r21,28(sp)
  80a3dc:	dd000615 	stw	r20,24(sp)
  80a3e0:	dcc00515 	stw	r19,20(sp)
  80a3e4:	dc000215 	stw	r16,8(sp)
  80a3e8:	2825883a 	mov	r18,r5
  80a3ec:	3023883a 	mov	r17,r6
  80a3f0:	202d883a 	mov	r22,r4
  80a3f4:	2800c926 	beq	r5,zero,80a71c <_realloc_r+0x360>
  80a3f8:	08114b80 	call	8114b8 <__malloc_lock>
  80a3fc:	943ffe04 	addi	r16,r18,-8
  80a400:	88c002c4 	addi	r3,r17,11
  80a404:	00800584 	movi	r2,22
  80a408:	82000117 	ldw	r8,4(r16)
  80a40c:	10c01b2e 	bgeu	r2,r3,80a47c <_realloc_r+0xc0>
  80a410:	00bffe04 	movi	r2,-8
  80a414:	188e703a 	and	r7,r3,r2
  80a418:	3839883a 	mov	fp,r7
  80a41c:	38001a16 	blt	r7,zero,80a488 <_realloc_r+0xcc>
  80a420:	e4401936 	bltu	fp,r17,80a488 <_realloc_r+0xcc>
  80a424:	013fff04 	movi	r4,-4
  80a428:	4126703a 	and	r19,r8,r4
  80a42c:	99c02616 	blt	r19,r7,80a4c8 <_realloc_r+0x10c>
  80a430:	802b883a 	mov	r21,r16
  80a434:	9829883a 	mov	r20,r19
  80a438:	84000204 	addi	r16,r16,8
  80a43c:	a80f883a 	mov	r7,r21
  80a440:	a70dc83a 	sub	r6,r20,fp
  80a444:	008003c4 	movi	r2,15
  80a448:	1180c136 	bltu	r2,r6,80a750 <_realloc_r+0x394>
  80a44c:	38800117 	ldw	r2,4(r7)
  80a450:	a549883a 	add	r4,r20,r21
  80a454:	1080004c 	andi	r2,r2,1
  80a458:	a084b03a 	or	r2,r20,r2
  80a45c:	38800115 	stw	r2,4(r7)
  80a460:	20c00117 	ldw	r3,4(r4)
  80a464:	18c00054 	ori	r3,r3,1
  80a468:	20c00115 	stw	r3,4(r4)
  80a46c:	b009883a 	mov	r4,r22
  80a470:	08114d80 	call	8114d8 <__malloc_unlock>
  80a474:	8023883a 	mov	r17,r16
  80a478:	00000606 	br	80a494 <_realloc_r+0xd8>
  80a47c:	01c00404 	movi	r7,16
  80a480:	3839883a 	mov	fp,r7
  80a484:	e47fe72e 	bgeu	fp,r17,80a424 <_realloc_r+0x68>
  80a488:	00800304 	movi	r2,12
  80a48c:	0023883a 	mov	r17,zero
  80a490:	b0800015 	stw	r2,0(r22)
  80a494:	8805883a 	mov	r2,r17
  80a498:	dfc00b17 	ldw	ra,44(sp)
  80a49c:	df000a17 	ldw	fp,40(sp)
  80a4a0:	ddc00917 	ldw	r23,36(sp)
  80a4a4:	dd800817 	ldw	r22,32(sp)
  80a4a8:	dd400717 	ldw	r21,28(sp)
  80a4ac:	dd000617 	ldw	r20,24(sp)
  80a4b0:	dcc00517 	ldw	r19,20(sp)
  80a4b4:	dc800417 	ldw	r18,16(sp)
  80a4b8:	dc400317 	ldw	r17,12(sp)
  80a4bc:	dc000217 	ldw	r16,8(sp)
  80a4c0:	dec00c04 	addi	sp,sp,48
  80a4c4:	f800283a 	ret
  80a4c8:	00802074 	movhi	r2,129
  80a4cc:	1095df04 	addi	r2,r2,22396
  80a4d0:	12400217 	ldw	r9,8(r2)
  80a4d4:	84cd883a 	add	r6,r16,r19
  80a4d8:	802b883a 	mov	r21,r16
  80a4dc:	3240b926 	beq	r6,r9,80a7c4 <_realloc_r+0x408>
  80a4e0:	31400117 	ldw	r5,4(r6)
  80a4e4:	00bfff84 	movi	r2,-2
  80a4e8:	2884703a 	and	r2,r5,r2
  80a4ec:	1185883a 	add	r2,r2,r6
  80a4f0:	10c00117 	ldw	r3,4(r2)
  80a4f4:	18c0004c 	andi	r3,r3,1
  80a4f8:	1807003a 	cmpeq	r3,r3,zero
  80a4fc:	1800a326 	beq	r3,zero,80a78c <_realloc_r+0x3d0>
  80a500:	2908703a 	and	r4,r5,r4
  80a504:	9929883a 	add	r20,r19,r4
  80a508:	a1c0a30e 	bge	r20,r7,80a798 <_realloc_r+0x3dc>
  80a50c:	4080004c 	andi	r2,r8,1
  80a510:	1000551e 	bne	r2,zero,80a668 <_realloc_r+0x2ac>
  80a514:	80800017 	ldw	r2,0(r16)
  80a518:	80afc83a 	sub	r23,r16,r2
  80a51c:	b8c00117 	ldw	r3,4(r23)
  80a520:	00bfff04 	movi	r2,-4
  80a524:	1884703a 	and	r2,r3,r2
  80a528:	30002e26 	beq	r6,zero,80a5e4 <_realloc_r+0x228>
  80a52c:	3240b926 	beq	r6,r9,80a814 <_realloc_r+0x458>
  80a530:	98a9883a 	add	r20,r19,r2
  80a534:	2509883a 	add	r4,r4,r20
  80a538:	d9000015 	stw	r4,0(sp)
  80a53c:	21c02a16 	blt	r4,r7,80a5e8 <_realloc_r+0x22c>
  80a540:	30800317 	ldw	r2,12(r6)
  80a544:	30c00217 	ldw	r3,8(r6)
  80a548:	01400904 	movi	r5,36
  80a54c:	99bfff04 	addi	r6,r19,-4
  80a550:	18800315 	stw	r2,12(r3)
  80a554:	10c00215 	stw	r3,8(r2)
  80a558:	b9000317 	ldw	r4,12(r23)
  80a55c:	b8800217 	ldw	r2,8(r23)
  80a560:	b82b883a 	mov	r21,r23
  80a564:	bc000204 	addi	r16,r23,8
  80a568:	20800215 	stw	r2,8(r4)
  80a56c:	11000315 	stw	r4,12(r2)
  80a570:	2980e436 	bltu	r5,r6,80a904 <_realloc_r+0x548>
  80a574:	008004c4 	movi	r2,19
  80a578:	9009883a 	mov	r4,r18
  80a57c:	8011883a 	mov	r8,r16
  80a580:	11800f2e 	bgeu	r2,r6,80a5c0 <_realloc_r+0x204>
  80a584:	90800017 	ldw	r2,0(r18)
  80a588:	ba000404 	addi	r8,r23,16
  80a58c:	91000204 	addi	r4,r18,8
  80a590:	b8800215 	stw	r2,8(r23)
  80a594:	90c00117 	ldw	r3,4(r18)
  80a598:	008006c4 	movi	r2,27
  80a59c:	b8c00315 	stw	r3,12(r23)
  80a5a0:	1180072e 	bgeu	r2,r6,80a5c0 <_realloc_r+0x204>
  80a5a4:	90c00217 	ldw	r3,8(r18)
  80a5a8:	ba000604 	addi	r8,r23,24
  80a5ac:	91000404 	addi	r4,r18,16
  80a5b0:	b8c00415 	stw	r3,16(r23)
  80a5b4:	90800317 	ldw	r2,12(r18)
  80a5b8:	b8800515 	stw	r2,20(r23)
  80a5bc:	3140e726 	beq	r6,r5,80a95c <_realloc_r+0x5a0>
  80a5c0:	20800017 	ldw	r2,0(r4)
  80a5c4:	dd000017 	ldw	r20,0(sp)
  80a5c8:	b80f883a 	mov	r7,r23
  80a5cc:	40800015 	stw	r2,0(r8)
  80a5d0:	20c00117 	ldw	r3,4(r4)
  80a5d4:	40c00115 	stw	r3,4(r8)
  80a5d8:	20800217 	ldw	r2,8(r4)
  80a5dc:	40800215 	stw	r2,8(r8)
  80a5e0:	003f9706 	br	80a440 <_realloc_r+0x84>
  80a5e4:	98a9883a 	add	r20,r19,r2
  80a5e8:	a1c01f16 	blt	r20,r7,80a668 <_realloc_r+0x2ac>
  80a5ec:	b8c00317 	ldw	r3,12(r23)
  80a5f0:	b8800217 	ldw	r2,8(r23)
  80a5f4:	99bfff04 	addi	r6,r19,-4
  80a5f8:	01400904 	movi	r5,36
  80a5fc:	b82b883a 	mov	r21,r23
  80a600:	18800215 	stw	r2,8(r3)
  80a604:	10c00315 	stw	r3,12(r2)
  80a608:	bc000204 	addi	r16,r23,8
  80a60c:	2980c336 	bltu	r5,r6,80a91c <_realloc_r+0x560>
  80a610:	008004c4 	movi	r2,19
  80a614:	9009883a 	mov	r4,r18
  80a618:	8011883a 	mov	r8,r16
  80a61c:	11800f2e 	bgeu	r2,r6,80a65c <_realloc_r+0x2a0>
  80a620:	90800017 	ldw	r2,0(r18)
  80a624:	ba000404 	addi	r8,r23,16
  80a628:	91000204 	addi	r4,r18,8
  80a62c:	b8800215 	stw	r2,8(r23)
  80a630:	90c00117 	ldw	r3,4(r18)
  80a634:	008006c4 	movi	r2,27
  80a638:	b8c00315 	stw	r3,12(r23)
  80a63c:	1180072e 	bgeu	r2,r6,80a65c <_realloc_r+0x2a0>
  80a640:	90c00217 	ldw	r3,8(r18)
  80a644:	ba000604 	addi	r8,r23,24
  80a648:	91000404 	addi	r4,r18,16
  80a64c:	b8c00415 	stw	r3,16(r23)
  80a650:	90800317 	ldw	r2,12(r18)
  80a654:	b8800515 	stw	r2,20(r23)
  80a658:	3140c726 	beq	r6,r5,80a978 <_realloc_r+0x5bc>
  80a65c:	20800017 	ldw	r2,0(r4)
  80a660:	b80f883a 	mov	r7,r23
  80a664:	003fd906 	br	80a5cc <_realloc_r+0x210>
  80a668:	880b883a 	mov	r5,r17
  80a66c:	b009883a 	mov	r4,r22
  80a670:	08024000 	call	802400 <_malloc_r>
  80a674:	1023883a 	mov	r17,r2
  80a678:	10002526 	beq	r2,zero,80a710 <_realloc_r+0x354>
  80a67c:	80800117 	ldw	r2,4(r16)
  80a680:	00ffff84 	movi	r3,-2
  80a684:	893ffe04 	addi	r4,r17,-8
  80a688:	10c4703a 	and	r2,r2,r3
  80a68c:	8085883a 	add	r2,r16,r2
  80a690:	20809526 	beq	r4,r2,80a8e8 <_realloc_r+0x52c>
  80a694:	99bfff04 	addi	r6,r19,-4
  80a698:	01c00904 	movi	r7,36
  80a69c:	39804536 	bltu	r7,r6,80a7b4 <_realloc_r+0x3f8>
  80a6a0:	008004c4 	movi	r2,19
  80a6a4:	9009883a 	mov	r4,r18
  80a6a8:	880b883a 	mov	r5,r17
  80a6ac:	11800f2e 	bgeu	r2,r6,80a6ec <_realloc_r+0x330>
  80a6b0:	90800017 	ldw	r2,0(r18)
  80a6b4:	89400204 	addi	r5,r17,8
  80a6b8:	91000204 	addi	r4,r18,8
  80a6bc:	88800015 	stw	r2,0(r17)
  80a6c0:	90c00117 	ldw	r3,4(r18)
  80a6c4:	008006c4 	movi	r2,27
  80a6c8:	88c00115 	stw	r3,4(r17)
  80a6cc:	1180072e 	bgeu	r2,r6,80a6ec <_realloc_r+0x330>
  80a6d0:	90c00217 	ldw	r3,8(r18)
  80a6d4:	89400404 	addi	r5,r17,16
  80a6d8:	91000404 	addi	r4,r18,16
  80a6dc:	88c00215 	stw	r3,8(r17)
  80a6e0:	90800317 	ldw	r2,12(r18)
  80a6e4:	88800315 	stw	r2,12(r17)
  80a6e8:	31c09126 	beq	r6,r7,80a930 <_realloc_r+0x574>
  80a6ec:	20800017 	ldw	r2,0(r4)
  80a6f0:	28800015 	stw	r2,0(r5)
  80a6f4:	20c00117 	ldw	r3,4(r4)
  80a6f8:	28c00115 	stw	r3,4(r5)
  80a6fc:	20800217 	ldw	r2,8(r4)
  80a700:	28800215 	stw	r2,8(r5)
  80a704:	900b883a 	mov	r5,r18
  80a708:	b009883a 	mov	r4,r22
  80a70c:	08016f00 	call	8016f0 <_free_r>
  80a710:	b009883a 	mov	r4,r22
  80a714:	08114d80 	call	8114d8 <__malloc_unlock>
  80a718:	003f5e06 	br	80a494 <_realloc_r+0xd8>
  80a71c:	300b883a 	mov	r5,r6
  80a720:	dfc00b17 	ldw	ra,44(sp)
  80a724:	df000a17 	ldw	fp,40(sp)
  80a728:	ddc00917 	ldw	r23,36(sp)
  80a72c:	dd800817 	ldw	r22,32(sp)
  80a730:	dd400717 	ldw	r21,28(sp)
  80a734:	dd000617 	ldw	r20,24(sp)
  80a738:	dcc00517 	ldw	r19,20(sp)
  80a73c:	dc800417 	ldw	r18,16(sp)
  80a740:	dc400317 	ldw	r17,12(sp)
  80a744:	dc000217 	ldw	r16,8(sp)
  80a748:	dec00c04 	addi	sp,sp,48
  80a74c:	08024001 	jmpi	802400 <_malloc_r>
  80a750:	38800117 	ldw	r2,4(r7)
  80a754:	e54b883a 	add	r5,fp,r21
  80a758:	31000054 	ori	r4,r6,1
  80a75c:	1080004c 	andi	r2,r2,1
  80a760:	1704b03a 	or	r2,r2,fp
  80a764:	38800115 	stw	r2,4(r7)
  80a768:	29000115 	stw	r4,4(r5)
  80a76c:	2987883a 	add	r3,r5,r6
  80a770:	18800117 	ldw	r2,4(r3)
  80a774:	29400204 	addi	r5,r5,8
  80a778:	b009883a 	mov	r4,r22
  80a77c:	10800054 	ori	r2,r2,1
  80a780:	18800115 	stw	r2,4(r3)
  80a784:	08016f00 	call	8016f0 <_free_r>
  80a788:	003f3806 	br	80a46c <_realloc_r+0xb0>
  80a78c:	000d883a 	mov	r6,zero
  80a790:	0009883a 	mov	r4,zero
  80a794:	003f5d06 	br	80a50c <_realloc_r+0x150>
  80a798:	30c00217 	ldw	r3,8(r6)
  80a79c:	30800317 	ldw	r2,12(r6)
  80a7a0:	800f883a 	mov	r7,r16
  80a7a4:	84000204 	addi	r16,r16,8
  80a7a8:	10c00215 	stw	r3,8(r2)
  80a7ac:	18800315 	stw	r2,12(r3)
  80a7b0:	003f2306 	br	80a440 <_realloc_r+0x84>
  80a7b4:	8809883a 	mov	r4,r17
  80a7b8:	900b883a 	mov	r5,r18
  80a7bc:	0808fec0 	call	808fec <memmove>
  80a7c0:	003fd006 	br	80a704 <_realloc_r+0x348>
  80a7c4:	30800117 	ldw	r2,4(r6)
  80a7c8:	e0c00404 	addi	r3,fp,16
  80a7cc:	1108703a 	and	r4,r2,r4
  80a7d0:	9905883a 	add	r2,r19,r4
  80a7d4:	10ff4d16 	blt	r2,r3,80a50c <_realloc_r+0x150>
  80a7d8:	1705c83a 	sub	r2,r2,fp
  80a7dc:	870b883a 	add	r5,r16,fp
  80a7e0:	10800054 	ori	r2,r2,1
  80a7e4:	28800115 	stw	r2,4(r5)
  80a7e8:	80c00117 	ldw	r3,4(r16)
  80a7ec:	00802074 	movhi	r2,129
  80a7f0:	1095df04 	addi	r2,r2,22396
  80a7f4:	b009883a 	mov	r4,r22
  80a7f8:	18c0004c 	andi	r3,r3,1
  80a7fc:	e0c6b03a 	or	r3,fp,r3
  80a800:	11400215 	stw	r5,8(r2)
  80a804:	80c00115 	stw	r3,4(r16)
  80a808:	08114d80 	call	8114d8 <__malloc_unlock>
  80a80c:	84400204 	addi	r17,r16,8
  80a810:	003f2006 	br	80a494 <_realloc_r+0xd8>
  80a814:	98a9883a 	add	r20,r19,r2
  80a818:	2509883a 	add	r4,r4,r20
  80a81c:	e0800404 	addi	r2,fp,16
  80a820:	d9000115 	stw	r4,4(sp)
  80a824:	20bf7016 	blt	r4,r2,80a5e8 <_realloc_r+0x22c>
  80a828:	b8c00317 	ldw	r3,12(r23)
  80a82c:	b8800217 	ldw	r2,8(r23)
  80a830:	99bfff04 	addi	r6,r19,-4
  80a834:	01400904 	movi	r5,36
  80a838:	18800215 	stw	r2,8(r3)
  80a83c:	10c00315 	stw	r3,12(r2)
  80a840:	bc400204 	addi	r17,r23,8
  80a844:	29804136 	bltu	r5,r6,80a94c <_realloc_r+0x590>
  80a848:	008004c4 	movi	r2,19
  80a84c:	9009883a 	mov	r4,r18
  80a850:	880f883a 	mov	r7,r17
  80a854:	11800f2e 	bgeu	r2,r6,80a894 <_realloc_r+0x4d8>
  80a858:	90800017 	ldw	r2,0(r18)
  80a85c:	b9c00404 	addi	r7,r23,16
  80a860:	91000204 	addi	r4,r18,8
  80a864:	b8800215 	stw	r2,8(r23)
  80a868:	90c00117 	ldw	r3,4(r18)
  80a86c:	008006c4 	movi	r2,27
  80a870:	b8c00315 	stw	r3,12(r23)
  80a874:	1180072e 	bgeu	r2,r6,80a894 <_realloc_r+0x4d8>
  80a878:	90c00217 	ldw	r3,8(r18)
  80a87c:	b9c00604 	addi	r7,r23,24
  80a880:	91000404 	addi	r4,r18,16
  80a884:	b8c00415 	stw	r3,16(r23)
  80a888:	90800317 	ldw	r2,12(r18)
  80a88c:	b8800515 	stw	r2,20(r23)
  80a890:	31404026 	beq	r6,r5,80a994 <_realloc_r+0x5d8>
  80a894:	20800017 	ldw	r2,0(r4)
  80a898:	38800015 	stw	r2,0(r7)
  80a89c:	20c00117 	ldw	r3,4(r4)
  80a8a0:	38c00115 	stw	r3,4(r7)
  80a8a4:	20800217 	ldw	r2,8(r4)
  80a8a8:	38800215 	stw	r2,8(r7)
  80a8ac:	d8c00117 	ldw	r3,4(sp)
  80a8b0:	bf0b883a 	add	r5,r23,fp
  80a8b4:	b009883a 	mov	r4,r22
  80a8b8:	1f05c83a 	sub	r2,r3,fp
  80a8bc:	10800054 	ori	r2,r2,1
  80a8c0:	28800115 	stw	r2,4(r5)
  80a8c4:	b8c00117 	ldw	r3,4(r23)
  80a8c8:	00802074 	movhi	r2,129
  80a8cc:	1095df04 	addi	r2,r2,22396
  80a8d0:	11400215 	stw	r5,8(r2)
  80a8d4:	18c0004c 	andi	r3,r3,1
  80a8d8:	e0c6b03a 	or	r3,fp,r3
  80a8dc:	b8c00115 	stw	r3,4(r23)
  80a8e0:	08114d80 	call	8114d8 <__malloc_unlock>
  80a8e4:	003eeb06 	br	80a494 <_realloc_r+0xd8>
  80a8e8:	20800117 	ldw	r2,4(r4)
  80a8ec:	00ffff04 	movi	r3,-4
  80a8f0:	800f883a 	mov	r7,r16
  80a8f4:	10c4703a 	and	r2,r2,r3
  80a8f8:	98a9883a 	add	r20,r19,r2
  80a8fc:	84000204 	addi	r16,r16,8
  80a900:	003ecf06 	br	80a440 <_realloc_r+0x84>
  80a904:	900b883a 	mov	r5,r18
  80a908:	8009883a 	mov	r4,r16
  80a90c:	0808fec0 	call	808fec <memmove>
  80a910:	dd000017 	ldw	r20,0(sp)
  80a914:	b80f883a 	mov	r7,r23
  80a918:	003ec906 	br	80a440 <_realloc_r+0x84>
  80a91c:	900b883a 	mov	r5,r18
  80a920:	8009883a 	mov	r4,r16
  80a924:	0808fec0 	call	808fec <memmove>
  80a928:	b80f883a 	mov	r7,r23
  80a92c:	003ec406 	br	80a440 <_realloc_r+0x84>
  80a930:	90c00417 	ldw	r3,16(r18)
  80a934:	89400604 	addi	r5,r17,24
  80a938:	91000604 	addi	r4,r18,24
  80a93c:	88c00415 	stw	r3,16(r17)
  80a940:	90800517 	ldw	r2,20(r18)
  80a944:	88800515 	stw	r2,20(r17)
  80a948:	003f6806 	br	80a6ec <_realloc_r+0x330>
  80a94c:	900b883a 	mov	r5,r18
  80a950:	8809883a 	mov	r4,r17
  80a954:	0808fec0 	call	808fec <memmove>
  80a958:	003fd406 	br	80a8ac <_realloc_r+0x4f0>
  80a95c:	90c00417 	ldw	r3,16(r18)
  80a960:	91000604 	addi	r4,r18,24
  80a964:	ba000804 	addi	r8,r23,32
  80a968:	b8c00615 	stw	r3,24(r23)
  80a96c:	90800517 	ldw	r2,20(r18)
  80a970:	b8800715 	stw	r2,28(r23)
  80a974:	003f1206 	br	80a5c0 <_realloc_r+0x204>
  80a978:	90c00417 	ldw	r3,16(r18)
  80a97c:	91000604 	addi	r4,r18,24
  80a980:	ba000804 	addi	r8,r23,32
  80a984:	b8c00615 	stw	r3,24(r23)
  80a988:	90800517 	ldw	r2,20(r18)
  80a98c:	b8800715 	stw	r2,28(r23)
  80a990:	003f3206 	br	80a65c <_realloc_r+0x2a0>
  80a994:	90c00417 	ldw	r3,16(r18)
  80a998:	91000604 	addi	r4,r18,24
  80a99c:	b9c00804 	addi	r7,r23,32
  80a9a0:	b8c00615 	stw	r3,24(r23)
  80a9a4:	90800517 	ldw	r2,20(r18)
  80a9a8:	b8800715 	stw	r2,28(r23)
  80a9ac:	003fb906 	br	80a894 <_realloc_r+0x4d8>

0080a9b0 <__isinfd>:
  80a9b0:	200d883a 	mov	r6,r4
  80a9b4:	0109c83a 	sub	r4,zero,r4
  80a9b8:	2188b03a 	or	r4,r4,r6
  80a9bc:	2008d7fa 	srli	r4,r4,31
  80a9c0:	00a00034 	movhi	r2,32768
  80a9c4:	10bfffc4 	addi	r2,r2,-1
  80a9c8:	1144703a 	and	r2,r2,r5
  80a9cc:	2088b03a 	or	r4,r4,r2
  80a9d0:	009ffc34 	movhi	r2,32752
  80a9d4:	1105c83a 	sub	r2,r2,r4
  80a9d8:	0087c83a 	sub	r3,zero,r2
  80a9dc:	10c4b03a 	or	r2,r2,r3
  80a9e0:	1004d7fa 	srli	r2,r2,31
  80a9e4:	00c00044 	movi	r3,1
  80a9e8:	1885c83a 	sub	r2,r3,r2
  80a9ec:	f800283a 	ret

0080a9f0 <__isnand>:
  80a9f0:	200d883a 	mov	r6,r4
  80a9f4:	0109c83a 	sub	r4,zero,r4
  80a9f8:	2188b03a 	or	r4,r4,r6
  80a9fc:	2008d7fa 	srli	r4,r4,31
  80aa00:	00a00034 	movhi	r2,32768
  80aa04:	10bfffc4 	addi	r2,r2,-1
  80aa08:	1144703a 	and	r2,r2,r5
  80aa0c:	2088b03a 	or	r4,r4,r2
  80aa10:	009ffc34 	movhi	r2,32752
  80aa14:	1105c83a 	sub	r2,r2,r4
  80aa18:	1004d7fa 	srli	r2,r2,31
  80aa1c:	f800283a 	ret

0080aa20 <__sccl>:
  80aa20:	28c00003 	ldbu	r3,0(r5)
  80aa24:	00801784 	movi	r2,94
  80aa28:	2a000044 	addi	r8,r5,1
  80aa2c:	18802526 	beq	r3,r2,80aac4 <__sccl+0xa4>
  80aa30:	180f883a 	mov	r7,r3
  80aa34:	0013883a 	mov	r9,zero
  80aa38:	000d883a 	mov	r6,zero
  80aa3c:	0007883a 	mov	r3,zero
  80aa40:	01404004 	movi	r5,256
  80aa44:	1905883a 	add	r2,r3,r4
  80aa48:	18c00044 	addi	r3,r3,1
  80aa4c:	11800005 	stb	r6,0(r2)
  80aa50:	197ffc1e 	bne	r3,r5,80aa44 <__sccl+0x24>
  80aa54:	38000c26 	beq	r7,zero,80aa88 <__sccl+0x68>
  80aa58:	00800044 	movi	r2,1
  80aa5c:	124dc83a 	sub	r6,r2,r9
  80aa60:	3905883a 	add	r2,r7,r4
  80aa64:	11800005 	stb	r6,0(r2)
  80aa68:	41400044 	addi	r5,r8,1
  80aa6c:	02400b44 	movi	r9,45
  80aa70:	02801744 	movi	r10,93
  80aa74:	28bfffc3 	ldbu	r2,-1(r5)
  80aa78:	2811883a 	mov	r8,r5
  80aa7c:	12400726 	beq	r2,r9,80aa9c <__sccl+0x7c>
  80aa80:	12800226 	beq	r2,r10,80aa8c <__sccl+0x6c>
  80aa84:	1000031e 	bne	r2,zero,80aa94 <__sccl+0x74>
  80aa88:	423fffc4 	addi	r8,r8,-1
  80aa8c:	4005883a 	mov	r2,r8
  80aa90:	f800283a 	ret
  80aa94:	100f883a 	mov	r7,r2
  80aa98:	003ff106 	br	80aa60 <__sccl+0x40>
  80aa9c:	28c00003 	ldbu	r3,0(r5)
  80aaa0:	1a800d26 	beq	r3,r10,80aad8 <__sccl+0xb8>
  80aaa4:	19c00c16 	blt	r3,r7,80aad8 <__sccl+0xb8>
  80aaa8:	21c5883a 	add	r2,r4,r7
  80aaac:	39c00044 	addi	r7,r7,1
  80aab0:	11800045 	stb	r6,1(r2)
  80aab4:	10800044 	addi	r2,r2,1
  80aab8:	38fffc16 	blt	r7,r3,80aaac <__sccl+0x8c>
  80aabc:	29400084 	addi	r5,r5,2
  80aac0:	003fec06 	br	80aa74 <__sccl+0x54>
  80aac4:	29c00043 	ldbu	r7,1(r5)
  80aac8:	02400044 	movi	r9,1
  80aacc:	2a000084 	addi	r8,r5,2
  80aad0:	480d883a 	mov	r6,r9
  80aad4:	003fd906 	br	80aa3c <__sccl+0x1c>
  80aad8:	01c00b44 	movi	r7,45
  80aadc:	003fe006 	br	80aa60 <__sccl+0x40>

0080aae0 <nanf>:
  80aae0:	009ff034 	movhi	r2,32704
  80aae4:	f800283a 	ret

0080aae8 <sprintf>:
  80aae8:	deffe504 	addi	sp,sp,-108
  80aaec:	2013883a 	mov	r9,r4
  80aaf0:	dfc01815 	stw	ra,96(sp)
  80aaf4:	d9801915 	stw	r6,100(sp)
  80aaf8:	d9c01a15 	stw	r7,104(sp)
  80aafc:	d8801904 	addi	r2,sp,100
  80ab00:	d8800015 	stw	r2,0(sp)
  80ab04:	00802074 	movhi	r2,129
  80ab08:	109bb804 	addi	r2,r2,28384
  80ab0c:	11000017 	ldw	r4,0(r2)
  80ab10:	d9c00017 	ldw	r7,0(sp)
  80ab14:	00808204 	movi	r2,520
  80ab18:	00e00034 	movhi	r3,32768
  80ab1c:	18ffffc4 	addi	r3,r3,-1
  80ab20:	280d883a 	mov	r6,r5
  80ab24:	d880040d 	sth	r2,16(sp)
  80ab28:	d9400104 	addi	r5,sp,4
  80ab2c:	00bfffc4 	movi	r2,-1
  80ab30:	d8c00615 	stw	r3,24(sp)
  80ab34:	d8c00315 	stw	r3,12(sp)
  80ab38:	da400515 	stw	r9,20(sp)
  80ab3c:	d880048d 	sth	r2,18(sp)
  80ab40:	da400115 	stw	r9,4(sp)
  80ab44:	080337c0 	call	80337c <___vfprintf_internal_r>
  80ab48:	d8c00117 	ldw	r3,4(sp)
  80ab4c:	18000005 	stb	zero,0(r3)
  80ab50:	dfc01817 	ldw	ra,96(sp)
  80ab54:	dec01b04 	addi	sp,sp,108
  80ab58:	f800283a 	ret

0080ab5c <_sprintf_r>:
  80ab5c:	deffe604 	addi	sp,sp,-104
  80ab60:	2813883a 	mov	r9,r5
  80ab64:	dfc01815 	stw	ra,96(sp)
  80ab68:	d9c01915 	stw	r7,100(sp)
  80ab6c:	d8801904 	addi	r2,sp,100
  80ab70:	d8800015 	stw	r2,0(sp)
  80ab74:	100f883a 	mov	r7,r2
  80ab78:	00808204 	movi	r2,520
  80ab7c:	00e00034 	movhi	r3,32768
  80ab80:	18ffffc4 	addi	r3,r3,-1
  80ab84:	d880040d 	sth	r2,16(sp)
  80ab88:	d9400104 	addi	r5,sp,4
  80ab8c:	00bfffc4 	movi	r2,-1
  80ab90:	d8c00615 	stw	r3,24(sp)
  80ab94:	d8c00315 	stw	r3,12(sp)
  80ab98:	da400515 	stw	r9,20(sp)
  80ab9c:	d880048d 	sth	r2,18(sp)
  80aba0:	da400115 	stw	r9,4(sp)
  80aba4:	080337c0 	call	80337c <___vfprintf_internal_r>
  80aba8:	d8c00117 	ldw	r3,4(sp)
  80abac:	18000005 	stb	zero,0(r3)
  80abb0:	dfc01817 	ldw	ra,96(sp)
  80abb4:	dec01a04 	addi	sp,sp,104
  80abb8:	f800283a 	ret

0080abbc <strcmp>:
  80abbc:	2144b03a 	or	r2,r4,r5
  80abc0:	108000cc 	andi	r2,r2,3
  80abc4:	10001d1e 	bne	r2,zero,80ac3c <strcmp+0x80>
  80abc8:	200f883a 	mov	r7,r4
  80abcc:	28800017 	ldw	r2,0(r5)
  80abd0:	21000017 	ldw	r4,0(r4)
  80abd4:	280d883a 	mov	r6,r5
  80abd8:	2080161e 	bne	r4,r2,80ac34 <strcmp+0x78>
  80abdc:	023fbff4 	movhi	r8,65279
  80abe0:	423fbfc4 	addi	r8,r8,-257
  80abe4:	2207883a 	add	r3,r4,r8
  80abe8:	01602074 	movhi	r5,32897
  80abec:	29602004 	addi	r5,r5,-32640
  80abf0:	1946703a 	and	r3,r3,r5
  80abf4:	0104303a 	nor	r2,zero,r4
  80abf8:	10c4703a 	and	r2,r2,r3
  80abfc:	10001c1e 	bne	r2,zero,80ac70 <strcmp+0xb4>
  80ac00:	4013883a 	mov	r9,r8
  80ac04:	2811883a 	mov	r8,r5
  80ac08:	00000106 	br	80ac10 <strcmp+0x54>
  80ac0c:	1800181e 	bne	r3,zero,80ac70 <strcmp+0xb4>
  80ac10:	39c00104 	addi	r7,r7,4
  80ac14:	39000017 	ldw	r4,0(r7)
  80ac18:	31800104 	addi	r6,r6,4
  80ac1c:	31400017 	ldw	r5,0(r6)
  80ac20:	2245883a 	add	r2,r4,r9
  80ac24:	1204703a 	and	r2,r2,r8
  80ac28:	0106303a 	nor	r3,zero,r4
  80ac2c:	1886703a 	and	r3,r3,r2
  80ac30:	217ff626 	beq	r4,r5,80ac0c <strcmp+0x50>
  80ac34:	3809883a 	mov	r4,r7
  80ac38:	300b883a 	mov	r5,r6
  80ac3c:	20c00007 	ldb	r3,0(r4)
  80ac40:	1800051e 	bne	r3,zero,80ac58 <strcmp+0x9c>
  80ac44:	00000606 	br	80ac60 <strcmp+0xa4>
  80ac48:	21000044 	addi	r4,r4,1
  80ac4c:	20c00007 	ldb	r3,0(r4)
  80ac50:	29400044 	addi	r5,r5,1
  80ac54:	18000226 	beq	r3,zero,80ac60 <strcmp+0xa4>
  80ac58:	28800007 	ldb	r2,0(r5)
  80ac5c:	18bffa26 	beq	r3,r2,80ac48 <strcmp+0x8c>
  80ac60:	20c00003 	ldbu	r3,0(r4)
  80ac64:	28800003 	ldbu	r2,0(r5)
  80ac68:	1885c83a 	sub	r2,r3,r2
  80ac6c:	f800283a 	ret
  80ac70:	0005883a 	mov	r2,zero
  80ac74:	f800283a 	ret

0080ac78 <match>:
  80ac78:	21800017 	ldw	r6,0(r4)
  80ac7c:	01c01004 	movi	r7,64
  80ac80:	02001684 	movi	r8,90
  80ac84:	28800007 	ldb	r2,0(r5)
  80ac88:	29400044 	addi	r5,r5,1
  80ac8c:	10000826 	beq	r2,zero,80acb0 <match+0x38>
  80ac90:	31800044 	addi	r6,r6,1
  80ac94:	30c00007 	ldb	r3,0(r6)
  80ac98:	38c0020e 	bge	r7,r3,80aca4 <match+0x2c>
  80ac9c:	40c00116 	blt	r8,r3,80aca4 <match+0x2c>
  80aca0:	18c00804 	addi	r3,r3,32
  80aca4:	18bff726 	beq	r3,r2,80ac84 <match+0xc>
  80aca8:	0005883a 	mov	r2,zero
  80acac:	f800283a 	ret
  80acb0:	30800044 	addi	r2,r6,1
  80acb4:	20800015 	stw	r2,0(r4)
  80acb8:	00800044 	movi	r2,1
  80acbc:	f800283a 	ret

0080acc0 <_strtod_r>:
  80acc0:	deffd504 	addi	sp,sp,-172
  80acc4:	df002915 	stw	fp,164(sp)
  80acc8:	dd402615 	stw	r21,152(sp)
  80accc:	dd002515 	stw	r20,148(sp)
  80acd0:	dfc02a15 	stw	ra,168(sp)
  80acd4:	ddc02815 	stw	r23,160(sp)
  80acd8:	dd802715 	stw	r22,156(sp)
  80acdc:	dcc02415 	stw	r19,144(sp)
  80ace0:	dc802315 	stw	r18,140(sp)
  80ace4:	dc402215 	stw	r17,136(sp)
  80ace8:	dc002115 	stw	r16,132(sp)
  80acec:	2829883a 	mov	r20,r5
  80acf0:	202b883a 	mov	r21,r4
  80acf4:	d9801d15 	stw	r6,116(sp)
  80acf8:	d8000915 	stw	zero,36(sp)
  80acfc:	d8000a15 	stw	zero,40(sp)
  80ad00:	d9400415 	stw	r5,16(sp)
  80ad04:	df000904 	addi	fp,sp,36
  80ad08:	dc000417 	ldw	r16,16(sp)
  80ad0c:	00800b44 	movi	r2,45
  80ad10:	80c00003 	ldbu	r3,0(r16)
  80ad14:	10c03536 	bltu	r2,r3,80adec <_strtod_r+0x12c>
  80ad18:	18c5883a 	add	r2,r3,r3
  80ad1c:	1085883a 	add	r2,r2,r2
  80ad20:	00c02074 	movhi	r3,129
  80ad24:	18eb4d04 	addi	r3,r3,-21196
  80ad28:	10c5883a 	add	r2,r2,r3
  80ad2c:	11000017 	ldw	r4,0(r2)
  80ad30:	2000683a 	jmp	r4
  80ad34:	0080af6c 	andhi	r2,zero,701
  80ad38:	0080adec 	andhi	r2,zero,695
  80ad3c:	0080adec 	andhi	r2,zero,695
  80ad40:	0080adec 	andhi	r2,zero,695
  80ad44:	0080adec 	andhi	r2,zero,695
  80ad48:	0080adec 	andhi	r2,zero,695
  80ad4c:	0080adec 	andhi	r2,zero,695
  80ad50:	0080adec 	andhi	r2,zero,695
  80ad54:	0080adec 	andhi	r2,zero,695
  80ad58:	0080b2b4 	movhi	r2,714
  80ad5c:	0080b2b4 	movhi	r2,714
  80ad60:	0080b2b4 	movhi	r2,714
  80ad64:	0080b2b4 	movhi	r2,714
  80ad68:	0080b2b4 	movhi	r2,714
  80ad6c:	0080adec 	andhi	r2,zero,695
  80ad70:	0080adec 	andhi	r2,zero,695
  80ad74:	0080adec 	andhi	r2,zero,695
  80ad78:	0080adec 	andhi	r2,zero,695
  80ad7c:	0080adec 	andhi	r2,zero,695
  80ad80:	0080adec 	andhi	r2,zero,695
  80ad84:	0080adec 	andhi	r2,zero,695
  80ad88:	0080adec 	andhi	r2,zero,695
  80ad8c:	0080adec 	andhi	r2,zero,695
  80ad90:	0080adec 	andhi	r2,zero,695
  80ad94:	0080adec 	andhi	r2,zero,695
  80ad98:	0080adec 	andhi	r2,zero,695
  80ad9c:	0080adec 	andhi	r2,zero,695
  80ada0:	0080adec 	andhi	r2,zero,695
  80ada4:	0080adec 	andhi	r2,zero,695
  80ada8:	0080adec 	andhi	r2,zero,695
  80adac:	0080adec 	andhi	r2,zero,695
  80adb0:	0080adec 	andhi	r2,zero,695
  80adb4:	0080b2b4 	movhi	r2,714
  80adb8:	0080adec 	andhi	r2,zero,695
  80adbc:	0080adec 	andhi	r2,zero,695
  80adc0:	0080adec 	andhi	r2,zero,695
  80adc4:	0080adec 	andhi	r2,zero,695
  80adc8:	0080adec 	andhi	r2,zero,695
  80adcc:	0080adec 	andhi	r2,zero,695
  80add0:	0080adec 	andhi	r2,zero,695
  80add4:	0080adec 	andhi	r2,zero,695
  80add8:	0080adec 	andhi	r2,zero,695
  80addc:	0080adec 	andhi	r2,zero,695
  80ade0:	0080b294 	movui	r2,714
  80ade4:	0080adec 	andhi	r2,zero,695
  80ade8:	0080b2c0 	call	80b2c <__reset-0x77f4d4>
  80adec:	d8001515 	stw	zero,84(sp)
  80adf0:	80c00007 	ldb	r3,0(r16)
  80adf4:	00800c04 	movi	r2,48
  80adf8:	1880e926 	beq	r3,r2,80b1a0 <_strtod_r+0x4e0>
  80adfc:	d8001615 	stw	zero,88(sp)
  80ae00:	dc001415 	stw	r16,80(sp)
  80ae04:	84400007 	ldb	r17,0(r16)
  80ae08:	00800bc4 	movi	r2,47
  80ae0c:	1443760e 	bge	r2,r17,80bbe8 <_strtod_r+0xf28>
  80ae10:	00800e44 	movi	r2,57
  80ae14:	14437416 	blt	r2,r17,80bbe8 <_strtod_r+0xf28>
  80ae18:	8025883a 	mov	r18,r16
  80ae1c:	0027883a 	mov	r19,zero
  80ae20:	d8001215 	stw	zero,72(sp)
  80ae24:	d8001115 	stw	zero,68(sp)
  80ae28:	00000f06 	br	80ae68 <_strtod_r+0x1a8>
  80ae2c:	d9001217 	ldw	r4,72(sp)
  80ae30:	01400284 	movi	r5,10
  80ae34:	08102900 	call	810290 <__mulsi3>
  80ae38:	1445883a 	add	r2,r2,r17
  80ae3c:	10bff404 	addi	r2,r2,-48
  80ae40:	d8801215 	stw	r2,72(sp)
  80ae44:	94000044 	addi	r16,r18,1
  80ae48:	dc000415 	stw	r16,16(sp)
  80ae4c:	84400007 	ldb	r17,0(r16)
  80ae50:	00800bc4 	movi	r2,47
  80ae54:	9cc00044 	addi	r19,r19,1
  80ae58:	8025883a 	mov	r18,r16
  80ae5c:	1440130e 	bge	r2,r17,80aeac <_strtod_r+0x1ec>
  80ae60:	00800e44 	movi	r2,57
  80ae64:	14401116 	blt	r2,r17,80aeac <_strtod_r+0x1ec>
  80ae68:	00800204 	movi	r2,8
  80ae6c:	14ffef0e 	bge	r2,r19,80ae2c <_strtod_r+0x16c>
  80ae70:	008003c4 	movi	r2,15
  80ae74:	14fff316 	blt	r2,r19,80ae44 <_strtod_r+0x184>
  80ae78:	d9001117 	ldw	r4,68(sp)
  80ae7c:	01400284 	movi	r5,10
  80ae80:	94000044 	addi	r16,r18,1
  80ae84:	08102900 	call	810290 <__mulsi3>
  80ae88:	1445883a 	add	r2,r2,r17
  80ae8c:	10bff404 	addi	r2,r2,-48
  80ae90:	d8801115 	stw	r2,68(sp)
  80ae94:	dc000415 	stw	r16,16(sp)
  80ae98:	84400007 	ldb	r17,0(r16)
  80ae9c:	00800bc4 	movi	r2,47
  80aea0:	9cc00044 	addi	r19,r19,1
  80aea4:	8025883a 	mov	r18,r16
  80aea8:	147fed16 	blt	r2,r17,80ae60 <_strtod_r+0x1a0>
  80aeac:	00800b84 	movi	r2,46
  80aeb0:	8880c926 	beq	r17,r2,80b1d8 <_strtod_r+0x518>
  80aeb4:	dcc01815 	stw	r19,96(sp)
  80aeb8:	d8001b15 	stw	zero,108(sp)
  80aebc:	d8001715 	stw	zero,92(sp)
  80aec0:	000d883a 	mov	r6,zero
  80aec4:	00801944 	movi	r2,101
  80aec8:	88802126 	beq	r17,r2,80af50 <_strtod_r+0x290>
  80aecc:	00801144 	movi	r2,69
  80aed0:	88801f26 	beq	r17,r2,80af50 <_strtod_r+0x290>
  80aed4:	d9001817 	ldw	r4,96(sp)
  80aed8:	2024c03a 	cmpne	r18,r4,zero
  80aedc:	0009883a 	mov	r4,zero
  80aee0:	9000651e 	bne	r18,zero,80b078 <_strtod_r+0x3b8>
  80aee4:	3000c926 	beq	r6,zero,80b20c <_strtod_r+0x54c>
  80aee8:	d8801d17 	ldw	r2,116(sp)
  80aeec:	10000326 	beq	r2,zero,80aefc <_strtod_r+0x23c>
  80aef0:	d8800417 	ldw	r2,16(sp)
  80aef4:	d8c01d17 	ldw	r3,116(sp)
  80aef8:	18800015 	stw	r2,0(r3)
  80aefc:	d9001517 	ldw	r4,84(sp)
  80af00:	2005003a 	cmpeq	r2,r4,zero
  80af04:	10001c1e 	bne	r2,zero,80af78 <_strtod_r+0x2b8>
  80af08:	e0800017 	ldw	r2,0(fp)
  80af0c:	e0c00117 	ldw	r3,4(fp)
  80af10:	1009883a 	mov	r4,r2
  80af14:	1960003c 	xorhi	r5,r3,32768
  80af18:	2005883a 	mov	r2,r4
  80af1c:	2807883a 	mov	r3,r5
  80af20:	dfc02a17 	ldw	ra,168(sp)
  80af24:	df002917 	ldw	fp,164(sp)
  80af28:	ddc02817 	ldw	r23,160(sp)
  80af2c:	dd802717 	ldw	r22,156(sp)
  80af30:	dd402617 	ldw	r21,152(sp)
  80af34:	dd002517 	ldw	r20,148(sp)
  80af38:	dcc02417 	ldw	r19,144(sp)
  80af3c:	dc802317 	ldw	r18,140(sp)
  80af40:	dc402217 	ldw	r17,136(sp)
  80af44:	dc002117 	ldw	r16,132(sp)
  80af48:	dec02b04 	addi	sp,sp,172
  80af4c:	f800283a 	ret
  80af50:	d8801817 	ldw	r2,96(sp)
  80af54:	1024c03a 	cmpne	r18,r2,zero
  80af58:	90000a1e 	bne	r18,zero,80af84 <_strtod_r+0x2c4>
  80af5c:	3000091e 	bne	r6,zero,80af84 <_strtod_r+0x2c4>
  80af60:	d8c01617 	ldw	r3,88(sp)
  80af64:	1805003a 	cmpeq	r2,r3,zero
  80af68:	10000626 	beq	r2,zero,80af84 <_strtod_r+0x2c4>
  80af6c:	d8001515 	stw	zero,84(sp)
  80af70:	dd000415 	stw	r20,16(sp)
  80af74:	003fdc06 	br	80aee8 <_strtod_r+0x228>
  80af78:	e1000017 	ldw	r4,0(fp)
  80af7c:	e1400117 	ldw	r5,4(fp)
  80af80:	003fe506 	br	80af18 <_strtod_r+0x258>
  80af84:	dd000417 	ldw	r20,16(sp)
  80af88:	00800ac4 	movi	r2,43
  80af8c:	a4000044 	addi	r16,r20,1
  80af90:	dc000415 	stw	r16,16(sp)
  80af94:	a0c00047 	ldb	r3,1(r20)
  80af98:	8009883a 	mov	r4,r16
  80af9c:	1880cb26 	beq	r3,r2,80b2cc <_strtod_r+0x60c>
  80afa0:	00800b44 	movi	r2,45
  80afa4:	18838326 	beq	r3,r2,80bdb4 <_strtod_r+0x10f4>
  80afa8:	1823883a 	mov	r17,r3
  80afac:	88fff404 	addi	r3,r17,-48
  80afb0:	00800244 	movi	r2,9
  80afb4:	d8001915 	stw	zero,100(sp)
  80afb8:	10c0cb36 	bltu	r2,r3,80b2e8 <_strtod_r+0x628>
  80afbc:	00800c04 	movi	r2,48
  80afc0:	8880061e 	bne	r17,r2,80afdc <_strtod_r+0x31c>
  80afc4:	dc000417 	ldw	r16,16(sp)
  80afc8:	8805883a 	mov	r2,r17
  80afcc:	84000044 	addi	r16,r16,1
  80afd0:	dc000415 	stw	r16,16(sp)
  80afd4:	84400007 	ldb	r17,0(r16)
  80afd8:	88bffc26 	beq	r17,r2,80afcc <_strtod_r+0x30c>
  80afdc:	88fff3c4 	addi	r3,r17,-49
  80afe0:	00800204 	movi	r2,8
  80afe4:	10ffbd36 	bltu	r2,r3,80aedc <_strtod_r+0x21c>
  80afe8:	dc000417 	ldw	r16,16(sp)
  80afec:	893ff404 	addi	r4,r17,-48
  80aff0:	00c00bc4 	movi	r3,47
  80aff4:	dc001315 	stw	r16,76(sp)
  80aff8:	84000044 	addi	r16,r16,1
  80affc:	dc000415 	stw	r16,16(sp)
  80b000:	84400007 	ldb	r17,0(r16)
  80b004:	1c40100e 	bge	r3,r17,80b048 <_strtod_r+0x388>
  80b008:	00800e44 	movi	r2,57
  80b00c:	14400e16 	blt	r2,r17,80b048 <_strtod_r+0x388>
  80b010:	182f883a 	mov	r23,r3
  80b014:	102d883a 	mov	r22,r2
  80b018:	00000106 	br	80b020 <_strtod_r+0x360>
  80b01c:	b4400a16 	blt	r22,r17,80b048 <_strtod_r+0x388>
  80b020:	84000044 	addi	r16,r16,1
  80b024:	01400284 	movi	r5,10
  80b028:	d9802015 	stw	r6,128(sp)
  80b02c:	08102900 	call	810290 <__mulsi3>
  80b030:	dc000415 	stw	r16,16(sp)
  80b034:	8885883a 	add	r2,r17,r2
  80b038:	84400007 	ldb	r17,0(r16)
  80b03c:	113ff404 	addi	r4,r2,-48
  80b040:	d9802017 	ldw	r6,128(sp)
  80b044:	bc7ff516 	blt	r23,r17,80b01c <_strtod_r+0x35c>
  80b048:	d8801317 	ldw	r2,76(sp)
  80b04c:	8087c83a 	sub	r3,r16,r2
  80b050:	00800204 	movi	r2,8
  80b054:	10c2ff16 	blt	r2,r3,80bc54 <_strtod_r+0xf94>
  80b058:	009387c4 	movi	r2,19999
  80b05c:	1100010e 	bge	r2,r4,80b064 <_strtod_r+0x3a4>
  80b060:	1009883a 	mov	r4,r2
  80b064:	d8c01917 	ldw	r3,100(sp)
  80b068:	1805003a 	cmpeq	r2,r3,zero
  80b06c:	103f9c1e 	bne	r2,zero,80aee0 <_strtod_r+0x220>
  80b070:	0109c83a 	sub	r4,zero,r4
  80b074:	903f9b26 	beq	r18,zero,80aee4 <_strtod_r+0x224>
  80b078:	d8801717 	ldw	r2,92(sp)
  80b07c:	2089c83a 	sub	r4,r4,r2
  80b080:	d9000f15 	stw	r4,60(sp)
  80b084:	9800811e 	bne	r19,zero,80b28c <_strtod_r+0x5cc>
  80b088:	dd001817 	ldw	r20,96(sp)
  80b08c:	dc801817 	ldw	r18,96(sp)
  80b090:	00800404 	movi	r2,16
  80b094:	1480010e 	bge	r2,r18,80b09c <_strtod_r+0x3dc>
  80b098:	1025883a 	mov	r18,r2
  80b09c:	d9001217 	ldw	r4,72(sp)
  80b0a0:	080ffb00 	call	80ffb0 <__floatunsidf>
  80b0a4:	100f883a 	mov	r7,r2
  80b0a8:	e0800015 	stw	r2,0(fp)
  80b0ac:	00800244 	movi	r2,9
  80b0b0:	e0c00115 	stw	r3,4(fp)
  80b0b4:	1480160e 	bge	r2,r18,80b110 <_strtod_r+0x450>
  80b0b8:	900c90fa 	slli	r6,r18,3
  80b0bc:	01002074 	movhi	r4,129
  80b0c0:	21142604 	addi	r4,r4,20632
  80b0c4:	180b883a 	mov	r5,r3
  80b0c8:	310d883a 	add	r6,r6,r4
  80b0cc:	30ffef17 	ldw	r3,-68(r6)
  80b0d0:	30bfee17 	ldw	r2,-72(r6)
  80b0d4:	3809883a 	mov	r4,r7
  80b0d8:	180f883a 	mov	r7,r3
  80b0dc:	100d883a 	mov	r6,r2
  80b0e0:	080f4200 	call	80f420 <__muldf3>
  80b0e4:	d9001117 	ldw	r4,68(sp)
  80b0e8:	1021883a 	mov	r16,r2
  80b0ec:	1823883a 	mov	r17,r3
  80b0f0:	080ffb00 	call	80ffb0 <__floatunsidf>
  80b0f4:	880b883a 	mov	r5,r17
  80b0f8:	180f883a 	mov	r7,r3
  80b0fc:	8009883a 	mov	r4,r16
  80b100:	100d883a 	mov	r6,r2
  80b104:	080f3ac0 	call	80f3ac <__adddf3>
  80b108:	e0c00115 	stw	r3,4(fp)
  80b10c:	e0800015 	stw	r2,0(fp)
  80b110:	d8c01817 	ldw	r3,96(sp)
  80b114:	010003c4 	movi	r4,15
  80b118:	20c09e16 	blt	r4,r3,80b394 <_strtod_r+0x6d4>
  80b11c:	d8800f17 	ldw	r2,60(sp)
  80b120:	103f7126 	beq	r2,zero,80aee8 <_strtod_r+0x228>
  80b124:	0083d90e 	bge	zero,r2,80c08c <_strtod_r+0x13cc>
  80b128:	d8c00f17 	ldw	r3,60(sp)
  80b12c:	00800584 	movi	r2,22
  80b130:	10c2ca0e 	bge	r2,r3,80bc5c <_strtod_r+0xf9c>
  80b134:	d8801817 	ldw	r2,96(sp)
  80b138:	d8c00f17 	ldw	r3,60(sp)
  80b13c:	20a3c83a 	sub	r17,r4,r2
  80b140:	88800584 	addi	r2,r17,22
  80b144:	10c09316 	blt	r2,r3,80b394 <_strtod_r+0x6d4>
  80b148:	880890fa 	slli	r4,r17,3
  80b14c:	04002074 	movhi	r16,129
  80b150:	84142604 	addi	r16,r16,20632
  80b154:	e0800017 	ldw	r2,0(fp)
  80b158:	2409883a 	add	r4,r4,r16
  80b15c:	22000017 	ldw	r8,0(r4)
  80b160:	22400117 	ldw	r9,4(r4)
  80b164:	e0c00117 	ldw	r3,4(fp)
  80b168:	1009883a 	mov	r4,r2
  80b16c:	480f883a 	mov	r7,r9
  80b170:	180b883a 	mov	r5,r3
  80b174:	400d883a 	mov	r6,r8
  80b178:	080f4200 	call	80f420 <__muldf3>
  80b17c:	d9000f17 	ldw	r4,60(sp)
  80b180:	180b883a 	mov	r5,r3
  80b184:	2455c83a 	sub	r10,r4,r17
  80b188:	501490fa 	slli	r10,r10,3
  80b18c:	1009883a 	mov	r4,r2
  80b190:	5415883a 	add	r10,r10,r16
  80b194:	52000017 	ldw	r8,0(r10)
  80b198:	52400117 	ldw	r9,4(r10)
  80b19c:	0002b906 	br	80bc84 <_strtod_r+0xfc4>
  80b1a0:	80c00047 	ldb	r3,1(r16)
  80b1a4:	00801604 	movi	r2,88
  80b1a8:	18805226 	beq	r3,r2,80b2f4 <_strtod_r+0x634>
  80b1ac:	00801e04 	movi	r2,120
  80b1b0:	18805026 	beq	r3,r2,80b2f4 <_strtod_r+0x634>
  80b1b4:	84000044 	addi	r16,r16,1
  80b1b8:	dc000415 	stw	r16,16(sp)
  80b1bc:	80c00007 	ldb	r3,0(r16)
  80b1c0:	00800c04 	movi	r2,48
  80b1c4:	18bffb26 	beq	r3,r2,80b1b4 <_strtod_r+0x4f4>
  80b1c8:	183f4726 	beq	r3,zero,80aee8 <_strtod_r+0x228>
  80b1cc:	01000044 	movi	r4,1
  80b1d0:	d9001615 	stw	r4,88(sp)
  80b1d4:	003f0a06 	br	80ae00 <_strtod_r+0x140>
  80b1d8:	84000044 	addi	r16,r16,1
  80b1dc:	dc000415 	stw	r16,16(sp)
  80b1e0:	94400047 	ldb	r17,1(r18)
  80b1e4:	9800ba26 	beq	r19,zero,80b4d0 <_strtod_r+0x810>
  80b1e8:	dcc01815 	stw	r19,96(sp)
  80b1ec:	d8001715 	stw	zero,92(sp)
  80b1f0:	000d883a 	mov	r6,zero
  80b1f4:	8dbff404 	addi	r22,r17,-48
  80b1f8:	00800244 	movi	r2,9
  80b1fc:	15826e2e 	bgeu	r2,r22,80bbb8 <_strtod_r+0xef8>
  80b200:	01000044 	movi	r4,1
  80b204:	d9001b15 	stw	r4,108(sp)
  80b208:	003f2e06 	br	80aec4 <_strtod_r+0x204>
  80b20c:	d8c01617 	ldw	r3,88(sp)
  80b210:	1804c03a 	cmpne	r2,r3,zero
  80b214:	103f341e 	bne	r2,zero,80aee8 <_strtod_r+0x228>
  80b218:	d9001b17 	ldw	r4,108(sp)
  80b21c:	2004c03a 	cmpne	r2,r4,zero
  80b220:	103f521e 	bne	r2,zero,80af6c <_strtod_r+0x2ac>
  80b224:	00801384 	movi	r2,78
  80b228:	8883b526 	beq	r17,r2,80c100 <_strtod_r+0x1440>
  80b22c:	1443b016 	blt	r2,r17,80c0f0 <_strtod_r+0x1430>
  80b230:	00801244 	movi	r2,73
  80b234:	88bf4d1e 	bne	r17,r2,80af6c <_strtod_r+0x2ac>
  80b238:	dc000404 	addi	r16,sp,16
  80b23c:	8009883a 	mov	r4,r16
  80b240:	01402074 	movhi	r5,129
  80b244:	29546f04 	addi	r5,r5,20924
  80b248:	080ac780 	call	80ac78 <match>
  80b24c:	103f4726 	beq	r2,zero,80af6c <_strtod_r+0x2ac>
  80b250:	d8800417 	ldw	r2,16(sp)
  80b254:	8009883a 	mov	r4,r16
  80b258:	01402074 	movhi	r5,129
  80b25c:	29547004 	addi	r5,r5,20928
  80b260:	143fffc4 	addi	r16,r2,-1
  80b264:	dc000415 	stw	r16,16(sp)
  80b268:	080ac780 	call	80ac78 <match>
  80b26c:	1000031e 	bne	r2,zero,80b27c <_strtod_r+0x5bc>
  80b270:	d8800417 	ldw	r2,16(sp)
  80b274:	14000044 	addi	r16,r2,1
  80b278:	dc000415 	stw	r16,16(sp)
  80b27c:	019ffc34 	movhi	r6,32752
  80b280:	e1800115 	stw	r6,4(fp)
  80b284:	e0000015 	stw	zero,0(fp)
  80b288:	003f1706 	br	80aee8 <_strtod_r+0x228>
  80b28c:	9829883a 	mov	r20,r19
  80b290:	003f7e06 	br	80b08c <_strtod_r+0x3cc>
  80b294:	d8001515 	stw	zero,84(sp)
  80b298:	84000044 	addi	r16,r16,1
  80b29c:	dc000415 	stw	r16,16(sp)
  80b2a0:	80800007 	ldb	r2,0(r16)
  80b2a4:	103ed21e 	bne	r2,zero,80adf0 <_strtod_r+0x130>
  80b2a8:	d8001515 	stw	zero,84(sp)
  80b2ac:	dd000415 	stw	r20,16(sp)
  80b2b0:	003f0d06 	br	80aee8 <_strtod_r+0x228>
  80b2b4:	84000044 	addi	r16,r16,1
  80b2b8:	dc000415 	stw	r16,16(sp)
  80b2bc:	003e9206 	br	80ad08 <_strtod_r+0x48>
  80b2c0:	00800044 	movi	r2,1
  80b2c4:	d8801515 	stw	r2,84(sp)
  80b2c8:	003ff306 	br	80b298 <_strtod_r+0x5d8>
  80b2cc:	d8001915 	stw	zero,100(sp)
  80b2d0:	84000044 	addi	r16,r16,1
  80b2d4:	dc000415 	stw	r16,16(sp)
  80b2d8:	24400047 	ldb	r17,1(r4)
  80b2dc:	00800244 	movi	r2,9
  80b2e0:	88fff404 	addi	r3,r17,-48
  80b2e4:	10ff352e 	bgeu	r2,r3,80afbc <_strtod_r+0x2fc>
  80b2e8:	0009883a 	mov	r4,zero
  80b2ec:	dd000415 	stw	r20,16(sp)
  80b2f0:	003efb06 	br	80aee0 <_strtod_r+0x220>
  80b2f4:	d8c01517 	ldw	r3,84(sp)
  80b2f8:	04402074 	movhi	r17,129
  80b2fc:	8c56e904 	addi	r17,r17,23460
  80b300:	d8800504 	addi	r2,sp,20
  80b304:	a809883a 	mov	r4,r21
  80b308:	d9400404 	addi	r5,sp,16
  80b30c:	880d883a 	mov	r6,r17
  80b310:	d9c00604 	addi	r7,sp,24
  80b314:	d8800015 	stw	r2,0(sp)
  80b318:	d8c00115 	stw	r3,4(sp)
  80b31c:	080d4900 	call	80d490 <__gethex>
  80b320:	140001cc 	andi	r16,r2,7
  80b324:	1025883a 	mov	r18,r2
  80b328:	803eef26 	beq	r16,zero,80aee8 <_strtod_r+0x228>
  80b32c:	04c00184 	movi	r19,6
  80b330:	84ff0e26 	beq	r16,r19,80af6c <_strtod_r+0x2ac>
  80b334:	d9800517 	ldw	r6,20(sp)
  80b338:	30000626 	beq	r6,zero,80b354 <_strtod_r+0x694>
  80b33c:	89400017 	ldw	r5,0(r17)
  80b340:	d9000d04 	addi	r4,sp,52
  80b344:	080956c0 	call	80956c <__copybits>
  80b348:	d9400517 	ldw	r5,20(sp)
  80b34c:	a809883a 	mov	r4,r21
  80b350:	08090cc0 	call	8090cc <_Bfree>
  80b354:	d9400617 	ldw	r5,24(sp)
  80b358:	9c025436 	bltu	r19,r16,80bcac <_strtod_r+0xfec>
  80b35c:	8405883a 	add	r2,r16,r16
  80b360:	1085883a 	add	r2,r2,r2
  80b364:	00c02074 	movhi	r3,129
  80b368:	18ecde04 	addi	r3,r3,-19592
  80b36c:	10c5883a 	add	r2,r2,r3
  80b370:	11000017 	ldw	r4,0(r2)
  80b374:	2000683a 	jmp	r4
  80b378:	0080bcec 	andhi	r2,zero,755
  80b37c:	0080bcf8 	rdprs	r2,zero,755
  80b380:	0080bc9c 	xori	r2,zero,754
  80b384:	0080bcc4 	movi	r2,755
  80b388:	0080bcd4 	movui	r2,755
  80b38c:	0080bcf8 	rdprs	r2,zero,755
  80b390:	0080bcec 	andhi	r2,zero,755
  80b394:	d9001817 	ldw	r4,96(sp)
  80b398:	d8c00f17 	ldw	r3,60(sp)
  80b39c:	2485c83a 	sub	r2,r4,r18
  80b3a0:	18a1883a 	add	r16,r3,r2
  80b3a4:	0402e80e 	bge	zero,r16,80bf48 <_strtod_r+0x1288>
  80b3a8:	814003cc 	andi	r5,r16,15
  80b3ac:	28000f26 	beq	r5,zero,80b3ec <_strtod_r+0x72c>
  80b3b0:	280a90fa 	slli	r5,r5,3
  80b3b4:	01002074 	movhi	r4,129
  80b3b8:	21142604 	addi	r4,r4,20632
  80b3bc:	e0800017 	ldw	r2,0(fp)
  80b3c0:	290b883a 	add	r5,r5,r4
  80b3c4:	2a000017 	ldw	r8,0(r5)
  80b3c8:	e0c00117 	ldw	r3,4(fp)
  80b3cc:	2a400117 	ldw	r9,4(r5)
  80b3d0:	1009883a 	mov	r4,r2
  80b3d4:	180b883a 	mov	r5,r3
  80b3d8:	480f883a 	mov	r7,r9
  80b3dc:	400d883a 	mov	r6,r8
  80b3e0:	080f4200 	call	80f420 <__muldf3>
  80b3e4:	e0c00115 	stw	r3,4(fp)
  80b3e8:	e0800015 	stw	r2,0(fp)
  80b3ec:	00bffc04 	movi	r2,-16
  80b3f0:	808c703a 	and	r6,r16,r2
  80b3f4:	30006726 	beq	r6,zero,80b594 <_strtod_r+0x8d4>
  80b3f8:	00804d04 	movi	r2,308
  80b3fc:	11820f16 	blt	r2,r6,80bc3c <_strtod_r+0xf7c>
  80b400:	3021d13a 	srai	r16,r6,4
  80b404:	00800044 	movi	r2,1
  80b408:	14037f0e 	bge	r2,r16,80c208 <_strtod_r+0x1548>
  80b40c:	05802074 	movhi	r22,129
  80b410:	b5945804 	addi	r22,r22,20832
  80b414:	1027883a 	mov	r19,r2
  80b418:	0025883a 	mov	r18,zero
  80b41c:	b023883a 	mov	r17,r22
  80b420:	8080004c 	andi	r2,r16,1
  80b424:	1005003a 	cmpeq	r2,r2,zero
  80b428:	1000091e 	bne	r2,zero,80b450 <_strtod_r+0x790>
  80b42c:	e0800017 	ldw	r2,0(fp)
  80b430:	e0c00117 	ldw	r3,4(fp)
  80b434:	89800017 	ldw	r6,0(r17)
  80b438:	89c00117 	ldw	r7,4(r17)
  80b43c:	180b883a 	mov	r5,r3
  80b440:	1009883a 	mov	r4,r2
  80b444:	080f4200 	call	80f420 <__muldf3>
  80b448:	e0c00115 	stw	r3,4(fp)
  80b44c:	e0800015 	stw	r2,0(fp)
  80b450:	8021d07a 	srai	r16,r16,1
  80b454:	94800044 	addi	r18,r18,1
  80b458:	8c400204 	addi	r17,r17,8
  80b45c:	9c3ff016 	blt	r19,r16,80b420 <_strtod_r+0x760>
  80b460:	900e90fa 	slli	r7,r18,3
  80b464:	e2000117 	ldw	r8,4(fp)
  80b468:	e1000017 	ldw	r4,0(fp)
  80b46c:	3d8f883a 	add	r7,r7,r22
  80b470:	38800017 	ldw	r2,0(r7)
  80b474:	38c00117 	ldw	r3,4(r7)
  80b478:	01bf2c34 	movhi	r6,64688
  80b47c:	418d883a 	add	r6,r8,r6
  80b480:	300b883a 	mov	r5,r6
  80b484:	180f883a 	mov	r7,r3
  80b488:	100d883a 	mov	r6,r2
  80b48c:	080f4200 	call	80f420 <__muldf3>
  80b490:	1009883a 	mov	r4,r2
  80b494:	180b883a 	mov	r5,r3
  80b498:	199ffc2c 	andhi	r6,r3,32752
  80b49c:	009f2834 	movhi	r2,31904
  80b4a0:	e1000015 	stw	r4,0(fp)
  80b4a4:	e1400115 	stw	r5,4(fp)
  80b4a8:	1181e436 	bltu	r2,r6,80bc3c <_strtod_r+0xf7c>
  80b4ac:	009f2434 	movhi	r2,31888
  80b4b0:	11833f2e 	bgeu	r2,r6,80c1b0 <_strtod_r+0x14f0>
  80b4b4:	d8001c15 	stw	zero,112(sp)
  80b4b8:	019ffc34 	movhi	r6,32752
  80b4bc:	31bfffc4 	addi	r6,r6,-1
  80b4c0:	01ffffc4 	movi	r7,-1
  80b4c4:	e1800115 	stw	r6,4(fp)
  80b4c8:	e1c00015 	stw	r7,0(fp)
  80b4cc:	00003206 	br	80b598 <_strtod_r+0x8d8>
  80b4d0:	00800c04 	movi	r2,48
  80b4d4:	8883221e 	bne	r17,r2,80c160 <_strtod_r+0x14a0>
  80b4d8:	8805883a 	mov	r2,r17
  80b4dc:	000d883a 	mov	r6,zero
  80b4e0:	84000044 	addi	r16,r16,1
  80b4e4:	dc000415 	stw	r16,16(sp)
  80b4e8:	84400007 	ldb	r17,0(r16)
  80b4ec:	31800044 	addi	r6,r6,1
  80b4f0:	88bffb26 	beq	r17,r2,80b4e0 <_strtod_r+0x820>
  80b4f4:	88fff3c4 	addi	r3,r17,-49
  80b4f8:	00800204 	movi	r2,8
  80b4fc:	10c1ca36 	bltu	r2,r3,80bc28 <_strtod_r+0xf68>
  80b500:	d8c00417 	ldw	r3,16(sp)
  80b504:	d9801715 	stw	r6,92(sp)
  80b508:	8dbff404 	addi	r22,r17,-48
  80b50c:	d8c01415 	stw	r3,80(sp)
  80b510:	1821883a 	mov	r16,r3
  80b514:	d8001815 	stw	zero,96(sp)
  80b518:	01800044 	movi	r6,1
  80b51c:	b0023526 	beq	r22,zero,80bdf4 <_strtod_r+0x1134>
  80b520:	d9001717 	ldw	r4,92(sp)
  80b524:	00800044 	movi	r2,1
  80b528:	2189883a 	add	r4,r4,r6
  80b52c:	d9001715 	stw	r4,92(sp)
  80b530:	1183390e 	bge	r2,r6,80c218 <_strtod_r+0x1558>
  80b534:	dc401817 	ldw	r17,96(sp)
  80b538:	1025883a 	mov	r18,r2
  80b53c:	05c00204 	movi	r23,8
  80b540:	00000806 	br	80b564 <_strtod_r+0x8a4>
  80b544:	d9001217 	ldw	r4,72(sp)
  80b548:	01400284 	movi	r5,10
  80b54c:	d9802015 	stw	r6,128(sp)
  80b550:	08102900 	call	810290 <__mulsi3>
  80b554:	d9802017 	ldw	r6,128(sp)
  80b558:	d8801215 	stw	r2,72(sp)
  80b55c:	94800044 	addi	r18,r18,1
  80b560:	91821726 	beq	r18,r6,80bdc0 <_strtod_r+0x1100>
  80b564:	8c400044 	addi	r17,r17,1
  80b568:	88bfffc4 	addi	r2,r17,-1
  80b56c:	b8bff50e 	bge	r23,r2,80b544 <_strtod_r+0x884>
  80b570:	00800404 	movi	r2,16
  80b574:	147ff916 	blt	r2,r17,80b55c <_strtod_r+0x89c>
  80b578:	d9001117 	ldw	r4,68(sp)
  80b57c:	01400284 	movi	r5,10
  80b580:	d9802015 	stw	r6,128(sp)
  80b584:	08102900 	call	810290 <__mulsi3>
  80b588:	d9802017 	ldw	r6,128(sp)
  80b58c:	d8801115 	stw	r2,68(sp)
  80b590:	003ff206 	br	80b55c <_strtod_r+0x89c>
  80b594:	d8001c15 	stw	zero,112(sp)
  80b598:	d8c01217 	ldw	r3,72(sp)
  80b59c:	d9401417 	ldw	r5,80(sp)
  80b5a0:	d9c01817 	ldw	r7,96(sp)
  80b5a4:	a809883a 	mov	r4,r21
  80b5a8:	a00d883a 	mov	r6,r20
  80b5ac:	d8c00015 	stw	r3,0(sp)
  80b5b0:	080a0380 	call	80a038 <__s2b>
  80b5b4:	11000304 	addi	r4,r2,12
  80b5b8:	d8801015 	stw	r2,64(sp)
  80b5bc:	d8800f17 	ldw	r2,60(sp)
  80b5c0:	d9001f15 	stw	r4,124(sp)
  80b5c4:	1004803a 	cmplt	r2,r2,zero
  80b5c8:	d8801e15 	stw	r2,120(sp)
  80b5cc:	d8c01017 	ldw	r3,64(sp)
  80b5d0:	a809883a 	mov	r4,r21
  80b5d4:	19400117 	ldw	r5,4(r3)
  80b5d8:	080964c0 	call	80964c <_Balloc>
  80b5dc:	d9001017 	ldw	r4,64(sp)
  80b5e0:	d9401f17 	ldw	r5,124(sp)
  80b5e4:	102f883a 	mov	r23,r2
  80b5e8:	21800417 	ldw	r6,16(r4)
  80b5ec:	11000304 	addi	r4,r2,12
  80b5f0:	318d883a 	add	r6,r6,r6
  80b5f4:	318d883a 	add	r6,r6,r6
  80b5f8:	31800204 	addi	r6,r6,8
  80b5fc:	0808f4c0 	call	808f4c <memcpy>
  80b600:	e2000017 	ldw	r8,0(fp)
  80b604:	e2400117 	ldw	r9,4(fp)
  80b608:	a809883a 	mov	r4,r21
  80b60c:	400b883a 	mov	r5,r8
  80b610:	d9c00204 	addi	r7,sp,8
  80b614:	d8800304 	addi	r2,sp,12
  80b618:	480d883a 	mov	r6,r9
  80b61c:	d8800015 	stw	r2,0(sp)
  80b620:	08097080 	call	809708 <__d2b>
  80b624:	a809883a 	mov	r4,r21
  80b628:	01400044 	movi	r5,1
  80b62c:	d8800515 	stw	r2,20(sp)
  80b630:	0809db00 	call	809db0 <__i2b>
  80b634:	d8c01e17 	ldw	r3,120(sp)
  80b638:	102d883a 	mov	r22,r2
  80b63c:	1801091e 	bne	r3,zero,80ba64 <_strtod_r+0xda4>
  80b640:	dd000f17 	ldw	r20,60(sp)
  80b644:	000f883a 	mov	r7,zero
  80b648:	0013883a 	mov	r9,zero
  80b64c:	a011883a 	mov	r8,r20
  80b650:	d8800217 	ldw	r2,8(sp)
  80b654:	10010116 	blt	r2,zero,80ba5c <_strtod_r+0xd9c>
  80b658:	388f883a 	add	r7,r7,r2
  80b65c:	d8c01c17 	ldw	r3,112(sp)
  80b660:	d9400317 	ldw	r5,12(sp)
  80b664:	10c9c83a 	sub	r4,r2,r3
  80b668:	2145883a 	add	r2,r4,r5
  80b66c:	10bfffc4 	addi	r2,r2,-1
  80b670:	00ff0084 	movi	r3,-1022
  80b674:	10c09f0e 	bge	r2,r3,80b8f4 <_strtod_r+0xc34>
  80b678:	21810cc4 	addi	r6,r4,1075
  80b67c:	d9001c17 	ldw	r4,112(sp)
  80b680:	4185883a 	add	r2,r8,r6
  80b684:	39a1883a 	add	r16,r7,r6
  80b688:	20a5883a 	add	r18,r4,r2
  80b68c:	3807883a 	mov	r3,r7
  80b690:	81c0010e 	bge	r16,r7,80b698 <_strtod_r+0x9d8>
  80b694:	8007883a 	mov	r3,r16
  80b698:	9005883a 	mov	r2,r18
  80b69c:	1c80010e 	bge	r3,r18,80b6a4 <_strtod_r+0x9e4>
  80b6a0:	1805883a 	mov	r2,r3
  80b6a4:	0080eb0e 	bge	zero,r2,80ba54 <_strtod_r+0xd94>
  80b6a8:	38a7c83a 	sub	r19,r7,r2
  80b6ac:	80a1c83a 	sub	r16,r16,r2
  80b6b0:	90a5c83a 	sub	r18,r18,r2
  80b6b4:	02400e0e 	bge	zero,r9,80b6f0 <_strtod_r+0xa30>
  80b6b8:	480d883a 	mov	r6,r9
  80b6bc:	b00b883a 	mov	r5,r22
  80b6c0:	a809883a 	mov	r4,r21
  80b6c4:	0809f180 	call	809f18 <__pow5mult>
  80b6c8:	d9800517 	ldw	r6,20(sp)
  80b6cc:	a809883a 	mov	r4,r21
  80b6d0:	100b883a 	mov	r5,r2
  80b6d4:	102d883a 	mov	r22,r2
  80b6d8:	0809b5c0 	call	809b5c <__multiply>
  80b6dc:	d9400517 	ldw	r5,20(sp)
  80b6e0:	1023883a 	mov	r17,r2
  80b6e4:	a809883a 	mov	r4,r21
  80b6e8:	08090cc0 	call	8090cc <_Bfree>
  80b6ec:	dc400515 	stw	r17,20(sp)
  80b6f0:	0400050e 	bge	zero,r16,80b708 <_strtod_r+0xa48>
  80b6f4:	d9400517 	ldw	r5,20(sp)
  80b6f8:	800d883a 	mov	r6,r16
  80b6fc:	a809883a 	mov	r4,r21
  80b700:	0809a100 	call	809a10 <__lshift>
  80b704:	d8800515 	stw	r2,20(sp)
  80b708:	a000741e 	bne	r20,zero,80b8dc <_strtod_r+0xc1c>
  80b70c:	0480050e 	bge	zero,r18,80b724 <_strtod_r+0xa64>
  80b710:	b80b883a 	mov	r5,r23
  80b714:	900d883a 	mov	r6,r18
  80b718:	a809883a 	mov	r4,r21
  80b71c:	0809a100 	call	809a10 <__lshift>
  80b720:	102f883a 	mov	r23,r2
  80b724:	04c0050e 	bge	zero,r19,80b73c <_strtod_r+0xa7c>
  80b728:	b00b883a 	mov	r5,r22
  80b72c:	980d883a 	mov	r6,r19
  80b730:	a809883a 	mov	r4,r21
  80b734:	0809a100 	call	809a10 <__lshift>
  80b738:	102d883a 	mov	r22,r2
  80b73c:	d9400517 	ldw	r5,20(sp)
  80b740:	a809883a 	mov	r4,r21
  80b744:	b80d883a 	mov	r6,r23
  80b748:	08098840 	call	809884 <__mdiff>
  80b74c:	1029883a 	mov	r20,r2
  80b750:	10800317 	ldw	r2,12(r2)
  80b754:	a009883a 	mov	r4,r20
  80b758:	a0000315 	stw	zero,12(r20)
  80b75c:	b00b883a 	mov	r5,r22
  80b760:	d8801a15 	stw	r2,104(sp)
  80b764:	08092280 	call	809228 <__mcmp>
  80b768:	1001a616 	blt	r2,zero,80be04 <_strtod_r+0x1144>
  80b76c:	10016d26 	beq	r2,zero,80bd24 <_strtod_r+0x1064>
  80b770:	a009883a 	mov	r4,r20
  80b774:	b00b883a 	mov	r5,r22
  80b778:	08094280 	call	809428 <__ratio>
  80b77c:	0011883a 	mov	r8,zero
  80b780:	02500034 	movhi	r9,16384
  80b784:	480f883a 	mov	r7,r9
  80b788:	1009883a 	mov	r4,r2
  80b78c:	180b883a 	mov	r5,r3
  80b790:	400d883a 	mov	r6,r8
  80b794:	1021883a 	mov	r16,r2
  80b798:	1823883a 	mov	r17,r3
  80b79c:	080fce40 	call	80fce4 <__ledf2>
  80b7a0:	00805716 	blt	zero,r2,80b900 <_strtod_r+0xc40>
  80b7a4:	d8801a17 	ldw	r2,104(sp)
  80b7a8:	1025003a 	cmpeq	r18,r2,zero
  80b7ac:	90008c1e 	bne	r18,zero,80b9e0 <_strtod_r+0xd20>
  80b7b0:	008ffc34 	movhi	r2,16368
  80b7b4:	0021883a 	mov	r16,zero
  80b7b8:	1023883a 	mov	r17,r2
  80b7bc:	d8000715 	stw	zero,28(sp)
  80b7c0:	d8800815 	stw	r2,32(sp)
  80b7c4:	e1c00117 	ldw	r7,4(fp)
  80b7c8:	009ff834 	movhi	r2,32736
  80b7cc:	3cdffc2c 	andhi	r19,r7,32752
  80b7d0:	98805f26 	beq	r19,r2,80b950 <_strtod_r+0xc90>
  80b7d4:	d8c01c17 	ldw	r3,112(sp)
  80b7d8:	18001b26 	beq	r3,zero,80b848 <_strtod_r+0xb88>
  80b7dc:	0081a834 	movhi	r2,1696
  80b7e0:	14c01936 	bltu	r2,r19,80b848 <_strtod_r+0xb88>
  80b7e4:	00bff034 	movhi	r2,65472
  80b7e8:	00d07834 	movhi	r3,16864
  80b7ec:	18ffffc4 	addi	r3,r3,-1
  80b7f0:	180f883a 	mov	r7,r3
  80b7f4:	8009883a 	mov	r4,r16
  80b7f8:	880b883a 	mov	r5,r17
  80b7fc:	100d883a 	mov	r6,r2
  80b800:	080fce40 	call	80fce4 <__ledf2>
  80b804:	00800b16 	blt	zero,r2,80b834 <_strtod_r+0xb74>
  80b808:	880b883a 	mov	r5,r17
  80b80c:	8009883a 	mov	r4,r16
  80b810:	080e0440 	call	80e044 <__fixunsdfsi>
  80b814:	1000e31e 	bne	r2,zero,80bba4 <_strtod_r+0xee4>
  80b818:	0021883a 	mov	r16,zero
  80b81c:	044ffc34 	movhi	r17,16368
  80b820:	9000dd1e 	bne	r18,zero,80bb98 <_strtod_r+0xed8>
  80b824:	8005883a 	mov	r2,r16
  80b828:	8807883a 	mov	r3,r17
  80b82c:	d8c00815 	stw	r3,32(sp)
  80b830:	d8800715 	stw	r2,28(sp)
  80b834:	d8800817 	ldw	r2,32(sp)
  80b838:	00c1ac34 	movhi	r3,1712
  80b83c:	14c5c83a 	sub	r2,r2,r19
  80b840:	10c5883a 	add	r2,r2,r3
  80b844:	d8800815 	stw	r2,32(sp)
  80b848:	e0800017 	ldw	r2,0(fp)
  80b84c:	e0c00117 	ldw	r3,4(fp)
  80b850:	1009883a 	mov	r4,r2
  80b854:	180b883a 	mov	r5,r3
  80b858:	08092880 	call	809288 <__ulp>
  80b85c:	d9800717 	ldw	r6,28(sp)
  80b860:	d9c00817 	ldw	r7,32(sp)
  80b864:	180b883a 	mov	r5,r3
  80b868:	1009883a 	mov	r4,r2
  80b86c:	080f4200 	call	80f420 <__muldf3>
  80b870:	e2000017 	ldw	r8,0(fp)
  80b874:	e2400117 	ldw	r9,4(fp)
  80b878:	180b883a 	mov	r5,r3
  80b87c:	1009883a 	mov	r4,r2
  80b880:	480f883a 	mov	r7,r9
  80b884:	400d883a 	mov	r6,r8
  80b888:	080f3ac0 	call	80f3ac <__adddf3>
  80b88c:	e0c00115 	stw	r3,4(fp)
  80b890:	e0800015 	stw	r2,0(fp)
  80b894:	d9001c17 	ldw	r4,112(sp)
  80b898:	e4800117 	ldw	r18,4(fp)
  80b89c:	2000021e 	bne	r4,zero,80b8a8 <_strtod_r+0xbe8>
  80b8a0:	909ffc2c 	andhi	r2,r18,32752
  80b8a4:	98807f26 	beq	r19,r2,80baa4 <_strtod_r+0xde4>
  80b8a8:	d9400517 	ldw	r5,20(sp)
  80b8ac:	a809883a 	mov	r4,r21
  80b8b0:	08090cc0 	call	8090cc <_Bfree>
  80b8b4:	a809883a 	mov	r4,r21
  80b8b8:	b80b883a 	mov	r5,r23
  80b8bc:	08090cc0 	call	8090cc <_Bfree>
  80b8c0:	a809883a 	mov	r4,r21
  80b8c4:	b00b883a 	mov	r5,r22
  80b8c8:	08090cc0 	call	8090cc <_Bfree>
  80b8cc:	a809883a 	mov	r4,r21
  80b8d0:	a00b883a 	mov	r5,r20
  80b8d4:	08090cc0 	call	8090cc <_Bfree>
  80b8d8:	003f3c06 	br	80b5cc <_strtod_r+0x90c>
  80b8dc:	b80b883a 	mov	r5,r23
  80b8e0:	a00d883a 	mov	r6,r20
  80b8e4:	a809883a 	mov	r4,r21
  80b8e8:	0809f180 	call	809f18 <__pow5mult>
  80b8ec:	102f883a 	mov	r23,r2
  80b8f0:	003f8606 	br	80b70c <_strtod_r+0xa4c>
  80b8f4:	00800d84 	movi	r2,54
  80b8f8:	114dc83a 	sub	r6,r2,r5
  80b8fc:	003f5f06 	br	80b67c <_strtod_r+0x9bc>
  80b900:	0005883a 	mov	r2,zero
  80b904:	00cff834 	movhi	r3,16352
  80b908:	8009883a 	mov	r4,r16
  80b90c:	880b883a 	mov	r5,r17
  80b910:	180f883a 	mov	r7,r3
  80b914:	100d883a 	mov	r6,r2
  80b918:	080f4200 	call	80f420 <__muldf3>
  80b91c:	1009883a 	mov	r4,r2
  80b920:	d8801a17 	ldw	r2,104(sp)
  80b924:	2021883a 	mov	r16,r4
  80b928:	1823883a 	mov	r17,r3
  80b92c:	1025003a 	cmpeq	r18,r2,zero
  80b930:	9000451e 	bne	r18,zero,80ba48 <_strtod_r+0xd88>
  80b934:	2005883a 	mov	r2,r4
  80b938:	d8800715 	stw	r2,28(sp)
  80b93c:	d8c00815 	stw	r3,32(sp)
  80b940:	e1c00117 	ldw	r7,4(fp)
  80b944:	009ff834 	movhi	r2,32736
  80b948:	3cdffc2c 	andhi	r19,r7,32752
  80b94c:	98bfa11e 	bne	r19,r2,80b7d4 <_strtod_r+0xb14>
  80b950:	e1000017 	ldw	r4,0(fp)
  80b954:	01bf2c34 	movhi	r6,64688
  80b958:	398d883a 	add	r6,r7,r6
  80b95c:	d9000b15 	stw	r4,44(sp)
  80b960:	d9c00c15 	stw	r7,48(sp)
  80b964:	300b883a 	mov	r5,r6
  80b968:	e1800115 	stw	r6,4(fp)
  80b96c:	08092880 	call	809288 <__ulp>
  80b970:	d9800717 	ldw	r6,28(sp)
  80b974:	d9c00817 	ldw	r7,32(sp)
  80b978:	180b883a 	mov	r5,r3
  80b97c:	1009883a 	mov	r4,r2
  80b980:	080f4200 	call	80f420 <__muldf3>
  80b984:	e2000017 	ldw	r8,0(fp)
  80b988:	e2400117 	ldw	r9,4(fp)
  80b98c:	180b883a 	mov	r5,r3
  80b990:	1009883a 	mov	r4,r2
  80b994:	480f883a 	mov	r7,r9
  80b998:	400d883a 	mov	r6,r8
  80b99c:	080f3ac0 	call	80f3ac <__adddf3>
  80b9a0:	1009883a 	mov	r4,r2
  80b9a4:	180b883a 	mov	r5,r3
  80b9a8:	009f2834 	movhi	r2,31904
  80b9ac:	10bfffc4 	addi	r2,r2,-1
  80b9b0:	18dffc2c 	andhi	r3,r3,32752
  80b9b4:	e1000015 	stw	r4,0(fp)
  80b9b8:	e1400115 	stw	r5,4(fp)
  80b9bc:	10c0722e 	bgeu	r2,r3,80bb88 <_strtod_r+0xec8>
  80b9c0:	d8800c17 	ldw	r2,48(sp)
  80b9c4:	011ffc34 	movhi	r4,32752
  80b9c8:	213fffc4 	addi	r4,r4,-1
  80b9cc:	11007d26 	beq	r2,r4,80bbc4 <_strtod_r+0xf04>
  80b9d0:	01ffffc4 	movi	r7,-1
  80b9d4:	e1000115 	stw	r4,4(fp)
  80b9d8:	e1c00015 	stw	r7,0(fp)
  80b9dc:	003fb206 	br	80b8a8 <_strtod_r+0xbe8>
  80b9e0:	e0c00017 	ldw	r3,0(fp)
  80b9e4:	1800251e 	bne	r3,zero,80ba7c <_strtod_r+0xdbc>
  80b9e8:	e0800117 	ldw	r2,4(fp)
  80b9ec:	00c00434 	movhi	r3,16
  80b9f0:	18ffffc4 	addi	r3,r3,-1
  80b9f4:	10c4703a 	and	r2,r2,r3
  80b9f8:	1000241e 	bne	r2,zero,80ba8c <_strtod_r+0xdcc>
  80b9fc:	0005883a 	mov	r2,zero
  80ba00:	00cffc34 	movhi	r3,16368
  80ba04:	180f883a 	mov	r7,r3
  80ba08:	8009883a 	mov	r4,r16
  80ba0c:	880b883a 	mov	r5,r17
  80ba10:	100d883a 	mov	r6,r2
  80ba14:	080fc5c0 	call	80fc5c <__ltdf2>
  80ba18:	10014616 	blt	r2,zero,80bf34 <_strtod_r+0x1274>
  80ba1c:	0005883a 	mov	r2,zero
  80ba20:	00cff834 	movhi	r3,16352
  80ba24:	880b883a 	mov	r5,r17
  80ba28:	8009883a 	mov	r4,r16
  80ba2c:	180f883a 	mov	r7,r3
  80ba30:	100d883a 	mov	r6,r2
  80ba34:	080f4200 	call	80f420 <__muldf3>
  80ba38:	1823883a 	mov	r17,r3
  80ba3c:	1021883a 	mov	r16,r2
  80ba40:	18e0003c 	xorhi	r3,r3,32768
  80ba44:	003fbc06 	br	80b938 <_strtod_r+0xc78>
  80ba48:	2005883a 	mov	r2,r4
  80ba4c:	18e0003c 	xorhi	r3,r3,32768
  80ba50:	003fb906 	br	80b938 <_strtod_r+0xc78>
  80ba54:	3827883a 	mov	r19,r7
  80ba58:	003f1606 	br	80b6b4 <_strtod_r+0x9f4>
  80ba5c:	4091c83a 	sub	r8,r8,r2
  80ba60:	003efe06 	br	80b65c <_strtod_r+0x99c>
  80ba64:	d9000f17 	ldw	r4,60(sp)
  80ba68:	0011883a 	mov	r8,zero
  80ba6c:	0029883a 	mov	r20,zero
  80ba70:	0113c83a 	sub	r9,zero,r4
  80ba74:	480f883a 	mov	r7,r9
  80ba78:	003ef506 	br	80b650 <_strtod_r+0x990>
  80ba7c:	00800044 	movi	r2,1
  80ba80:	1880021e 	bne	r3,r2,80ba8c <_strtod_r+0xdcc>
  80ba84:	e0800117 	ldw	r2,4(fp)
  80ba88:	1000c526 	beq	r2,zero,80bda0 <_strtod_r+0x10e0>
  80ba8c:	00affc34 	movhi	r2,49136
  80ba90:	0021883a 	mov	r16,zero
  80ba94:	044ffc34 	movhi	r17,16368
  80ba98:	d8800815 	stw	r2,32(sp)
  80ba9c:	d8000715 	stw	zero,28(sp)
  80baa0:	003f4806 	br	80b7c4 <_strtod_r+0xb04>
  80baa4:	880b883a 	mov	r5,r17
  80baa8:	8009883a 	mov	r4,r16
  80baac:	080fe640 	call	80fe64 <__fixdfsi>
  80bab0:	1009883a 	mov	r4,r2
  80bab4:	080fd6c0 	call	80fd6c <__floatsidf>
  80bab8:	880b883a 	mov	r5,r17
  80babc:	8009883a 	mov	r4,r16
  80bac0:	100d883a 	mov	r6,r2
  80bac4:	180f883a 	mov	r7,r3
  80bac8:	080f32c0 	call	80f32c <__subdf3>
  80bacc:	100b883a 	mov	r5,r2
  80bad0:	1021883a 	mov	r16,r2
  80bad4:	d8801a17 	ldw	r2,104(sp)
  80bad8:	180d883a 	mov	r6,r3
  80badc:	1823883a 	mov	r17,r3
  80bae0:	1000061e 	bne	r2,zero,80bafc <_strtod_r+0xe3c>
  80bae4:	e0800017 	ldw	r2,0(fp)
  80bae8:	1000041e 	bne	r2,zero,80bafc <_strtod_r+0xe3c>
  80baec:	00c00434 	movhi	r3,16
  80baf0:	18ffffc4 	addi	r3,r3,-1
  80baf4:	90c4703a 	and	r2,r18,r3
  80baf8:	10004026 	beq	r2,zero,80bbfc <_strtod_r+0xf3c>
  80bafc:	00a52834 	movhi	r2,38048
  80bb00:	108d6544 	addi	r2,r2,13717
  80bb04:	00cff834 	movhi	r3,16352
  80bb08:	18ffffc4 	addi	r3,r3,-1
  80bb0c:	180f883a 	mov	r7,r3
  80bb10:	8009883a 	mov	r4,r16
  80bb14:	880b883a 	mov	r5,r17
  80bb18:	100d883a 	mov	r6,r2
  80bb1c:	080fc5c0 	call	80fc5c <__ltdf2>
  80bb20:	10000916 	blt	r2,zero,80bb48 <_strtod_r+0xe88>
  80bb24:	008d6c34 	movhi	r2,13744
  80bb28:	10b94d44 	addi	r2,r2,-6859
  80bb2c:	00cff834 	movhi	r3,16352
  80bb30:	880b883a 	mov	r5,r17
  80bb34:	180f883a 	mov	r7,r3
  80bb38:	8009883a 	mov	r4,r16
  80bb3c:	100d883a 	mov	r6,r2
  80bb40:	080fb4c0 	call	80fb4c <__gtdf2>
  80bb44:	00bf580e 	bge	zero,r2,80b8a8 <_strtod_r+0xbe8>
  80bb48:	d9400517 	ldw	r5,20(sp)
  80bb4c:	a809883a 	mov	r4,r21
  80bb50:	08090cc0 	call	8090cc <_Bfree>
  80bb54:	a809883a 	mov	r4,r21
  80bb58:	b80b883a 	mov	r5,r23
  80bb5c:	08090cc0 	call	8090cc <_Bfree>
  80bb60:	a809883a 	mov	r4,r21
  80bb64:	b00b883a 	mov	r5,r22
  80bb68:	08090cc0 	call	8090cc <_Bfree>
  80bb6c:	d9401017 	ldw	r5,64(sp)
  80bb70:	a809883a 	mov	r4,r21
  80bb74:	08090cc0 	call	8090cc <_Bfree>
  80bb78:	a809883a 	mov	r4,r21
  80bb7c:	a00b883a 	mov	r5,r20
  80bb80:	08090cc0 	call	8090cc <_Bfree>
  80bb84:	003cd806 	br	80aee8 <_strtod_r+0x228>
  80bb88:	0080d434 	movhi	r2,848
  80bb8c:	288d883a 	add	r6,r5,r2
  80bb90:	e1800115 	stw	r6,4(fp)
  80bb94:	003f3f06 	br	80b894 <_strtod_r+0xbd4>
  80bb98:	8005883a 	mov	r2,r16
  80bb9c:	88e0003c 	xorhi	r3,r17,32768
  80bba0:	003f2206 	br	80b82c <_strtod_r+0xb6c>
  80bba4:	1009883a 	mov	r4,r2
  80bba8:	080ffb00 	call	80ffb0 <__floatunsidf>
  80bbac:	1021883a 	mov	r16,r2
  80bbb0:	1823883a 	mov	r17,r3
  80bbb4:	003f1a06 	br	80b820 <_strtod_r+0xb60>
  80bbb8:	dc000417 	ldw	r16,16(sp)
  80bbbc:	31800044 	addi	r6,r6,1
  80bbc0:	003e5606 	br	80b51c <_strtod_r+0x85c>
  80bbc4:	d8c00b17 	ldw	r3,44(sp)
  80bbc8:	00bfffc4 	movi	r2,-1
  80bbcc:	18bf801e 	bne	r3,r2,80b9d0 <_strtod_r+0xd10>
  80bbd0:	00c00884 	movi	r3,34
  80bbd4:	a8c00015 	stw	r3,0(r21)
  80bbd8:	009ffc34 	movhi	r2,32752
  80bbdc:	e0800115 	stw	r2,4(fp)
  80bbe0:	e0000015 	stw	zero,0(fp)
  80bbe4:	003fd806 	br	80bb48 <_strtod_r+0xe88>
  80bbe8:	8025883a 	mov	r18,r16
  80bbec:	0027883a 	mov	r19,zero
  80bbf0:	d8001215 	stw	zero,72(sp)
  80bbf4:	d8001115 	stw	zero,68(sp)
  80bbf8:	003cac06 	br	80aeac <_strtod_r+0x1ec>
  80bbfc:	00a52834 	movhi	r2,38048
  80bc00:	108d6544 	addi	r2,r2,13717
  80bc04:	00cff434 	movhi	r3,16336
  80bc08:	18ffffc4 	addi	r3,r3,-1
  80bc0c:	2809883a 	mov	r4,r5
  80bc10:	180f883a 	mov	r7,r3
  80bc14:	300b883a 	mov	r5,r6
  80bc18:	100d883a 	mov	r6,r2
  80bc1c:	080fc5c0 	call	80fc5c <__ltdf2>
  80bc20:	103f210e 	bge	r2,zero,80b8a8 <_strtod_r+0xbe8>
  80bc24:	003fc806 	br	80bb48 <_strtod_r+0xe88>
  80bc28:	00800044 	movi	r2,1
  80bc2c:	d8001815 	stw	zero,96(sp)
  80bc30:	d8801b15 	stw	r2,108(sp)
  80bc34:	d8001715 	stw	zero,92(sp)
  80bc38:	003ca206 	br	80aec4 <_strtod_r+0x204>
  80bc3c:	00800884 	movi	r2,34
  80bc40:	a8800015 	stw	r2,0(r21)
  80bc44:	019ffc34 	movhi	r6,32752
  80bc48:	e1800115 	stw	r6,4(fp)
  80bc4c:	e0000015 	stw	zero,0(fp)
  80bc50:	003ca506 	br	80aee8 <_strtod_r+0x228>
  80bc54:	011387c4 	movi	r4,19999
  80bc58:	003d0206 	br	80b064 <_strtod_r+0x3a4>
  80bc5c:	180a90fa 	slli	r5,r3,3
  80bc60:	e0800017 	ldw	r2,0(fp)
  80bc64:	e0c00117 	ldw	r3,4(fp)
  80bc68:	01002074 	movhi	r4,129
  80bc6c:	21142604 	addi	r4,r4,20632
  80bc70:	290b883a 	add	r5,r5,r4
  80bc74:	2a000017 	ldw	r8,0(r5)
  80bc78:	2a400117 	ldw	r9,4(r5)
  80bc7c:	1009883a 	mov	r4,r2
  80bc80:	180b883a 	mov	r5,r3
  80bc84:	480f883a 	mov	r7,r9
  80bc88:	400d883a 	mov	r6,r8
  80bc8c:	080f4200 	call	80f420 <__muldf3>
  80bc90:	e0c00115 	stw	r3,4(fp)
  80bc94:	e0800015 	stw	r2,0(fp)
  80bc98:	003c9306 	br	80aee8 <_strtod_r+0x228>
  80bc9c:	d8800d17 	ldw	r2,52(sp)
  80bca0:	e0800015 	stw	r2,0(fp)
  80bca4:	d8c00e17 	ldw	r3,56(sp)
  80bca8:	e0c00115 	stw	r3,4(fp)
  80bcac:	9080020c 	andi	r2,r18,8
  80bcb0:	103c8d26 	beq	r2,zero,80aee8 <_strtod_r+0x228>
  80bcb4:	e0800117 	ldw	r2,4(fp)
  80bcb8:	10a00034 	orhi	r2,r2,32768
  80bcbc:	e0800115 	stw	r2,4(fp)
  80bcc0:	003c8906 	br	80aee8 <_strtod_r+0x228>
  80bcc4:	009ffc34 	movhi	r2,32752
  80bcc8:	e0800115 	stw	r2,4(fp)
  80bccc:	e0000015 	stw	zero,0(fp)
  80bcd0:	003ff606 	br	80bcac <_strtod_r+0xfec>
  80bcd4:	00a00034 	movhi	r2,32768
  80bcd8:	10bfffc4 	addi	r2,r2,-1
  80bcdc:	00ffffc4 	movi	r3,-1
  80bce0:	e0800115 	stw	r2,4(fp)
  80bce4:	e0c00015 	stw	r3,0(fp)
  80bce8:	003ff006 	br	80bcac <_strtod_r+0xfec>
  80bcec:	e0000115 	stw	zero,4(fp)
  80bcf0:	e0000015 	stw	zero,0(fp)
  80bcf4:	003fed06 	br	80bcac <_strtod_r+0xfec>
  80bcf8:	d8800e17 	ldw	r2,56(sp)
  80bcfc:	29010cc4 	addi	r4,r5,1075
  80bd00:	00fffc34 	movhi	r3,65520
  80bd04:	18ffffc4 	addi	r3,r3,-1
  80bd08:	2008953a 	slli	r4,r4,20
  80bd0c:	10c4703a 	and	r2,r2,r3
  80bd10:	d8c00d17 	ldw	r3,52(sp)
  80bd14:	1104b03a 	or	r2,r2,r4
  80bd18:	e0800115 	stw	r2,4(fp)
  80bd1c:	e0c00015 	stw	r3,0(fp)
  80bd20:	003fe206 	br	80bcac <_strtod_r+0xfec>
  80bd24:	d8c01a17 	ldw	r3,104(sp)
  80bd28:	1825003a 	cmpeq	r18,r3,zero
  80bd2c:	9000cf1e 	bne	r18,zero,80c06c <_strtod_r+0x13ac>
  80bd30:	e1400117 	ldw	r5,4(fp)
  80bd34:	01000434 	movhi	r4,16
  80bd38:	213fffc4 	addi	r4,r4,-1
  80bd3c:	2904703a 	and	r2,r5,r4
  80bd40:	11006826 	beq	r2,r4,80bee4 <_strtod_r+0x1224>
  80bd44:	e1c00017 	ldw	r7,0(fp)
  80bd48:	3880004c 	andi	r2,r7,1
  80bd4c:	1005003a 	cmpeq	r2,r2,zero
  80bd50:	1000601e 	bne	r2,zero,80bed4 <_strtod_r+0x1214>
  80bd54:	90010426 	beq	r18,zero,80c168 <_strtod_r+0x14a8>
  80bd58:	e4400117 	ldw	r17,4(fp)
  80bd5c:	3809883a 	mov	r4,r7
  80bd60:	3821883a 	mov	r16,r7
  80bd64:	880b883a 	mov	r5,r17
  80bd68:	08092880 	call	809288 <__ulp>
  80bd6c:	180f883a 	mov	r7,r3
  80bd70:	880b883a 	mov	r5,r17
  80bd74:	8009883a 	mov	r4,r16
  80bd78:	100d883a 	mov	r6,r2
  80bd7c:	080f32c0 	call	80f32c <__subdf3>
  80bd80:	1009883a 	mov	r4,r2
  80bd84:	000d883a 	mov	r6,zero
  80bd88:	000f883a 	mov	r7,zero
  80bd8c:	180b883a 	mov	r5,r3
  80bd90:	e0800015 	stw	r2,0(fp)
  80bd94:	e0c00115 	stw	r3,4(fp)
  80bd98:	080fac40 	call	80fac4 <__nedf2>
  80bd9c:	10004d1e 	bne	r2,zero,80bed4 <_strtod_r+0x1214>
  80bda0:	00800884 	movi	r2,34
  80bda4:	a8800015 	stw	r2,0(r21)
  80bda8:	e0000015 	stw	zero,0(fp)
  80bdac:	e0000115 	stw	zero,4(fp)
  80bdb0:	003f6506 	br	80bb48 <_strtod_r+0xe88>
  80bdb4:	00800044 	movi	r2,1
  80bdb8:	d8801915 	stw	r2,100(sp)
  80bdbc:	003d4406 	br	80b2d0 <_strtod_r+0x610>
  80bdc0:	d8c01817 	ldw	r3,96(sp)
  80bdc4:	1985883a 	add	r2,r3,r6
  80bdc8:	11ffffc4 	addi	r7,r2,-1
  80bdcc:	39000044 	addi	r4,r7,1
  80bdd0:	00800204 	movi	r2,8
  80bdd4:	d9001815 	stw	r4,96(sp)
  80bdd8:	11c0d716 	blt	r2,r7,80c138 <_strtod_r+0x1478>
  80bddc:	d9001217 	ldw	r4,72(sp)
  80bde0:	01400284 	movi	r5,10
  80bde4:	08102900 	call	810290 <__mulsi3>
  80bde8:	1585883a 	add	r2,r2,r22
  80bdec:	d8801215 	stw	r2,72(sp)
  80bdf0:	000d883a 	mov	r6,zero
  80bdf4:	84000044 	addi	r16,r16,1
  80bdf8:	dc000415 	stw	r16,16(sp)
  80bdfc:	84400007 	ldb	r17,0(r16)
  80be00:	003cfc06 	br	80b1f4 <_strtod_r+0x534>
  80be04:	d8c01a17 	ldw	r3,104(sp)
  80be08:	1800321e 	bne	r3,zero,80bed4 <_strtod_r+0x1214>
  80be0c:	e0800017 	ldw	r2,0(fp)
  80be10:	1000b31e 	bne	r2,zero,80c0e0 <_strtod_r+0x1420>
  80be14:	e0c00117 	ldw	r3,4(fp)
  80be18:	01000434 	movhi	r4,16
  80be1c:	213fffc4 	addi	r4,r4,-1
  80be20:	1904703a 	and	r2,r3,r4
  80be24:	1000e71e 	bne	r2,zero,80c1c4 <_strtod_r+0x1504>
  80be28:	18dffc2c 	andhi	r3,r3,32752
  80be2c:	0081ac34 	movhi	r2,1712
  80be30:	10c0282e 	bgeu	r2,r3,80bed4 <_strtod_r+0x1214>
  80be34:	a0800517 	ldw	r2,20(r20)
  80be38:	1000031e 	bne	r2,zero,80be48 <_strtod_r+0x1188>
  80be3c:	a0c00417 	ldw	r3,16(r20)
  80be40:	00800044 	movi	r2,1
  80be44:	10c0a60e 	bge	r2,r3,80c0e0 <_strtod_r+0x1420>
  80be48:	a00b883a 	mov	r5,r20
  80be4c:	a809883a 	mov	r4,r21
  80be50:	01800044 	movi	r6,1
  80be54:	0809a100 	call	809a10 <__lshift>
  80be58:	1009883a 	mov	r4,r2
  80be5c:	b00b883a 	mov	r5,r22
  80be60:	1029883a 	mov	r20,r2
  80be64:	08092280 	call	809228 <__mcmp>
  80be68:	00809d0e 	bge	zero,r2,80c0e0 <_strtod_r+0x1420>
  80be6c:	e1800117 	ldw	r6,4(fp)
  80be70:	d9001c17 	ldw	r4,112(sp)
  80be74:	2013003a 	cmpeq	r9,r4,zero
  80be78:	4800d61e 	bne	r9,zero,80c1d4 <_strtod_r+0x1514>
  80be7c:	30dffc2c 	andhi	r3,r6,32752
  80be80:	0081ac34 	movhi	r2,1712
  80be84:	10c0d336 	bltu	r2,r3,80c1d4 <_strtod_r+0x1514>
  80be88:	0080dc34 	movhi	r2,880
  80be8c:	10ffc42e 	bgeu	r2,r3,80bda0 <_strtod_r+0x10e0>
  80be90:	e0800017 	ldw	r2,0(fp)
  80be94:	e0c00117 	ldw	r3,4(fp)
  80be98:	020e5434 	movhi	r8,14672
  80be9c:	000d883a 	mov	r6,zero
  80bea0:	400f883a 	mov	r7,r8
  80bea4:	180b883a 	mov	r5,r3
  80bea8:	1009883a 	mov	r4,r2
  80beac:	da000c15 	stw	r8,48(sp)
  80beb0:	d8000b15 	stw	zero,44(sp)
  80beb4:	080f4200 	call	80f420 <__muldf3>
  80beb8:	e0800015 	stw	r2,0(fp)
  80bebc:	e0c00115 	stw	r3,4(fp)
  80bec0:	183f211e 	bne	r3,zero,80bb48 <_strtod_r+0xe88>
  80bec4:	103f201e 	bne	r2,zero,80bb48 <_strtod_r+0xe88>
  80bec8:	00800884 	movi	r2,34
  80becc:	a8800015 	stw	r2,0(r21)
  80bed0:	003f1d06 	br	80bb48 <_strtod_r+0xe88>
  80bed4:	d9001c17 	ldw	r4,112(sp)
  80bed8:	2013003a 	cmpeq	r9,r4,zero
  80bedc:	483f1a1e 	bne	r9,zero,80bb48 <_strtod_r+0xe88>
  80bee0:	003feb06 	br	80be90 <_strtod_r+0x11d0>
  80bee4:	d8801c17 	ldw	r2,112(sp)
  80bee8:	e1c00017 	ldw	r7,0(fp)
  80beec:	1013003a 	cmpeq	r9,r2,zero
  80bef0:	4800c31e 	bne	r9,zero,80c200 <_strtod_r+0x1540>
  80bef4:	28dffc2c 	andhi	r3,r5,32752
  80bef8:	0081a834 	movhi	r2,1696
  80befc:	10c0c036 	bltu	r2,r3,80c200 <_strtod_r+0x1540>
  80bf00:	1804d53a 	srli	r2,r3,20
  80bf04:	00c01ac4 	movi	r3,107
  80bf08:	013fffc4 	movi	r4,-1
  80bf0c:	1887c83a 	sub	r3,r3,r2
  80bf10:	20c4983a 	sll	r2,r4,r3
  80bf14:	11ff8c1e 	bne	r2,r7,80bd48 <_strtod_r+0x1088>
  80bf18:	28dffc2c 	andhi	r3,r5,32752
  80bf1c:	00800434 	movhi	r2,16
  80bf20:	188d883a 	add	r6,r3,r2
  80bf24:	e1800115 	stw	r6,4(fp)
  80bf28:	e0000015 	stw	zero,0(fp)
  80bf2c:	483f061e 	bne	r9,zero,80bb48 <_strtod_r+0xe88>
  80bf30:	003fd706 	br	80be90 <_strtod_r+0x11d0>
  80bf34:	0021883a 	mov	r16,zero
  80bf38:	0005883a 	mov	r2,zero
  80bf3c:	044ff834 	movhi	r17,16352
  80bf40:	00eff834 	movhi	r3,49120
  80bf44:	003e7c06 	br	80b938 <_strtod_r+0xc78>
  80bf48:	803d9226 	beq	r16,zero,80b594 <_strtod_r+0x8d4>
  80bf4c:	0421c83a 	sub	r16,zero,r16
  80bf50:	814003cc 	andi	r5,r16,15
  80bf54:	28000f26 	beq	r5,zero,80bf94 <_strtod_r+0x12d4>
  80bf58:	280a90fa 	slli	r5,r5,3
  80bf5c:	01002074 	movhi	r4,129
  80bf60:	21142604 	addi	r4,r4,20632
  80bf64:	e0800017 	ldw	r2,0(fp)
  80bf68:	290b883a 	add	r5,r5,r4
  80bf6c:	2a000017 	ldw	r8,0(r5)
  80bf70:	e0c00117 	ldw	r3,4(fp)
  80bf74:	2a400117 	ldw	r9,4(r5)
  80bf78:	1009883a 	mov	r4,r2
  80bf7c:	180b883a 	mov	r5,r3
  80bf80:	480f883a 	mov	r7,r9
  80bf84:	400d883a 	mov	r6,r8
  80bf88:	080f7e40 	call	80f7e4 <__divdf3>
  80bf8c:	e0c00115 	stw	r3,4(fp)
  80bf90:	e0800015 	stw	r2,0(fp)
  80bf94:	8021d13a 	srai	r16,r16,4
  80bf98:	803d7e26 	beq	r16,zero,80b594 <_strtod_r+0x8d4>
  80bf9c:	008007c4 	movi	r2,31
  80bfa0:	14002d16 	blt	r2,r16,80c058 <_strtod_r+0x1398>
  80bfa4:	8080040c 	andi	r2,r16,16
  80bfa8:	10009d26 	beq	r2,zero,80c220 <_strtod_r+0x1560>
  80bfac:	01001a84 	movi	r4,106
  80bfb0:	d9001c15 	stw	r4,112(sp)
  80bfb4:	0400110e 	bge	zero,r16,80bffc <_strtod_r+0x133c>
  80bfb8:	04402074 	movhi	r17,129
  80bfbc:	8c547304 	addi	r17,r17,20940
  80bfc0:	8080004c 	andi	r2,r16,1
  80bfc4:	1005003a 	cmpeq	r2,r2,zero
  80bfc8:	1000091e 	bne	r2,zero,80bff0 <_strtod_r+0x1330>
  80bfcc:	e0800017 	ldw	r2,0(fp)
  80bfd0:	e0c00117 	ldw	r3,4(fp)
  80bfd4:	89800017 	ldw	r6,0(r17)
  80bfd8:	89c00117 	ldw	r7,4(r17)
  80bfdc:	180b883a 	mov	r5,r3
  80bfe0:	1009883a 	mov	r4,r2
  80bfe4:	080f4200 	call	80f420 <__muldf3>
  80bfe8:	e0c00115 	stw	r3,4(fp)
  80bfec:	e0800015 	stw	r2,0(fp)
  80bff0:	8021d07a 	srai	r16,r16,1
  80bff4:	8c400204 	addi	r17,r17,8
  80bff8:	043ff116 	blt	zero,r16,80bfc0 <_strtod_r+0x1300>
  80bffc:	d8801c17 	ldw	r2,112(sp)
  80c000:	10000d26 	beq	r2,zero,80c038 <_strtod_r+0x1378>
  80c004:	e1000117 	ldw	r4,4(fp)
  80c008:	00c01ac4 	movi	r3,107
  80c00c:	209ffc2c 	andhi	r2,r4,32752
  80c010:	1004d53a 	srli	r2,r2,20
  80c014:	1887c83a 	sub	r3,r3,r2
  80c018:	00c0070e 	bge	zero,r3,80c038 <_strtod_r+0x1378>
  80c01c:	008007c4 	movi	r2,31
  80c020:	10c0940e 	bge	r2,r3,80c274 <_strtod_r+0x15b4>
  80c024:	00800d04 	movi	r2,52
  80c028:	e0000015 	stw	zero,0(fp)
  80c02c:	10c08b0e 	bge	r2,r3,80c25c <_strtod_r+0x159c>
  80c030:	0180dc34 	movhi	r6,880
  80c034:	e1800115 	stw	r6,4(fp)
  80c038:	e0800017 	ldw	r2,0(fp)
  80c03c:	e0c00117 	ldw	r3,4(fp)
  80c040:	000d883a 	mov	r6,zero
  80c044:	000f883a 	mov	r7,zero
  80c048:	180b883a 	mov	r5,r3
  80c04c:	1009883a 	mov	r4,r2
  80c050:	080fac40 	call	80fac4 <__nedf2>
  80c054:	103d501e 	bne	r2,zero,80b598 <_strtod_r+0x8d8>
  80c058:	00800884 	movi	r2,34
  80c05c:	a8800015 	stw	r2,0(r21)
  80c060:	e0000015 	stw	zero,0(fp)
  80c064:	e0000115 	stw	zero,4(fp)
  80c068:	003b9f06 	br	80aee8 <_strtod_r+0x228>
  80c06c:	e1800117 	ldw	r6,4(fp)
  80c070:	00c00434 	movhi	r3,16
  80c074:	18ffffc4 	addi	r3,r3,-1
  80c078:	30c4703a 	and	r2,r6,r3
  80c07c:	103f311e 	bne	r2,zero,80bd44 <_strtod_r+0x1084>
  80c080:	e1c00017 	ldw	r7,0(fp)
  80c084:	383f301e 	bne	r7,zero,80bd48 <_strtod_r+0x1088>
  80c088:	003f7906 	br	80be70 <_strtod_r+0x11b0>
  80c08c:	d8c00f17 	ldw	r3,60(sp)
  80c090:	00bffa84 	movi	r2,-22
  80c094:	18bcbf16 	blt	r3,r2,80b394 <_strtod_r+0x6d4>
  80c098:	1809883a 	mov	r4,r3
  80c09c:	017ffe04 	movi	r5,-8
  80c0a0:	08102900 	call	810290 <__mulsi3>
  80c0a4:	00c02074 	movhi	r3,129
  80c0a8:	18d42604 	addi	r3,r3,20632
  80c0ac:	10c5883a 	add	r2,r2,r3
  80c0b0:	e2000017 	ldw	r8,0(fp)
  80c0b4:	e2400117 	ldw	r9,4(fp)
  80c0b8:	12800017 	ldw	r10,0(r2)
  80c0bc:	12c00117 	ldw	r11,4(r2)
  80c0c0:	480b883a 	mov	r5,r9
  80c0c4:	4009883a 	mov	r4,r8
  80c0c8:	580f883a 	mov	r7,r11
  80c0cc:	500d883a 	mov	r6,r10
  80c0d0:	080f7e40 	call	80f7e4 <__divdf3>
  80c0d4:	e0c00115 	stw	r3,4(fp)
  80c0d8:	e0800015 	stw	r2,0(fp)
  80c0dc:	003b8206 	br	80aee8 <_strtod_r+0x228>
  80c0e0:	d8801c17 	ldw	r2,112(sp)
  80c0e4:	1013003a 	cmpeq	r9,r2,zero
  80c0e8:	483e971e 	bne	r9,zero,80bb48 <_strtod_r+0xe88>
  80c0ec:	003f6806 	br	80be90 <_strtod_r+0x11d0>
  80c0f0:	00801a44 	movi	r2,105
  80c0f4:	88bc5026 	beq	r17,r2,80b238 <_strtod_r+0x578>
  80c0f8:	00801b84 	movi	r2,110
  80c0fc:	88bb9b1e 	bne	r17,r2,80af6c <_strtod_r+0x2ac>
  80c100:	dc000404 	addi	r16,sp,16
  80c104:	8009883a 	mov	r4,r16
  80c108:	01402074 	movhi	r5,129
  80c10c:	29547204 	addi	r5,r5,20936
  80c110:	080ac780 	call	80ac78 <match>
  80c114:	103b9526 	beq	r2,zero,80af6c <_strtod_r+0x2ac>
  80c118:	d8800417 	ldw	r2,16(sp)
  80c11c:	00c00a04 	movi	r3,40
  80c120:	11000007 	ldb	r4,0(r2)
  80c124:	20c04026 	beq	r4,r3,80c228 <_strtod_r+0x1568>
  80c128:	01bffe34 	movhi	r6,65528
  80c12c:	e1800115 	stw	r6,4(fp)
  80c130:	e0000015 	stw	zero,0(fp)
  80c134:	003b6c06 	br	80aee8 <_strtod_r+0x228>
  80c138:	d8c01817 	ldw	r3,96(sp)
  80c13c:	00800404 	movi	r2,16
  80c140:	10c00516 	blt	r2,r3,80c158 <_strtod_r+0x1498>
  80c144:	d9001117 	ldw	r4,68(sp)
  80c148:	01400284 	movi	r5,10
  80c14c:	08102900 	call	810290 <__mulsi3>
  80c150:	1585883a 	add	r2,r2,r22
  80c154:	d8801115 	stw	r2,68(sp)
  80c158:	000d883a 	mov	r6,zero
  80c15c:	003f2506 	br	80bdf4 <_strtod_r+0x1134>
  80c160:	000d883a 	mov	r6,zero
  80c164:	003ce306 	br	80b4f4 <_strtod_r+0x834>
  80c168:	e4400117 	ldw	r17,4(fp)
  80c16c:	3809883a 	mov	r4,r7
  80c170:	3821883a 	mov	r16,r7
  80c174:	880b883a 	mov	r5,r17
  80c178:	08092880 	call	809288 <__ulp>
  80c17c:	180f883a 	mov	r7,r3
  80c180:	880b883a 	mov	r5,r17
  80c184:	8009883a 	mov	r4,r16
  80c188:	100d883a 	mov	r6,r2
  80c18c:	080f3ac0 	call	80f3ac <__adddf3>
  80c190:	180b883a 	mov	r5,r3
  80c194:	d8c01c17 	ldw	r3,112(sp)
  80c198:	1009883a 	mov	r4,r2
  80c19c:	e1400115 	stw	r5,4(fp)
  80c1a0:	1813003a 	cmpeq	r9,r3,zero
  80c1a4:	e1000015 	stw	r4,0(fp)
  80c1a8:	483e671e 	bne	r9,zero,80bb48 <_strtod_r+0xe88>
  80c1ac:	003f3806 	br	80be90 <_strtod_r+0x11d0>
  80c1b0:	0080d434 	movhi	r2,848
  80c1b4:	188d883a 	add	r6,r3,r2
  80c1b8:	d8001c15 	stw	zero,112(sp)
  80c1bc:	e1800115 	stw	r6,4(fp)
  80c1c0:	003cf506 	br	80b598 <_strtod_r+0x8d8>
  80c1c4:	d8c01c17 	ldw	r3,112(sp)
  80c1c8:	1813003a 	cmpeq	r9,r3,zero
  80c1cc:	483e5e1e 	bne	r9,zero,80bb48 <_strtod_r+0xe88>
  80c1d0:	003f2f06 	br	80be90 <_strtod_r+0x11d0>
  80c1d4:	309ffc2c 	andhi	r2,r6,32752
  80c1d8:	00fffc34 	movhi	r3,65520
  80c1dc:	10c5883a 	add	r2,r2,r3
  80c1e0:	00c00434 	movhi	r3,16
  80c1e4:	18ffffc4 	addi	r3,r3,-1
  80c1e8:	10ccb03a 	or	r6,r2,r3
  80c1ec:	01ffffc4 	movi	r7,-1
  80c1f0:	e1800115 	stw	r6,4(fp)
  80c1f4:	e1c00015 	stw	r7,0(fp)
  80c1f8:	483e531e 	bne	r9,zero,80bb48 <_strtod_r+0xe88>
  80c1fc:	003f2406 	br	80be90 <_strtod_r+0x11d0>
  80c200:	00bfffc4 	movi	r2,-1
  80c204:	003f4306 	br	80bf14 <_strtod_r+0x1254>
  80c208:	0025883a 	mov	r18,zero
  80c20c:	05802074 	movhi	r22,129
  80c210:	b5945804 	addi	r22,r22,20832
  80c214:	003c9206 	br	80b460 <_strtod_r+0x7a0>
  80c218:	d9c01817 	ldw	r7,96(sp)
  80c21c:	003eeb06 	br	80bdcc <_strtod_r+0x110c>
  80c220:	d8001c15 	stw	zero,112(sp)
  80c224:	003f6306 	br	80bfb4 <_strtod_r+0x12f4>
  80c228:	8009883a 	mov	r4,r16
  80c22c:	01402074 	movhi	r5,129
  80c230:	2956e404 	addi	r5,r5,23440
  80c234:	d9800d04 	addi	r6,sp,52
  80c238:	080dcd80 	call	80dcd8 <__hexnan>
  80c23c:	00c00144 	movi	r3,5
  80c240:	10ffb91e 	bne	r2,r3,80c128 <_strtod_r+0x1468>
  80c244:	d8800e17 	ldw	r2,56(sp)
  80c248:	d9c00d17 	ldw	r7,52(sp)
  80c24c:	119ffc34 	orhi	r6,r2,32752
  80c250:	e1800115 	stw	r6,4(fp)
  80c254:	e1c00015 	stw	r7,0(fp)
  80c258:	003b2306 	br	80aee8 <_strtod_r+0x228>
  80c25c:	18fff804 	addi	r3,r3,-32
  80c260:	00bfffc4 	movi	r2,-1
  80c264:	10c4983a 	sll	r2,r2,r3
  80c268:	208c703a 	and	r6,r4,r2
  80c26c:	e1800115 	stw	r6,4(fp)
  80c270:	003f7106 	br	80c038 <_strtod_r+0x1378>
  80c274:	00bfffc4 	movi	r2,-1
  80c278:	10c4983a 	sll	r2,r2,r3
  80c27c:	e0c00017 	ldw	r3,0(fp)
  80c280:	188e703a 	and	r7,r3,r2
  80c284:	e1c00015 	stw	r7,0(fp)
  80c288:	003f6b06 	br	80c038 <_strtod_r+0x1378>

0080c28c <strtof>:
  80c28c:	defffa04 	addi	sp,sp,-24
  80c290:	dd000415 	stw	r20,16(sp)
  80c294:	05002074 	movhi	r20,129
  80c298:	a51bb804 	addi	r20,r20,28384
  80c29c:	2007883a 	mov	r3,r4
  80c2a0:	a1000017 	ldw	r4,0(r20)
  80c2a4:	280d883a 	mov	r6,r5
  80c2a8:	180b883a 	mov	r5,r3
  80c2ac:	dfc00515 	stw	ra,20(sp)
  80c2b0:	dcc00315 	stw	r19,12(sp)
  80c2b4:	dc800215 	stw	r18,8(sp)
  80c2b8:	dc400115 	stw	r17,4(sp)
  80c2bc:	dc000015 	stw	r16,0(sp)
  80c2c0:	080acc00 	call	80acc0 <_strtod_r>
  80c2c4:	180b883a 	mov	r5,r3
  80c2c8:	1009883a 	mov	r4,r2
  80c2cc:	1823883a 	mov	r17,r3
  80c2d0:	1021883a 	mov	r16,r2
  80c2d4:	080ff3c0 	call	80ff3c <__truncdfsf2>
  80c2d8:	1009883a 	mov	r4,r2
  80c2dc:	000b883a 	mov	r5,zero
  80c2e0:	1025883a 	mov	r18,r2
  80c2e4:	1027883a 	mov	r19,r2
  80c2e8:	080edb40 	call	80edb4 <__nesf2>
  80c2ec:	000d883a 	mov	r6,zero
  80c2f0:	000f883a 	mov	r7,zero
  80c2f4:	8009883a 	mov	r4,r16
  80c2f8:	880b883a 	mov	r5,r17
  80c2fc:	10000e1e 	bne	r2,zero,80c338 <strtof+0xac>
  80c300:	080fac40 	call	80fac4 <__nedf2>
  80c304:	10000c26 	beq	r2,zero,80c338 <strtof+0xac>
  80c308:	a0c00017 	ldw	r3,0(r20)
  80c30c:	00800884 	movi	r2,34
  80c310:	18800015 	stw	r2,0(r3)
  80c314:	9805883a 	mov	r2,r19
  80c318:	dfc00517 	ldw	ra,20(sp)
  80c31c:	dd000417 	ldw	r20,16(sp)
  80c320:	dcc00317 	ldw	r19,12(sp)
  80c324:	dc800217 	ldw	r18,8(sp)
  80c328:	dc400117 	ldw	r17,4(sp)
  80c32c:	dc000017 	ldw	r16,0(sp)
  80c330:	dec00604 	addi	sp,sp,24
  80c334:	f800283a 	ret
  80c338:	9009883a 	mov	r4,r18
  80c33c:	015fe034 	movhi	r5,32640
  80c340:	297fffc4 	addi	r5,r5,-1
  80c344:	080ee2c0 	call	80ee2c <__gtsf2>
  80c348:	00ffffc4 	movi	r3,-1
  80c34c:	011ffc34 	movhi	r4,32752
  80c350:	213fffc4 	addi	r4,r4,-1
  80c354:	200f883a 	mov	r7,r4
  80c358:	180d883a 	mov	r6,r3
  80c35c:	8009883a 	mov	r4,r16
  80c360:	880b883a 	mov	r5,r17
  80c364:	00800f16 	blt	zero,r2,80c3a4 <strtof+0x118>
  80c368:	9009883a 	mov	r4,r18
  80c36c:	017fe034 	movhi	r5,65408
  80c370:	297fffc4 	addi	r5,r5,-1
  80c374:	080eea40 	call	80eea4 <__ltsf2>
  80c378:	023fffc4 	movi	r8,-1
  80c37c:	027ffc34 	movhi	r9,65520
  80c380:	4a7fffc4 	addi	r9,r9,-1
  80c384:	880b883a 	mov	r5,r17
  80c388:	480f883a 	mov	r7,r9
  80c38c:	8009883a 	mov	r4,r16
  80c390:	400d883a 	mov	r6,r8
  80c394:	103fdf0e 	bge	r2,zero,80c314 <strtof+0x88>
  80c398:	080fc5c0 	call	80fc5c <__ltdf2>
  80c39c:	103fda0e 	bge	r2,zero,80c308 <strtof+0x7c>
  80c3a0:	003fdc06 	br	80c314 <strtof+0x88>
  80c3a4:	080fb4c0 	call	80fb4c <__gtdf2>
  80c3a8:	00bfd70e 	bge	zero,r2,80c308 <strtof+0x7c>
  80c3ac:	003fee06 	br	80c368 <strtof+0xdc>

0080c3b0 <strtod>:
  80c3b0:	01802074 	movhi	r6,129
  80c3b4:	319bb804 	addi	r6,r6,28384
  80c3b8:	2007883a 	mov	r3,r4
  80c3bc:	31000017 	ldw	r4,0(r6)
  80c3c0:	280d883a 	mov	r6,r5
  80c3c4:	180b883a 	mov	r5,r3
  80c3c8:	080acc01 	jmpi	80acc0 <_strtod_r>

0080c3cc <_strtol_r>:
  80c3cc:	defff304 	addi	sp,sp,-52
  80c3d0:	00802074 	movhi	r2,129
  80c3d4:	109bbc04 	addi	r2,r2,28400
  80c3d8:	dd000715 	stw	r20,28(sp)
  80c3dc:	15000017 	ldw	r20,0(r2)
  80c3e0:	ddc00a15 	stw	r23,40(sp)
  80c3e4:	dc800515 	stw	r18,20(sp)
  80c3e8:	dc400415 	stw	r17,16(sp)
  80c3ec:	dfc00c15 	stw	ra,48(sp)
  80c3f0:	df000b15 	stw	fp,44(sp)
  80c3f4:	dd800915 	stw	r22,36(sp)
  80c3f8:	dd400815 	stw	r21,32(sp)
  80c3fc:	dcc00615 	stw	r19,24(sp)
  80c400:	dc000315 	stw	r16,12(sp)
  80c404:	282f883a 	mov	r23,r5
  80c408:	d9000115 	stw	r4,4(sp)
  80c40c:	d9800215 	stw	r6,8(sp)
  80c410:	3825883a 	mov	r18,r7
  80c414:	2823883a 	mov	r17,r5
  80c418:	8c000007 	ldb	r16,0(r17)
  80c41c:	8c400044 	addi	r17,r17,1
  80c420:	a407883a 	add	r3,r20,r16
  80c424:	18800003 	ldbu	r2,0(r3)
  80c428:	1080020c 	andi	r2,r2,8
  80c42c:	103ffa1e 	bne	r2,zero,80c418 <_strtol_r+0x4c>
  80c430:	00800b44 	movi	r2,45
  80c434:	80805c26 	beq	r16,r2,80c5a8 <_strtol_r+0x1dc>
  80c438:	00800ac4 	movi	r2,43
  80c43c:	80805726 	beq	r16,r2,80c59c <_strtol_r+0x1d0>
  80c440:	d8000015 	stw	zero,0(sp)
  80c444:	9007003a 	cmpeq	r3,r18,zero
  80c448:	1800431e 	bne	r3,zero,80c558 <_strtol_r+0x18c>
  80c44c:	00800404 	movi	r2,16
  80c450:	90804126 	beq	r18,r2,80c558 <_strtol_r+0x18c>
  80c454:	902b883a 	mov	r21,r18
  80c458:	d8c00017 	ldw	r3,0(sp)
  80c45c:	1838c03a 	cmpne	fp,r3,zero
  80c460:	e0004a1e 	bne	fp,zero,80c58c <_strtol_r+0x1c0>
  80c464:	04e00034 	movhi	r19,32768
  80c468:	9cffffc4 	addi	r19,r19,-1
  80c46c:	9809883a 	mov	r4,r19
  80c470:	a80b883a 	mov	r5,r21
  80c474:	08102880 	call	810288 <__umodsi3>
  80c478:	9809883a 	mov	r4,r19
  80c47c:	a80b883a 	mov	r5,r21
  80c480:	102d883a 	mov	r22,r2
  80c484:	08102800 	call	810280 <__udivsi3>
  80c488:	1027883a 	mov	r19,r2
  80c48c:	a405883a 	add	r2,r20,r16
  80c490:	11400003 	ldbu	r5,0(r2)
  80c494:	0009883a 	mov	r4,zero
  80c498:	000d883a 	mov	r6,zero
  80c49c:	28c0010c 	andi	r3,r5,4
  80c4a0:	18000f26 	beq	r3,zero,80c4e0 <_strtol_r+0x114>
  80c4a4:	843ff404 	addi	r16,r16,-48
  80c4a8:	8480150e 	bge	r16,r18,80c500 <_strtol_r+0x134>
  80c4ac:	30003216 	blt	r6,zero,80c578 <_strtol_r+0x1ac>
  80c4b0:	99003136 	bltu	r19,r4,80c578 <_strtol_r+0x1ac>
  80c4b4:	24c02f26 	beq	r4,r19,80c574 <_strtol_r+0x1a8>
  80c4b8:	a80b883a 	mov	r5,r21
  80c4bc:	08102900 	call	810290 <__mulsi3>
  80c4c0:	1409883a 	add	r4,r2,r16
  80c4c4:	01800044 	movi	r6,1
  80c4c8:	8c000007 	ldb	r16,0(r17)
  80c4cc:	8c400044 	addi	r17,r17,1
  80c4d0:	a405883a 	add	r2,r20,r16
  80c4d4:	11400003 	ldbu	r5,0(r2)
  80c4d8:	28c0010c 	andi	r3,r5,4
  80c4dc:	183ff11e 	bne	r3,zero,80c4a4 <_strtol_r+0xd8>
  80c4e0:	288000cc 	andi	r2,r5,3
  80c4e4:	10000626 	beq	r2,zero,80c500 <_strtol_r+0x134>
  80c4e8:	2880004c 	andi	r2,r5,1
  80c4ec:	1005003a 	cmpeq	r2,r2,zero
  80c4f0:	1000231e 	bne	r2,zero,80c580 <_strtol_r+0x1b4>
  80c4f4:	00800dc4 	movi	r2,55
  80c4f8:	80a1c83a 	sub	r16,r16,r2
  80c4fc:	84bfeb16 	blt	r16,r18,80c4ac <_strtol_r+0xe0>
  80c500:	30002e16 	blt	r6,zero,80c5bc <_strtol_r+0x1f0>
  80c504:	e000231e 	bne	fp,zero,80c594 <_strtol_r+0x1c8>
  80c508:	2007883a 	mov	r3,r4
  80c50c:	d8800217 	ldw	r2,8(sp)
  80c510:	10000426 	beq	r2,zero,80c524 <_strtol_r+0x158>
  80c514:	30000126 	beq	r6,zero,80c51c <_strtol_r+0x150>
  80c518:	8dffffc4 	addi	r23,r17,-1
  80c51c:	d9000217 	ldw	r4,8(sp)
  80c520:	25c00015 	stw	r23,0(r4)
  80c524:	1805883a 	mov	r2,r3
  80c528:	dfc00c17 	ldw	ra,48(sp)
  80c52c:	df000b17 	ldw	fp,44(sp)
  80c530:	ddc00a17 	ldw	r23,40(sp)
  80c534:	dd800917 	ldw	r22,36(sp)
  80c538:	dd400817 	ldw	r21,32(sp)
  80c53c:	dd000717 	ldw	r20,28(sp)
  80c540:	dcc00617 	ldw	r19,24(sp)
  80c544:	dc800517 	ldw	r18,20(sp)
  80c548:	dc400417 	ldw	r17,16(sp)
  80c54c:	dc000317 	ldw	r16,12(sp)
  80c550:	dec00d04 	addi	sp,sp,52
  80c554:	f800283a 	ret
  80c558:	00800c04 	movi	r2,48
  80c55c:	80801f26 	beq	r16,r2,80c5dc <_strtol_r+0x210>
  80c560:	183fbc26 	beq	r3,zero,80c454 <_strtol_r+0x88>
  80c564:	00800c04 	movi	r2,48
  80c568:	80802926 	beq	r16,r2,80c610 <_strtol_r+0x244>
  80c56c:	04800284 	movi	r18,10
  80c570:	003fb806 	br	80c454 <_strtol_r+0x88>
  80c574:	b43fd00e 	bge	r22,r16,80c4b8 <_strtol_r+0xec>
  80c578:	01bfffc4 	movi	r6,-1
  80c57c:	003fd206 	br	80c4c8 <_strtol_r+0xfc>
  80c580:	008015c4 	movi	r2,87
  80c584:	80a1c83a 	sub	r16,r16,r2
  80c588:	003fdc06 	br	80c4fc <_strtol_r+0x130>
  80c58c:	04e00034 	movhi	r19,32768
  80c590:	003fb606 	br	80c46c <_strtol_r+0xa0>
  80c594:	0107c83a 	sub	r3,zero,r4
  80c598:	003fdc06 	br	80c50c <_strtol_r+0x140>
  80c59c:	8c000007 	ldb	r16,0(r17)
  80c5a0:	8c400044 	addi	r17,r17,1
  80c5a4:	003fa606 	br	80c440 <_strtol_r+0x74>
  80c5a8:	8c000007 	ldb	r16,0(r17)
  80c5ac:	00800044 	movi	r2,1
  80c5b0:	8c400044 	addi	r17,r17,1
  80c5b4:	d8800015 	stw	r2,0(sp)
  80c5b8:	003fa206 	br	80c444 <_strtol_r+0x78>
  80c5bc:	d9000017 	ldw	r4,0(sp)
  80c5c0:	2005003a 	cmpeq	r2,r4,zero
  80c5c4:	10000f1e 	bne	r2,zero,80c604 <_strtol_r+0x238>
  80c5c8:	00e00034 	movhi	r3,32768
  80c5cc:	d9000117 	ldw	r4,4(sp)
  80c5d0:	00800884 	movi	r2,34
  80c5d4:	20800015 	stw	r2,0(r4)
  80c5d8:	003fcc06 	br	80c50c <_strtol_r+0x140>
  80c5dc:	89000007 	ldb	r4,0(r17)
  80c5e0:	00801e04 	movi	r2,120
  80c5e4:	20800226 	beq	r4,r2,80c5f0 <_strtol_r+0x224>
  80c5e8:	00801604 	movi	r2,88
  80c5ec:	20bfdc1e 	bne	r4,r2,80c560 <_strtol_r+0x194>
  80c5f0:	8c000047 	ldb	r16,1(r17)
  80c5f4:	04800404 	movi	r18,16
  80c5f8:	8c400084 	addi	r17,r17,2
  80c5fc:	902b883a 	mov	r21,r18
  80c600:	003f9506 	br	80c458 <_strtol_r+0x8c>
  80c604:	00e00034 	movhi	r3,32768
  80c608:	18ffffc4 	addi	r3,r3,-1
  80c60c:	003fef06 	br	80c5cc <_strtol_r+0x200>
  80c610:	04800204 	movi	r18,8
  80c614:	902b883a 	mov	r21,r18
  80c618:	003f8f06 	br	80c458 <_strtol_r+0x8c>

0080c61c <strtol>:
  80c61c:	00802074 	movhi	r2,129
  80c620:	109bb804 	addi	r2,r2,28384
  80c624:	2013883a 	mov	r9,r4
  80c628:	11000017 	ldw	r4,0(r2)
  80c62c:	2805883a 	mov	r2,r5
  80c630:	300f883a 	mov	r7,r6
  80c634:	480b883a 	mov	r5,r9
  80c638:	100d883a 	mov	r6,r2
  80c63c:	080c3cc1 	jmpi	80c3cc <_strtol_r>

0080c640 <_strtoll_r>:
  80c640:	defff004 	addi	sp,sp,-64
  80c644:	00802074 	movhi	r2,129
  80c648:	109bbc04 	addi	r2,r2,28400
  80c64c:	df000e15 	stw	fp,56(sp)
  80c650:	17000017 	ldw	fp,0(r2)
  80c654:	ddc00d15 	stw	r23,52(sp)
  80c658:	dd000a15 	stw	r20,40(sp)
  80c65c:	dfc00f15 	stw	ra,60(sp)
  80c660:	dd800c15 	stw	r22,48(sp)
  80c664:	dd400b15 	stw	r21,44(sp)
  80c668:	dcc00915 	stw	r19,36(sp)
  80c66c:	dc800815 	stw	r18,32(sp)
  80c670:	dc400715 	stw	r17,28(sp)
  80c674:	dc000615 	stw	r16,24(sp)
  80c678:	d9400315 	stw	r5,12(sp)
  80c67c:	d9000215 	stw	r4,8(sp)
  80c680:	d9800415 	stw	r6,16(sp)
  80c684:	382f883a 	mov	r23,r7
  80c688:	2829883a 	mov	r20,r5
  80c68c:	a4c00007 	ldb	r19,0(r20)
  80c690:	a5000044 	addi	r20,r20,1
  80c694:	e4c7883a 	add	r3,fp,r19
  80c698:	18800003 	ldbu	r2,0(r3)
  80c69c:	1080020c 	andi	r2,r2,8
  80c6a0:	103ffa1e 	bne	r2,zero,80c68c <_strtoll_r+0x4c>
  80c6a4:	00800b44 	movi	r2,45
  80c6a8:	98808826 	beq	r19,r2,80c8cc <_strtoll_r+0x28c>
  80c6ac:	00800ac4 	movi	r2,43
  80c6b0:	98808326 	beq	r19,r2,80c8c0 <_strtoll_r+0x280>
  80c6b4:	d8000115 	stw	zero,4(sp)
  80c6b8:	b807003a 	cmpeq	r3,r23,zero
  80c6bc:	18005f1e 	bne	r3,zero,80c83c <_strtoll_r+0x1fc>
  80c6c0:	00800404 	movi	r2,16
  80c6c4:	b8805d26 	beq	r23,r2,80c83c <_strtoll_r+0x1fc>
  80c6c8:	b82dd7fa 	srai	r22,r23,31
  80c6cc:	b82b883a 	mov	r21,r23
  80c6d0:	d8c00117 	ldw	r3,4(sp)
  80c6d4:	1806c03a 	cmpne	r3,r3,zero
  80c6d8:	d8c00515 	stw	r3,20(sp)
  80c6dc:	1800631e 	bne	r3,zero,80c86c <_strtoll_r+0x22c>
  80c6e0:	043fffc4 	movi	r16,-1
  80c6e4:	04600034 	movhi	r17,32768
  80c6e8:	8c7fffc4 	addi	r17,r17,-1
  80c6ec:	880b883a 	mov	r5,r17
  80c6f0:	8009883a 	mov	r4,r16
  80c6f4:	a80d883a 	mov	r6,r21
  80c6f8:	b00f883a 	mov	r7,r22
  80c6fc:	080e7540 	call	80e754 <__umoddi3>
  80c700:	880b883a 	mov	r5,r17
  80c704:	8009883a 	mov	r4,r16
  80c708:	b00f883a 	mov	r7,r22
  80c70c:	a80d883a 	mov	r6,r21
  80c710:	d8800015 	stw	r2,0(sp)
  80c714:	080e0e80 	call	80e0e8 <__udivdi3>
  80c718:	1023883a 	mov	r17,r2
  80c71c:	e4c5883a 	add	r2,fp,r19
  80c720:	11000003 	ldbu	r4,0(r2)
  80c724:	1825883a 	mov	r18,r3
  80c728:	0015883a 	mov	r10,zero
  80c72c:	20c0010c 	andi	r3,r4,4
  80c730:	0017883a 	mov	r11,zero
  80c734:	000f883a 	mov	r7,zero
  80c738:	18001a26 	beq	r3,zero,80c7a4 <_strtoll_r+0x164>
  80c73c:	9c3ff404 	addi	r16,r19,-48
  80c740:	85c0200e 	bge	r16,r23,80c7c4 <_strtoll_r+0x184>
  80c744:	38003b16 	blt	r7,zero,80c834 <_strtoll_r+0x1f4>
  80c748:	92c03a36 	bltu	r18,r11,80c834 <_strtoll_r+0x1f4>
  80c74c:	5c803826 	beq	r11,r18,80c830 <_strtoll_r+0x1f0>
  80c750:	54404c26 	beq	r10,r17,80c884 <_strtoll_r+0x244>
  80c754:	580b883a 	mov	r5,r11
  80c758:	5009883a 	mov	r4,r10
  80c75c:	a80d883a 	mov	r6,r21
  80c760:	b00f883a 	mov	r7,r22
  80c764:	080df200 	call	80df20 <__muldi3>
  80c768:	8013d7fa 	srai	r9,r16,31
  80c76c:	100d883a 	mov	r6,r2
  80c770:	1405883a 	add	r2,r2,r16
  80c774:	118d803a 	cmpltu	r6,r2,r6
  80c778:	1a47883a 	add	r3,r3,r9
  80c77c:	30cd883a 	add	r6,r6,r3
  80c780:	1015883a 	mov	r10,r2
  80c784:	3017883a 	mov	r11,r6
  80c788:	01c00044 	movi	r7,1
  80c78c:	a4c00007 	ldb	r19,0(r20)
  80c790:	a5000044 	addi	r20,r20,1
  80c794:	e4c5883a 	add	r2,fp,r19
  80c798:	11000003 	ldbu	r4,0(r2)
  80c79c:	20c0010c 	andi	r3,r4,4
  80c7a0:	183fe61e 	bne	r3,zero,80c73c <_strtoll_r+0xfc>
  80c7a4:	208000cc 	andi	r2,r4,3
  80c7a8:	10000626 	beq	r2,zero,80c7c4 <_strtoll_r+0x184>
  80c7ac:	2080004c 	andi	r2,r4,1
  80c7b0:	1005003a 	cmpeq	r2,r2,zero
  80c7b4:	1000301e 	bne	r2,zero,80c878 <_strtoll_r+0x238>
  80c7b8:	02000dc4 	movi	r8,55
  80c7bc:	9a21c83a 	sub	r16,r19,r8
  80c7c0:	85ffe016 	blt	r16,r23,80c744 <_strtoll_r+0x104>
  80c7c4:	38004616 	blt	r7,zero,80c8e0 <_strtoll_r+0x2a0>
  80c7c8:	d8800517 	ldw	r2,20(sp)
  80c7cc:	1000341e 	bne	r2,zero,80c8a0 <_strtoll_r+0x260>
  80c7d0:	500b883a 	mov	r5,r10
  80c7d4:	580d883a 	mov	r6,r11
  80c7d8:	d8c00417 	ldw	r3,16(sp)
  80c7dc:	18000626 	beq	r3,zero,80c7f8 <_strtoll_r+0x1b8>
  80c7e0:	38000226 	beq	r7,zero,80c7ec <_strtoll_r+0x1ac>
  80c7e4:	a53fffc4 	addi	r20,r20,-1
  80c7e8:	dd000315 	stw	r20,12(sp)
  80c7ec:	d8c00317 	ldw	r3,12(sp)
  80c7f0:	d8800417 	ldw	r2,16(sp)
  80c7f4:	10c00015 	stw	r3,0(r2)
  80c7f8:	2805883a 	mov	r2,r5
  80c7fc:	3007883a 	mov	r3,r6
  80c800:	dfc00f17 	ldw	ra,60(sp)
  80c804:	df000e17 	ldw	fp,56(sp)
  80c808:	ddc00d17 	ldw	r23,52(sp)
  80c80c:	dd800c17 	ldw	r22,48(sp)
  80c810:	dd400b17 	ldw	r21,44(sp)
  80c814:	dd000a17 	ldw	r20,40(sp)
  80c818:	dcc00917 	ldw	r19,36(sp)
  80c81c:	dc800817 	ldw	r18,32(sp)
  80c820:	dc400717 	ldw	r17,28(sp)
  80c824:	dc000617 	ldw	r16,24(sp)
  80c828:	dec01004 	addi	sp,sp,64
  80c82c:	f800283a 	ret
  80c830:	8abfc72e 	bgeu	r17,r10,80c750 <_strtoll_r+0x110>
  80c834:	01ffffc4 	movi	r7,-1
  80c838:	003fd406 	br	80c78c <_strtoll_r+0x14c>
  80c83c:	00800c04 	movi	r2,48
  80c840:	98803226 	beq	r19,r2,80c90c <_strtoll_r+0x2cc>
  80c844:	183fa026 	beq	r3,zero,80c6c8 <_strtoll_r+0x88>
  80c848:	00800c04 	movi	r2,48
  80c84c:	98803e26 	beq	r19,r2,80c948 <_strtoll_r+0x308>
  80c850:	d8c00117 	ldw	r3,4(sp)
  80c854:	05c00284 	movi	r23,10
  80c858:	b82b883a 	mov	r21,r23
  80c85c:	1806c03a 	cmpne	r3,r3,zero
  80c860:	002d883a 	mov	r22,zero
  80c864:	d8c00515 	stw	r3,20(sp)
  80c868:	183f9d26 	beq	r3,zero,80c6e0 <_strtoll_r+0xa0>
  80c86c:	0021883a 	mov	r16,zero
  80c870:	04600034 	movhi	r17,32768
  80c874:	003f9d06 	br	80c6ec <_strtoll_r+0xac>
  80c878:	020015c4 	movi	r8,87
  80c87c:	9a21c83a 	sub	r16,r19,r8
  80c880:	003fcf06 	br	80c7c0 <_strtoll_r+0x180>
  80c884:	5cbfb31e 	bne	r11,r18,80c754 <_strtoll_r+0x114>
  80c888:	d8800017 	ldw	r2,0(sp)
  80c88c:	143fb10e 	bge	r2,r16,80c754 <_strtoll_r+0x114>
  80c890:	8815883a 	mov	r10,r17
  80c894:	9017883a 	mov	r11,r18
  80c898:	01ffffc4 	movi	r7,-1
  80c89c:	003fbb06 	br	80c78c <_strtoll_r+0x14c>
  80c8a0:	0009883a 	mov	r4,zero
  80c8a4:	2285c83a 	sub	r2,r4,r10
  80c8a8:	2089803a 	cmpltu	r4,r4,r2
  80c8ac:	02c7c83a 	sub	r3,zero,r11
  80c8b0:	1909c83a 	sub	r4,r3,r4
  80c8b4:	100b883a 	mov	r5,r2
  80c8b8:	200d883a 	mov	r6,r4
  80c8bc:	003fc606 	br	80c7d8 <_strtoll_r+0x198>
  80c8c0:	a4c00007 	ldb	r19,0(r20)
  80c8c4:	a5000044 	addi	r20,r20,1
  80c8c8:	003f7a06 	br	80c6b4 <_strtoll_r+0x74>
  80c8cc:	a4c00007 	ldb	r19,0(r20)
  80c8d0:	00800044 	movi	r2,1
  80c8d4:	a5000044 	addi	r20,r20,1
  80c8d8:	d8800115 	stw	r2,4(sp)
  80c8dc:	003f7606 	br	80c6b8 <_strtoll_r+0x78>
  80c8e0:	d8c00117 	ldw	r3,4(sp)
  80c8e4:	1805003a 	cmpeq	r2,r3,zero
  80c8e8:	1000131e 	bne	r2,zero,80c938 <_strtoll_r+0x2f8>
  80c8ec:	0005883a 	mov	r2,zero
  80c8f0:	00e00034 	movhi	r3,32768
  80c8f4:	100b883a 	mov	r5,r2
  80c8f8:	180d883a 	mov	r6,r3
  80c8fc:	d8c00217 	ldw	r3,8(sp)
  80c900:	00800884 	movi	r2,34
  80c904:	18800015 	stw	r2,0(r3)
  80c908:	003fb306 	br	80c7d8 <_strtoll_r+0x198>
  80c90c:	a1000007 	ldb	r4,0(r20)
  80c910:	00801e04 	movi	r2,120
  80c914:	20800226 	beq	r4,r2,80c920 <_strtoll_r+0x2e0>
  80c918:	00801604 	movi	r2,88
  80c91c:	20bfc91e 	bne	r4,r2,80c844 <_strtoll_r+0x204>
  80c920:	a4c00047 	ldb	r19,1(r20)
  80c924:	05c00404 	movi	r23,16
  80c928:	b82b883a 	mov	r21,r23
  80c92c:	a5000084 	addi	r20,r20,2
  80c930:	002d883a 	mov	r22,zero
  80c934:	003f6606 	br	80c6d0 <_strtoll_r+0x90>
  80c938:	017fffc4 	movi	r5,-1
  80c93c:	01a00034 	movhi	r6,32768
  80c940:	31bfffc4 	addi	r6,r6,-1
  80c944:	003fed06 	br	80c8fc <_strtoll_r+0x2bc>
  80c948:	05c00204 	movi	r23,8
  80c94c:	b82b883a 	mov	r21,r23
  80c950:	002d883a 	mov	r22,zero
  80c954:	003f5e06 	br	80c6d0 <_strtoll_r+0x90>

0080c958 <_strtoul_r>:
  80c958:	defff404 	addi	sp,sp,-48
  80c95c:	00802074 	movhi	r2,129
  80c960:	109bbc04 	addi	r2,r2,28400
  80c964:	dd000615 	stw	r20,24(sp)
  80c968:	15000017 	ldw	r20,0(r2)
  80c96c:	df000a15 	stw	fp,40(sp)
  80c970:	ddc00915 	stw	r23,36(sp)
  80c974:	dc800415 	stw	r18,16(sp)
  80c978:	dc400315 	stw	r17,12(sp)
  80c97c:	dfc00b15 	stw	ra,44(sp)
  80c980:	dd800815 	stw	r22,32(sp)
  80c984:	dd400715 	stw	r21,28(sp)
  80c988:	dcc00515 	stw	r19,20(sp)
  80c98c:	dc000215 	stw	r16,8(sp)
  80c990:	282f883a 	mov	r23,r5
  80c994:	d9000115 	stw	r4,4(sp)
  80c998:	3039883a 	mov	fp,r6
  80c99c:	3825883a 	mov	r18,r7
  80c9a0:	2823883a 	mov	r17,r5
  80c9a4:	8c000007 	ldb	r16,0(r17)
  80c9a8:	8c400044 	addi	r17,r17,1
  80c9ac:	a407883a 	add	r3,r20,r16
  80c9b0:	18800003 	ldbu	r2,0(r3)
  80c9b4:	1080020c 	andi	r2,r2,8
  80c9b8:	103ffa1e 	bne	r2,zero,80c9a4 <_strtoul_r+0x4c>
  80c9bc:	00800b44 	movi	r2,45
  80c9c0:	80805826 	beq	r16,r2,80cb24 <_strtoul_r+0x1cc>
  80c9c4:	00800ac4 	movi	r2,43
  80c9c8:	80805326 	beq	r16,r2,80cb18 <_strtoul_r+0x1c0>
  80c9cc:	d8000015 	stw	zero,0(sp)
  80c9d0:	9007003a 	cmpeq	r3,r18,zero
  80c9d4:	18003d1e 	bne	r3,zero,80cacc <_strtoul_r+0x174>
  80c9d8:	00800404 	movi	r2,16
  80c9dc:	90803b26 	beq	r18,r2,80cacc <_strtoul_r+0x174>
  80c9e0:	013fffc4 	movi	r4,-1
  80c9e4:	900b883a 	mov	r5,r18
  80c9e8:	08102800 	call	810280 <__udivsi3>
  80c9ec:	013fffc4 	movi	r4,-1
  80c9f0:	900b883a 	mov	r5,r18
  80c9f4:	1027883a 	mov	r19,r2
  80c9f8:	08102880 	call	810288 <__umodsi3>
  80c9fc:	102d883a 	mov	r22,r2
  80ca00:	902b883a 	mov	r21,r18
  80ca04:	a405883a 	add	r2,r20,r16
  80ca08:	11400003 	ldbu	r5,0(r2)
  80ca0c:	0009883a 	mov	r4,zero
  80ca10:	000d883a 	mov	r6,zero
  80ca14:	28c0010c 	andi	r3,r5,4
  80ca18:	18000f26 	beq	r3,zero,80ca58 <_strtoul_r+0x100>
  80ca1c:	843ff404 	addi	r16,r16,-48
  80ca20:	8480150e 	bge	r16,r18,80ca78 <_strtoul_r+0x120>
  80ca24:	30003516 	blt	r6,zero,80cafc <_strtoul_r+0x1a4>
  80ca28:	99003436 	bltu	r19,r4,80cafc <_strtoul_r+0x1a4>
  80ca2c:	24c03226 	beq	r4,r19,80caf8 <_strtoul_r+0x1a0>
  80ca30:	a80b883a 	mov	r5,r21
  80ca34:	08102900 	call	810290 <__mulsi3>
  80ca38:	1409883a 	add	r4,r2,r16
  80ca3c:	01800044 	movi	r6,1
  80ca40:	8c000007 	ldb	r16,0(r17)
  80ca44:	8c400044 	addi	r17,r17,1
  80ca48:	a405883a 	add	r2,r20,r16
  80ca4c:	11400003 	ldbu	r5,0(r2)
  80ca50:	28c0010c 	andi	r3,r5,4
  80ca54:	183ff11e 	bne	r3,zero,80ca1c <_strtoul_r+0xc4>
  80ca58:	288000cc 	andi	r2,r5,3
  80ca5c:	10000626 	beq	r2,zero,80ca78 <_strtoul_r+0x120>
  80ca60:	2880004c 	andi	r2,r5,1
  80ca64:	1005003a 	cmpeq	r2,r2,zero
  80ca68:	1000261e 	bne	r2,zero,80cb04 <_strtoul_r+0x1ac>
  80ca6c:	00800dc4 	movi	r2,55
  80ca70:	80a1c83a 	sub	r16,r16,r2
  80ca74:	84bfeb16 	blt	r16,r18,80ca24 <_strtoul_r+0xcc>
  80ca78:	3000420e 	bge	r6,zero,80cb84 <_strtoul_r+0x22c>
  80ca7c:	d8c00117 	ldw	r3,4(sp)
  80ca80:	00800884 	movi	r2,34
  80ca84:	013fffc4 	movi	r4,-1
  80ca88:	18800015 	stw	r2,0(r3)
  80ca8c:	e0000226 	beq	fp,zero,80ca98 <_strtoul_r+0x140>
  80ca90:	30001f1e 	bne	r6,zero,80cb10 <_strtoul_r+0x1b8>
  80ca94:	e5c00015 	stw	r23,0(fp)
  80ca98:	2005883a 	mov	r2,r4
  80ca9c:	dfc00b17 	ldw	ra,44(sp)
  80caa0:	df000a17 	ldw	fp,40(sp)
  80caa4:	ddc00917 	ldw	r23,36(sp)
  80caa8:	dd800817 	ldw	r22,32(sp)
  80caac:	dd400717 	ldw	r21,28(sp)
  80cab0:	dd000617 	ldw	r20,24(sp)
  80cab4:	dcc00517 	ldw	r19,20(sp)
  80cab8:	dc800417 	ldw	r18,16(sp)
  80cabc:	dc400317 	ldw	r17,12(sp)
  80cac0:	dc000217 	ldw	r16,8(sp)
  80cac4:	dec00c04 	addi	sp,sp,48
  80cac8:	f800283a 	ret
  80cacc:	00800c04 	movi	r2,48
  80cad0:	80801926 	beq	r16,r2,80cb38 <_strtoul_r+0x1e0>
  80cad4:	183fc226 	beq	r3,zero,80c9e0 <_strtoul_r+0x88>
  80cad8:	00800c04 	movi	r2,48
  80cadc:	80802326 	beq	r16,r2,80cb6c <_strtoul_r+0x214>
  80cae0:	04800284 	movi	r18,10
  80cae4:	902b883a 	mov	r21,r18
  80cae8:	04c666b4 	movhi	r19,6554
  80caec:	9ce66644 	addi	r19,r19,-26215
  80caf0:	05800144 	movi	r22,5
  80caf4:	003fc306 	br	80ca04 <_strtoul_r+0xac>
  80caf8:	b43fcd0e 	bge	r22,r16,80ca30 <_strtoul_r+0xd8>
  80cafc:	01bfffc4 	movi	r6,-1
  80cb00:	003fcf06 	br	80ca40 <_strtoul_r+0xe8>
  80cb04:	008015c4 	movi	r2,87
  80cb08:	80a1c83a 	sub	r16,r16,r2
  80cb0c:	003fd906 	br	80ca74 <_strtoul_r+0x11c>
  80cb10:	8dffffc4 	addi	r23,r17,-1
  80cb14:	003fdf06 	br	80ca94 <_strtoul_r+0x13c>
  80cb18:	8c000007 	ldb	r16,0(r17)
  80cb1c:	8c400044 	addi	r17,r17,1
  80cb20:	003faa06 	br	80c9cc <_strtoul_r+0x74>
  80cb24:	8c000007 	ldb	r16,0(r17)
  80cb28:	00800044 	movi	r2,1
  80cb2c:	8c400044 	addi	r17,r17,1
  80cb30:	d8800015 	stw	r2,0(sp)
  80cb34:	003fa606 	br	80c9d0 <_strtoul_r+0x78>
  80cb38:	89000007 	ldb	r4,0(r17)
  80cb3c:	00801e04 	movi	r2,120
  80cb40:	20800226 	beq	r4,r2,80cb4c <_strtoul_r+0x1f4>
  80cb44:	00801604 	movi	r2,88
  80cb48:	20bfe21e 	bne	r4,r2,80cad4 <_strtoul_r+0x17c>
  80cb4c:	8c000047 	ldb	r16,1(r17)
  80cb50:	04800404 	movi	r18,16
  80cb54:	8c400084 	addi	r17,r17,2
  80cb58:	902b883a 	mov	r21,r18
  80cb5c:	04c40034 	movhi	r19,4096
  80cb60:	9cffffc4 	addi	r19,r19,-1
  80cb64:	058003c4 	movi	r22,15
  80cb68:	003fa606 	br	80ca04 <_strtoul_r+0xac>
  80cb6c:	04800204 	movi	r18,8
  80cb70:	902b883a 	mov	r21,r18
  80cb74:	04c80034 	movhi	r19,8192
  80cb78:	9cffffc4 	addi	r19,r19,-1
  80cb7c:	058001c4 	movi	r22,7
  80cb80:	003fa006 	br	80ca04 <_strtoul_r+0xac>
  80cb84:	d8c00017 	ldw	r3,0(sp)
  80cb88:	1805003a 	cmpeq	r2,r3,zero
  80cb8c:	103fbf1e 	bne	r2,zero,80ca8c <_strtoul_r+0x134>
  80cb90:	0109c83a 	sub	r4,zero,r4
  80cb94:	003fbd06 	br	80ca8c <_strtoul_r+0x134>

0080cb98 <strtoul>:
  80cb98:	00802074 	movhi	r2,129
  80cb9c:	109bb804 	addi	r2,r2,28384
  80cba0:	2013883a 	mov	r9,r4
  80cba4:	11000017 	ldw	r4,0(r2)
  80cba8:	2805883a 	mov	r2,r5
  80cbac:	300f883a 	mov	r7,r6
  80cbb0:	480b883a 	mov	r5,r9
  80cbb4:	100d883a 	mov	r6,r2
  80cbb8:	080c9581 	jmpi	80c958 <_strtoul_r>

0080cbbc <_strtoull_r>:
  80cbbc:	defff104 	addi	sp,sp,-60
  80cbc0:	00802074 	movhi	r2,129
  80cbc4:	109bbc04 	addi	r2,r2,28400
  80cbc8:	df000d15 	stw	fp,52(sp)
  80cbcc:	17000017 	ldw	fp,0(r2)
  80cbd0:	ddc00c15 	stw	r23,48(sp)
  80cbd4:	dcc00815 	stw	r19,32(sp)
  80cbd8:	dfc00e15 	stw	ra,56(sp)
  80cbdc:	dd800b15 	stw	r22,44(sp)
  80cbe0:	dd400a15 	stw	r21,40(sp)
  80cbe4:	dd000915 	stw	r20,36(sp)
  80cbe8:	dc800715 	stw	r18,28(sp)
  80cbec:	dc400615 	stw	r17,24(sp)
  80cbf0:	dc000515 	stw	r16,20(sp)
  80cbf4:	d9400215 	stw	r5,8(sp)
  80cbf8:	d9000115 	stw	r4,4(sp)
  80cbfc:	d9800315 	stw	r6,12(sp)
  80cc00:	382f883a 	mov	r23,r7
  80cc04:	2827883a 	mov	r19,r5
  80cc08:	9d000007 	ldb	r20,0(r19)
  80cc0c:	9cc00044 	addi	r19,r19,1
  80cc10:	e507883a 	add	r3,fp,r20
  80cc14:	18800003 	ldbu	r2,0(r3)
  80cc18:	1080020c 	andi	r2,r2,8
  80cc1c:	103ffa1e 	bne	r2,zero,80cc08 <_strtoull_r+0x4c>
  80cc20:	00800b44 	movi	r2,45
  80cc24:	a0807a26 	beq	r20,r2,80ce10 <_strtoull_r+0x254>
  80cc28:	00800ac4 	movi	r2,43
  80cc2c:	a0807526 	beq	r20,r2,80ce04 <_strtoull_r+0x248>
  80cc30:	d8000015 	stw	zero,0(sp)
  80cc34:	b807003a 	cmpeq	r3,r23,zero
  80cc38:	18005a1e 	bne	r3,zero,80cda4 <_strtoull_r+0x1e8>
  80cc3c:	00800404 	movi	r2,16
  80cc40:	b8805826 	beq	r23,r2,80cda4 <_strtoull_r+0x1e8>
  80cc44:	b82dd7fa 	srai	r22,r23,31
  80cc48:	043fffc4 	movi	r16,-1
  80cc4c:	8009883a 	mov	r4,r16
  80cc50:	800b883a 	mov	r5,r16
  80cc54:	b80d883a 	mov	r6,r23
  80cc58:	b00f883a 	mov	r7,r22
  80cc5c:	080e0e80 	call	80e0e8 <__udivdi3>
  80cc60:	8009883a 	mov	r4,r16
  80cc64:	800b883a 	mov	r5,r16
  80cc68:	b80d883a 	mov	r6,r23
  80cc6c:	b00f883a 	mov	r7,r22
  80cc70:	1023883a 	mov	r17,r2
  80cc74:	1825883a 	mov	r18,r3
  80cc78:	080e7540 	call	80e754 <__umoddi3>
  80cc7c:	b82b883a 	mov	r21,r23
  80cc80:	1019883a 	mov	r12,r2
  80cc84:	e505883a 	add	r2,fp,r20
  80cc88:	11000003 	ldbu	r4,0(r2)
  80cc8c:	0015883a 	mov	r10,zero
  80cc90:	0017883a 	mov	r11,zero
  80cc94:	20c0010c 	andi	r3,r4,4
  80cc98:	000d883a 	mov	r6,zero
  80cc9c:	18001c26 	beq	r3,zero,80cd10 <_strtoull_r+0x154>
  80cca0:	a43ff404 	addi	r16,r20,-48
  80cca4:	85c0220e 	bge	r16,r23,80cd30 <_strtoull_r+0x174>
  80cca8:	30003c16 	blt	r6,zero,80cd9c <_strtoull_r+0x1e0>
  80ccac:	92c03b36 	bltu	r18,r11,80cd9c <_strtoull_r+0x1e0>
  80ccb0:	5c803926 	beq	r11,r18,80cd98 <_strtoull_r+0x1dc>
  80ccb4:	54404c26 	beq	r10,r17,80cde8 <_strtoull_r+0x22c>
  80ccb8:	580b883a 	mov	r5,r11
  80ccbc:	5009883a 	mov	r4,r10
  80ccc0:	a80d883a 	mov	r6,r21
  80ccc4:	b00f883a 	mov	r7,r22
  80ccc8:	db000415 	stw	r12,16(sp)
  80cccc:	080df200 	call	80df20 <__muldi3>
  80ccd0:	8013d7fa 	srai	r9,r16,31
  80ccd4:	100d883a 	mov	r6,r2
  80ccd8:	1405883a 	add	r2,r2,r16
  80ccdc:	118d803a 	cmpltu	r6,r2,r6
  80cce0:	1a47883a 	add	r3,r3,r9
  80cce4:	db000417 	ldw	r12,16(sp)
  80cce8:	30cd883a 	add	r6,r6,r3
  80ccec:	3017883a 	mov	r11,r6
  80ccf0:	1015883a 	mov	r10,r2
  80ccf4:	01800044 	movi	r6,1
  80ccf8:	9d000007 	ldb	r20,0(r19)
  80ccfc:	9cc00044 	addi	r19,r19,1
  80cd00:	e505883a 	add	r2,fp,r20
  80cd04:	11000003 	ldbu	r4,0(r2)
  80cd08:	20c0010c 	andi	r3,r4,4
  80cd0c:	183fe41e 	bne	r3,zero,80cca0 <_strtoull_r+0xe4>
  80cd10:	208000cc 	andi	r2,r4,3
  80cd14:	10000626 	beq	r2,zero,80cd30 <_strtoull_r+0x174>
  80cd18:	2080004c 	andi	r2,r4,1
  80cd1c:	1005003a 	cmpeq	r2,r2,zero
  80cd20:	10002e1e 	bne	r2,zero,80cddc <_strtoull_r+0x220>
  80cd24:	02000dc4 	movi	r8,55
  80cd28:	a221c83a 	sub	r16,r20,r8
  80cd2c:	85ffde16 	blt	r16,r23,80cca8 <_strtoull_r+0xec>
  80cd30:	3000530e 	bge	r6,zero,80ce80 <_strtoull_r+0x2c4>
  80cd34:	d8c00117 	ldw	r3,4(sp)
  80cd38:	02bfffc4 	movi	r10,-1
  80cd3c:	00800884 	movi	r2,34
  80cd40:	5017883a 	mov	r11,r10
  80cd44:	18800015 	stw	r2,0(r3)
  80cd48:	d8800317 	ldw	r2,12(sp)
  80cd4c:	10000426 	beq	r2,zero,80cd60 <_strtoull_r+0x1a4>
  80cd50:	3000291e 	bne	r6,zero,80cdf8 <_strtoull_r+0x23c>
  80cd54:	d8800217 	ldw	r2,8(sp)
  80cd58:	d8c00317 	ldw	r3,12(sp)
  80cd5c:	18800015 	stw	r2,0(r3)
  80cd60:	5005883a 	mov	r2,r10
  80cd64:	5807883a 	mov	r3,r11
  80cd68:	dfc00e17 	ldw	ra,56(sp)
  80cd6c:	df000d17 	ldw	fp,52(sp)
  80cd70:	ddc00c17 	ldw	r23,48(sp)
  80cd74:	dd800b17 	ldw	r22,44(sp)
  80cd78:	dd400a17 	ldw	r21,40(sp)
  80cd7c:	dd000917 	ldw	r20,36(sp)
  80cd80:	dcc00817 	ldw	r19,32(sp)
  80cd84:	dc800717 	ldw	r18,28(sp)
  80cd88:	dc400617 	ldw	r17,24(sp)
  80cd8c:	dc000517 	ldw	r16,20(sp)
  80cd90:	dec00f04 	addi	sp,sp,60
  80cd94:	f800283a 	ret
  80cd98:	8abfc62e 	bgeu	r17,r10,80ccb4 <_strtoull_r+0xf8>
  80cd9c:	01bfffc4 	movi	r6,-1
  80cda0:	003fd506 	br	80ccf8 <_strtoull_r+0x13c>
  80cda4:	00800c04 	movi	r2,48
  80cda8:	a0801e26 	beq	r20,r2,80ce24 <_strtoull_r+0x268>
  80cdac:	183fa526 	beq	r3,zero,80cc44 <_strtoull_r+0x88>
  80cdb0:	00800c04 	movi	r2,48
  80cdb4:	a0802a26 	beq	r20,r2,80ce60 <_strtoull_r+0x2a4>
  80cdb8:	05c00284 	movi	r23,10
  80cdbc:	b82b883a 	mov	r21,r23
  80cdc0:	046666b4 	movhi	r17,39322
  80cdc4:	8c666644 	addi	r17,r17,-26215
  80cdc8:	002d883a 	mov	r22,zero
  80cdcc:	048666b4 	movhi	r18,6554
  80cdd0:	94a66644 	addi	r18,r18,-26215
  80cdd4:	03000144 	movi	r12,5
  80cdd8:	003faa06 	br	80cc84 <_strtoull_r+0xc8>
  80cddc:	020015c4 	movi	r8,87
  80cde0:	a221c83a 	sub	r16,r20,r8
  80cde4:	003fd106 	br	80cd2c <_strtoull_r+0x170>
  80cde8:	5cbfb31e 	bne	r11,r18,80ccb8 <_strtoull_r+0xfc>
  80cdec:	643fb20e 	bge	r12,r16,80ccb8 <_strtoull_r+0xfc>
  80cdf0:	01bfffc4 	movi	r6,-1
  80cdf4:	003fc006 	br	80ccf8 <_strtoull_r+0x13c>
  80cdf8:	9cffffc4 	addi	r19,r19,-1
  80cdfc:	dcc00215 	stw	r19,8(sp)
  80ce00:	003fd406 	br	80cd54 <_strtoull_r+0x198>
  80ce04:	9d000007 	ldb	r20,0(r19)
  80ce08:	9cc00044 	addi	r19,r19,1
  80ce0c:	003f8806 	br	80cc30 <_strtoull_r+0x74>
  80ce10:	9d000007 	ldb	r20,0(r19)
  80ce14:	00800044 	movi	r2,1
  80ce18:	9cc00044 	addi	r19,r19,1
  80ce1c:	d8800015 	stw	r2,0(sp)
  80ce20:	003f8406 	br	80cc34 <_strtoull_r+0x78>
  80ce24:	99000007 	ldb	r4,0(r19)
  80ce28:	00801e04 	movi	r2,120
  80ce2c:	20800226 	beq	r4,r2,80ce38 <_strtoull_r+0x27c>
  80ce30:	00801604 	movi	r2,88
  80ce34:	20bfdd1e 	bne	r4,r2,80cdac <_strtoull_r+0x1f0>
  80ce38:	9d000047 	ldb	r20,1(r19)
  80ce3c:	05c00404 	movi	r23,16
  80ce40:	b82b883a 	mov	r21,r23
  80ce44:	047fffc4 	movi	r17,-1
  80ce48:	9cc00084 	addi	r19,r19,2
  80ce4c:	002d883a 	mov	r22,zero
  80ce50:	04840034 	movhi	r18,4096
  80ce54:	94bfffc4 	addi	r18,r18,-1
  80ce58:	030003c4 	movi	r12,15
  80ce5c:	003f8906 	br	80cc84 <_strtoull_r+0xc8>
  80ce60:	05c00204 	movi	r23,8
  80ce64:	b82b883a 	mov	r21,r23
  80ce68:	047fffc4 	movi	r17,-1
  80ce6c:	002d883a 	mov	r22,zero
  80ce70:	04880034 	movhi	r18,8192
  80ce74:	94bfffc4 	addi	r18,r18,-1
  80ce78:	030001c4 	movi	r12,7
  80ce7c:	003f8106 	br	80cc84 <_strtoull_r+0xc8>
  80ce80:	d8c00017 	ldw	r3,0(sp)
  80ce84:	1805003a 	cmpeq	r2,r3,zero
  80ce88:	103faf1e 	bne	r2,zero,80cd48 <_strtoull_r+0x18c>
  80ce8c:	0009883a 	mov	r4,zero
  80ce90:	2285c83a 	sub	r2,r4,r10
  80ce94:	02c7c83a 	sub	r3,zero,r11
  80ce98:	2089803a 	cmpltu	r4,r4,r2
  80ce9c:	1909c83a 	sub	r4,r3,r4
  80cea0:	1015883a 	mov	r10,r2
  80cea4:	2017883a 	mov	r11,r4
  80cea8:	003fa706 	br	80cd48 <_strtoull_r+0x18c>

0080ceac <__submore>:
  80ceac:	defffa04 	addi	sp,sp,-24
  80ceb0:	28c00c17 	ldw	r3,48(r5)
  80ceb4:	dc800215 	stw	r18,8(sp)
  80ceb8:	2825883a 	mov	r18,r5
  80cebc:	dc000015 	stw	r16,0(sp)
  80cec0:	90801004 	addi	r2,r18,64
  80cec4:	04010004 	movi	r16,1024
  80cec8:	dfc00515 	stw	ra,20(sp)
  80cecc:	dd000415 	stw	r20,16(sp)
  80ced0:	dcc00315 	stw	r19,12(sp)
  80ced4:	dc400115 	stw	r17,4(sp)
  80ced8:	800b883a 	mov	r5,r16
  80cedc:	18801b26 	beq	r3,r2,80cf4c <__submore+0xa0>
  80cee0:	94400d17 	ldw	r17,52(r18)
  80cee4:	180b883a 	mov	r5,r3
  80cee8:	8c69883a 	add	r20,r17,r17
  80ceec:	a00d883a 	mov	r6,r20
  80cef0:	080a3bc0 	call	80a3bc <_realloc_r>
  80cef4:	1467883a 	add	r19,r2,r17
  80cef8:	1021883a 	mov	r16,r2
  80cefc:	880d883a 	mov	r6,r17
  80cf00:	9809883a 	mov	r4,r19
  80cf04:	100b883a 	mov	r5,r2
  80cf08:	10000e26 	beq	r2,zero,80cf44 <__submore+0x98>
  80cf0c:	0808f4c0 	call	808f4c <memcpy>
  80cf10:	000d883a 	mov	r6,zero
  80cf14:	95000d15 	stw	r20,52(r18)
  80cf18:	94c00015 	stw	r19,0(r18)
  80cf1c:	94000c15 	stw	r16,48(r18)
  80cf20:	3005883a 	mov	r2,r6
  80cf24:	dfc00517 	ldw	ra,20(sp)
  80cf28:	dd000417 	ldw	r20,16(sp)
  80cf2c:	dcc00317 	ldw	r19,12(sp)
  80cf30:	dc800217 	ldw	r18,8(sp)
  80cf34:	dc400117 	ldw	r17,4(sp)
  80cf38:	dc000017 	ldw	r16,0(sp)
  80cf3c:	dec00604 	addi	sp,sp,24
  80cf40:	f800283a 	ret
  80cf44:	01bfffc4 	movi	r6,-1
  80cf48:	003ff506 	br	80cf20 <__submore+0x74>
  80cf4c:	08024000 	call	802400 <_malloc_r>
  80cf50:	1009883a 	mov	r4,r2
  80cf54:	1140ff44 	addi	r5,r2,1021
  80cf58:	000d883a 	mov	r6,zero
  80cf5c:	103ff926 	beq	r2,zero,80cf44 <__submore+0x98>
  80cf60:	90801083 	ldbu	r2,66(r18)
  80cf64:	94000d15 	stw	r16,52(r18)
  80cf68:	91000c15 	stw	r4,48(r18)
  80cf6c:	28800085 	stb	r2,2(r5)
  80cf70:	90c01043 	ldbu	r3,65(r18)
  80cf74:	28c00045 	stb	r3,1(r5)
  80cf78:	90801003 	ldbu	r2,64(r18)
  80cf7c:	2080ff45 	stb	r2,1021(r4)
  80cf80:	91400015 	stw	r5,0(r18)
  80cf84:	003fe606 	br	80cf20 <__submore+0x74>

0080cf88 <_ungetc_r>:
  80cf88:	defffc04 	addi	sp,sp,-16
  80cf8c:	00bfffc4 	movi	r2,-1
  80cf90:	dc400215 	stw	r17,8(sp)
  80cf94:	dc000115 	stw	r16,4(sp)
  80cf98:	dfc00315 	stw	ra,12(sp)
  80cf9c:	2821883a 	mov	r16,r5
  80cfa0:	2023883a 	mov	r17,r4
  80cfa4:	28801826 	beq	r5,r2,80d008 <_ungetc_r+0x80>
  80cfa8:	20000226 	beq	r4,zero,80cfb4 <_ungetc_r+0x2c>
  80cfac:	20800e17 	ldw	r2,56(r4)
  80cfb0:	10001b26 	beq	r2,zero,80d020 <_ungetc_r+0x98>
  80cfb4:	3100030b 	ldhu	r4,12(r6)
  80cfb8:	00bff7c4 	movi	r2,-33
  80cfbc:	2084703a 	and	r2,r4,r2
  80cfc0:	117fffcc 	andi	r5,r2,65535
  80cfc4:	28c0010c 	andi	r3,r5,4
  80cfc8:	1009883a 	mov	r4,r2
  80cfcc:	3080030d 	sth	r2,12(r6)
  80cfd0:	18003526 	beq	r3,zero,80d0a8 <_ungetc_r+0x120>
  80cfd4:	30800c17 	ldw	r2,48(r6)
  80cfd8:	84003fcc 	andi	r16,r16,255
  80cfdc:	10001426 	beq	r2,zero,80d030 <_ungetc_r+0xa8>
  80cfe0:	30c00117 	ldw	r3,4(r6)
  80cfe4:	30800d17 	ldw	r2,52(r6)
  80cfe8:	1880380e 	bge	r3,r2,80d0cc <_ungetc_r+0x144>
  80cfec:	30c00017 	ldw	r3,0(r6)
  80cff0:	19ffffc4 	addi	r7,r3,-1
  80cff4:	31c00015 	stw	r7,0(r6)
  80cff8:	1c3fffc5 	stb	r16,-1(r3)
  80cffc:	30800117 	ldw	r2,4(r6)
  80d000:	10800044 	addi	r2,r2,1
  80d004:	30800115 	stw	r2,4(r6)
  80d008:	8005883a 	mov	r2,r16
  80d00c:	dfc00317 	ldw	ra,12(sp)
  80d010:	dc400217 	ldw	r17,8(sp)
  80d014:	dc000117 	ldw	r16,4(sp)
  80d018:	dec00404 	addi	sp,sp,16
  80d01c:	f800283a 	ret
  80d020:	d9800015 	stw	r6,0(sp)
  80d024:	08011c80 	call	8011c8 <__sinit>
  80d028:	d9800017 	ldw	r6,0(sp)
  80d02c:	003fe106 	br	80cfb4 <_ungetc_r+0x2c>
  80d030:	30800417 	ldw	r2,16(r6)
  80d034:	10002326 	beq	r2,zero,80d0c4 <_ungetc_r+0x13c>
  80d038:	31c00017 	ldw	r7,0(r6)
  80d03c:	11c0022e 	bgeu	r2,r7,80d048 <_ungetc_r+0xc0>
  80d040:	38bfffc3 	ldbu	r2,-1(r7)
  80d044:	80801226 	beq	r16,r2,80d090 <_ungetc_r+0x108>
  80d048:	30c00117 	ldw	r3,4(r6)
  80d04c:	00800044 	movi	r2,1
  80d050:	30800115 	stw	r2,4(r6)
  80d054:	008000c4 	movi	r2,3
  80d058:	31001004 	addi	r4,r6,64
  80d05c:	31401084 	addi	r5,r6,66
  80d060:	30800d15 	stw	r2,52(r6)
  80d064:	8005883a 	mov	r2,r16
  80d068:	30c00f15 	stw	r3,60(r6)
  80d06c:	31c00e15 	stw	r7,56(r6)
  80d070:	31000c15 	stw	r4,48(r6)
  80d074:	31400015 	stw	r5,0(r6)
  80d078:	34001085 	stb	r16,66(r6)
  80d07c:	dfc00317 	ldw	ra,12(sp)
  80d080:	dc400217 	ldw	r17,8(sp)
  80d084:	dc000117 	ldw	r16,4(sp)
  80d088:	dec00404 	addi	sp,sp,16
  80d08c:	f800283a 	ret
  80d090:	30800117 	ldw	r2,4(r6)
  80d094:	39ffffc4 	addi	r7,r7,-1
  80d098:	31c00015 	stw	r7,0(r6)
  80d09c:	10800044 	addi	r2,r2,1
  80d0a0:	30800115 	stw	r2,4(r6)
  80d0a4:	003fd806 	br	80d008 <_ungetc_r+0x80>
  80d0a8:	2880040c 	andi	r2,r5,16
  80d0ac:	10000d26 	beq	r2,zero,80d0e4 <_ungetc_r+0x15c>
  80d0b0:	2880020c 	andi	r2,r5,8
  80d0b4:	10000d1e 	bne	r2,zero,80d0ec <_ungetc_r+0x164>
  80d0b8:	20800114 	ori	r2,r4,4
  80d0bc:	3080030d 	sth	r2,12(r6)
  80d0c0:	003fc406 	br	80cfd4 <_ungetc_r+0x4c>
  80d0c4:	31c00017 	ldw	r7,0(r6)
  80d0c8:	003fdf06 	br	80d048 <_ungetc_r+0xc0>
  80d0cc:	300b883a 	mov	r5,r6
  80d0d0:	8809883a 	mov	r4,r17
  80d0d4:	d9800015 	stw	r6,0(sp)
  80d0d8:	080ceac0 	call	80ceac <__submore>
  80d0dc:	d9800017 	ldw	r6,0(sp)
  80d0e0:	103fc226 	beq	r2,zero,80cfec <_ungetc_r+0x64>
  80d0e4:	043fffc4 	movi	r16,-1
  80d0e8:	003fc706 	br	80d008 <_ungetc_r+0x80>
  80d0ec:	300b883a 	mov	r5,r6
  80d0f0:	8809883a 	mov	r4,r17
  80d0f4:	d9800015 	stw	r6,0(sp)
  80d0f8:	0800f300 	call	800f30 <_fflush_r>
  80d0fc:	d9800017 	ldw	r6,0(sp)
  80d100:	103ff81e 	bne	r2,zero,80d0e4 <_ungetc_r+0x15c>
  80d104:	3100030b 	ldhu	r4,12(r6)
  80d108:	00bffdc4 	movi	r2,-9
  80d10c:	30000215 	stw	zero,8(r6)
  80d110:	2084703a 	and	r2,r4,r2
  80d114:	1009883a 	mov	r4,r2
  80d118:	3080030d 	sth	r2,12(r6)
  80d11c:	30000615 	stw	zero,24(r6)
  80d120:	003fe506 	br	80d0b8 <_ungetc_r+0x130>

0080d124 <ungetc>:
  80d124:	01802074 	movhi	r6,129
  80d128:	319bb804 	addi	r6,r6,28384
  80d12c:	2007883a 	mov	r3,r4
  80d130:	31000017 	ldw	r4,0(r6)
  80d134:	280d883a 	mov	r6,r5
  80d138:	180b883a 	mov	r5,r3
  80d13c:	080cf881 	jmpi	80cf88 <_ungetc_r>

0080d140 <__swbuf_r>:
  80d140:	defffc04 	addi	sp,sp,-16
  80d144:	dc400215 	stw	r17,8(sp)
  80d148:	dc000115 	stw	r16,4(sp)
  80d14c:	dfc00315 	stw	ra,12(sp)
  80d150:	2023883a 	mov	r17,r4
  80d154:	2821883a 	mov	r16,r5
  80d158:	20000226 	beq	r4,zero,80d164 <__swbuf_r+0x24>
  80d15c:	20800e17 	ldw	r2,56(r4)
  80d160:	10002f26 	beq	r2,zero,80d220 <__swbuf_r+0xe0>
  80d164:	3080030b 	ldhu	r2,12(r6)
  80d168:	30c00617 	ldw	r3,24(r6)
  80d16c:	1080020c 	andi	r2,r2,8
  80d170:	30c00215 	stw	r3,8(r6)
  80d174:	10002226 	beq	r2,zero,80d200 <__swbuf_r+0xc0>
  80d178:	30c00417 	ldw	r3,16(r6)
  80d17c:	18002026 	beq	r3,zero,80d200 <__swbuf_r+0xc0>
  80d180:	31000017 	ldw	r4,0(r6)
  80d184:	30800517 	ldw	r2,20(r6)
  80d188:	20c7c83a 	sub	r3,r4,r3
  80d18c:	18802f0e 	bge	r3,r2,80d24c <__swbuf_r+0x10c>
  80d190:	19400044 	addi	r5,r3,1
  80d194:	30800217 	ldw	r2,8(r6)
  80d198:	84003fcc 	andi	r16,r16,255
  80d19c:	20c00044 	addi	r3,r4,1
  80d1a0:	10bfffc4 	addi	r2,r2,-1
  80d1a4:	30800215 	stw	r2,8(r6)
  80d1a8:	24000005 	stb	r16,0(r4)
  80d1ac:	30800517 	ldw	r2,20(r6)
  80d1b0:	30c00015 	stw	r3,0(r6)
  80d1b4:	11400c26 	beq	r2,r5,80d1e8 <__swbuf_r+0xa8>
  80d1b8:	3080030b 	ldhu	r2,12(r6)
  80d1bc:	1080004c 	andi	r2,r2,1
  80d1c0:	1005003a 	cmpeq	r2,r2,zero
  80d1c4:	10000626 	beq	r2,zero,80d1e0 <__swbuf_r+0xa0>
  80d1c8:	8005883a 	mov	r2,r16
  80d1cc:	dfc00317 	ldw	ra,12(sp)
  80d1d0:	dc400217 	ldw	r17,8(sp)
  80d1d4:	dc000117 	ldw	r16,4(sp)
  80d1d8:	dec00404 	addi	sp,sp,16
  80d1dc:	f800283a 	ret
  80d1e0:	00800284 	movi	r2,10
  80d1e4:	80bff81e 	bne	r16,r2,80d1c8 <__swbuf_r+0x88>
  80d1e8:	8809883a 	mov	r4,r17
  80d1ec:	300b883a 	mov	r5,r6
  80d1f0:	0800f300 	call	800f30 <_fflush_r>
  80d1f4:	103ff426 	beq	r2,zero,80d1c8 <__swbuf_r+0x88>
  80d1f8:	043fffc4 	movi	r16,-1
  80d1fc:	003ff206 	br	80d1c8 <__swbuf_r+0x88>
  80d200:	300b883a 	mov	r5,r6
  80d204:	8809883a 	mov	r4,r17
  80d208:	d9800015 	stw	r6,0(sp)
  80d20c:	0806a640 	call	806a64 <__swsetup_r>
  80d210:	d9800017 	ldw	r6,0(sp)
  80d214:	1000061e 	bne	r2,zero,80d230 <__swbuf_r+0xf0>
  80d218:	30c00417 	ldw	r3,16(r6)
  80d21c:	003fd806 	br	80d180 <__swbuf_r+0x40>
  80d220:	d9800015 	stw	r6,0(sp)
  80d224:	08011c80 	call	8011c8 <__sinit>
  80d228:	d9800017 	ldw	r6,0(sp)
  80d22c:	003fcd06 	br	80d164 <__swbuf_r+0x24>
  80d230:	3080030b 	ldhu	r2,12(r6)
  80d234:	00c00244 	movi	r3,9
  80d238:	043fffc4 	movi	r16,-1
  80d23c:	10801014 	ori	r2,r2,64
  80d240:	3080030d 	sth	r2,12(r6)
  80d244:	88c00015 	stw	r3,0(r17)
  80d248:	003fdf06 	br	80d1c8 <__swbuf_r+0x88>
  80d24c:	300b883a 	mov	r5,r6
  80d250:	8809883a 	mov	r4,r17
  80d254:	d9800015 	stw	r6,0(sp)
  80d258:	0800f300 	call	800f30 <_fflush_r>
  80d25c:	d9800017 	ldw	r6,0(sp)
  80d260:	103fe51e 	bne	r2,zero,80d1f8 <__swbuf_r+0xb8>
  80d264:	31000017 	ldw	r4,0(r6)
  80d268:	01400044 	movi	r5,1
  80d26c:	003fc906 	br	80d194 <__swbuf_r+0x54>

0080d270 <__swbuf>:
  80d270:	01802074 	movhi	r6,129
  80d274:	319bb804 	addi	r6,r6,28384
  80d278:	2007883a 	mov	r3,r4
  80d27c:	31000017 	ldw	r4,0(r6)
  80d280:	280d883a 	mov	r6,r5
  80d284:	180b883a 	mov	r5,r3
  80d288:	080d1401 	jmpi	80d140 <__swbuf_r>

0080d28c <_calloc_r>:
  80d28c:	defffe04 	addi	sp,sp,-8
  80d290:	dc400015 	stw	r17,0(sp)
  80d294:	2023883a 	mov	r17,r4
  80d298:	2809883a 	mov	r4,r5
  80d29c:	300b883a 	mov	r5,r6
  80d2a0:	dfc00115 	stw	ra,4(sp)
  80d2a4:	08102900 	call	810290 <__mulsi3>
  80d2a8:	100b883a 	mov	r5,r2
  80d2ac:	8809883a 	mov	r4,r17
  80d2b0:	08024000 	call	802400 <_malloc_r>
  80d2b4:	1023883a 	mov	r17,r2
  80d2b8:	01c00904 	movi	r7,36
  80d2bc:	10000d26 	beq	r2,zero,80d2f4 <_calloc_r+0x68>
  80d2c0:	10ffff17 	ldw	r3,-4(r2)
  80d2c4:	1009883a 	mov	r4,r2
  80d2c8:	00bfff04 	movi	r2,-4
  80d2cc:	1886703a 	and	r3,r3,r2
  80d2d0:	1887883a 	add	r3,r3,r2
  80d2d4:	180d883a 	mov	r6,r3
  80d2d8:	000b883a 	mov	r5,zero
  80d2dc:	38c01736 	bltu	r7,r3,80d33c <_calloc_r+0xb0>
  80d2e0:	008004c4 	movi	r2,19
  80d2e4:	10c00836 	bltu	r2,r3,80d308 <_calloc_r+0x7c>
  80d2e8:	20000215 	stw	zero,8(r4)
  80d2ec:	20000015 	stw	zero,0(r4)
  80d2f0:	20000115 	stw	zero,4(r4)
  80d2f4:	8805883a 	mov	r2,r17
  80d2f8:	dfc00117 	ldw	ra,4(sp)
  80d2fc:	dc400017 	ldw	r17,0(sp)
  80d300:	dec00204 	addi	sp,sp,8
  80d304:	f800283a 	ret
  80d308:	008006c4 	movi	r2,27
  80d30c:	88000015 	stw	zero,0(r17)
  80d310:	88000115 	stw	zero,4(r17)
  80d314:	89000204 	addi	r4,r17,8
  80d318:	10fff32e 	bgeu	r2,r3,80d2e8 <_calloc_r+0x5c>
  80d31c:	88000215 	stw	zero,8(r17)
  80d320:	88000315 	stw	zero,12(r17)
  80d324:	89000404 	addi	r4,r17,16
  80d328:	19ffef1e 	bne	r3,r7,80d2e8 <_calloc_r+0x5c>
  80d32c:	89000604 	addi	r4,r17,24
  80d330:	88000415 	stw	zero,16(r17)
  80d334:	88000515 	stw	zero,20(r17)
  80d338:	003feb06 	br	80d2e8 <_calloc_r+0x5c>
  80d33c:	0802b400 	call	802b40 <memset>
  80d340:	8805883a 	mov	r2,r17
  80d344:	dfc00117 	ldw	ra,4(sp)
  80d348:	dc400017 	ldw	r17,0(sp)
  80d34c:	dec00204 	addi	sp,sp,8
  80d350:	f800283a 	ret

0080d354 <htinit>:
  80d354:	28800003 	ldbu	r2,0(r5)
  80d358:	10000626 	beq	r2,zero,80d374 <htinit+0x20>
  80d35c:	1105883a 	add	r2,r2,r4
  80d360:	11800005 	stb	r6,0(r2)
  80d364:	28800043 	ldbu	r2,1(r5)
  80d368:	31800044 	addi	r6,r6,1
  80d36c:	29400044 	addi	r5,r5,1
  80d370:	103ffa1e 	bne	r2,zero,80d35c <htinit+0x8>
  80d374:	f800283a 	ret

0080d378 <__hexdig_init>:
  80d378:	defffd04 	addi	sp,sp,-12
  80d37c:	dc400015 	stw	r17,0(sp)
  80d380:	044020b4 	movhi	r17,130
  80d384:	8c62d604 	addi	r17,r17,-29864
  80d388:	dcc00115 	stw	r19,4(sp)
  80d38c:	8809883a 	mov	r4,r17
  80d390:	04c00684 	movi	r19,26
  80d394:	01402074 	movhi	r5,129
  80d398:	29547d04 	addi	r5,r5,20980
  80d39c:	01800404 	movi	r6,16
  80d3a0:	dfc00215 	stw	ra,8(sp)
  80d3a4:	080d3540 	call	80d354 <htinit>
  80d3a8:	980d883a 	mov	r6,r19
  80d3ac:	8809883a 	mov	r4,r17
  80d3b0:	01402074 	movhi	r5,129
  80d3b4:	29548004 	addi	r5,r5,20992
  80d3b8:	080d3540 	call	80d354 <htinit>
  80d3bc:	8809883a 	mov	r4,r17
  80d3c0:	980d883a 	mov	r6,r19
  80d3c4:	01402074 	movhi	r5,129
  80d3c8:	29548204 	addi	r5,r5,21000
  80d3cc:	dfc00217 	ldw	ra,8(sp)
  80d3d0:	dcc00117 	ldw	r19,4(sp)
  80d3d4:	dc400017 	ldw	r17,0(sp)
  80d3d8:	dec00304 	addi	sp,sp,12
  80d3dc:	080d3541 	jmpi	80d354 <htinit>

0080d3e0 <rshift>:
  80d3e0:	2807d17a 	srai	r3,r5,5
  80d3e4:	20800417 	ldw	r2,16(r4)
  80d3e8:	22400504 	addi	r9,r4,20
  80d3ec:	480f883a 	mov	r7,r9
  80d3f0:	1880190e 	bge	r3,r2,80d458 <rshift+0x78>
  80d3f4:	1085883a 	add	r2,r2,r2
  80d3f8:	18c7883a 	add	r3,r3,r3
  80d3fc:	1085883a 	add	r2,r2,r2
  80d400:	18c7883a 	add	r3,r3,r3
  80d404:	294007cc 	andi	r5,r5,31
  80d408:	4891883a 	add	r8,r9,r2
  80d40c:	48cd883a 	add	r6,r9,r3
  80d410:	28001726 	beq	r5,zero,80d470 <rshift+0x90>
  80d414:	30c00017 	ldw	r3,0(r6)
  80d418:	00800804 	movi	r2,32
  80d41c:	31800104 	addi	r6,r6,4
  80d420:	1155c83a 	sub	r10,r2,r5
  80d424:	1946d83a 	srl	r3,r3,r5
  80d428:	3200092e 	bgeu	r6,r8,80d450 <rshift+0x70>
  80d42c:	30800017 	ldw	r2,0(r6)
  80d430:	1284983a 	sll	r2,r2,r10
  80d434:	10c4b03a 	or	r2,r2,r3
  80d438:	38800015 	stw	r2,0(r7)
  80d43c:	30c00017 	ldw	r3,0(r6)
  80d440:	31800104 	addi	r6,r6,4
  80d444:	39c00104 	addi	r7,r7,4
  80d448:	1946d83a 	srl	r3,r3,r5
  80d44c:	323ff736 	bltu	r6,r8,80d42c <rshift+0x4c>
  80d450:	38c00015 	stw	r3,0(r7)
  80d454:	18000c1e 	bne	r3,zero,80d488 <rshift+0xa8>
  80d458:	3a45c83a 	sub	r2,r7,r9
  80d45c:	1005d0ba 	srai	r2,r2,2
  80d460:	20800415 	stw	r2,16(r4)
  80d464:	1000011e 	bne	r2,zero,80d46c <rshift+0x8c>
  80d468:	20000515 	stw	zero,20(r4)
  80d46c:	f800283a 	ret
  80d470:	323ff92e 	bgeu	r6,r8,80d458 <rshift+0x78>
  80d474:	30800017 	ldw	r2,0(r6)
  80d478:	31800104 	addi	r6,r6,4
  80d47c:	38800015 	stw	r2,0(r7)
  80d480:	39c00104 	addi	r7,r7,4
  80d484:	003ffa06 	br	80d470 <rshift+0x90>
  80d488:	39c00104 	addi	r7,r7,4
  80d48c:	003ff206 	br	80d458 <rshift+0x78>

0080d490 <__gethex>:
  80d490:	defff104 	addi	sp,sp,-60
  80d494:	df000d15 	stw	fp,52(sp)
  80d498:	dcc00815 	stw	r19,32(sp)
  80d49c:	dfc00e15 	stw	ra,56(sp)
  80d4a0:	ddc00c15 	stw	r23,48(sp)
  80d4a4:	dd800b15 	stw	r22,44(sp)
  80d4a8:	dd400a15 	stw	r21,40(sp)
  80d4ac:	dd000915 	stw	r20,36(sp)
  80d4b0:	dc800715 	stw	r18,28(sp)
  80d4b4:	dc400615 	stw	r17,24(sp)
  80d4b8:	dc000515 	stw	r16,20(sp)
  80d4bc:	04c020b4 	movhi	r19,130
  80d4c0:	9ce2d604 	addi	r19,r19,-29864
  80d4c4:	98800c03 	ldbu	r2,48(r19)
  80d4c8:	d9000115 	stw	r4,4(sp)
  80d4cc:	2839883a 	mov	fp,r5
  80d4d0:	d9800215 	stw	r6,8(sp)
  80d4d4:	d9c00315 	stw	r7,12(sp)
  80d4d8:	10007526 	beq	r2,zero,80d6b0 <__gethex+0x220>
  80d4dc:	e1800017 	ldw	r6,0(fp)
  80d4e0:	00800c04 	movi	r2,48
  80d4e4:	31000083 	ldbu	r4,2(r6)
  80d4e8:	30c00084 	addi	r3,r6,2
  80d4ec:	2080761e 	bne	r4,r2,80d6c8 <__gethex+0x238>
  80d4f0:	200b883a 	mov	r5,r4
  80d4f4:	3007883a 	mov	r3,r6
  80d4f8:	188000c3 	ldbu	r2,3(r3)
  80d4fc:	18c00044 	addi	r3,r3,1
  80d500:	1009883a 	mov	r4,r2
  80d504:	117ffc26 	beq	r2,r5,80d4f8 <__gethex+0x68>
  80d508:	198fc83a 	sub	r7,r3,r6
  80d50c:	19400084 	addi	r5,r3,2
  80d510:	24c5883a 	add	r2,r4,r19
  80d514:	10c00003 	ldbu	r3,0(r2)
  80d518:	18002e26 	beq	r3,zero,80d5d4 <__gethex+0x144>
  80d51c:	29000003 	ldbu	r4,0(r5)
  80d520:	282b883a 	mov	r21,r5
  80d524:	000d883a 	mov	r6,zero
  80d528:	002d883a 	mov	r22,zero
  80d52c:	21003fcc 	andi	r4,r4,255
  80d530:	24c5883a 	add	r2,r4,r19
  80d534:	10c00003 	ldbu	r3,0(r2)
  80d538:	18000526 	beq	r3,zero,80d550 <__gethex+0xc0>
  80d53c:	29400044 	addi	r5,r5,1
  80d540:	29000003 	ldbu	r4,0(r5)
  80d544:	24c5883a 	add	r2,r4,r19
  80d548:	10c00003 	ldbu	r3,0(r2)
  80d54c:	183ffb1e 	bne	r3,zero,80d53c <__gethex+0xac>
  80d550:	00800b84 	movi	r2,46
  80d554:	20805f26 	beq	r4,r2,80d6d4 <__gethex+0x244>
  80d558:	30008226 	beq	r6,zero,80d764 <__gethex+0x2d4>
  80d55c:	2985c83a 	sub	r2,r5,r6
  80d560:	1085883a 	add	r2,r2,r2
  80d564:	1085883a 	add	r2,r2,r2
  80d568:	0085c83a 	sub	r2,zero,r2
  80d56c:	d8800015 	stw	r2,0(sp)
  80d570:	2825883a 	mov	r18,r5
  80d574:	90c00003 	ldbu	r3,0(r18)
  80d578:	00801404 	movi	r2,80
  80d57c:	18801e26 	beq	r3,r2,80d5f8 <__gethex+0x168>
  80d580:	00801c04 	movi	r2,112
  80d584:	18801c26 	beq	r3,r2,80d5f8 <__gethex+0x168>
  80d588:	9023883a 	mov	r17,r18
  80d58c:	b005003a 	cmpeq	r2,r22,zero
  80d590:	e4400015 	stw	r17,0(fp)
  80d594:	10008d1e 	bne	r2,zero,80d7cc <__gethex+0x33c>
  80d598:	38004326 	beq	r7,zero,80d6a8 <__gethex+0x218>
  80d59c:	0025883a 	mov	r18,zero
  80d5a0:	9005883a 	mov	r2,r18
  80d5a4:	dfc00e17 	ldw	ra,56(sp)
  80d5a8:	df000d17 	ldw	fp,52(sp)
  80d5ac:	ddc00c17 	ldw	r23,48(sp)
  80d5b0:	dd800b17 	ldw	r22,44(sp)
  80d5b4:	dd400a17 	ldw	r21,40(sp)
  80d5b8:	dd000917 	ldw	r20,36(sp)
  80d5bc:	dcc00817 	ldw	r19,32(sp)
  80d5c0:	dc800717 	ldw	r18,28(sp)
  80d5c4:	dc400617 	ldw	r17,24(sp)
  80d5c8:	dc000517 	ldw	r16,20(sp)
  80d5cc:	dec00f04 	addi	sp,sp,60
  80d5d0:	f800283a 	ret
  80d5d4:	00800b84 	movi	r2,46
  80d5d8:	20805126 	beq	r4,r2,80d720 <__gethex+0x290>
  80d5dc:	2825883a 	mov	r18,r5
  80d5e0:	d8000015 	stw	zero,0(sp)
  80d5e4:	90c00003 	ldbu	r3,0(r18)
  80d5e8:	00801404 	movi	r2,80
  80d5ec:	282b883a 	mov	r21,r5
  80d5f0:	05800044 	movi	r22,1
  80d5f4:	18bfe21e 	bne	r3,r2,80d580 <__gethex+0xf0>
  80d5f8:	90c00043 	ldbu	r3,1(r18)
  80d5fc:	00800ac4 	movi	r2,43
  80d600:	91400044 	addi	r5,r18,1
  80d604:	18805126 	beq	r3,r2,80d74c <__gethex+0x2bc>
  80d608:	00800b44 	movi	r2,45
  80d60c:	18805326 	beq	r3,r2,80d75c <__gethex+0x2cc>
  80d610:	002f883a 	mov	r23,zero
  80d614:	1cc5883a 	add	r2,r3,r19
  80d618:	10800003 	ldbu	r2,0(r2)
  80d61c:	103fda26 	beq	r2,zero,80d588 <__gethex+0xf8>
  80d620:	01800644 	movi	r6,25
  80d624:	30bfd816 	blt	r6,r2,80d588 <__gethex+0xf8>
  80d628:	28c00043 	ldbu	r3,1(r5)
  80d62c:	113ffc04 	addi	r4,r2,-16
  80d630:	008020b4 	movhi	r2,130
  80d634:	10a2d604 	addi	r2,r2,-29864
  80d638:	1887883a 	add	r3,r3,r2
  80d63c:	18800003 	ldbu	r2,0(r3)
  80d640:	2c400044 	addi	r17,r5,1
  80d644:	10001126 	beq	r2,zero,80d68c <__gethex+0x1fc>
  80d648:	1021883a 	mov	r16,r2
  80d64c:	30800f16 	blt	r6,r2,80d68c <__gethex+0x1fc>
  80d650:	3029883a 	mov	r20,r6
  80d654:	00000106 	br	80d65c <__gethex+0x1cc>
  80d658:	a0800c16 	blt	r20,r2,80d68c <__gethex+0x1fc>
  80d65c:	8c400044 	addi	r17,r17,1
  80d660:	01400284 	movi	r5,10
  80d664:	d9c00415 	stw	r7,16(sp)
  80d668:	08102900 	call	810290 <__mulsi3>
  80d66c:	88c00003 	ldbu	r3,0(r17)
  80d670:	1405883a 	add	r2,r2,r16
  80d674:	113ffc04 	addi	r4,r2,-16
  80d678:	1cc7883a 	add	r3,r3,r19
  80d67c:	18800003 	ldbu	r2,0(r3)
  80d680:	d9c00417 	ldw	r7,16(sp)
  80d684:	1021883a 	mov	r16,r2
  80d688:	103ff31e 	bne	r2,zero,80d658 <__gethex+0x1c8>
  80d68c:	b805003a 	cmpeq	r2,r23,zero
  80d690:	1000011e 	bne	r2,zero,80d698 <__gethex+0x208>
  80d694:	0109c83a 	sub	r4,zero,r4
  80d698:	d8800017 	ldw	r2,0(sp)
  80d69c:	1105883a 	add	r2,r2,r4
  80d6a0:	d8800015 	stw	r2,0(sp)
  80d6a4:	003fb906 	br	80d58c <__gethex+0xfc>
  80d6a8:	04800184 	movi	r18,6
  80d6ac:	003fbc06 	br	80d5a0 <__gethex+0x110>
  80d6b0:	080d3780 	call	80d378 <__hexdig_init>
  80d6b4:	e1800017 	ldw	r6,0(fp)
  80d6b8:	00800c04 	movi	r2,48
  80d6bc:	31000083 	ldbu	r4,2(r6)
  80d6c0:	30c00084 	addi	r3,r6,2
  80d6c4:	20bf8a26 	beq	r4,r2,80d4f0 <__gethex+0x60>
  80d6c8:	180b883a 	mov	r5,r3
  80d6cc:	000f883a 	mov	r7,zero
  80d6d0:	003f8f06 	br	80d510 <__gethex+0x80>
  80d6d4:	303fa11e 	bne	r6,zero,80d55c <__gethex+0xcc>
  80d6d8:	29400044 	addi	r5,r5,1
  80d6dc:	28800003 	ldbu	r2,0(r5)
  80d6e0:	14c5883a 	add	r2,r2,r19
  80d6e4:	10c00003 	ldbu	r3,0(r2)
  80d6e8:	1800b526 	beq	r3,zero,80d9c0 <__gethex+0x530>
  80d6ec:	2809883a 	mov	r4,r5
  80d6f0:	21000044 	addi	r4,r4,1
  80d6f4:	20800003 	ldbu	r2,0(r4)
  80d6f8:	14c5883a 	add	r2,r2,r19
  80d6fc:	10c00003 	ldbu	r3,0(r2)
  80d700:	183ffb1e 	bne	r3,zero,80d6f0 <__gethex+0x260>
  80d704:	2145c83a 	sub	r2,r4,r5
  80d708:	1085883a 	add	r2,r2,r2
  80d70c:	1085883a 	add	r2,r2,r2
  80d710:	0085c83a 	sub	r2,zero,r2
  80d714:	200b883a 	mov	r5,r4
  80d718:	d8800015 	stw	r2,0(sp)
  80d71c:	003f9406 	br	80d570 <__gethex+0xe0>
  80d720:	29000043 	ldbu	r4,1(r5)
  80d724:	008020b4 	movhi	r2,130
  80d728:	10a2d604 	addi	r2,r2,-29864
  80d72c:	2c800044 	addi	r18,r5,1
  80d730:	2085883a 	add	r2,r4,r2
  80d734:	10c00003 	ldbu	r3,0(r2)
  80d738:	18000d1e 	bne	r3,zero,80d770 <__gethex+0x2e0>
  80d73c:	282b883a 	mov	r21,r5
  80d740:	05800044 	movi	r22,1
  80d744:	d8000015 	stw	zero,0(sp)
  80d748:	003f8a06 	br	80d574 <__gethex+0xe4>
  80d74c:	002f883a 	mov	r23,zero
  80d750:	29400044 	addi	r5,r5,1
  80d754:	28c00003 	ldbu	r3,0(r5)
  80d758:	003fae06 	br	80d614 <__gethex+0x184>
  80d75c:	05c00044 	movi	r23,1
  80d760:	003ffb06 	br	80d750 <__gethex+0x2c0>
  80d764:	2825883a 	mov	r18,r5
  80d768:	d8000015 	stw	zero,0(sp)
  80d76c:	003f8106 	br	80d574 <__gethex+0xe4>
  80d770:	00800c04 	movi	r2,48
  80d774:	20800e1e 	bne	r4,r2,80d7b0 <__gethex+0x320>
  80d778:	2007883a 	mov	r3,r4
  80d77c:	900b883a 	mov	r5,r18
  80d780:	29400044 	addi	r5,r5,1
  80d784:	29000003 	ldbu	r4,0(r5)
  80d788:	20803fcc 	andi	r2,r4,255
  80d78c:	10fffc26 	beq	r2,r3,80d780 <__gethex+0x2f0>
  80d790:	14c5883a 	add	r2,r2,r19
  80d794:	10c00003 	ldbu	r3,0(r2)
  80d798:	1800071e 	bne	r3,zero,80d7b8 <__gethex+0x328>
  80d79c:	01c00044 	movi	r7,1
  80d7a0:	900d883a 	mov	r6,r18
  80d7a4:	282b883a 	mov	r21,r5
  80d7a8:	382d883a 	mov	r22,r7
  80d7ac:	003f5f06 	br	80d52c <__gethex+0x9c>
  80d7b0:	91000003 	ldbu	r4,0(r18)
  80d7b4:	900b883a 	mov	r5,r18
  80d7b8:	900d883a 	mov	r6,r18
  80d7bc:	282b883a 	mov	r21,r5
  80d7c0:	01c00044 	movi	r7,1
  80d7c4:	002d883a 	mov	r22,zero
  80d7c8:	003f5806 	br	80d52c <__gethex+0x9c>
  80d7cc:	9545c83a 	sub	r2,r18,r21
  80d7d0:	10bfffc4 	addi	r2,r2,-1
  80d7d4:	00c001c4 	movi	r3,7
  80d7d8:	1880770e 	bge	r3,r2,80d9b8 <__gethex+0x528>
  80d7dc:	000b883a 	mov	r5,zero
  80d7e0:	1005d07a 	srai	r2,r2,1
  80d7e4:	29400044 	addi	r5,r5,1
  80d7e8:	18bffd16 	blt	r3,r2,80d7e0 <__gethex+0x350>
  80d7ec:	d9000117 	ldw	r4,4(sp)
  80d7f0:	080964c0 	call	80964c <_Balloc>
  80d7f4:	1029883a 	mov	r20,r2
  80d7f8:	15800504 	addi	r22,r2,20
  80d7fc:	ac80562e 	bgeu	r21,r18,80d958 <__gethex+0x4c8>
  80d800:	900b883a 	mov	r5,r18
  80d804:	b011883a 	mov	r8,r22
  80d808:	000f883a 	mov	r7,zero
  80d80c:	0009883a 	mov	r4,zero
  80d810:	02400b84 	movi	r9,46
  80d814:	02800804 	movi	r10,32
  80d818:	297fffc4 	addi	r5,r5,-1
  80d81c:	28c00003 	ldbu	r3,0(r5)
  80d820:	1a400826 	beq	r3,r9,80d844 <__gethex+0x3b4>
  80d824:	380d883a 	mov	r6,r7
  80d828:	3a802a26 	beq	r7,r10,80d8d4 <__gethex+0x444>
  80d82c:	39c00104 	addi	r7,r7,4
  80d830:	1cc7883a 	add	r3,r3,r19
  80d834:	18800003 	ldbu	r2,0(r3)
  80d838:	108003cc 	andi	r2,r2,15
  80d83c:	1184983a 	sll	r2,r2,r6
  80d840:	2088b03a 	or	r4,r4,r2
  80d844:	a97ff436 	bltu	r21,r5,80d818 <__gethex+0x388>
  80d848:	40800104 	addi	r2,r8,4
  80d84c:	1585c83a 	sub	r2,r2,r22
  80d850:	1021d0ba 	srai	r16,r2,2
  80d854:	41000015 	stw	r4,0(r8)
  80d858:	a4000415 	stw	r16,16(r20)
  80d85c:	08090f40 	call	8090f4 <__hi0bits>
  80d860:	d9000217 	ldw	r4,8(sp)
  80d864:	8006917a 	slli	r3,r16,5
  80d868:	24c00017 	ldw	r19,0(r4)
  80d86c:	1885c83a 	sub	r2,r3,r2
  80d870:	98801f16 	blt	r19,r2,80d8f0 <__gethex+0x460>
  80d874:	14c00c16 	blt	r2,r19,80d8a8 <__gethex+0x418>
  80d878:	002b883a 	mov	r21,zero
  80d87c:	d9000217 	ldw	r4,8(sp)
  80d880:	d8c00017 	ldw	r3,0(sp)
  80d884:	20800217 	ldw	r2,8(r4)
  80d888:	10c0360e 	bge	r2,r3,80d964 <__gethex+0x4d4>
  80d88c:	d9000117 	ldw	r4,4(sp)
  80d890:	a00b883a 	mov	r5,r20
  80d894:	048028c4 	movi	r18,163
  80d898:	08090cc0 	call	8090cc <_Bfree>
  80d89c:	d9000f17 	ldw	r4,60(sp)
  80d8a0:	20000015 	stw	zero,0(r4)
  80d8a4:	003f3e06 	br	80d5a0 <__gethex+0x110>
  80d8a8:	d9000117 	ldw	r4,4(sp)
  80d8ac:	98a1c83a 	sub	r16,r19,r2
  80d8b0:	a00b883a 	mov	r5,r20
  80d8b4:	800d883a 	mov	r6,r16
  80d8b8:	0809a100 	call	809a10 <__lshift>
  80d8bc:	d8c00017 	ldw	r3,0(sp)
  80d8c0:	1029883a 	mov	r20,r2
  80d8c4:	15800504 	addi	r22,r2,20
  80d8c8:	1c07c83a 	sub	r3,r3,r16
  80d8cc:	d8c00015 	stw	r3,0(sp)
  80d8d0:	003fe906 	br	80d878 <__gethex+0x3e8>
  80d8d4:	41000015 	stw	r4,0(r8)
  80d8d8:	28c00003 	ldbu	r3,0(r5)
  80d8dc:	01c00104 	movi	r7,4
  80d8e0:	000d883a 	mov	r6,zero
  80d8e4:	41d1883a 	add	r8,r8,r7
  80d8e8:	0009883a 	mov	r4,zero
  80d8ec:	003fd006 	br	80d830 <__gethex+0x3a0>
  80d8f0:	14e1c83a 	sub	r16,r2,r19
  80d8f4:	a009883a 	mov	r4,r20
  80d8f8:	800b883a 	mov	r5,r16
  80d8fc:	08095c40 	call	8095c4 <__any_on>
  80d900:	1000081e 	bne	r2,zero,80d924 <__gethex+0x494>
  80d904:	002b883a 	mov	r21,zero
  80d908:	a009883a 	mov	r4,r20
  80d90c:	800b883a 	mov	r5,r16
  80d910:	080d3e00 	call	80d3e0 <rshift>
  80d914:	d8800017 	ldw	r2,0(sp)
  80d918:	1405883a 	add	r2,r2,r16
  80d91c:	d8800015 	stw	r2,0(sp)
  80d920:	003fd606 	br	80d87c <__gethex+0x3ec>
  80d924:	817fffc4 	addi	r5,r16,-1
  80d928:	2805d17a 	srai	r2,r5,5
  80d92c:	290007cc 	andi	r4,r5,31
  80d930:	01800044 	movi	r6,1
  80d934:	1085883a 	add	r2,r2,r2
  80d938:	1085883a 	add	r2,r2,r2
  80d93c:	1585883a 	add	r2,r2,r22
  80d940:	3108983a 	sll	r4,r6,r4
  80d944:	10c00017 	ldw	r3,0(r2)
  80d948:	20c8703a 	and	r4,r4,r3
  80d94c:	20001e1e 	bne	r4,zero,80d9c8 <__gethex+0x538>
  80d950:	302b883a 	mov	r21,r6
  80d954:	003fec06 	br	80d908 <__gethex+0x478>
  80d958:	b011883a 	mov	r8,r22
  80d95c:	0009883a 	mov	r4,zero
  80d960:	003fb906 	br	80d848 <__gethex+0x3b8>
  80d964:	d8800217 	ldw	r2,8(sp)
  80d968:	d8c00017 	ldw	r3,0(sp)
  80d96c:	11000117 	ldw	r4,4(r2)
  80d970:	19001c16 	blt	r3,r4,80d9e4 <__gethex+0x554>
  80d974:	04800044 	movi	r18,1
  80d978:	a8000926 	beq	r21,zero,80d9a0 <__gethex+0x510>
  80d97c:	d8c00217 	ldw	r3,8(sp)
  80d980:	00800084 	movi	r2,2
  80d984:	19000317 	ldw	r4,12(r3)
  80d988:	20809826 	beq	r4,r2,80dbec <__gethex+0x75c>
  80d98c:	008000c4 	movi	r2,3
  80d990:	20805b26 	beq	r4,r2,80db00 <__gethex+0x670>
  80d994:	00800044 	movi	r2,1
  80d998:	20804326 	beq	r4,r2,80daa8 <__gethex+0x618>
  80d99c:	94800414 	ori	r18,r18,16
  80d9a0:	d9000f17 	ldw	r4,60(sp)
  80d9a4:	d8800017 	ldw	r2,0(sp)
  80d9a8:	d8c00317 	ldw	r3,12(sp)
  80d9ac:	25000015 	stw	r20,0(r4)
  80d9b0:	18800015 	stw	r2,0(r3)
  80d9b4:	003efa06 	br	80d5a0 <__gethex+0x110>
  80d9b8:	000b883a 	mov	r5,zero
  80d9bc:	003f8b06 	br	80d7ec <__gethex+0x35c>
  80d9c0:	d8000015 	stw	zero,0(sp)
  80d9c4:	003eea06 	br	80d570 <__gethex+0xe0>
  80d9c8:	3140180e 	bge	r6,r5,80da2c <__gethex+0x59c>
  80d9cc:	a009883a 	mov	r4,r20
  80d9d0:	817fff84 	addi	r5,r16,-2
  80d9d4:	08095c40 	call	8095c4 <__any_on>
  80d9d8:	10001426 	beq	r2,zero,80da2c <__gethex+0x59c>
  80d9dc:	054000c4 	movi	r21,3
  80d9e0:	003fc906 	br	80d908 <__gethex+0x478>
  80d9e4:	d8800017 	ldw	r2,0(sp)
  80d9e8:	20a3c83a 	sub	r17,r4,r2
  80d9ec:	8cc01116 	blt	r17,r19,80da34 <__gethex+0x5a4>
  80d9f0:	d8800217 	ldw	r2,8(sp)
  80d9f4:	10c00317 	ldw	r3,12(r2)
  80d9f8:	00800084 	movi	r2,2
  80d9fc:	18809426 	beq	r3,r2,80dc50 <__gethex+0x7c0>
  80da00:	008000c4 	movi	r2,3
  80da04:	18808f26 	beq	r3,r2,80dc44 <__gethex+0x7b4>
  80da08:	00800044 	movi	r2,1
  80da0c:	18807c26 	beq	r3,r2,80dc00 <__gethex+0x770>
  80da10:	d9000117 	ldw	r4,4(sp)
  80da14:	a00b883a 	mov	r5,r20
  80da18:	04801404 	movi	r18,80
  80da1c:	08090cc0 	call	8090cc <_Bfree>
  80da20:	d9000f17 	ldw	r4,60(sp)
  80da24:	20000015 	stw	zero,0(r4)
  80da28:	003edd06 	br	80d5a0 <__gethex+0x110>
  80da2c:	05400084 	movi	r21,2
  80da30:	003fb506 	br	80d908 <__gethex+0x478>
  80da34:	8c3fffc4 	addi	r16,r17,-1
  80da38:	a8001526 	beq	r21,zero,80da90 <__gethex+0x600>
  80da3c:	05400044 	movi	r21,1
  80da40:	8005d17a 	srai	r2,r16,5
  80da44:	814007cc 	andi	r5,r16,31
  80da48:	00c00044 	movi	r3,1
  80da4c:	1085883a 	add	r2,r2,r2
  80da50:	1085883a 	add	r2,r2,r2
  80da54:	1585883a 	add	r2,r2,r22
  80da58:	1946983a 	sll	r3,r3,r5
  80da5c:	11000017 	ldw	r4,0(r2)
  80da60:	1906703a 	and	r3,r3,r4
  80da64:	18000126 	beq	r3,zero,80da6c <__gethex+0x5dc>
  80da68:	ad400094 	ori	r21,r21,2
  80da6c:	880b883a 	mov	r5,r17
  80da70:	a009883a 	mov	r4,r20
  80da74:	080d3e00 	call	80d3e0 <rshift>
  80da78:	d8800217 	ldw	r2,8(sp)
  80da7c:	9c67c83a 	sub	r19,r19,r17
  80da80:	04800084 	movi	r18,2
  80da84:	10800117 	ldw	r2,4(r2)
  80da88:	d8800015 	stw	r2,0(sp)
  80da8c:	003fba06 	br	80d978 <__gethex+0x4e8>
  80da90:	043feb0e 	bge	zero,r16,80da40 <__gethex+0x5b0>
  80da94:	a009883a 	mov	r4,r20
  80da98:	800b883a 	mov	r5,r16
  80da9c:	08095c40 	call	8095c4 <__any_on>
  80daa0:	102b883a 	mov	r21,r2
  80daa4:	003fe606 	br	80da40 <__gethex+0x5b0>
  80daa8:	a880008c 	andi	r2,r21,2
  80daac:	103fbb26 	beq	r2,zero,80d99c <__gethex+0x50c>
  80dab0:	b0800017 	ldw	r2,0(r22)
  80dab4:	a884b03a 	or	r2,r21,r2
  80dab8:	1104703a 	and	r2,r2,r4
  80dabc:	103fb726 	beq	r2,zero,80d99c <__gethex+0x50c>
  80dac0:	a4000417 	ldw	r16,16(r20)
  80dac4:	b007883a 	mov	r3,r22
  80dac8:	017fffc4 	movi	r5,-1
  80dacc:	8405883a 	add	r2,r16,r16
  80dad0:	10ab883a 	add	r21,r2,r2
  80dad4:	802f883a 	mov	r23,r16
  80dad8:	b549883a 	add	r4,r22,r21
  80dadc:	00000306 	br	80daec <__gethex+0x65c>
  80dae0:	18000015 	stw	zero,0(r3)
  80dae4:	18c00104 	addi	r3,r3,4
  80dae8:	1900082e 	bgeu	r3,r4,80db0c <__gethex+0x67c>
  80daec:	18800017 	ldw	r2,0(r3)
  80daf0:	117ffb26 	beq	r2,r5,80dae0 <__gethex+0x650>
  80daf4:	10800044 	addi	r2,r2,1
  80daf8:	18800015 	stw	r2,0(r3)
  80dafc:	00001e06 	br	80db78 <__gethex+0x6e8>
  80db00:	d8801017 	ldw	r2,64(sp)
  80db04:	103fa526 	beq	r2,zero,80d99c <__gethex+0x50c>
  80db08:	003fed06 	br	80dac0 <__gethex+0x630>
  80db0c:	a0800217 	ldw	r2,8(r20)
  80db10:	80801216 	blt	r16,r2,80db5c <__gethex+0x6cc>
  80db14:	a1400117 	ldw	r5,4(r20)
  80db18:	d9000117 	ldw	r4,4(sp)
  80db1c:	29400044 	addi	r5,r5,1
  80db20:	080964c0 	call	80964c <_Balloc>
  80db24:	a1800417 	ldw	r6,16(r20)
  80db28:	a1400304 	addi	r5,r20,12
  80db2c:	11000304 	addi	r4,r2,12
  80db30:	318d883a 	add	r6,r6,r6
  80db34:	318d883a 	add	r6,r6,r6
  80db38:	31800204 	addi	r6,r6,8
  80db3c:	1023883a 	mov	r17,r2
  80db40:	0808f4c0 	call	808f4c <memcpy>
  80db44:	d9000117 	ldw	r4,4(sp)
  80db48:	a00b883a 	mov	r5,r20
  80db4c:	8d800504 	addi	r22,r17,20
  80db50:	08090cc0 	call	8090cc <_Bfree>
  80db54:	8c000417 	ldw	r16,16(r17)
  80db58:	8829883a 	mov	r20,r17
  80db5c:	8405883a 	add	r2,r16,r16
  80db60:	1085883a 	add	r2,r2,r2
  80db64:	1505883a 	add	r2,r2,r20
  80db68:	84000044 	addi	r16,r16,1
  80db6c:	00c00044 	movi	r3,1
  80db70:	10c00515 	stw	r3,20(r2)
  80db74:	a4000415 	stw	r16,16(r20)
  80db78:	00800084 	movi	r2,2
  80db7c:	90801526 	beq	r18,r2,80dbd4 <__gethex+0x744>
  80db80:	bc000a16 	blt	r23,r16,80dbac <__gethex+0x71c>
  80db84:	9c0007cc 	andi	r16,r19,31
  80db88:	8000021e 	bne	r16,zero,80db94 <__gethex+0x704>
  80db8c:	94800814 	ori	r18,r18,32
  80db90:	003f8306 	br	80d9a0 <__gethex+0x510>
  80db94:	b545883a 	add	r2,r22,r21
  80db98:	113fff17 	ldw	r4,-4(r2)
  80db9c:	08090f40 	call	8090f4 <__hi0bits>
  80dba0:	00c00804 	movi	r3,32
  80dba4:	1c07c83a 	sub	r3,r3,r16
  80dba8:	10fff80e 	bge	r2,r3,80db8c <__gethex+0x6fc>
  80dbac:	a009883a 	mov	r4,r20
  80dbb0:	01400044 	movi	r5,1
  80dbb4:	080d3e00 	call	80d3e0 <rshift>
  80dbb8:	d9000217 	ldw	r4,8(sp)
  80dbbc:	d8c00017 	ldw	r3,0(sp)
  80dbc0:	20800217 	ldw	r2,8(r4)
  80dbc4:	18c00044 	addi	r3,r3,1
  80dbc8:	d8c00015 	stw	r3,0(sp)
  80dbcc:	10ff2f16 	blt	r2,r3,80d88c <__gethex+0x3fc>
  80dbd0:	003fee06 	br	80db8c <__gethex+0x6fc>
  80dbd4:	d8c00217 	ldw	r3,8(sp)
  80dbd8:	18800017 	ldw	r2,0(r3)
  80dbdc:	10bfffc4 	addi	r2,r2,-1
  80dbe0:	98801e26 	beq	r19,r2,80dc5c <__gethex+0x7cc>
  80dbe4:	04800884 	movi	r18,34
  80dbe8:	003f6d06 	br	80d9a0 <__gethex+0x510>
  80dbec:	d9001017 	ldw	r4,64(sp)
  80dbf0:	00800044 	movi	r2,1
  80dbf4:	1105c83a 	sub	r2,r2,r4
  80dbf8:	103f6826 	beq	r2,zero,80d99c <__gethex+0x50c>
  80dbfc:	003fb006 	br	80dac0 <__gethex+0x630>
  80dc00:	9c7f831e 	bne	r19,r17,80da10 <__gethex+0x580>
  80dc04:	1cc0060e 	bge	r3,r19,80dc20 <__gethex+0x790>
  80dc08:	98cbc83a 	sub	r5,r19,r3
  80dc0c:	a009883a 	mov	r4,r20
  80dc10:	08095c40 	call	8095c4 <__any_on>
  80dc14:	103f7e26 	beq	r2,zero,80da10 <__gethex+0x580>
  80dc18:	d8c00217 	ldw	r3,8(sp)
  80dc1c:	19000117 	ldw	r4,4(r3)
  80dc20:	d8800317 	ldw	r2,12(sp)
  80dc24:	d8c00f17 	ldw	r3,60(sp)
  80dc28:	04000044 	movi	r16,1
  80dc2c:	11000015 	stw	r4,0(r2)
  80dc30:	04801884 	movi	r18,98
  80dc34:	b4000015 	stw	r16,0(r22)
  80dc38:	1d000015 	stw	r20,0(r3)
  80dc3c:	a4000415 	stw	r16,16(r20)
  80dc40:	003e5706 	br	80d5a0 <__gethex+0x110>
  80dc44:	d8801017 	ldw	r2,64(sp)
  80dc48:	103f7126 	beq	r2,zero,80da10 <__gethex+0x580>
  80dc4c:	003ff406 	br	80dc20 <__gethex+0x790>
  80dc50:	d8c01017 	ldw	r3,64(sp)
  80dc54:	183ff226 	beq	r3,zero,80dc20 <__gethex+0x790>
  80dc58:	003f6d06 	br	80da10 <__gethex+0x580>
  80dc5c:	9805d17a 	srai	r2,r19,5
  80dc60:	994007cc 	andi	r5,r19,31
  80dc64:	00c00044 	movi	r3,1
  80dc68:	1085883a 	add	r2,r2,r2
  80dc6c:	1085883a 	add	r2,r2,r2
  80dc70:	1585883a 	add	r2,r2,r22
  80dc74:	1946983a 	sll	r3,r3,r5
  80dc78:	11000017 	ldw	r4,0(r2)
  80dc7c:	1906703a 	and	r3,r3,r4
  80dc80:	183fd826 	beq	r3,zero,80dbe4 <__gethex+0x754>
  80dc84:	04800844 	movi	r18,33
  80dc88:	003f4506 	br	80d9a0 <__gethex+0x510>

0080dc8c <L_shift>:
  80dc8c:	00800204 	movi	r2,8
  80dc90:	1185c83a 	sub	r2,r2,r6
  80dc94:	1085883a 	add	r2,r2,r2
  80dc98:	21c00017 	ldw	r7,0(r4)
  80dc9c:	1093883a 	add	r9,r2,r2
  80dca0:	00800804 	movi	r2,32
  80dca4:	200d883a 	mov	r6,r4
  80dca8:	1251c83a 	sub	r8,r2,r9
  80dcac:	31800104 	addi	r6,r6,4
  80dcb0:	3805883a 	mov	r2,r7
  80dcb4:	31c00017 	ldw	r7,0(r6)
  80dcb8:	3a08983a 	sll	r4,r7,r8
  80dcbc:	3a46d83a 	srl	r3,r7,r9
  80dcc0:	1104b03a 	or	r2,r2,r4
  80dcc4:	180f883a 	mov	r7,r3
  80dcc8:	30bfff15 	stw	r2,-4(r6)
  80dccc:	30c00015 	stw	r3,0(r6)
  80dcd0:	317ff636 	bltu	r6,r5,80dcac <L_shift+0x20>
  80dcd4:	f800283a 	ret

0080dcd8 <__hexnan>:
  80dcd8:	defff404 	addi	sp,sp,-48
  80dcdc:	dd800815 	stw	r22,32(sp)
  80dce0:	058020b4 	movhi	r22,130
  80dce4:	b5a2d604 	addi	r22,r22,-29864
  80dce8:	b0800c03 	ldbu	r2,48(r22)
  80dcec:	dcc00515 	stw	r19,20(sp)
  80dcf0:	dc000215 	stw	r16,8(sp)
  80dcf4:	dfc00b15 	stw	ra,44(sp)
  80dcf8:	df000a15 	stw	fp,40(sp)
  80dcfc:	ddc00915 	stw	r23,36(sp)
  80dd00:	dd400715 	stw	r21,28(sp)
  80dd04:	dd000615 	stw	r20,24(sp)
  80dd08:	dc800415 	stw	r18,16(sp)
  80dd0c:	dc400315 	stw	r17,12(sp)
  80dd10:	d9000115 	stw	r4,4(sp)
  80dd14:	2821883a 	mov	r16,r5
  80dd18:	3027883a 	mov	r19,r6
  80dd1c:	10007426 	beq	r2,zero,80def0 <__hexnan+0x218>
  80dd20:	80c00017 	ldw	r3,0(r16)
  80dd24:	1805d17a 	srai	r2,r3,5
  80dd28:	18c007cc 	andi	r3,r3,31
  80dd2c:	1839003a 	cmpeq	fp,r3,zero
  80dd30:	1085883a 	add	r2,r2,r2
  80dd34:	1085883a 	add	r2,r2,r2
  80dd38:	d8c00015 	stw	r3,0(sp)
  80dd3c:	14c5883a 	add	r2,r2,r19
  80dd40:	e000011e 	bne	fp,zero,80dd48 <__hexnan+0x70>
  80dd44:	10800104 	addi	r2,r2,4
  80dd48:	d8c00117 	ldw	r3,4(sp)
  80dd4c:	153fff04 	addi	r20,r2,-4
  80dd50:	a021883a 	mov	r16,r20
  80dd54:	1c400017 	ldw	r17,0(r3)
  80dd58:	a02b883a 	mov	r21,r20
  80dd5c:	0025883a 	mov	r18,zero
  80dd60:	002f883a 	mov	r23,zero
  80dd64:	000d883a 	mov	r6,zero
  80dd68:	103fff15 	stw	zero,-4(r2)
  80dd6c:	8c400044 	addi	r17,r17,1
  80dd70:	89000003 	ldbu	r4,0(r17)
  80dd74:	20000e26 	beq	r4,zero,80ddb0 <__hexnan+0xd8>
  80dd78:	2585883a 	add	r2,r4,r22
  80dd7c:	10c00003 	ldbu	r3,0(r2)
  80dd80:	18002e1e 	bne	r3,zero,80de3c <__hexnan+0x164>
  80dd84:	00800804 	movi	r2,32
  80dd88:	11005536 	bltu	r2,r4,80dee0 <__hexnan+0x208>
  80dd8c:	bcbff70e 	bge	r23,r18,80dd6c <__hexnan+0x94>
  80dd90:	8540022e 	bgeu	r16,r21,80dd9c <__hexnan+0xc4>
  80dd94:	008001c4 	movi	r2,7
  80dd98:	11803c0e 	bge	r2,r6,80de8c <__hexnan+0x1b4>
  80dd9c:	9c003536 	bltu	r19,r16,80de74 <__hexnan+0x19c>
  80dda0:	8c400044 	addi	r17,r17,1
  80dda4:	89000003 	ldbu	r4,0(r17)
  80dda8:	01800204 	movi	r6,8
  80ddac:	203ff21e 	bne	r4,zero,80dd78 <__hexnan+0xa0>
  80ddb0:	90004d26 	beq	r18,zero,80dee8 <__hexnan+0x210>
  80ddb4:	85404336 	bltu	r16,r21,80dec4 <__hexnan+0x1ec>
  80ddb8:	9c00382e 	bgeu	r19,r16,80de9c <__hexnan+0x1c4>
  80ddbc:	9807883a 	mov	r3,r19
  80ddc0:	80800017 	ldw	r2,0(r16)
  80ddc4:	84000104 	addi	r16,r16,4
  80ddc8:	18800015 	stw	r2,0(r3)
  80ddcc:	18c00104 	addi	r3,r3,4
  80ddd0:	a43ffb2e 	bgeu	r20,r16,80ddc0 <__hexnan+0xe8>
  80ddd4:	18000015 	stw	zero,0(r3)
  80ddd8:	18c00104 	addi	r3,r3,4
  80dddc:	a0fffd2e 	bgeu	r20,r3,80ddd4 <__hexnan+0xfc>
  80dde0:	a0800017 	ldw	r2,0(r20)
  80dde4:	1000071e 	bne	r2,zero,80de04 <__hexnan+0x12c>
  80dde8:	9d004326 	beq	r19,r20,80def8 <__hexnan+0x220>
  80ddec:	a007883a 	mov	r3,r20
  80ddf0:	00000106 	br	80ddf8 <__hexnan+0x120>
  80ddf4:	98c04026 	beq	r19,r3,80def8 <__hexnan+0x220>
  80ddf8:	18ffff04 	addi	r3,r3,-4
  80ddfc:	18800017 	ldw	r2,0(r3)
  80de00:	103ffc26 	beq	r2,zero,80ddf4 <__hexnan+0x11c>
  80de04:	00c00144 	movi	r3,5
  80de08:	1805883a 	mov	r2,r3
  80de0c:	dfc00b17 	ldw	ra,44(sp)
  80de10:	df000a17 	ldw	fp,40(sp)
  80de14:	ddc00917 	ldw	r23,36(sp)
  80de18:	dd800817 	ldw	r22,32(sp)
  80de1c:	dd400717 	ldw	r21,28(sp)
  80de20:	dd000617 	ldw	r20,24(sp)
  80de24:	dcc00517 	ldw	r19,20(sp)
  80de28:	dc800417 	ldw	r18,16(sp)
  80de2c:	dc400317 	ldw	r17,12(sp)
  80de30:	dc000217 	ldw	r16,8(sp)
  80de34:	dec00c04 	addi	sp,sp,48
  80de38:	f800283a 	ret
  80de3c:	31800044 	addi	r6,r6,1
  80de40:	00800204 	movi	r2,8
  80de44:	94800044 	addi	r18,r18,1
  80de48:	1180040e 	bge	r2,r6,80de5c <__hexnan+0x184>
  80de4c:	9c3fc72e 	bgeu	r19,r16,80dd6c <__hexnan+0x94>
  80de50:	843fff04 	addi	r16,r16,-4
  80de54:	80000015 	stw	zero,0(r16)
  80de58:	01800044 	movi	r6,1
  80de5c:	80800017 	ldw	r2,0(r16)
  80de60:	18c003cc 	andi	r3,r3,15
  80de64:	1004913a 	slli	r2,r2,4
  80de68:	10c4b03a 	or	r2,r2,r3
  80de6c:	80800015 	stw	r2,0(r16)
  80de70:	003fbe06 	br	80dd6c <__hexnan+0x94>
  80de74:	843fff04 	addi	r16,r16,-4
  80de78:	802b883a 	mov	r21,r16
  80de7c:	902f883a 	mov	r23,r18
  80de80:	000d883a 	mov	r6,zero
  80de84:	80000015 	stw	zero,0(r16)
  80de88:	003fb806 	br	80dd6c <__hexnan+0x94>
  80de8c:	8009883a 	mov	r4,r16
  80de90:	a80b883a 	mov	r5,r21
  80de94:	080dc8c0 	call	80dc8c <L_shift>
  80de98:	003fc006 	br	80dd9c <__hexnan+0xc4>
  80de9c:	e03fd01e 	bne	fp,zero,80dde0 <__hexnan+0x108>
  80dea0:	d8c00017 	ldw	r3,0(sp)
  80dea4:	00800804 	movi	r2,32
  80dea8:	10c5c83a 	sub	r2,r2,r3
  80deac:	00ffffc4 	movi	r3,-1
  80deb0:	1886d83a 	srl	r3,r3,r2
  80deb4:	a0800017 	ldw	r2,0(r20)
  80deb8:	10c4703a 	and	r2,r2,r3
  80debc:	a0800015 	stw	r2,0(r20)
  80dec0:	003fc806 	br	80dde4 <__hexnan+0x10c>
  80dec4:	008001c4 	movi	r2,7
  80dec8:	11bfbb16 	blt	r2,r6,80ddb8 <__hexnan+0xe0>
  80decc:	a80b883a 	mov	r5,r21
  80ded0:	8009883a 	mov	r4,r16
  80ded4:	080dc8c0 	call	80dc8c <L_shift>
  80ded8:	9c3ff02e 	bgeu	r19,r16,80de9c <__hexnan+0x1c4>
  80dedc:	003fb706 	br	80ddbc <__hexnan+0xe4>
  80dee0:	00800a44 	movi	r2,41
  80dee4:	20800826 	beq	r4,r2,80df08 <__hexnan+0x230>
  80dee8:	00c00104 	movi	r3,4
  80deec:	003fc606 	br	80de08 <__hexnan+0x130>
  80def0:	080d3780 	call	80d378 <__hexdig_init>
  80def4:	003f8a06 	br	80dd20 <__hexnan+0x48>
  80def8:	00800044 	movi	r2,1
  80defc:	00c00144 	movi	r3,5
  80df00:	98800015 	stw	r2,0(r19)
  80df04:	003fc006 	br	80de08 <__hexnan+0x130>
  80df08:	903ff726 	beq	r18,zero,80dee8 <__hexnan+0x210>
  80df0c:	d8c00117 	ldw	r3,4(sp)
  80df10:	88800044 	addi	r2,r17,1
  80df14:	18800015 	stw	r2,0(r3)
  80df18:	857fa72e 	bgeu	r16,r21,80ddb8 <__hexnan+0xe0>
  80df1c:	003fe906 	br	80dec4 <__hexnan+0x1ec>

0080df20 <__muldi3>:
  80df20:	defff204 	addi	sp,sp,-56
  80df24:	df000c15 	stw	fp,48(sp)
  80df28:	3038d43a 	srli	fp,r6,16
  80df2c:	dd000815 	stw	r20,32(sp)
  80df30:	dc400515 	stw	r17,20(sp)
  80df34:	2028d43a 	srli	r20,r4,16
  80df38:	247fffcc 	andi	r17,r4,65535
  80df3c:	dc000415 	stw	r16,16(sp)
  80df40:	343fffcc 	andi	r16,r6,65535
  80df44:	dcc00715 	stw	r19,28(sp)
  80df48:	d9000015 	stw	r4,0(sp)
  80df4c:	2827883a 	mov	r19,r5
  80df50:	8809883a 	mov	r4,r17
  80df54:	d9400115 	stw	r5,4(sp)
  80df58:	800b883a 	mov	r5,r16
  80df5c:	d9800215 	stw	r6,8(sp)
  80df60:	dfc00d15 	stw	ra,52(sp)
  80df64:	d9c00315 	stw	r7,12(sp)
  80df68:	dd800a15 	stw	r22,40(sp)
  80df6c:	dd400915 	stw	r21,36(sp)
  80df70:	302d883a 	mov	r22,r6
  80df74:	ddc00b15 	stw	r23,44(sp)
  80df78:	dc800615 	stw	r18,24(sp)
  80df7c:	08102900 	call	810290 <__mulsi3>
  80df80:	8809883a 	mov	r4,r17
  80df84:	e00b883a 	mov	r5,fp
  80df88:	102b883a 	mov	r21,r2
  80df8c:	08102900 	call	810290 <__mulsi3>
  80df90:	800b883a 	mov	r5,r16
  80df94:	a009883a 	mov	r4,r20
  80df98:	1023883a 	mov	r17,r2
  80df9c:	08102900 	call	810290 <__mulsi3>
  80dfa0:	a009883a 	mov	r4,r20
  80dfa4:	e00b883a 	mov	r5,fp
  80dfa8:	1021883a 	mov	r16,r2
  80dfac:	08102900 	call	810290 <__mulsi3>
  80dfb0:	a8ffffcc 	andi	r3,r21,65535
  80dfb4:	a82ad43a 	srli	r21,r21,16
  80dfb8:	8c23883a 	add	r17,r17,r16
  80dfbc:	1011883a 	mov	r8,r2
  80dfc0:	ac6b883a 	add	r21,r21,r17
  80dfc4:	a804943a 	slli	r2,r21,16
  80dfc8:	b009883a 	mov	r4,r22
  80dfcc:	980b883a 	mov	r5,r19
  80dfd0:	10c7883a 	add	r3,r2,r3
  80dfd4:	a812d43a 	srli	r9,r21,16
  80dfd8:	180d883a 	mov	r6,r3
  80dfdc:	ac00022e 	bgeu	r21,r16,80dfe8 <__muldi3+0xc8>
  80dfe0:	00800074 	movhi	r2,1
  80dfe4:	4091883a 	add	r8,r8,r2
  80dfe8:	4267883a 	add	r19,r8,r9
  80dfec:	302d883a 	mov	r22,r6
  80dff0:	08102900 	call	810290 <__mulsi3>
  80dff4:	d9400317 	ldw	r5,12(sp)
  80dff8:	d9000017 	ldw	r4,0(sp)
  80dffc:	1023883a 	mov	r17,r2
  80e000:	08102900 	call	810290 <__mulsi3>
  80e004:	14cb883a 	add	r5,r2,r19
  80e008:	894b883a 	add	r5,r17,r5
  80e00c:	b005883a 	mov	r2,r22
  80e010:	2807883a 	mov	r3,r5
  80e014:	dfc00d17 	ldw	ra,52(sp)
  80e018:	df000c17 	ldw	fp,48(sp)
  80e01c:	ddc00b17 	ldw	r23,44(sp)
  80e020:	dd800a17 	ldw	r22,40(sp)
  80e024:	dd400917 	ldw	r21,36(sp)
  80e028:	dd000817 	ldw	r20,32(sp)
  80e02c:	dcc00717 	ldw	r19,28(sp)
  80e030:	dc800617 	ldw	r18,24(sp)
  80e034:	dc400517 	ldw	r17,20(sp)
  80e038:	dc000417 	ldw	r16,16(sp)
  80e03c:	dec00e04 	addi	sp,sp,56
  80e040:	f800283a 	ret

0080e044 <__fixunsdfsi>:
  80e044:	defffb04 	addi	sp,sp,-20
  80e048:	dc400115 	stw	r17,4(sp)
  80e04c:	dc000015 	stw	r16,0(sp)
  80e050:	04507834 	movhi	r17,16864
  80e054:	0021883a 	mov	r16,zero
  80e058:	800d883a 	mov	r6,r16
  80e05c:	880f883a 	mov	r7,r17
  80e060:	dcc00315 	stw	r19,12(sp)
  80e064:	dc800215 	stw	r18,8(sp)
  80e068:	2827883a 	mov	r19,r5
  80e06c:	2025883a 	mov	r18,r4
  80e070:	dfc00415 	stw	ra,16(sp)
  80e074:	080fbd40 	call	80fbd4 <__gedf2>
  80e078:	000d883a 	mov	r6,zero
  80e07c:	880f883a 	mov	r7,r17
  80e080:	980b883a 	mov	r5,r19
  80e084:	9009883a 	mov	r4,r18
  80e088:	10000d16 	blt	r2,zero,80e0c0 <__fixunsdfsi+0x7c>
  80e08c:	080f32c0 	call	80f32c <__subdf3>
  80e090:	180b883a 	mov	r5,r3
  80e094:	1009883a 	mov	r4,r2
  80e098:	080fe640 	call	80fe64 <__fixdfsi>
  80e09c:	00e00034 	movhi	r3,32768
  80e0a0:	10c5883a 	add	r2,r2,r3
  80e0a4:	dfc00417 	ldw	ra,16(sp)
  80e0a8:	dcc00317 	ldw	r19,12(sp)
  80e0ac:	dc800217 	ldw	r18,8(sp)
  80e0b0:	dc400117 	ldw	r17,4(sp)
  80e0b4:	dc000017 	ldw	r16,0(sp)
  80e0b8:	dec00504 	addi	sp,sp,20
  80e0bc:	f800283a 	ret
  80e0c0:	980b883a 	mov	r5,r19
  80e0c4:	9009883a 	mov	r4,r18
  80e0c8:	080fe640 	call	80fe64 <__fixdfsi>
  80e0cc:	dfc00417 	ldw	ra,16(sp)
  80e0d0:	dcc00317 	ldw	r19,12(sp)
  80e0d4:	dc800217 	ldw	r18,8(sp)
  80e0d8:	dc400117 	ldw	r17,4(sp)
  80e0dc:	dc000017 	ldw	r16,0(sp)
  80e0e0:	dec00504 	addi	sp,sp,20
  80e0e4:	f800283a 	ret

0080e0e8 <__udivdi3>:
  80e0e8:	defff104 	addi	sp,sp,-60
  80e0ec:	0015883a 	mov	r10,zero
  80e0f0:	2005883a 	mov	r2,r4
  80e0f4:	3011883a 	mov	r8,r6
  80e0f8:	df000d15 	stw	fp,52(sp)
  80e0fc:	dd400a15 	stw	r21,40(sp)
  80e100:	dcc00815 	stw	r19,32(sp)
  80e104:	dfc00e15 	stw	ra,56(sp)
  80e108:	ddc00c15 	stw	r23,48(sp)
  80e10c:	dd800b15 	stw	r22,44(sp)
  80e110:	dd000915 	stw	r20,36(sp)
  80e114:	dc800715 	stw	r18,28(sp)
  80e118:	dc400615 	stw	r17,24(sp)
  80e11c:	dc000515 	stw	r16,20(sp)
  80e120:	da800315 	stw	r10,12(sp)
  80e124:	4027883a 	mov	r19,r8
  80e128:	1039883a 	mov	fp,r2
  80e12c:	282b883a 	mov	r21,r5
  80e130:	da800415 	stw	r10,16(sp)
  80e134:	3800401e 	bne	r7,zero,80e238 <__udivdi3+0x150>
  80e138:	2a006536 	bltu	r5,r8,80e2d0 <__udivdi3+0x1e8>
  80e13c:	4000b526 	beq	r8,zero,80e414 <__udivdi3+0x32c>
  80e140:	00bfffd4 	movui	r2,65535
  80e144:	14c0ad36 	bltu	r2,r19,80e3fc <__udivdi3+0x314>
  80e148:	00803fc4 	movi	r2,255
  80e14c:	14c15e36 	bltu	r2,r19,80e6c8 <__udivdi3+0x5e0>
  80e150:	000b883a 	mov	r5,zero
  80e154:	0005883a 	mov	r2,zero
  80e158:	9884d83a 	srl	r2,r19,r2
  80e15c:	01002074 	movhi	r4,129
  80e160:	21148904 	addi	r4,r4,21028
  80e164:	01800804 	movi	r6,32
  80e168:	1105883a 	add	r2,r2,r4
  80e16c:	10c00003 	ldbu	r3,0(r2)
  80e170:	28c7883a 	add	r3,r5,r3
  80e174:	30e9c83a 	sub	r20,r6,r3
  80e178:	a0010a1e 	bne	r20,zero,80e5a4 <__udivdi3+0x4bc>
  80e17c:	982ed43a 	srli	r23,r19,16
  80e180:	acebc83a 	sub	r21,r21,r19
  80e184:	9dbfffcc 	andi	r22,r19,65535
  80e188:	05000044 	movi	r20,1
  80e18c:	a809883a 	mov	r4,r21
  80e190:	b80b883a 	mov	r5,r23
  80e194:	08102800 	call	810280 <__udivsi3>
  80e198:	100b883a 	mov	r5,r2
  80e19c:	b009883a 	mov	r4,r22
  80e1a0:	1021883a 	mov	r16,r2
  80e1a4:	08102900 	call	810290 <__mulsi3>
  80e1a8:	a809883a 	mov	r4,r21
  80e1ac:	b80b883a 	mov	r5,r23
  80e1b0:	1023883a 	mov	r17,r2
  80e1b4:	08102880 	call	810288 <__umodsi3>
  80e1b8:	1004943a 	slli	r2,r2,16
  80e1bc:	e006d43a 	srli	r3,fp,16
  80e1c0:	10c4b03a 	or	r2,r2,r3
  80e1c4:	1440042e 	bgeu	r2,r17,80e1d8 <__udivdi3+0xf0>
  80e1c8:	14c5883a 	add	r2,r2,r19
  80e1cc:	843fffc4 	addi	r16,r16,-1
  80e1d0:	14c00136 	bltu	r2,r19,80e1d8 <__udivdi3+0xf0>
  80e1d4:	14415c36 	bltu	r2,r17,80e748 <__udivdi3+0x660>
  80e1d8:	1463c83a 	sub	r17,r2,r17
  80e1dc:	8809883a 	mov	r4,r17
  80e1e0:	b80b883a 	mov	r5,r23
  80e1e4:	08102800 	call	810280 <__udivsi3>
  80e1e8:	100b883a 	mov	r5,r2
  80e1ec:	b009883a 	mov	r4,r22
  80e1f0:	102b883a 	mov	r21,r2
  80e1f4:	08102900 	call	810290 <__mulsi3>
  80e1f8:	8809883a 	mov	r4,r17
  80e1fc:	b80b883a 	mov	r5,r23
  80e200:	1025883a 	mov	r18,r2
  80e204:	08102880 	call	810288 <__umodsi3>
  80e208:	1004943a 	slli	r2,r2,16
  80e20c:	e0ffffcc 	andi	r3,fp,65535
  80e210:	10c4b03a 	or	r2,r2,r3
  80e214:	1480042e 	bgeu	r2,r18,80e228 <__udivdi3+0x140>
  80e218:	9885883a 	add	r2,r19,r2
  80e21c:	ad7fffc4 	addi	r21,r21,-1
  80e220:	14c00136 	bltu	r2,r19,80e228 <__udivdi3+0x140>
  80e224:	14813c36 	bltu	r2,r18,80e718 <__udivdi3+0x630>
  80e228:	8004943a 	slli	r2,r16,16
  80e22c:	a009883a 	mov	r4,r20
  80e230:	a884b03a 	or	r2,r21,r2
  80e234:	00001506 	br	80e28c <__udivdi3+0x1a4>
  80e238:	380d883a 	mov	r6,r7
  80e23c:	29c06c36 	bltu	r5,r7,80e3f0 <__udivdi3+0x308>
  80e240:	00bfffd4 	movui	r2,65535
  80e244:	11c06436 	bltu	r2,r7,80e3d8 <__udivdi3+0x2f0>
  80e248:	00803fc4 	movi	r2,255
  80e24c:	11c11836 	bltu	r2,r7,80e6b0 <__udivdi3+0x5c8>
  80e250:	000b883a 	mov	r5,zero
  80e254:	0005883a 	mov	r2,zero
  80e258:	3084d83a 	srl	r2,r6,r2
  80e25c:	01002074 	movhi	r4,129
  80e260:	21148904 	addi	r4,r4,21028
  80e264:	01c00804 	movi	r7,32
  80e268:	1105883a 	add	r2,r2,r4
  80e26c:	10c00003 	ldbu	r3,0(r2)
  80e270:	28c7883a 	add	r3,r5,r3
  80e274:	38edc83a 	sub	r22,r7,r3
  80e278:	b000731e 	bne	r22,zero,80e448 <__udivdi3+0x360>
  80e27c:	35400136 	bltu	r6,r21,80e284 <__udivdi3+0x19c>
  80e280:	e4c05b36 	bltu	fp,r19,80e3f0 <__udivdi3+0x308>
  80e284:	00800044 	movi	r2,1
  80e288:	0009883a 	mov	r4,zero
  80e28c:	d8800315 	stw	r2,12(sp)
  80e290:	d9400317 	ldw	r5,12(sp)
  80e294:	d9000415 	stw	r4,16(sp)
  80e298:	2007883a 	mov	r3,r4
  80e29c:	2805883a 	mov	r2,r5
  80e2a0:	dfc00e17 	ldw	ra,56(sp)
  80e2a4:	df000d17 	ldw	fp,52(sp)
  80e2a8:	ddc00c17 	ldw	r23,48(sp)
  80e2ac:	dd800b17 	ldw	r22,44(sp)
  80e2b0:	dd400a17 	ldw	r21,40(sp)
  80e2b4:	dd000917 	ldw	r20,36(sp)
  80e2b8:	dcc00817 	ldw	r19,32(sp)
  80e2bc:	dc800717 	ldw	r18,28(sp)
  80e2c0:	dc400617 	ldw	r17,24(sp)
  80e2c4:	dc000517 	ldw	r16,20(sp)
  80e2c8:	dec00f04 	addi	sp,sp,60
  80e2cc:	f800283a 	ret
  80e2d0:	00bfffd4 	movui	r2,65535
  80e2d4:	12005636 	bltu	r2,r8,80e430 <__udivdi3+0x348>
  80e2d8:	00803fc4 	movi	r2,255
  80e2dc:	12010036 	bltu	r2,r8,80e6e0 <__udivdi3+0x5f8>
  80e2e0:	000b883a 	mov	r5,zero
  80e2e4:	0005883a 	mov	r2,zero
  80e2e8:	9884d83a 	srl	r2,r19,r2
  80e2ec:	01002074 	movhi	r4,129
  80e2f0:	21148904 	addi	r4,r4,21028
  80e2f4:	01800804 	movi	r6,32
  80e2f8:	1105883a 	add	r2,r2,r4
  80e2fc:	10c00003 	ldbu	r3,0(r2)
  80e300:	28c7883a 	add	r3,r5,r3
  80e304:	30cbc83a 	sub	r5,r6,r3
  80e308:	28000626 	beq	r5,zero,80e324 <__udivdi3+0x23c>
  80e30c:	3145c83a 	sub	r2,r6,r5
  80e310:	e084d83a 	srl	r2,fp,r2
  80e314:	a946983a 	sll	r3,r21,r5
  80e318:	e178983a 	sll	fp,fp,r5
  80e31c:	9966983a 	sll	r19,r19,r5
  80e320:	18aab03a 	or	r21,r3,r2
  80e324:	982ed43a 	srli	r23,r19,16
  80e328:	a809883a 	mov	r4,r21
  80e32c:	9cbfffcc 	andi	r18,r19,65535
  80e330:	b80b883a 	mov	r5,r23
  80e334:	08102800 	call	810280 <__udivsi3>
  80e338:	100b883a 	mov	r5,r2
  80e33c:	9009883a 	mov	r4,r18
  80e340:	1021883a 	mov	r16,r2
  80e344:	08102900 	call	810290 <__mulsi3>
  80e348:	a809883a 	mov	r4,r21
  80e34c:	b80b883a 	mov	r5,r23
  80e350:	1023883a 	mov	r17,r2
  80e354:	08102880 	call	810288 <__umodsi3>
  80e358:	1004943a 	slli	r2,r2,16
  80e35c:	e006d43a 	srli	r3,fp,16
  80e360:	10c4b03a 	or	r2,r2,r3
  80e364:	1440042e 	bgeu	r2,r17,80e378 <__udivdi3+0x290>
  80e368:	14c5883a 	add	r2,r2,r19
  80e36c:	843fffc4 	addi	r16,r16,-1
  80e370:	14c00136 	bltu	r2,r19,80e378 <__udivdi3+0x290>
  80e374:	1440ea36 	bltu	r2,r17,80e720 <__udivdi3+0x638>
  80e378:	1463c83a 	sub	r17,r2,r17
  80e37c:	8809883a 	mov	r4,r17
  80e380:	b80b883a 	mov	r5,r23
  80e384:	08102800 	call	810280 <__udivsi3>
  80e388:	100b883a 	mov	r5,r2
  80e38c:	9009883a 	mov	r4,r18
  80e390:	102b883a 	mov	r21,r2
  80e394:	08102900 	call	810290 <__mulsi3>
  80e398:	8809883a 	mov	r4,r17
  80e39c:	b80b883a 	mov	r5,r23
  80e3a0:	1025883a 	mov	r18,r2
  80e3a4:	08102880 	call	810288 <__umodsi3>
  80e3a8:	1004943a 	slli	r2,r2,16
  80e3ac:	e0ffffcc 	andi	r3,fp,65535
  80e3b0:	10c4b03a 	or	r2,r2,r3
  80e3b4:	1480042e 	bgeu	r2,r18,80e3c8 <__udivdi3+0x2e0>
  80e3b8:	9885883a 	add	r2,r19,r2
  80e3bc:	ad7fffc4 	addi	r21,r21,-1
  80e3c0:	14c00136 	bltu	r2,r19,80e3c8 <__udivdi3+0x2e0>
  80e3c4:	1480d936 	bltu	r2,r18,80e72c <__udivdi3+0x644>
  80e3c8:	8004943a 	slli	r2,r16,16
  80e3cc:	0009883a 	mov	r4,zero
  80e3d0:	a884b03a 	or	r2,r21,r2
  80e3d4:	003fad06 	br	80e28c <__udivdi3+0x1a4>
  80e3d8:	00804034 	movhi	r2,256
  80e3dc:	10bfffc4 	addi	r2,r2,-1
  80e3e0:	11c0b636 	bltu	r2,r7,80e6bc <__udivdi3+0x5d4>
  80e3e4:	01400404 	movi	r5,16
  80e3e8:	2805883a 	mov	r2,r5
  80e3ec:	003f9a06 	br	80e258 <__udivdi3+0x170>
  80e3f0:	0005883a 	mov	r2,zero
  80e3f4:	0009883a 	mov	r4,zero
  80e3f8:	003fa406 	br	80e28c <__udivdi3+0x1a4>
  80e3fc:	00804034 	movhi	r2,256
  80e400:	10bfffc4 	addi	r2,r2,-1
  80e404:	14c0b336 	bltu	r2,r19,80e6d4 <__udivdi3+0x5ec>
  80e408:	01400404 	movi	r5,16
  80e40c:	2805883a 	mov	r2,r5
  80e410:	003f5106 	br	80e158 <__udivdi3+0x70>
  80e414:	01000044 	movi	r4,1
  80e418:	000b883a 	mov	r5,zero
  80e41c:	08102800 	call	810280 <__udivsi3>
  80e420:	1027883a 	mov	r19,r2
  80e424:	00bfffd4 	movui	r2,65535
  80e428:	14fff436 	bltu	r2,r19,80e3fc <__udivdi3+0x314>
  80e42c:	003f4606 	br	80e148 <__udivdi3+0x60>
  80e430:	00804034 	movhi	r2,256
  80e434:	10bfffc4 	addi	r2,r2,-1
  80e438:	1200ac36 	bltu	r2,r8,80e6ec <__udivdi3+0x604>
  80e43c:	01400404 	movi	r5,16
  80e440:	2805883a 	mov	r2,r5
  80e444:	003fa806 	br	80e2e8 <__udivdi3+0x200>
  80e448:	3d85c83a 	sub	r2,r7,r22
  80e44c:	3588983a 	sll	r4,r6,r22
  80e450:	9886d83a 	srl	r3,r19,r2
  80e454:	a8a2d83a 	srl	r17,r21,r2
  80e458:	e084d83a 	srl	r2,fp,r2
  80e45c:	20eeb03a 	or	r23,r4,r3
  80e460:	b824d43a 	srli	r18,r23,16
  80e464:	ad86983a 	sll	r3,r21,r22
  80e468:	8809883a 	mov	r4,r17
  80e46c:	900b883a 	mov	r5,r18
  80e470:	1886b03a 	or	r3,r3,r2
  80e474:	d8c00115 	stw	r3,4(sp)
  80e478:	bc3fffcc 	andi	r16,r23,65535
  80e47c:	08102800 	call	810280 <__udivsi3>
  80e480:	100b883a 	mov	r5,r2
  80e484:	8009883a 	mov	r4,r16
  80e488:	1029883a 	mov	r20,r2
  80e48c:	08102900 	call	810290 <__mulsi3>
  80e490:	900b883a 	mov	r5,r18
  80e494:	8809883a 	mov	r4,r17
  80e498:	102b883a 	mov	r21,r2
  80e49c:	08102880 	call	810288 <__umodsi3>
  80e4a0:	d9400117 	ldw	r5,4(sp)
  80e4a4:	1004943a 	slli	r2,r2,16
  80e4a8:	9da6983a 	sll	r19,r19,r22
  80e4ac:	2806d43a 	srli	r3,r5,16
  80e4b0:	10c4b03a 	or	r2,r2,r3
  80e4b4:	1540032e 	bgeu	r2,r21,80e4c4 <__udivdi3+0x3dc>
  80e4b8:	15c5883a 	add	r2,r2,r23
  80e4bc:	a53fffc4 	addi	r20,r20,-1
  80e4c0:	15c0912e 	bgeu	r2,r23,80e708 <__udivdi3+0x620>
  80e4c4:	1563c83a 	sub	r17,r2,r21
  80e4c8:	8809883a 	mov	r4,r17
  80e4cc:	900b883a 	mov	r5,r18
  80e4d0:	08102800 	call	810280 <__udivsi3>
  80e4d4:	100b883a 	mov	r5,r2
  80e4d8:	8009883a 	mov	r4,r16
  80e4dc:	102b883a 	mov	r21,r2
  80e4e0:	08102900 	call	810290 <__mulsi3>
  80e4e4:	8809883a 	mov	r4,r17
  80e4e8:	900b883a 	mov	r5,r18
  80e4ec:	1021883a 	mov	r16,r2
  80e4f0:	08102880 	call	810288 <__umodsi3>
  80e4f4:	da800117 	ldw	r10,4(sp)
  80e4f8:	1004943a 	slli	r2,r2,16
  80e4fc:	50ffffcc 	andi	r3,r10,65535
  80e500:	10c6b03a 	or	r3,r2,r3
  80e504:	1c00032e 	bgeu	r3,r16,80e514 <__udivdi3+0x42c>
  80e508:	1dc7883a 	add	r3,r3,r23
  80e50c:	ad7fffc4 	addi	r21,r21,-1
  80e510:	1dc0792e 	bgeu	r3,r23,80e6f8 <__udivdi3+0x610>
  80e514:	a004943a 	slli	r2,r20,16
  80e518:	982ed43a 	srli	r23,r19,16
  80e51c:	9cffffcc 	andi	r19,r19,65535
  80e520:	a8a4b03a 	or	r18,r21,r2
  80e524:	947fffcc 	andi	r17,r18,65535
  80e528:	902ad43a 	srli	r21,r18,16
  80e52c:	8809883a 	mov	r4,r17
  80e530:	980b883a 	mov	r5,r19
  80e534:	1c21c83a 	sub	r16,r3,r16
  80e538:	08102900 	call	810290 <__mulsi3>
  80e53c:	8809883a 	mov	r4,r17
  80e540:	b80b883a 	mov	r5,r23
  80e544:	1029883a 	mov	r20,r2
  80e548:	08102900 	call	810290 <__mulsi3>
  80e54c:	980b883a 	mov	r5,r19
  80e550:	a809883a 	mov	r4,r21
  80e554:	1023883a 	mov	r17,r2
  80e558:	08102900 	call	810290 <__mulsi3>
  80e55c:	a809883a 	mov	r4,r21
  80e560:	b80b883a 	mov	r5,r23
  80e564:	1027883a 	mov	r19,r2
  80e568:	08102900 	call	810290 <__mulsi3>
  80e56c:	1009883a 	mov	r4,r2
  80e570:	a004d43a 	srli	r2,r20,16
  80e574:	8ce3883a 	add	r17,r17,r19
  80e578:	1447883a 	add	r3,r2,r17
  80e57c:	1cc0022e 	bgeu	r3,r19,80e588 <__udivdi3+0x4a0>
  80e580:	00800074 	movhi	r2,1
  80e584:	2089883a 	add	r4,r4,r2
  80e588:	1804d43a 	srli	r2,r3,16
  80e58c:	2085883a 	add	r2,r4,r2
  80e590:	80804436 	bltu	r16,r2,80e6a4 <__udivdi3+0x5bc>
  80e594:	80803e26 	beq	r16,r2,80e690 <__udivdi3+0x5a8>
  80e598:	9005883a 	mov	r2,r18
  80e59c:	0009883a 	mov	r4,zero
  80e5a0:	003f3a06 	br	80e28c <__udivdi3+0x1a4>
  80e5a4:	9d26983a 	sll	r19,r19,r20
  80e5a8:	3505c83a 	sub	r2,r6,r20
  80e5ac:	a8a2d83a 	srl	r17,r21,r2
  80e5b0:	982ed43a 	srli	r23,r19,16
  80e5b4:	e084d83a 	srl	r2,fp,r2
  80e5b8:	ad06983a 	sll	r3,r21,r20
  80e5bc:	8809883a 	mov	r4,r17
  80e5c0:	b80b883a 	mov	r5,r23
  80e5c4:	1886b03a 	or	r3,r3,r2
  80e5c8:	d8c00015 	stw	r3,0(sp)
  80e5cc:	9dbfffcc 	andi	r22,r19,65535
  80e5d0:	08102800 	call	810280 <__udivsi3>
  80e5d4:	100b883a 	mov	r5,r2
  80e5d8:	b009883a 	mov	r4,r22
  80e5dc:	d8800215 	stw	r2,8(sp)
  80e5e0:	08102900 	call	810290 <__mulsi3>
  80e5e4:	8809883a 	mov	r4,r17
  80e5e8:	b80b883a 	mov	r5,r23
  80e5ec:	102b883a 	mov	r21,r2
  80e5f0:	08102880 	call	810288 <__umodsi3>
  80e5f4:	d9000017 	ldw	r4,0(sp)
  80e5f8:	1004943a 	slli	r2,r2,16
  80e5fc:	2006d43a 	srli	r3,r4,16
  80e600:	10c4b03a 	or	r2,r2,r3
  80e604:	1540052e 	bgeu	r2,r21,80e61c <__udivdi3+0x534>
  80e608:	d9400217 	ldw	r5,8(sp)
  80e60c:	14c5883a 	add	r2,r2,r19
  80e610:	297fffc4 	addi	r5,r5,-1
  80e614:	d9400215 	stw	r5,8(sp)
  80e618:	14c0462e 	bgeu	r2,r19,80e734 <__udivdi3+0x64c>
  80e61c:	1563c83a 	sub	r17,r2,r21
  80e620:	8809883a 	mov	r4,r17
  80e624:	b80b883a 	mov	r5,r23
  80e628:	08102800 	call	810280 <__udivsi3>
  80e62c:	100b883a 	mov	r5,r2
  80e630:	b009883a 	mov	r4,r22
  80e634:	1025883a 	mov	r18,r2
  80e638:	08102900 	call	810290 <__mulsi3>
  80e63c:	8809883a 	mov	r4,r17
  80e640:	b80b883a 	mov	r5,r23
  80e644:	1021883a 	mov	r16,r2
  80e648:	08102880 	call	810288 <__umodsi3>
  80e64c:	da800017 	ldw	r10,0(sp)
  80e650:	1004943a 	slli	r2,r2,16
  80e654:	50ffffcc 	andi	r3,r10,65535
  80e658:	10c6b03a 	or	r3,r2,r3
  80e65c:	1c00062e 	bgeu	r3,r16,80e678 <__udivdi3+0x590>
  80e660:	1cc7883a 	add	r3,r3,r19
  80e664:	94bfffc4 	addi	r18,r18,-1
  80e668:	1cc00336 	bltu	r3,r19,80e678 <__udivdi3+0x590>
  80e66c:	1c00022e 	bgeu	r3,r16,80e678 <__udivdi3+0x590>
  80e670:	94bfffc4 	addi	r18,r18,-1
  80e674:	1cc7883a 	add	r3,r3,r19
  80e678:	d9000217 	ldw	r4,8(sp)
  80e67c:	e538983a 	sll	fp,fp,r20
  80e680:	1c2bc83a 	sub	r21,r3,r16
  80e684:	2004943a 	slli	r2,r4,16
  80e688:	90a8b03a 	or	r20,r18,r2
  80e68c:	003ebf06 	br	80e18c <__udivdi3+0xa4>
  80e690:	1804943a 	slli	r2,r3,16
  80e694:	e588983a 	sll	r4,fp,r22
  80e698:	a0ffffcc 	andi	r3,r20,65535
  80e69c:	10c5883a 	add	r2,r2,r3
  80e6a0:	20bfbd2e 	bgeu	r4,r2,80e598 <__udivdi3+0x4b0>
  80e6a4:	90bfffc4 	addi	r2,r18,-1
  80e6a8:	0009883a 	mov	r4,zero
  80e6ac:	003ef706 	br	80e28c <__udivdi3+0x1a4>
  80e6b0:	01400204 	movi	r5,8
  80e6b4:	2805883a 	mov	r2,r5
  80e6b8:	003ee706 	br	80e258 <__udivdi3+0x170>
  80e6bc:	01400604 	movi	r5,24
  80e6c0:	2805883a 	mov	r2,r5
  80e6c4:	003ee406 	br	80e258 <__udivdi3+0x170>
  80e6c8:	01400204 	movi	r5,8
  80e6cc:	2805883a 	mov	r2,r5
  80e6d0:	003ea106 	br	80e158 <__udivdi3+0x70>
  80e6d4:	01400604 	movi	r5,24
  80e6d8:	2805883a 	mov	r2,r5
  80e6dc:	003e9e06 	br	80e158 <__udivdi3+0x70>
  80e6e0:	01400204 	movi	r5,8
  80e6e4:	2805883a 	mov	r2,r5
  80e6e8:	003eff06 	br	80e2e8 <__udivdi3+0x200>
  80e6ec:	01400604 	movi	r5,24
  80e6f0:	2805883a 	mov	r2,r5
  80e6f4:	003efc06 	br	80e2e8 <__udivdi3+0x200>
  80e6f8:	1c3f862e 	bgeu	r3,r16,80e514 <__udivdi3+0x42c>
  80e6fc:	1dc7883a 	add	r3,r3,r23
  80e700:	ad7fffc4 	addi	r21,r21,-1
  80e704:	003f8306 	br	80e514 <__udivdi3+0x42c>
  80e708:	157f6e2e 	bgeu	r2,r21,80e4c4 <__udivdi3+0x3dc>
  80e70c:	a53fffc4 	addi	r20,r20,-1
  80e710:	15c5883a 	add	r2,r2,r23
  80e714:	003f6b06 	br	80e4c4 <__udivdi3+0x3dc>
  80e718:	ad7fffc4 	addi	r21,r21,-1
  80e71c:	003ec206 	br	80e228 <__udivdi3+0x140>
  80e720:	843fffc4 	addi	r16,r16,-1
  80e724:	14c5883a 	add	r2,r2,r19
  80e728:	003f1306 	br	80e378 <__udivdi3+0x290>
  80e72c:	ad7fffc4 	addi	r21,r21,-1
  80e730:	003f2506 	br	80e3c8 <__udivdi3+0x2e0>
  80e734:	157fb92e 	bgeu	r2,r21,80e61c <__udivdi3+0x534>
  80e738:	297fffc4 	addi	r5,r5,-1
  80e73c:	14c5883a 	add	r2,r2,r19
  80e740:	d9400215 	stw	r5,8(sp)
  80e744:	003fb506 	br	80e61c <__udivdi3+0x534>
  80e748:	843fffc4 	addi	r16,r16,-1
  80e74c:	14c5883a 	add	r2,r2,r19
  80e750:	003ea106 	br	80e1d8 <__udivdi3+0xf0>

0080e754 <__umoddi3>:
  80e754:	defff004 	addi	sp,sp,-64
  80e758:	3011883a 	mov	r8,r6
  80e75c:	000d883a 	mov	r6,zero
  80e760:	dd400b15 	stw	r21,44(sp)
  80e764:	dcc00915 	stw	r19,36(sp)
  80e768:	dc000615 	stw	r16,24(sp)
  80e76c:	dfc00f15 	stw	ra,60(sp)
  80e770:	df000e15 	stw	fp,56(sp)
  80e774:	ddc00d15 	stw	r23,52(sp)
  80e778:	dd800c15 	stw	r22,48(sp)
  80e77c:	dd000a15 	stw	r20,40(sp)
  80e780:	dc800815 	stw	r18,32(sp)
  80e784:	dc400715 	stw	r17,28(sp)
  80e788:	2817883a 	mov	r11,r5
  80e78c:	d9800415 	stw	r6,16(sp)
  80e790:	4027883a 	mov	r19,r8
  80e794:	d9800515 	stw	r6,20(sp)
  80e798:	2021883a 	mov	r16,r4
  80e79c:	282b883a 	mov	r21,r5
  80e7a0:	38002c1e 	bne	r7,zero,80e854 <__umoddi3+0x100>
  80e7a4:	2a005636 	bltu	r5,r8,80e900 <__umoddi3+0x1ac>
  80e7a8:	40009a26 	beq	r8,zero,80ea14 <__umoddi3+0x2c0>
  80e7ac:	00bfffd4 	movui	r2,65535
  80e7b0:	14c09236 	bltu	r2,r19,80e9fc <__umoddi3+0x2a8>
  80e7b4:	00803fc4 	movi	r2,255
  80e7b8:	14c15c36 	bltu	r2,r19,80ed2c <__umoddi3+0x5d8>
  80e7bc:	000b883a 	mov	r5,zero
  80e7c0:	0005883a 	mov	r2,zero
  80e7c4:	9884d83a 	srl	r2,r19,r2
  80e7c8:	01002074 	movhi	r4,129
  80e7cc:	21148904 	addi	r4,r4,21028
  80e7d0:	01800804 	movi	r6,32
  80e7d4:	1105883a 	add	r2,r2,r4
  80e7d8:	10c00003 	ldbu	r3,0(r2)
  80e7dc:	28c7883a 	add	r3,r5,r3
  80e7e0:	30e5c83a 	sub	r18,r6,r3
  80e7e4:	9000a41e 	bne	r18,zero,80ea78 <__umoddi3+0x324>
  80e7e8:	982ed43a 	srli	r23,r19,16
  80e7ec:	acebc83a 	sub	r21,r21,r19
  80e7f0:	9d3fffcc 	andi	r20,r19,65535
  80e7f4:	002d883a 	mov	r22,zero
  80e7f8:	a809883a 	mov	r4,r21
  80e7fc:	b80b883a 	mov	r5,r23
  80e800:	08102800 	call	810280 <__udivsi3>
  80e804:	100b883a 	mov	r5,r2
  80e808:	a009883a 	mov	r4,r20
  80e80c:	08102900 	call	810290 <__mulsi3>
  80e810:	a809883a 	mov	r4,r21
  80e814:	b80b883a 	mov	r5,r23
  80e818:	1023883a 	mov	r17,r2
  80e81c:	08102880 	call	810288 <__umodsi3>
  80e820:	1004943a 	slli	r2,r2,16
  80e824:	8006d43a 	srli	r3,r16,16
  80e828:	10c4b03a 	or	r2,r2,r3
  80e82c:	1440032e 	bgeu	r2,r17,80e83c <__umoddi3+0xe8>
  80e830:	14c5883a 	add	r2,r2,r19
  80e834:	14c00136 	bltu	r2,r19,80e83c <__umoddi3+0xe8>
  80e838:	14415836 	bltu	r2,r17,80ed9c <__umoddi3+0x648>
  80e83c:	1463c83a 	sub	r17,r2,r17
  80e840:	8809883a 	mov	r4,r17
  80e844:	b80b883a 	mov	r5,r23
  80e848:	08102800 	call	810280 <__udivsi3>
  80e84c:	a009883a 	mov	r4,r20
  80e850:	00005306 	br	80e9a0 <__umoddi3+0x24c>
  80e854:	380d883a 	mov	r6,r7
  80e858:	29c0132e 	bgeu	r5,r7,80e8a8 <__umoddi3+0x154>
  80e85c:	d9000415 	stw	r4,16(sp)
  80e860:	d9400515 	stw	r5,20(sp)
  80e864:	d9400417 	ldw	r5,16(sp)
  80e868:	5813883a 	mov	r9,r11
  80e86c:	2811883a 	mov	r8,r5
  80e870:	4005883a 	mov	r2,r8
  80e874:	4807883a 	mov	r3,r9
  80e878:	dfc00f17 	ldw	ra,60(sp)
  80e87c:	df000e17 	ldw	fp,56(sp)
  80e880:	ddc00d17 	ldw	r23,52(sp)
  80e884:	dd800c17 	ldw	r22,48(sp)
  80e888:	dd400b17 	ldw	r21,44(sp)
  80e88c:	dd000a17 	ldw	r20,40(sp)
  80e890:	dcc00917 	ldw	r19,36(sp)
  80e894:	dc800817 	ldw	r18,32(sp)
  80e898:	dc400717 	ldw	r17,28(sp)
  80e89c:	dc000617 	ldw	r16,24(sp)
  80e8a0:	dec01004 	addi	sp,sp,64
  80e8a4:	f800283a 	ret
  80e8a8:	00bfffd4 	movui	r2,65535
  80e8ac:	11c06636 	bltu	r2,r7,80ea48 <__umoddi3+0x2f4>
  80e8b0:	00803fc4 	movi	r2,255
  80e8b4:	11c12036 	bltu	r2,r7,80ed38 <__umoddi3+0x5e4>
  80e8b8:	000b883a 	mov	r5,zero
  80e8bc:	0005883a 	mov	r2,zero
  80e8c0:	3084d83a 	srl	r2,r6,r2
  80e8c4:	01002074 	movhi	r4,129
  80e8c8:	21148904 	addi	r4,r4,21028
  80e8cc:	01c00804 	movi	r7,32
  80e8d0:	1105883a 	add	r2,r2,r4
  80e8d4:	10c00003 	ldbu	r3,0(r2)
  80e8d8:	28c7883a 	add	r3,r5,r3
  80e8dc:	38e5c83a 	sub	r18,r7,r3
  80e8e0:	9000941e 	bne	r18,zero,80eb34 <__umoddi3+0x3e0>
  80e8e4:	35405e36 	bltu	r6,r21,80ea60 <__umoddi3+0x30c>
  80e8e8:	84c05d2e 	bgeu	r16,r19,80ea60 <__umoddi3+0x30c>
  80e8ec:	8011883a 	mov	r8,r16
  80e8f0:	a813883a 	mov	r9,r21
  80e8f4:	dc000415 	stw	r16,16(sp)
  80e8f8:	dd400515 	stw	r21,20(sp)
  80e8fc:	003fdc06 	br	80e870 <__umoddi3+0x11c>
  80e900:	00bfffd4 	movui	r2,65535
  80e904:	12004a36 	bltu	r2,r8,80ea30 <__umoddi3+0x2dc>
  80e908:	00803fc4 	movi	r2,255
  80e90c:	12010d36 	bltu	r2,r8,80ed44 <__umoddi3+0x5f0>
  80e910:	000b883a 	mov	r5,zero
  80e914:	0005883a 	mov	r2,zero
  80e918:	9884d83a 	srl	r2,r19,r2
  80e91c:	01002074 	movhi	r4,129
  80e920:	21148904 	addi	r4,r4,21028
  80e924:	01800804 	movi	r6,32
  80e928:	1105883a 	add	r2,r2,r4
  80e92c:	10c00003 	ldbu	r3,0(r2)
  80e930:	28c7883a 	add	r3,r5,r3
  80e934:	30c7c83a 	sub	r3,r6,r3
  80e938:	1800dc1e 	bne	r3,zero,80ecac <__umoddi3+0x558>
  80e93c:	002d883a 	mov	r22,zero
  80e940:	982ed43a 	srli	r23,r19,16
  80e944:	a809883a 	mov	r4,r21
  80e948:	9cbfffcc 	andi	r18,r19,65535
  80e94c:	b80b883a 	mov	r5,r23
  80e950:	08102800 	call	810280 <__udivsi3>
  80e954:	100b883a 	mov	r5,r2
  80e958:	9009883a 	mov	r4,r18
  80e95c:	08102900 	call	810290 <__mulsi3>
  80e960:	a809883a 	mov	r4,r21
  80e964:	b80b883a 	mov	r5,r23
  80e968:	1023883a 	mov	r17,r2
  80e96c:	08102880 	call	810288 <__umodsi3>
  80e970:	1004943a 	slli	r2,r2,16
  80e974:	8006d43a 	srli	r3,r16,16
  80e978:	10c4b03a 	or	r2,r2,r3
  80e97c:	1440032e 	bgeu	r2,r17,80e98c <__umoddi3+0x238>
  80e980:	14c5883a 	add	r2,r2,r19
  80e984:	14c00136 	bltu	r2,r19,80e98c <__umoddi3+0x238>
  80e988:	14410236 	bltu	r2,r17,80ed94 <__umoddi3+0x640>
  80e98c:	1463c83a 	sub	r17,r2,r17
  80e990:	8809883a 	mov	r4,r17
  80e994:	b80b883a 	mov	r5,r23
  80e998:	08102800 	call	810280 <__udivsi3>
  80e99c:	9009883a 	mov	r4,r18
  80e9a0:	100b883a 	mov	r5,r2
  80e9a4:	08102900 	call	810290 <__mulsi3>
  80e9a8:	8809883a 	mov	r4,r17
  80e9ac:	b80b883a 	mov	r5,r23
  80e9b0:	102b883a 	mov	r21,r2
  80e9b4:	08102880 	call	810288 <__umodsi3>
  80e9b8:	1004943a 	slli	r2,r2,16
  80e9bc:	80ffffcc 	andi	r3,r16,65535
  80e9c0:	10c4b03a 	or	r2,r2,r3
  80e9c4:	1540042e 	bgeu	r2,r21,80e9d8 <__umoddi3+0x284>
  80e9c8:	14c5883a 	add	r2,r2,r19
  80e9cc:	14c00236 	bltu	r2,r19,80e9d8 <__umoddi3+0x284>
  80e9d0:	1540012e 	bgeu	r2,r21,80e9d8 <__umoddi3+0x284>
  80e9d4:	14c5883a 	add	r2,r2,r19
  80e9d8:	1545c83a 	sub	r2,r2,r21
  80e9dc:	1584d83a 	srl	r2,r2,r22
  80e9e0:	0013883a 	mov	r9,zero
  80e9e4:	d8800415 	stw	r2,16(sp)
  80e9e8:	d8c00417 	ldw	r3,16(sp)
  80e9ec:	0005883a 	mov	r2,zero
  80e9f0:	d8800515 	stw	r2,20(sp)
  80e9f4:	1811883a 	mov	r8,r3
  80e9f8:	003f9d06 	br	80e870 <__umoddi3+0x11c>
  80e9fc:	00804034 	movhi	r2,256
  80ea00:	10bfffc4 	addi	r2,r2,-1
  80ea04:	14c0c636 	bltu	r2,r19,80ed20 <__umoddi3+0x5cc>
  80ea08:	01400404 	movi	r5,16
  80ea0c:	2805883a 	mov	r2,r5
  80ea10:	003f6c06 	br	80e7c4 <__umoddi3+0x70>
  80ea14:	01000044 	movi	r4,1
  80ea18:	000b883a 	mov	r5,zero
  80ea1c:	08102800 	call	810280 <__udivsi3>
  80ea20:	1027883a 	mov	r19,r2
  80ea24:	00bfffd4 	movui	r2,65535
  80ea28:	14fff436 	bltu	r2,r19,80e9fc <__umoddi3+0x2a8>
  80ea2c:	003f6106 	br	80e7b4 <__umoddi3+0x60>
  80ea30:	00804034 	movhi	r2,256
  80ea34:	10bfffc4 	addi	r2,r2,-1
  80ea38:	1200c536 	bltu	r2,r8,80ed50 <__umoddi3+0x5fc>
  80ea3c:	01400404 	movi	r5,16
  80ea40:	2805883a 	mov	r2,r5
  80ea44:	003fb406 	br	80e918 <__umoddi3+0x1c4>
  80ea48:	00804034 	movhi	r2,256
  80ea4c:	10bfffc4 	addi	r2,r2,-1
  80ea50:	11c0c236 	bltu	r2,r7,80ed5c <__umoddi3+0x608>
  80ea54:	01400404 	movi	r5,16
  80ea58:	2805883a 	mov	r2,r5
  80ea5c:	003f9806 	br	80e8c0 <__umoddi3+0x16c>
  80ea60:	84c9c83a 	sub	r4,r16,r19
  80ea64:	8105803a 	cmpltu	r2,r16,r4
  80ea68:	a987c83a 	sub	r3,r21,r6
  80ea6c:	18abc83a 	sub	r21,r3,r2
  80ea70:	2021883a 	mov	r16,r4
  80ea74:	003f9d06 	br	80e8ec <__umoddi3+0x198>
  80ea78:	9ca6983a 	sll	r19,r19,r18
  80ea7c:	3485c83a 	sub	r2,r6,r18
  80ea80:	a8a2d83a 	srl	r17,r21,r2
  80ea84:	982ed43a 	srli	r23,r19,16
  80ea88:	ac86983a 	sll	r3,r21,r18
  80ea8c:	8084d83a 	srl	r2,r16,r2
  80ea90:	8809883a 	mov	r4,r17
  80ea94:	b80b883a 	mov	r5,r23
  80ea98:	18b8b03a 	or	fp,r3,r2
  80ea9c:	9d3fffcc 	andi	r20,r19,65535
  80eaa0:	08102800 	call	810280 <__udivsi3>
  80eaa4:	100b883a 	mov	r5,r2
  80eaa8:	a009883a 	mov	r4,r20
  80eaac:	08102900 	call	810290 <__mulsi3>
  80eab0:	8809883a 	mov	r4,r17
  80eab4:	b80b883a 	mov	r5,r23
  80eab8:	102b883a 	mov	r21,r2
  80eabc:	08102880 	call	810288 <__umodsi3>
  80eac0:	1004943a 	slli	r2,r2,16
  80eac4:	e006d43a 	srli	r3,fp,16
  80eac8:	902d883a 	mov	r22,r18
  80eacc:	10c4b03a 	or	r2,r2,r3
  80ead0:	1540022e 	bgeu	r2,r21,80eadc <__umoddi3+0x388>
  80ead4:	14c5883a 	add	r2,r2,r19
  80ead8:	14c0ab2e 	bgeu	r2,r19,80ed88 <__umoddi3+0x634>
  80eadc:	1563c83a 	sub	r17,r2,r21
  80eae0:	8809883a 	mov	r4,r17
  80eae4:	b80b883a 	mov	r5,r23
  80eae8:	08102800 	call	810280 <__udivsi3>
  80eaec:	100b883a 	mov	r5,r2
  80eaf0:	a009883a 	mov	r4,r20
  80eaf4:	08102900 	call	810290 <__mulsi3>
  80eaf8:	8809883a 	mov	r4,r17
  80eafc:	b80b883a 	mov	r5,r23
  80eb00:	102b883a 	mov	r21,r2
  80eb04:	08102880 	call	810288 <__umodsi3>
  80eb08:	1004943a 	slli	r2,r2,16
  80eb0c:	e0ffffcc 	andi	r3,fp,65535
  80eb10:	10c4b03a 	or	r2,r2,r3
  80eb14:	1540042e 	bgeu	r2,r21,80eb28 <__umoddi3+0x3d4>
  80eb18:	14c5883a 	add	r2,r2,r19
  80eb1c:	14c00236 	bltu	r2,r19,80eb28 <__umoddi3+0x3d4>
  80eb20:	1540012e 	bgeu	r2,r21,80eb28 <__umoddi3+0x3d4>
  80eb24:	14c5883a 	add	r2,r2,r19
  80eb28:	84a0983a 	sll	r16,r16,r18
  80eb2c:	156bc83a 	sub	r21,r2,r21
  80eb30:	003f3106 	br	80e7f8 <__umoddi3+0xa4>
  80eb34:	3c8fc83a 	sub	r7,r7,r18
  80eb38:	3486983a 	sll	r3,r6,r18
  80eb3c:	99c4d83a 	srl	r2,r19,r7
  80eb40:	a9e2d83a 	srl	r17,r21,r7
  80eb44:	ac8c983a 	sll	r6,r21,r18
  80eb48:	18acb03a 	or	r22,r3,r2
  80eb4c:	b02ed43a 	srli	r23,r22,16
  80eb50:	81c4d83a 	srl	r2,r16,r7
  80eb54:	8809883a 	mov	r4,r17
  80eb58:	b80b883a 	mov	r5,r23
  80eb5c:	308cb03a 	or	r6,r6,r2
  80eb60:	d9c00315 	stw	r7,12(sp)
  80eb64:	d9800215 	stw	r6,8(sp)
  80eb68:	b53fffcc 	andi	r20,r22,65535
  80eb6c:	08102800 	call	810280 <__udivsi3>
  80eb70:	100b883a 	mov	r5,r2
  80eb74:	a009883a 	mov	r4,r20
  80eb78:	1039883a 	mov	fp,r2
  80eb7c:	08102900 	call	810290 <__mulsi3>
  80eb80:	8809883a 	mov	r4,r17
  80eb84:	b80b883a 	mov	r5,r23
  80eb88:	102b883a 	mov	r21,r2
  80eb8c:	08102880 	call	810288 <__umodsi3>
  80eb90:	d9000217 	ldw	r4,8(sp)
  80eb94:	1004943a 	slli	r2,r2,16
  80eb98:	9ca6983a 	sll	r19,r19,r18
  80eb9c:	2006d43a 	srli	r3,r4,16
  80eba0:	84a0983a 	sll	r16,r16,r18
  80eba4:	dcc00015 	stw	r19,0(sp)
  80eba8:	10c4b03a 	or	r2,r2,r3
  80ebac:	dc000115 	stw	r16,4(sp)
  80ebb0:	1540032e 	bgeu	r2,r21,80ebc0 <__umoddi3+0x46c>
  80ebb4:	1585883a 	add	r2,r2,r22
  80ebb8:	e73fffc4 	addi	fp,fp,-1
  80ebbc:	15806e2e 	bgeu	r2,r22,80ed78 <__umoddi3+0x624>
  80ebc0:	1563c83a 	sub	r17,r2,r21
  80ebc4:	8809883a 	mov	r4,r17
  80ebc8:	b80b883a 	mov	r5,r23
  80ebcc:	08102800 	call	810280 <__udivsi3>
  80ebd0:	100b883a 	mov	r5,r2
  80ebd4:	a009883a 	mov	r4,r20
  80ebd8:	1021883a 	mov	r16,r2
  80ebdc:	08102900 	call	810290 <__mulsi3>
  80ebe0:	b80b883a 	mov	r5,r23
  80ebe4:	8809883a 	mov	r4,r17
  80ebe8:	1029883a 	mov	r20,r2
  80ebec:	08102880 	call	810288 <__umodsi3>
  80ebf0:	d9400217 	ldw	r5,8(sp)
  80ebf4:	1004943a 	slli	r2,r2,16
  80ebf8:	28ffffcc 	andi	r3,r5,65535
  80ebfc:	10c4b03a 	or	r2,r2,r3
  80ec00:	1500032e 	bgeu	r2,r20,80ec10 <__umoddi3+0x4bc>
  80ec04:	1585883a 	add	r2,r2,r22
  80ec08:	843fffc4 	addi	r16,r16,-1
  80ec0c:	1580562e 	bgeu	r2,r22,80ed68 <__umoddi3+0x614>
  80ec10:	d9800017 	ldw	r6,0(sp)
  80ec14:	e022943a 	slli	r17,fp,16
  80ec18:	302ed43a 	srli	r23,r6,16
  80ec1c:	8462b03a 	or	r17,r16,r17
  80ec20:	34ffffcc 	andi	r19,r6,65535
  80ec24:	882ad43a 	srli	r21,r17,16
  80ec28:	8c7fffcc 	andi	r17,r17,65535
  80ec2c:	8809883a 	mov	r4,r17
  80ec30:	980b883a 	mov	r5,r19
  80ec34:	1521c83a 	sub	r16,r2,r20
  80ec38:	08102900 	call	810290 <__mulsi3>
  80ec3c:	8809883a 	mov	r4,r17
  80ec40:	b80b883a 	mov	r5,r23
  80ec44:	1029883a 	mov	r20,r2
  80ec48:	08102900 	call	810290 <__mulsi3>
  80ec4c:	980b883a 	mov	r5,r19
  80ec50:	a809883a 	mov	r4,r21
  80ec54:	1023883a 	mov	r17,r2
  80ec58:	08102900 	call	810290 <__mulsi3>
  80ec5c:	a809883a 	mov	r4,r21
  80ec60:	b80b883a 	mov	r5,r23
  80ec64:	1027883a 	mov	r19,r2
  80ec68:	08102900 	call	810290 <__mulsi3>
  80ec6c:	100b883a 	mov	r5,r2
  80ec70:	a004d43a 	srli	r2,r20,16
  80ec74:	8ce3883a 	add	r17,r17,r19
  80ec78:	1449883a 	add	r4,r2,r17
  80ec7c:	24c0022e 	bgeu	r4,r19,80ec88 <__umoddi3+0x534>
  80ec80:	00800074 	movhi	r2,1
  80ec84:	288b883a 	add	r5,r5,r2
  80ec88:	2004d43a 	srli	r2,r4,16
  80ec8c:	2008943a 	slli	r4,r4,16
  80ec90:	a0ffffcc 	andi	r3,r20,65535
  80ec94:	288d883a 	add	r6,r5,r2
  80ec98:	20c9883a 	add	r4,r4,r3
  80ec9c:	81800b36 	bltu	r16,r6,80eccc <__umoddi3+0x578>
  80eca0:	81804026 	beq	r16,r6,80eda4 <__umoddi3+0x650>
  80eca4:	818dc83a 	sub	r6,r16,r6
  80eca8:	00000f06 	br	80ece8 <__umoddi3+0x594>
  80ecac:	30c5c83a 	sub	r2,r6,r3
  80ecb0:	182d883a 	mov	r22,r3
  80ecb4:	8084d83a 	srl	r2,r16,r2
  80ecb8:	a8c6983a 	sll	r3,r21,r3
  80ecbc:	9da6983a 	sll	r19,r19,r22
  80ecc0:	85a0983a 	sll	r16,r16,r22
  80ecc4:	18aab03a 	or	r21,r3,r2
  80ecc8:	003f1d06 	br	80e940 <__umoddi3+0x1ec>
  80eccc:	d8c00017 	ldw	r3,0(sp)
  80ecd0:	20c5c83a 	sub	r2,r4,r3
  80ecd4:	2089803a 	cmpltu	r4,r4,r2
  80ecd8:	3587c83a 	sub	r3,r6,r22
  80ecdc:	1907c83a 	sub	r3,r3,r4
  80ece0:	80cdc83a 	sub	r6,r16,r3
  80ece4:	1009883a 	mov	r4,r2
  80ece8:	d9400117 	ldw	r5,4(sp)
  80ecec:	2905c83a 	sub	r2,r5,r4
  80ecf0:	2887803a 	cmpltu	r3,r5,r2
  80ecf4:	30c7c83a 	sub	r3,r6,r3
  80ecf8:	d9800317 	ldw	r6,12(sp)
  80ecfc:	1484d83a 	srl	r2,r2,r18
  80ed00:	1988983a 	sll	r4,r3,r6
  80ed04:	1c86d83a 	srl	r3,r3,r18
  80ed08:	2088b03a 	or	r4,r4,r2
  80ed0c:	2011883a 	mov	r8,r4
  80ed10:	1813883a 	mov	r9,r3
  80ed14:	d9000415 	stw	r4,16(sp)
  80ed18:	d8c00515 	stw	r3,20(sp)
  80ed1c:	003ed406 	br	80e870 <__umoddi3+0x11c>
  80ed20:	01400604 	movi	r5,24
  80ed24:	2805883a 	mov	r2,r5
  80ed28:	003ea606 	br	80e7c4 <__umoddi3+0x70>
  80ed2c:	01400204 	movi	r5,8
  80ed30:	2805883a 	mov	r2,r5
  80ed34:	003ea306 	br	80e7c4 <__umoddi3+0x70>
  80ed38:	01400204 	movi	r5,8
  80ed3c:	2805883a 	mov	r2,r5
  80ed40:	003edf06 	br	80e8c0 <__umoddi3+0x16c>
  80ed44:	01400204 	movi	r5,8
  80ed48:	2805883a 	mov	r2,r5
  80ed4c:	003ef206 	br	80e918 <__umoddi3+0x1c4>
  80ed50:	01400604 	movi	r5,24
  80ed54:	2805883a 	mov	r2,r5
  80ed58:	003eef06 	br	80e918 <__umoddi3+0x1c4>
  80ed5c:	01400604 	movi	r5,24
  80ed60:	2805883a 	mov	r2,r5
  80ed64:	003ed606 	br	80e8c0 <__umoddi3+0x16c>
  80ed68:	153fa92e 	bgeu	r2,r20,80ec10 <__umoddi3+0x4bc>
  80ed6c:	843fffc4 	addi	r16,r16,-1
  80ed70:	1585883a 	add	r2,r2,r22
  80ed74:	003fa606 	br	80ec10 <__umoddi3+0x4bc>
  80ed78:	157f912e 	bgeu	r2,r21,80ebc0 <__umoddi3+0x46c>
  80ed7c:	e73fffc4 	addi	fp,fp,-1
  80ed80:	1585883a 	add	r2,r2,r22
  80ed84:	003f8e06 	br	80ebc0 <__umoddi3+0x46c>
  80ed88:	157f542e 	bgeu	r2,r21,80eadc <__umoddi3+0x388>
  80ed8c:	14c5883a 	add	r2,r2,r19
  80ed90:	003f5206 	br	80eadc <__umoddi3+0x388>
  80ed94:	14c5883a 	add	r2,r2,r19
  80ed98:	003efc06 	br	80e98c <__umoddi3+0x238>
  80ed9c:	14c5883a 	add	r2,r2,r19
  80eda0:	003ea606 	br	80e83c <__umoddi3+0xe8>
  80eda4:	d8800117 	ldw	r2,4(sp)
  80eda8:	113fc836 	bltu	r2,r4,80eccc <__umoddi3+0x578>
  80edac:	000d883a 	mov	r6,zero
  80edb0:	003fcd06 	br	80ece8 <__umoddi3+0x594>

0080edb4 <__nesf2>:
  80edb4:	defff304 	addi	sp,sp,-52
  80edb8:	dc400b15 	stw	r17,44(sp)
  80edbc:	dc400204 	addi	r17,sp,8
  80edc0:	dc000a15 	stw	r16,40(sp)
  80edc4:	d9000015 	stw	r4,0(sp)
  80edc8:	d9400115 	stw	r5,4(sp)
  80edcc:	d809883a 	mov	r4,sp
  80edd0:	880b883a 	mov	r5,r17
  80edd4:	dc000604 	addi	r16,sp,24
  80edd8:	dfc00c15 	stw	ra,48(sp)
  80eddc:	08103480 	call	810348 <__unpack_f>
  80ede0:	d9000104 	addi	r4,sp,4
  80ede4:	800b883a 	mov	r5,r16
  80ede8:	08103480 	call	810348 <__unpack_f>
  80edec:	d8800217 	ldw	r2,8(sp)
  80edf0:	00c00044 	movi	r3,1
  80edf4:	180d883a 	mov	r6,r3
  80edf8:	1880062e 	bgeu	r3,r2,80ee14 <__nesf2+0x60>
  80edfc:	d8800617 	ldw	r2,24(sp)
  80ee00:	8809883a 	mov	r4,r17
  80ee04:	800b883a 	mov	r5,r16
  80ee08:	1880022e 	bgeu	r3,r2,80ee14 <__nesf2+0x60>
  80ee0c:	08104100 	call	810410 <__fpcmp_parts_f>
  80ee10:	100d883a 	mov	r6,r2
  80ee14:	3005883a 	mov	r2,r6
  80ee18:	dfc00c17 	ldw	ra,48(sp)
  80ee1c:	dc400b17 	ldw	r17,44(sp)
  80ee20:	dc000a17 	ldw	r16,40(sp)
  80ee24:	dec00d04 	addi	sp,sp,52
  80ee28:	f800283a 	ret

0080ee2c <__gtsf2>:
  80ee2c:	defff304 	addi	sp,sp,-52
  80ee30:	dc400b15 	stw	r17,44(sp)
  80ee34:	dc400204 	addi	r17,sp,8
  80ee38:	dc000a15 	stw	r16,40(sp)
  80ee3c:	d9000015 	stw	r4,0(sp)
  80ee40:	d9400115 	stw	r5,4(sp)
  80ee44:	d809883a 	mov	r4,sp
  80ee48:	880b883a 	mov	r5,r17
  80ee4c:	dc000604 	addi	r16,sp,24
  80ee50:	dfc00c15 	stw	ra,48(sp)
  80ee54:	08103480 	call	810348 <__unpack_f>
  80ee58:	d9000104 	addi	r4,sp,4
  80ee5c:	800b883a 	mov	r5,r16
  80ee60:	08103480 	call	810348 <__unpack_f>
  80ee64:	d8800217 	ldw	r2,8(sp)
  80ee68:	00c00044 	movi	r3,1
  80ee6c:	01bfffc4 	movi	r6,-1
  80ee70:	1880062e 	bgeu	r3,r2,80ee8c <__gtsf2+0x60>
  80ee74:	d8800617 	ldw	r2,24(sp)
  80ee78:	8809883a 	mov	r4,r17
  80ee7c:	800b883a 	mov	r5,r16
  80ee80:	1880022e 	bgeu	r3,r2,80ee8c <__gtsf2+0x60>
  80ee84:	08104100 	call	810410 <__fpcmp_parts_f>
  80ee88:	100d883a 	mov	r6,r2
  80ee8c:	3005883a 	mov	r2,r6
  80ee90:	dfc00c17 	ldw	ra,48(sp)
  80ee94:	dc400b17 	ldw	r17,44(sp)
  80ee98:	dc000a17 	ldw	r16,40(sp)
  80ee9c:	dec00d04 	addi	sp,sp,52
  80eea0:	f800283a 	ret

0080eea4 <__ltsf2>:
  80eea4:	defff304 	addi	sp,sp,-52
  80eea8:	dc400b15 	stw	r17,44(sp)
  80eeac:	dc400204 	addi	r17,sp,8
  80eeb0:	dc000a15 	stw	r16,40(sp)
  80eeb4:	d9000015 	stw	r4,0(sp)
  80eeb8:	d9400115 	stw	r5,4(sp)
  80eebc:	d809883a 	mov	r4,sp
  80eec0:	880b883a 	mov	r5,r17
  80eec4:	dc000604 	addi	r16,sp,24
  80eec8:	dfc00c15 	stw	ra,48(sp)
  80eecc:	08103480 	call	810348 <__unpack_f>
  80eed0:	d9000104 	addi	r4,sp,4
  80eed4:	800b883a 	mov	r5,r16
  80eed8:	08103480 	call	810348 <__unpack_f>
  80eedc:	d8800217 	ldw	r2,8(sp)
  80eee0:	00c00044 	movi	r3,1
  80eee4:	180d883a 	mov	r6,r3
  80eee8:	1880062e 	bgeu	r3,r2,80ef04 <__ltsf2+0x60>
  80eeec:	d8800617 	ldw	r2,24(sp)
  80eef0:	8809883a 	mov	r4,r17
  80eef4:	800b883a 	mov	r5,r16
  80eef8:	1880022e 	bgeu	r3,r2,80ef04 <__ltsf2+0x60>
  80eefc:	08104100 	call	810410 <__fpcmp_parts_f>
  80ef00:	100d883a 	mov	r6,r2
  80ef04:	3005883a 	mov	r2,r6
  80ef08:	dfc00c17 	ldw	ra,48(sp)
  80ef0c:	dc400b17 	ldw	r17,44(sp)
  80ef10:	dc000a17 	ldw	r16,40(sp)
  80ef14:	dec00d04 	addi	sp,sp,52
  80ef18:	f800283a 	ret

0080ef1c <_fpadd_parts>:
  80ef1c:	defff804 	addi	sp,sp,-32
  80ef20:	dcc00315 	stw	r19,12(sp)
  80ef24:	2027883a 	mov	r19,r4
  80ef28:	21000017 	ldw	r4,0(r4)
  80ef2c:	00c00044 	movi	r3,1
  80ef30:	dd400515 	stw	r21,20(sp)
  80ef34:	dd000415 	stw	r20,16(sp)
  80ef38:	ddc00715 	stw	r23,28(sp)
  80ef3c:	dd800615 	stw	r22,24(sp)
  80ef40:	dc800215 	stw	r18,8(sp)
  80ef44:	dc400115 	stw	r17,4(sp)
  80ef48:	dc000015 	stw	r16,0(sp)
  80ef4c:	282b883a 	mov	r21,r5
  80ef50:	3029883a 	mov	r20,r6
  80ef54:	1900632e 	bgeu	r3,r4,80f0e4 <_fpadd_parts+0x1c8>
  80ef58:	28800017 	ldw	r2,0(r5)
  80ef5c:	1880812e 	bgeu	r3,r2,80f164 <_fpadd_parts+0x248>
  80ef60:	00c00104 	movi	r3,4
  80ef64:	20c0dc26 	beq	r4,r3,80f2d8 <_fpadd_parts+0x3bc>
  80ef68:	10c07e26 	beq	r2,r3,80f164 <_fpadd_parts+0x248>
  80ef6c:	00c00084 	movi	r3,2
  80ef70:	10c06726 	beq	r2,r3,80f110 <_fpadd_parts+0x1f4>
  80ef74:	20c07b26 	beq	r4,r3,80f164 <_fpadd_parts+0x248>
  80ef78:	9dc00217 	ldw	r23,8(r19)
  80ef7c:	28c00217 	ldw	r3,8(r5)
  80ef80:	9c400317 	ldw	r17,12(r19)
  80ef84:	2bc00317 	ldw	r15,12(r5)
  80ef88:	b8cdc83a 	sub	r6,r23,r3
  80ef8c:	9c800417 	ldw	r18,16(r19)
  80ef90:	2c000417 	ldw	r16,16(r5)
  80ef94:	3009883a 	mov	r4,r6
  80ef98:	30009716 	blt	r6,zero,80f1f8 <_fpadd_parts+0x2dc>
  80ef9c:	00800fc4 	movi	r2,63
  80efa0:	11806b16 	blt	r2,r6,80f150 <_fpadd_parts+0x234>
  80efa4:	0100a40e 	bge	zero,r4,80f238 <_fpadd_parts+0x31c>
  80efa8:	35bff804 	addi	r22,r6,-32
  80efac:	b000bc16 	blt	r22,zero,80f2a0 <_fpadd_parts+0x384>
  80efb0:	8596d83a 	srl	r11,r16,r22
  80efb4:	0019883a 	mov	r12,zero
  80efb8:	0013883a 	mov	r9,zero
  80efbc:	01000044 	movi	r4,1
  80efc0:	0015883a 	mov	r10,zero
  80efc4:	b000be16 	blt	r22,zero,80f2c0 <_fpadd_parts+0x3a4>
  80efc8:	2590983a 	sll	r8,r4,r22
  80efcc:	000f883a 	mov	r7,zero
  80efd0:	00bfffc4 	movi	r2,-1
  80efd4:	3889883a 	add	r4,r7,r2
  80efd8:	408b883a 	add	r5,r8,r2
  80efdc:	21cd803a 	cmpltu	r6,r4,r7
  80efe0:	314b883a 	add	r5,r6,r5
  80efe4:	7904703a 	and	r2,r15,r4
  80efe8:	8146703a 	and	r3,r16,r5
  80efec:	10c4b03a 	or	r2,r2,r3
  80eff0:	10000226 	beq	r2,zero,80effc <_fpadd_parts+0xe0>
  80eff4:	02400044 	movi	r9,1
  80eff8:	0015883a 	mov	r10,zero
  80effc:	5a5eb03a 	or	r15,r11,r9
  80f000:	62a0b03a 	or	r16,r12,r10
  80f004:	99400117 	ldw	r5,4(r19)
  80f008:	a8800117 	ldw	r2,4(r21)
  80f00c:	28806e26 	beq	r5,r2,80f1c8 <_fpadd_parts+0x2ac>
  80f010:	28006626 	beq	r5,zero,80f1ac <_fpadd_parts+0x290>
  80f014:	7c45c83a 	sub	r2,r15,r17
  80f018:	7889803a 	cmpltu	r4,r15,r2
  80f01c:	8487c83a 	sub	r3,r16,r18
  80f020:	1909c83a 	sub	r4,r3,r4
  80f024:	100d883a 	mov	r6,r2
  80f028:	200f883a 	mov	r7,r4
  80f02c:	38007716 	blt	r7,zero,80f20c <_fpadd_parts+0x2f0>
  80f030:	a5c00215 	stw	r23,8(r20)
  80f034:	a1c00415 	stw	r7,16(r20)
  80f038:	a0000115 	stw	zero,4(r20)
  80f03c:	a1800315 	stw	r6,12(r20)
  80f040:	a2000317 	ldw	r8,12(r20)
  80f044:	a2400417 	ldw	r9,16(r20)
  80f048:	00bfffc4 	movi	r2,-1
  80f04c:	408b883a 	add	r5,r8,r2
  80f050:	2a09803a 	cmpltu	r4,r5,r8
  80f054:	488d883a 	add	r6,r9,r2
  80f058:	01c40034 	movhi	r7,4096
  80f05c:	39ffffc4 	addi	r7,r7,-1
  80f060:	218d883a 	add	r6,r4,r6
  80f064:	39801736 	bltu	r7,r6,80f0c4 <_fpadd_parts+0x1a8>
  80f068:	31c06526 	beq	r6,r7,80f200 <_fpadd_parts+0x2e4>
  80f06c:	a3000217 	ldw	r12,8(r20)
  80f070:	4209883a 	add	r4,r8,r8
  80f074:	00bfffc4 	movi	r2,-1
  80f078:	220f803a 	cmpltu	r7,r4,r8
  80f07c:	4a4b883a 	add	r5,r9,r9
  80f080:	394f883a 	add	r7,r7,r5
  80f084:	2095883a 	add	r10,r4,r2
  80f088:	3897883a 	add	r11,r7,r2
  80f08c:	510d803a 	cmpltu	r6,r10,r4
  80f090:	6099883a 	add	r12,r12,r2
  80f094:	32d7883a 	add	r11,r6,r11
  80f098:	00840034 	movhi	r2,4096
  80f09c:	10bfffc4 	addi	r2,r2,-1
  80f0a0:	2011883a 	mov	r8,r4
  80f0a4:	3813883a 	mov	r9,r7
  80f0a8:	a1000315 	stw	r4,12(r20)
  80f0ac:	a1c00415 	stw	r7,16(r20)
  80f0b0:	a3000215 	stw	r12,8(r20)
  80f0b4:	12c00336 	bltu	r2,r11,80f0c4 <_fpadd_parts+0x1a8>
  80f0b8:	58bfed1e 	bne	r11,r2,80f070 <_fpadd_parts+0x154>
  80f0bc:	00bfff84 	movi	r2,-2
  80f0c0:	12bfeb2e 	bgeu	r2,r10,80f070 <_fpadd_parts+0x154>
  80f0c4:	a2800417 	ldw	r10,16(r20)
  80f0c8:	008000c4 	movi	r2,3
  80f0cc:	00c80034 	movhi	r3,8192
  80f0d0:	18ffffc4 	addi	r3,r3,-1
  80f0d4:	a2400317 	ldw	r9,12(r20)
  80f0d8:	a0800015 	stw	r2,0(r20)
  80f0dc:	1a802336 	bltu	r3,r10,80f16c <_fpadd_parts+0x250>
  80f0e0:	a027883a 	mov	r19,r20
  80f0e4:	9805883a 	mov	r2,r19
  80f0e8:	ddc00717 	ldw	r23,28(sp)
  80f0ec:	dd800617 	ldw	r22,24(sp)
  80f0f0:	dd400517 	ldw	r21,20(sp)
  80f0f4:	dd000417 	ldw	r20,16(sp)
  80f0f8:	dcc00317 	ldw	r19,12(sp)
  80f0fc:	dc800217 	ldw	r18,8(sp)
  80f100:	dc400117 	ldw	r17,4(sp)
  80f104:	dc000017 	ldw	r16,0(sp)
  80f108:	dec00804 	addi	sp,sp,32
  80f10c:	f800283a 	ret
  80f110:	20fff41e 	bne	r4,r3,80f0e4 <_fpadd_parts+0x1c8>
  80f114:	31000015 	stw	r4,0(r6)
  80f118:	98800117 	ldw	r2,4(r19)
  80f11c:	30800115 	stw	r2,4(r6)
  80f120:	98c00217 	ldw	r3,8(r19)
  80f124:	30c00215 	stw	r3,8(r6)
  80f128:	98800317 	ldw	r2,12(r19)
  80f12c:	30800315 	stw	r2,12(r6)
  80f130:	98c00417 	ldw	r3,16(r19)
  80f134:	30c00415 	stw	r3,16(r6)
  80f138:	98800117 	ldw	r2,4(r19)
  80f13c:	28c00117 	ldw	r3,4(r5)
  80f140:	3027883a 	mov	r19,r6
  80f144:	10c4703a 	and	r2,r2,r3
  80f148:	30800115 	stw	r2,4(r6)
  80f14c:	003fe506 	br	80f0e4 <_fpadd_parts+0x1c8>
  80f150:	1dc02616 	blt	r3,r23,80f1ec <_fpadd_parts+0x2d0>
  80f154:	0023883a 	mov	r17,zero
  80f158:	182f883a 	mov	r23,r3
  80f15c:	0025883a 	mov	r18,zero
  80f160:	003fa806 	br	80f004 <_fpadd_parts+0xe8>
  80f164:	a827883a 	mov	r19,r21
  80f168:	003fde06 	br	80f0e4 <_fpadd_parts+0x1c8>
  80f16c:	01800044 	movi	r6,1
  80f170:	500497fa 	slli	r2,r10,31
  80f174:	4808d07a 	srli	r4,r9,1
  80f178:	518ad83a 	srl	r5,r10,r6
  80f17c:	a2000217 	ldw	r8,8(r20)
  80f180:	1108b03a 	or	r4,r2,r4
  80f184:	0007883a 	mov	r3,zero
  80f188:	4984703a 	and	r2,r9,r6
  80f18c:	208cb03a 	or	r6,r4,r2
  80f190:	28ceb03a 	or	r7,r5,r3
  80f194:	42000044 	addi	r8,r8,1
  80f198:	a027883a 	mov	r19,r20
  80f19c:	a1c00415 	stw	r7,16(r20)
  80f1a0:	a2000215 	stw	r8,8(r20)
  80f1a4:	a1800315 	stw	r6,12(r20)
  80f1a8:	003fce06 	br	80f0e4 <_fpadd_parts+0x1c8>
  80f1ac:	8bc5c83a 	sub	r2,r17,r15
  80f1b0:	8889803a 	cmpltu	r4,r17,r2
  80f1b4:	9407c83a 	sub	r3,r18,r16
  80f1b8:	1909c83a 	sub	r4,r3,r4
  80f1bc:	100d883a 	mov	r6,r2
  80f1c0:	200f883a 	mov	r7,r4
  80f1c4:	003f9906 	br	80f02c <_fpadd_parts+0x110>
  80f1c8:	8bc5883a 	add	r2,r17,r15
  80f1cc:	1449803a 	cmpltu	r4,r2,r17
  80f1d0:	9407883a 	add	r3,r18,r16
  80f1d4:	20c9883a 	add	r4,r4,r3
  80f1d8:	a1400115 	stw	r5,4(r20)
  80f1dc:	a5c00215 	stw	r23,8(r20)
  80f1e0:	a0800315 	stw	r2,12(r20)
  80f1e4:	a1000415 	stw	r4,16(r20)
  80f1e8:	003fb606 	br	80f0c4 <_fpadd_parts+0x1a8>
  80f1ec:	001f883a 	mov	r15,zero
  80f1f0:	0021883a 	mov	r16,zero
  80f1f4:	003f8306 	br	80f004 <_fpadd_parts+0xe8>
  80f1f8:	018dc83a 	sub	r6,zero,r6
  80f1fc:	003f6706 	br	80ef9c <_fpadd_parts+0x80>
  80f200:	00bfff84 	movi	r2,-2
  80f204:	117faf36 	bltu	r2,r5,80f0c4 <_fpadd_parts+0x1a8>
  80f208:	003f9806 	br	80f06c <_fpadd_parts+0x150>
  80f20c:	0005883a 	mov	r2,zero
  80f210:	1189c83a 	sub	r4,r2,r6
  80f214:	1105803a 	cmpltu	r2,r2,r4
  80f218:	01cbc83a 	sub	r5,zero,r7
  80f21c:	2885c83a 	sub	r2,r5,r2
  80f220:	01800044 	movi	r6,1
  80f224:	a1800115 	stw	r6,4(r20)
  80f228:	a5c00215 	stw	r23,8(r20)
  80f22c:	a1000315 	stw	r4,12(r20)
  80f230:	a0800415 	stw	r2,16(r20)
  80f234:	003f8206 	br	80f040 <_fpadd_parts+0x124>
  80f238:	203f7226 	beq	r4,zero,80f004 <_fpadd_parts+0xe8>
  80f23c:	35bff804 	addi	r22,r6,-32
  80f240:	b9af883a 	add	r23,r23,r6
  80f244:	b0003116 	blt	r22,zero,80f30c <_fpadd_parts+0x3f0>
  80f248:	959ad83a 	srl	r13,r18,r22
  80f24c:	001d883a 	mov	r14,zero
  80f250:	000f883a 	mov	r7,zero
  80f254:	01000044 	movi	r4,1
  80f258:	0011883a 	mov	r8,zero
  80f25c:	b0002516 	blt	r22,zero,80f2f4 <_fpadd_parts+0x3d8>
  80f260:	2594983a 	sll	r10,r4,r22
  80f264:	0013883a 	mov	r9,zero
  80f268:	00bfffc4 	movi	r2,-1
  80f26c:	4889883a 	add	r4,r9,r2
  80f270:	508b883a 	add	r5,r10,r2
  80f274:	224d803a 	cmpltu	r6,r4,r9
  80f278:	314b883a 	add	r5,r6,r5
  80f27c:	8904703a 	and	r2,r17,r4
  80f280:	9146703a 	and	r3,r18,r5
  80f284:	10c4b03a 	or	r2,r2,r3
  80f288:	10000226 	beq	r2,zero,80f294 <_fpadd_parts+0x378>
  80f28c:	01c00044 	movi	r7,1
  80f290:	0011883a 	mov	r8,zero
  80f294:	69e2b03a 	or	r17,r13,r7
  80f298:	7224b03a 	or	r18,r14,r8
  80f29c:	003f5906 	br	80f004 <_fpadd_parts+0xe8>
  80f2a0:	8407883a 	add	r3,r16,r16
  80f2a4:	008007c4 	movi	r2,31
  80f2a8:	1185c83a 	sub	r2,r2,r6
  80f2ac:	1886983a 	sll	r3,r3,r2
  80f2b0:	7996d83a 	srl	r11,r15,r6
  80f2b4:	8198d83a 	srl	r12,r16,r6
  80f2b8:	1ad6b03a 	or	r11,r3,r11
  80f2bc:	003f3e06 	br	80efb8 <_fpadd_parts+0x9c>
  80f2c0:	2006d07a 	srli	r3,r4,1
  80f2c4:	008007c4 	movi	r2,31
  80f2c8:	1185c83a 	sub	r2,r2,r6
  80f2cc:	1890d83a 	srl	r8,r3,r2
  80f2d0:	218e983a 	sll	r7,r4,r6
  80f2d4:	003f3e06 	br	80efd0 <_fpadd_parts+0xb4>
  80f2d8:	113f821e 	bne	r2,r4,80f0e4 <_fpadd_parts+0x1c8>
  80f2dc:	28c00117 	ldw	r3,4(r5)
  80f2e0:	98800117 	ldw	r2,4(r19)
  80f2e4:	10ff7f26 	beq	r2,r3,80f0e4 <_fpadd_parts+0x1c8>
  80f2e8:	04c02074 	movhi	r19,129
  80f2ec:	9cd48404 	addi	r19,r19,21008
  80f2f0:	003f7c06 	br	80f0e4 <_fpadd_parts+0x1c8>
  80f2f4:	2006d07a 	srli	r3,r4,1
  80f2f8:	008007c4 	movi	r2,31
  80f2fc:	1185c83a 	sub	r2,r2,r6
  80f300:	1894d83a 	srl	r10,r3,r2
  80f304:	2192983a 	sll	r9,r4,r6
  80f308:	003fd706 	br	80f268 <_fpadd_parts+0x34c>
  80f30c:	9487883a 	add	r3,r18,r18
  80f310:	008007c4 	movi	r2,31
  80f314:	1185c83a 	sub	r2,r2,r6
  80f318:	1886983a 	sll	r3,r3,r2
  80f31c:	899ad83a 	srl	r13,r17,r6
  80f320:	919cd83a 	srl	r14,r18,r6
  80f324:	1b5ab03a 	or	r13,r3,r13
  80f328:	003fc906 	br	80f250 <_fpadd_parts+0x334>

0080f32c <__subdf3>:
  80f32c:	deffea04 	addi	sp,sp,-88
  80f330:	dcc01415 	stw	r19,80(sp)
  80f334:	dcc00404 	addi	r19,sp,16
  80f338:	2011883a 	mov	r8,r4
  80f33c:	2813883a 	mov	r9,r5
  80f340:	dc401315 	stw	r17,76(sp)
  80f344:	d809883a 	mov	r4,sp
  80f348:	980b883a 	mov	r5,r19
  80f34c:	dc400904 	addi	r17,sp,36
  80f350:	dfc01515 	stw	ra,84(sp)
  80f354:	da400115 	stw	r9,4(sp)
  80f358:	d9c00315 	stw	r7,12(sp)
  80f35c:	da000015 	stw	r8,0(sp)
  80f360:	d9800215 	stw	r6,8(sp)
  80f364:	08107f80 	call	8107f8 <__unpack_d>
  80f368:	d9000204 	addi	r4,sp,8
  80f36c:	880b883a 	mov	r5,r17
  80f370:	08107f80 	call	8107f8 <__unpack_d>
  80f374:	d8800a17 	ldw	r2,40(sp)
  80f378:	880b883a 	mov	r5,r17
  80f37c:	9809883a 	mov	r4,r19
  80f380:	d9800e04 	addi	r6,sp,56
  80f384:	1080005c 	xori	r2,r2,1
  80f388:	d8800a15 	stw	r2,40(sp)
  80f38c:	080ef1c0 	call	80ef1c <_fpadd_parts>
  80f390:	1009883a 	mov	r4,r2
  80f394:	08104e40 	call	8104e4 <__pack_d>
  80f398:	dfc01517 	ldw	ra,84(sp)
  80f39c:	dcc01417 	ldw	r19,80(sp)
  80f3a0:	dc401317 	ldw	r17,76(sp)
  80f3a4:	dec01604 	addi	sp,sp,88
  80f3a8:	f800283a 	ret

0080f3ac <__adddf3>:
  80f3ac:	deffea04 	addi	sp,sp,-88
  80f3b0:	dcc01415 	stw	r19,80(sp)
  80f3b4:	dcc00404 	addi	r19,sp,16
  80f3b8:	2011883a 	mov	r8,r4
  80f3bc:	2813883a 	mov	r9,r5
  80f3c0:	dc401315 	stw	r17,76(sp)
  80f3c4:	d809883a 	mov	r4,sp
  80f3c8:	980b883a 	mov	r5,r19
  80f3cc:	dc400904 	addi	r17,sp,36
  80f3d0:	dfc01515 	stw	ra,84(sp)
  80f3d4:	da400115 	stw	r9,4(sp)
  80f3d8:	d9c00315 	stw	r7,12(sp)
  80f3dc:	da000015 	stw	r8,0(sp)
  80f3e0:	d9800215 	stw	r6,8(sp)
  80f3e4:	08107f80 	call	8107f8 <__unpack_d>
  80f3e8:	d9000204 	addi	r4,sp,8
  80f3ec:	880b883a 	mov	r5,r17
  80f3f0:	08107f80 	call	8107f8 <__unpack_d>
  80f3f4:	d9800e04 	addi	r6,sp,56
  80f3f8:	9809883a 	mov	r4,r19
  80f3fc:	880b883a 	mov	r5,r17
  80f400:	080ef1c0 	call	80ef1c <_fpadd_parts>
  80f404:	1009883a 	mov	r4,r2
  80f408:	08104e40 	call	8104e4 <__pack_d>
  80f40c:	dfc01517 	ldw	ra,84(sp)
  80f410:	dcc01417 	ldw	r19,80(sp)
  80f414:	dc401317 	ldw	r17,76(sp)
  80f418:	dec01604 	addi	sp,sp,88
  80f41c:	f800283a 	ret

0080f420 <__muldf3>:
  80f420:	deffe004 	addi	sp,sp,-128
  80f424:	dc401815 	stw	r17,96(sp)
  80f428:	dc400404 	addi	r17,sp,16
  80f42c:	2011883a 	mov	r8,r4
  80f430:	2813883a 	mov	r9,r5
  80f434:	dc001715 	stw	r16,92(sp)
  80f438:	d809883a 	mov	r4,sp
  80f43c:	880b883a 	mov	r5,r17
  80f440:	dc000904 	addi	r16,sp,36
  80f444:	dfc01f15 	stw	ra,124(sp)
  80f448:	da400115 	stw	r9,4(sp)
  80f44c:	d9c00315 	stw	r7,12(sp)
  80f450:	da000015 	stw	r8,0(sp)
  80f454:	d9800215 	stw	r6,8(sp)
  80f458:	ddc01e15 	stw	r23,120(sp)
  80f45c:	dd801d15 	stw	r22,116(sp)
  80f460:	dd401c15 	stw	r21,112(sp)
  80f464:	dd001b15 	stw	r20,108(sp)
  80f468:	dcc01a15 	stw	r19,104(sp)
  80f46c:	dc801915 	stw	r18,100(sp)
  80f470:	08107f80 	call	8107f8 <__unpack_d>
  80f474:	d9000204 	addi	r4,sp,8
  80f478:	800b883a 	mov	r5,r16
  80f47c:	08107f80 	call	8107f8 <__unpack_d>
  80f480:	d9000417 	ldw	r4,16(sp)
  80f484:	00800044 	movi	r2,1
  80f488:	1100102e 	bgeu	r2,r4,80f4cc <__muldf3+0xac>
  80f48c:	d8c00917 	ldw	r3,36(sp)
  80f490:	10c0062e 	bgeu	r2,r3,80f4ac <__muldf3+0x8c>
  80f494:	00800104 	movi	r2,4
  80f498:	20800a26 	beq	r4,r2,80f4c4 <__muldf3+0xa4>
  80f49c:	1880cc26 	beq	r3,r2,80f7d0 <__muldf3+0x3b0>
  80f4a0:	00800084 	movi	r2,2
  80f4a4:	20800926 	beq	r4,r2,80f4cc <__muldf3+0xac>
  80f4a8:	1880191e 	bne	r3,r2,80f510 <__muldf3+0xf0>
  80f4ac:	d8c00a17 	ldw	r3,40(sp)
  80f4b0:	d8800517 	ldw	r2,20(sp)
  80f4b4:	8009883a 	mov	r4,r16
  80f4b8:	10c4c03a 	cmpne	r2,r2,r3
  80f4bc:	d8800a15 	stw	r2,40(sp)
  80f4c0:	00000706 	br	80f4e0 <__muldf3+0xc0>
  80f4c4:	00800084 	movi	r2,2
  80f4c8:	1880c326 	beq	r3,r2,80f7d8 <__muldf3+0x3b8>
  80f4cc:	d8800517 	ldw	r2,20(sp)
  80f4d0:	d8c00a17 	ldw	r3,40(sp)
  80f4d4:	8809883a 	mov	r4,r17
  80f4d8:	10c4c03a 	cmpne	r2,r2,r3
  80f4dc:	d8800515 	stw	r2,20(sp)
  80f4e0:	08104e40 	call	8104e4 <__pack_d>
  80f4e4:	dfc01f17 	ldw	ra,124(sp)
  80f4e8:	ddc01e17 	ldw	r23,120(sp)
  80f4ec:	dd801d17 	ldw	r22,116(sp)
  80f4f0:	dd401c17 	ldw	r21,112(sp)
  80f4f4:	dd001b17 	ldw	r20,108(sp)
  80f4f8:	dcc01a17 	ldw	r19,104(sp)
  80f4fc:	dc801917 	ldw	r18,100(sp)
  80f500:	dc401817 	ldw	r17,96(sp)
  80f504:	dc001717 	ldw	r16,92(sp)
  80f508:	dec02004 	addi	sp,sp,128
  80f50c:	f800283a 	ret
  80f510:	dd800717 	ldw	r22,28(sp)
  80f514:	dc800c17 	ldw	r18,48(sp)
  80f518:	002b883a 	mov	r21,zero
  80f51c:	0023883a 	mov	r17,zero
  80f520:	a80b883a 	mov	r5,r21
  80f524:	b00d883a 	mov	r6,r22
  80f528:	880f883a 	mov	r7,r17
  80f52c:	ddc00817 	ldw	r23,32(sp)
  80f530:	dcc00d17 	ldw	r19,52(sp)
  80f534:	9009883a 	mov	r4,r18
  80f538:	080df200 	call	80df20 <__muldi3>
  80f53c:	001b883a 	mov	r13,zero
  80f540:	680f883a 	mov	r7,r13
  80f544:	b009883a 	mov	r4,r22
  80f548:	000b883a 	mov	r5,zero
  80f54c:	980d883a 	mov	r6,r19
  80f550:	b82d883a 	mov	r22,r23
  80f554:	002f883a 	mov	r23,zero
  80f558:	db401615 	stw	r13,88(sp)
  80f55c:	d8801315 	stw	r2,76(sp)
  80f560:	d8c01415 	stw	r3,80(sp)
  80f564:	dcc01515 	stw	r19,84(sp)
  80f568:	080df200 	call	80df20 <__muldi3>
  80f56c:	b00d883a 	mov	r6,r22
  80f570:	000b883a 	mov	r5,zero
  80f574:	9009883a 	mov	r4,r18
  80f578:	b80f883a 	mov	r7,r23
  80f57c:	1021883a 	mov	r16,r2
  80f580:	1823883a 	mov	r17,r3
  80f584:	080df200 	call	80df20 <__muldi3>
  80f588:	8085883a 	add	r2,r16,r2
  80f58c:	140d803a 	cmpltu	r6,r2,r16
  80f590:	88c7883a 	add	r3,r17,r3
  80f594:	30cd883a 	add	r6,r6,r3
  80f598:	1029883a 	mov	r20,r2
  80f59c:	302b883a 	mov	r21,r6
  80f5a0:	da801317 	ldw	r10,76(sp)
  80f5a4:	dac01417 	ldw	r11,80(sp)
  80f5a8:	db001517 	ldw	r12,84(sp)
  80f5ac:	db401617 	ldw	r13,88(sp)
  80f5b0:	3440612e 	bgeu	r6,r17,80f738 <__muldf3+0x318>
  80f5b4:	0009883a 	mov	r4,zero
  80f5b8:	5105883a 	add	r2,r10,r4
  80f5bc:	128d803a 	cmpltu	r6,r2,r10
  80f5c0:	5d07883a 	add	r3,r11,r20
  80f5c4:	30cd883a 	add	r6,r6,r3
  80f5c8:	0021883a 	mov	r16,zero
  80f5cc:	04400044 	movi	r17,1
  80f5d0:	1025883a 	mov	r18,r2
  80f5d4:	3027883a 	mov	r19,r6
  80f5d8:	32c06236 	bltu	r6,r11,80f764 <__muldf3+0x344>
  80f5dc:	59807a26 	beq	r11,r6,80f7c8 <__muldf3+0x3a8>
  80f5e0:	680b883a 	mov	r5,r13
  80f5e4:	b80f883a 	mov	r7,r23
  80f5e8:	6009883a 	mov	r4,r12
  80f5ec:	b00d883a 	mov	r6,r22
  80f5f0:	080df200 	call	80df20 <__muldi3>
  80f5f4:	1009883a 	mov	r4,r2
  80f5f8:	000f883a 	mov	r7,zero
  80f5fc:	1545883a 	add	r2,r2,r21
  80f600:	1111803a 	cmpltu	r8,r2,r4
  80f604:	19c7883a 	add	r3,r3,r7
  80f608:	40c7883a 	add	r3,r8,r3
  80f60c:	88cb883a 	add	r5,r17,r3
  80f610:	d8c00617 	ldw	r3,24(sp)
  80f614:	8089883a 	add	r4,r16,r2
  80f618:	d8800b17 	ldw	r2,44(sp)
  80f61c:	18c00104 	addi	r3,r3,4
  80f620:	240d803a 	cmpltu	r6,r4,r16
  80f624:	10c7883a 	add	r3,r2,r3
  80f628:	2013883a 	mov	r9,r4
  80f62c:	d8800a17 	ldw	r2,40(sp)
  80f630:	d9000517 	ldw	r4,20(sp)
  80f634:	314d883a 	add	r6,r6,r5
  80f638:	3015883a 	mov	r10,r6
  80f63c:	2088c03a 	cmpne	r4,r4,r2
  80f640:	00880034 	movhi	r2,8192
  80f644:	10bfffc4 	addi	r2,r2,-1
  80f648:	d9000f15 	stw	r4,60(sp)
  80f64c:	d8c01015 	stw	r3,64(sp)
  80f650:	1180162e 	bgeu	r2,r6,80f6ac <__muldf3+0x28c>
  80f654:	1811883a 	mov	r8,r3
  80f658:	101f883a 	mov	r15,r2
  80f65c:	980497fa 	slli	r2,r19,31
  80f660:	9016d07a 	srli	r11,r18,1
  80f664:	500697fa 	slli	r3,r10,31
  80f668:	480cd07a 	srli	r6,r9,1
  80f66c:	500ed07a 	srli	r7,r10,1
  80f670:	12d6b03a 	or	r11,r2,r11
  80f674:	00800044 	movi	r2,1
  80f678:	198cb03a 	or	r6,r3,r6
  80f67c:	4888703a 	and	r4,r9,r2
  80f680:	9818d07a 	srli	r12,r19,1
  80f684:	001b883a 	mov	r13,zero
  80f688:	03a00034 	movhi	r14,32768
  80f68c:	3013883a 	mov	r9,r6
  80f690:	3815883a 	mov	r10,r7
  80f694:	4091883a 	add	r8,r8,r2
  80f698:	20000226 	beq	r4,zero,80f6a4 <__muldf3+0x284>
  80f69c:	5b64b03a 	or	r18,r11,r13
  80f6a0:	63a6b03a 	or	r19,r12,r14
  80f6a4:	7abfed36 	bltu	r15,r10,80f65c <__muldf3+0x23c>
  80f6a8:	da001015 	stw	r8,64(sp)
  80f6ac:	00840034 	movhi	r2,4096
  80f6b0:	10bfffc4 	addi	r2,r2,-1
  80f6b4:	12801436 	bltu	r2,r10,80f708 <__muldf3+0x2e8>
  80f6b8:	da001017 	ldw	r8,64(sp)
  80f6bc:	101f883a 	mov	r15,r2
  80f6c0:	4a45883a 	add	r2,r9,r9
  80f6c4:	124d803a 	cmpltu	r6,r2,r9
  80f6c8:	5287883a 	add	r3,r10,r10
  80f6cc:	9497883a 	add	r11,r18,r18
  80f6d0:	5c8f803a 	cmpltu	r7,r11,r18
  80f6d4:	9cd9883a 	add	r12,r19,r19
  80f6d8:	01000044 	movi	r4,1
  80f6dc:	30cd883a 	add	r6,r6,r3
  80f6e0:	3b0f883a 	add	r7,r7,r12
  80f6e4:	423fffc4 	addi	r8,r8,-1
  80f6e8:	1013883a 	mov	r9,r2
  80f6ec:	3015883a 	mov	r10,r6
  80f6f0:	111ab03a 	or	r13,r2,r4
  80f6f4:	98003016 	blt	r19,zero,80f7b8 <__muldf3+0x398>
  80f6f8:	5825883a 	mov	r18,r11
  80f6fc:	3827883a 	mov	r19,r7
  80f700:	7abfef2e 	bgeu	r15,r10,80f6c0 <__muldf3+0x2a0>
  80f704:	da001015 	stw	r8,64(sp)
  80f708:	00803fc4 	movi	r2,255
  80f70c:	488e703a 	and	r7,r9,r2
  80f710:	00802004 	movi	r2,128
  80f714:	0007883a 	mov	r3,zero
  80f718:	0011883a 	mov	r8,zero
  80f71c:	38801826 	beq	r7,r2,80f780 <__muldf3+0x360>
  80f720:	008000c4 	movi	r2,3
  80f724:	d9000e04 	addi	r4,sp,56
  80f728:	da801215 	stw	r10,72(sp)
  80f72c:	d8800e15 	stw	r2,56(sp)
  80f730:	da401115 	stw	r9,68(sp)
  80f734:	003f6a06 	br	80f4e0 <__muldf3+0xc0>
  80f738:	89802126 	beq	r17,r6,80f7c0 <__muldf3+0x3a0>
  80f73c:	0009883a 	mov	r4,zero
  80f740:	5105883a 	add	r2,r10,r4
  80f744:	128d803a 	cmpltu	r6,r2,r10
  80f748:	5d07883a 	add	r3,r11,r20
  80f74c:	30cd883a 	add	r6,r6,r3
  80f750:	0021883a 	mov	r16,zero
  80f754:	0023883a 	mov	r17,zero
  80f758:	1025883a 	mov	r18,r2
  80f75c:	3027883a 	mov	r19,r6
  80f760:	32ff9e2e 	bgeu	r6,r11,80f5dc <__muldf3+0x1bc>
  80f764:	00800044 	movi	r2,1
  80f768:	8089883a 	add	r4,r16,r2
  80f76c:	240d803a 	cmpltu	r6,r4,r16
  80f770:	344d883a 	add	r6,r6,r17
  80f774:	2021883a 	mov	r16,r4
  80f778:	3023883a 	mov	r17,r6
  80f77c:	003f9806 	br	80f5e0 <__muldf3+0x1c0>
  80f780:	403fe71e 	bne	r8,zero,80f720 <__muldf3+0x300>
  80f784:	01004004 	movi	r4,256
  80f788:	4904703a 	and	r2,r9,r4
  80f78c:	10c4b03a 	or	r2,r2,r3
  80f790:	103fe31e 	bne	r2,zero,80f720 <__muldf3+0x300>
  80f794:	94c4b03a 	or	r2,r18,r19
  80f798:	103fe126 	beq	r2,zero,80f720 <__muldf3+0x300>
  80f79c:	49c5883a 	add	r2,r9,r7
  80f7a0:	1251803a 	cmpltu	r8,r2,r9
  80f7a4:	4291883a 	add	r8,r8,r10
  80f7a8:	013fc004 	movi	r4,-256
  80f7ac:	1112703a 	and	r9,r2,r4
  80f7b0:	4015883a 	mov	r10,r8
  80f7b4:	003fda06 	br	80f720 <__muldf3+0x300>
  80f7b8:	6813883a 	mov	r9,r13
  80f7bc:	003fce06 	br	80f6f8 <__muldf3+0x2d8>
  80f7c0:	143f7c36 	bltu	r2,r16,80f5b4 <__muldf3+0x194>
  80f7c4:	003fdd06 	br	80f73c <__muldf3+0x31c>
  80f7c8:	12bf852e 	bgeu	r2,r10,80f5e0 <__muldf3+0x1c0>
  80f7cc:	003fe506 	br	80f764 <__muldf3+0x344>
  80f7d0:	00800084 	movi	r2,2
  80f7d4:	20bf351e 	bne	r4,r2,80f4ac <__muldf3+0x8c>
  80f7d8:	01002074 	movhi	r4,129
  80f7dc:	21148404 	addi	r4,r4,21008
  80f7e0:	003f3f06 	br	80f4e0 <__muldf3+0xc0>

0080f7e4 <__divdf3>:
  80f7e4:	deffed04 	addi	sp,sp,-76
  80f7e8:	dcc01115 	stw	r19,68(sp)
  80f7ec:	dcc00404 	addi	r19,sp,16
  80f7f0:	2011883a 	mov	r8,r4
  80f7f4:	2813883a 	mov	r9,r5
  80f7f8:	dc000e15 	stw	r16,56(sp)
  80f7fc:	d809883a 	mov	r4,sp
  80f800:	980b883a 	mov	r5,r19
  80f804:	dc000904 	addi	r16,sp,36
  80f808:	dfc01215 	stw	ra,72(sp)
  80f80c:	da400115 	stw	r9,4(sp)
  80f810:	d9c00315 	stw	r7,12(sp)
  80f814:	da000015 	stw	r8,0(sp)
  80f818:	d9800215 	stw	r6,8(sp)
  80f81c:	dc801015 	stw	r18,64(sp)
  80f820:	dc400f15 	stw	r17,60(sp)
  80f824:	08107f80 	call	8107f8 <__unpack_d>
  80f828:	d9000204 	addi	r4,sp,8
  80f82c:	800b883a 	mov	r5,r16
  80f830:	08107f80 	call	8107f8 <__unpack_d>
  80f834:	d9000417 	ldw	r4,16(sp)
  80f838:	00800044 	movi	r2,1
  80f83c:	11000b2e 	bgeu	r2,r4,80f86c <__divdf3+0x88>
  80f840:	d9400917 	ldw	r5,36(sp)
  80f844:	1140762e 	bgeu	r2,r5,80fa20 <__divdf3+0x23c>
  80f848:	d8800517 	ldw	r2,20(sp)
  80f84c:	d8c00a17 	ldw	r3,40(sp)
  80f850:	01800104 	movi	r6,4
  80f854:	10c4f03a 	xor	r2,r2,r3
  80f858:	d8800515 	stw	r2,20(sp)
  80f85c:	21800226 	beq	r4,r6,80f868 <__divdf3+0x84>
  80f860:	00800084 	movi	r2,2
  80f864:	2080141e 	bne	r4,r2,80f8b8 <__divdf3+0xd4>
  80f868:	29000926 	beq	r5,r4,80f890 <__divdf3+0xac>
  80f86c:	9809883a 	mov	r4,r19
  80f870:	08104e40 	call	8104e4 <__pack_d>
  80f874:	dfc01217 	ldw	ra,72(sp)
  80f878:	dcc01117 	ldw	r19,68(sp)
  80f87c:	dc801017 	ldw	r18,64(sp)
  80f880:	dc400f17 	ldw	r17,60(sp)
  80f884:	dc000e17 	ldw	r16,56(sp)
  80f888:	dec01304 	addi	sp,sp,76
  80f88c:	f800283a 	ret
  80f890:	01002074 	movhi	r4,129
  80f894:	21148404 	addi	r4,r4,21008
  80f898:	08104e40 	call	8104e4 <__pack_d>
  80f89c:	dfc01217 	ldw	ra,72(sp)
  80f8a0:	dcc01117 	ldw	r19,68(sp)
  80f8a4:	dc801017 	ldw	r18,64(sp)
  80f8a8:	dc400f17 	ldw	r17,60(sp)
  80f8ac:	dc000e17 	ldw	r16,56(sp)
  80f8b0:	dec01304 	addi	sp,sp,76
  80f8b4:	f800283a 	ret
  80f8b8:	29805b26 	beq	r5,r6,80fa28 <__divdf3+0x244>
  80f8bc:	28802d26 	beq	r5,r2,80f974 <__divdf3+0x190>
  80f8c0:	d8c00617 	ldw	r3,24(sp)
  80f8c4:	d8800b17 	ldw	r2,44(sp)
  80f8c8:	d9c00817 	ldw	r7,32(sp)
  80f8cc:	dc400d17 	ldw	r17,52(sp)
  80f8d0:	188bc83a 	sub	r5,r3,r2
  80f8d4:	d9800717 	ldw	r6,28(sp)
  80f8d8:	dc000c17 	ldw	r16,48(sp)
  80f8dc:	d9400615 	stw	r5,24(sp)
  80f8e0:	3c403836 	bltu	r7,r17,80f9c4 <__divdf3+0x1e0>
  80f8e4:	89c03626 	beq	r17,r7,80f9c0 <__divdf3+0x1dc>
  80f8e8:	0015883a 	mov	r10,zero
  80f8ec:	001d883a 	mov	r14,zero
  80f8f0:	02c40034 	movhi	r11,4096
  80f8f4:	001f883a 	mov	r15,zero
  80f8f8:	003f883a 	mov	ra,zero
  80f8fc:	04800f44 	movi	r18,61
  80f900:	00000f06 	br	80f940 <__divdf3+0x15c>
  80f904:	601d883a 	mov	r14,r12
  80f908:	681f883a 	mov	r15,r13
  80f90c:	400d883a 	mov	r6,r8
  80f910:	100f883a 	mov	r7,r2
  80f914:	3191883a 	add	r8,r6,r6
  80f918:	5808d07a 	srli	r4,r11,1
  80f91c:	4185803a 	cmpltu	r2,r8,r6
  80f920:	39d3883a 	add	r9,r7,r7
  80f924:	28c6b03a 	or	r3,r5,r3
  80f928:	1245883a 	add	r2,r2,r9
  80f92c:	1815883a 	mov	r10,r3
  80f930:	2017883a 	mov	r11,r4
  80f934:	400d883a 	mov	r6,r8
  80f938:	100f883a 	mov	r7,r2
  80f93c:	fc801726 	beq	ra,r18,80f99c <__divdf3+0x1b8>
  80f940:	580a97fa 	slli	r5,r11,31
  80f944:	5006d07a 	srli	r3,r10,1
  80f948:	ffc00044 	addi	ra,ra,1
  80f94c:	3c7ff136 	bltu	r7,r17,80f914 <__divdf3+0x130>
  80f950:	3411c83a 	sub	r8,r6,r16
  80f954:	3205803a 	cmpltu	r2,r6,r8
  80f958:	3c53c83a 	sub	r9,r7,r17
  80f95c:	7298b03a 	or	r12,r14,r10
  80f960:	7adab03a 	or	r13,r15,r11
  80f964:	4885c83a 	sub	r2,r9,r2
  80f968:	89ffe61e 	bne	r17,r7,80f904 <__divdf3+0x120>
  80f96c:	343fe936 	bltu	r6,r16,80f914 <__divdf3+0x130>
  80f970:	003fe406 	br	80f904 <__divdf3+0x120>
  80f974:	9809883a 	mov	r4,r19
  80f978:	d9800415 	stw	r6,16(sp)
  80f97c:	08104e40 	call	8104e4 <__pack_d>
  80f980:	dfc01217 	ldw	ra,72(sp)
  80f984:	dcc01117 	ldw	r19,68(sp)
  80f988:	dc801017 	ldw	r18,64(sp)
  80f98c:	dc400f17 	ldw	r17,60(sp)
  80f990:	dc000e17 	ldw	r16,56(sp)
  80f994:	dec01304 	addi	sp,sp,76
  80f998:	f800283a 	ret
  80f99c:	00803fc4 	movi	r2,255
  80f9a0:	7090703a 	and	r8,r14,r2
  80f9a4:	00802004 	movi	r2,128
  80f9a8:	0007883a 	mov	r3,zero
  80f9ac:	0013883a 	mov	r9,zero
  80f9b0:	40800d26 	beq	r8,r2,80f9e8 <__divdf3+0x204>
  80f9b4:	dbc00815 	stw	r15,32(sp)
  80f9b8:	db800715 	stw	r14,28(sp)
  80f9bc:	003fab06 	br	80f86c <__divdf3+0x88>
  80f9c0:	343fc92e 	bgeu	r6,r16,80f8e8 <__divdf3+0x104>
  80f9c4:	3185883a 	add	r2,r6,r6
  80f9c8:	1189803a 	cmpltu	r4,r2,r6
  80f9cc:	39c7883a 	add	r3,r7,r7
  80f9d0:	20c9883a 	add	r4,r4,r3
  80f9d4:	297fffc4 	addi	r5,r5,-1
  80f9d8:	100d883a 	mov	r6,r2
  80f9dc:	200f883a 	mov	r7,r4
  80f9e0:	d9400615 	stw	r5,24(sp)
  80f9e4:	003fc006 	br	80f8e8 <__divdf3+0x104>
  80f9e8:	483ff21e 	bne	r9,zero,80f9b4 <__divdf3+0x1d0>
  80f9ec:	01004004 	movi	r4,256
  80f9f0:	7104703a 	and	r2,r14,r4
  80f9f4:	10c4b03a 	or	r2,r2,r3
  80f9f8:	103fee1e 	bne	r2,zero,80f9b4 <__divdf3+0x1d0>
  80f9fc:	31c4b03a 	or	r2,r6,r7
  80fa00:	103fec26 	beq	r2,zero,80f9b4 <__divdf3+0x1d0>
  80fa04:	7205883a 	add	r2,r14,r8
  80fa08:	1391803a 	cmpltu	r8,r2,r14
  80fa0c:	43d1883a 	add	r8,r8,r15
  80fa10:	013fc004 	movi	r4,-256
  80fa14:	111c703a 	and	r14,r2,r4
  80fa18:	401f883a 	mov	r15,r8
  80fa1c:	003fe506 	br	80f9b4 <__divdf3+0x1d0>
  80fa20:	8009883a 	mov	r4,r16
  80fa24:	003f9206 	br	80f870 <__divdf3+0x8c>
  80fa28:	9809883a 	mov	r4,r19
  80fa2c:	d8000715 	stw	zero,28(sp)
  80fa30:	d8000815 	stw	zero,32(sp)
  80fa34:	d8000615 	stw	zero,24(sp)
  80fa38:	003f8d06 	br	80f870 <__divdf3+0x8c>

0080fa3c <__eqdf2>:
  80fa3c:	deffef04 	addi	sp,sp,-68
  80fa40:	dc400f15 	stw	r17,60(sp)
  80fa44:	dc400404 	addi	r17,sp,16
  80fa48:	2005883a 	mov	r2,r4
  80fa4c:	2807883a 	mov	r3,r5
  80fa50:	dc000e15 	stw	r16,56(sp)
  80fa54:	d809883a 	mov	r4,sp
  80fa58:	880b883a 	mov	r5,r17
  80fa5c:	dc000904 	addi	r16,sp,36
  80fa60:	d8c00115 	stw	r3,4(sp)
  80fa64:	d8800015 	stw	r2,0(sp)
  80fa68:	d9800215 	stw	r6,8(sp)
  80fa6c:	dfc01015 	stw	ra,64(sp)
  80fa70:	d9c00315 	stw	r7,12(sp)
  80fa74:	08107f80 	call	8107f8 <__unpack_d>
  80fa78:	d9000204 	addi	r4,sp,8
  80fa7c:	800b883a 	mov	r5,r16
  80fa80:	08107f80 	call	8107f8 <__unpack_d>
  80fa84:	d8800417 	ldw	r2,16(sp)
  80fa88:	00c00044 	movi	r3,1
  80fa8c:	180d883a 	mov	r6,r3
  80fa90:	1880062e 	bgeu	r3,r2,80faac <__eqdf2+0x70>
  80fa94:	d8800917 	ldw	r2,36(sp)
  80fa98:	8809883a 	mov	r4,r17
  80fa9c:	800b883a 	mov	r5,r16
  80faa0:	1880022e 	bgeu	r3,r2,80faac <__eqdf2+0x70>
  80faa4:	08109300 	call	810930 <__fpcmp_parts_d>
  80faa8:	100d883a 	mov	r6,r2
  80faac:	3005883a 	mov	r2,r6
  80fab0:	dfc01017 	ldw	ra,64(sp)
  80fab4:	dc400f17 	ldw	r17,60(sp)
  80fab8:	dc000e17 	ldw	r16,56(sp)
  80fabc:	dec01104 	addi	sp,sp,68
  80fac0:	f800283a 	ret

0080fac4 <__nedf2>:
  80fac4:	deffef04 	addi	sp,sp,-68
  80fac8:	dc400f15 	stw	r17,60(sp)
  80facc:	dc400404 	addi	r17,sp,16
  80fad0:	2005883a 	mov	r2,r4
  80fad4:	2807883a 	mov	r3,r5
  80fad8:	dc000e15 	stw	r16,56(sp)
  80fadc:	d809883a 	mov	r4,sp
  80fae0:	880b883a 	mov	r5,r17
  80fae4:	dc000904 	addi	r16,sp,36
  80fae8:	d8c00115 	stw	r3,4(sp)
  80faec:	d8800015 	stw	r2,0(sp)
  80faf0:	d9800215 	stw	r6,8(sp)
  80faf4:	dfc01015 	stw	ra,64(sp)
  80faf8:	d9c00315 	stw	r7,12(sp)
  80fafc:	08107f80 	call	8107f8 <__unpack_d>
  80fb00:	d9000204 	addi	r4,sp,8
  80fb04:	800b883a 	mov	r5,r16
  80fb08:	08107f80 	call	8107f8 <__unpack_d>
  80fb0c:	d8800417 	ldw	r2,16(sp)
  80fb10:	00c00044 	movi	r3,1
  80fb14:	180d883a 	mov	r6,r3
  80fb18:	1880062e 	bgeu	r3,r2,80fb34 <__nedf2+0x70>
  80fb1c:	d8800917 	ldw	r2,36(sp)
  80fb20:	8809883a 	mov	r4,r17
  80fb24:	800b883a 	mov	r5,r16
  80fb28:	1880022e 	bgeu	r3,r2,80fb34 <__nedf2+0x70>
  80fb2c:	08109300 	call	810930 <__fpcmp_parts_d>
  80fb30:	100d883a 	mov	r6,r2
  80fb34:	3005883a 	mov	r2,r6
  80fb38:	dfc01017 	ldw	ra,64(sp)
  80fb3c:	dc400f17 	ldw	r17,60(sp)
  80fb40:	dc000e17 	ldw	r16,56(sp)
  80fb44:	dec01104 	addi	sp,sp,68
  80fb48:	f800283a 	ret

0080fb4c <__gtdf2>:
  80fb4c:	deffef04 	addi	sp,sp,-68
  80fb50:	dc400f15 	stw	r17,60(sp)
  80fb54:	dc400404 	addi	r17,sp,16
  80fb58:	2005883a 	mov	r2,r4
  80fb5c:	2807883a 	mov	r3,r5
  80fb60:	dc000e15 	stw	r16,56(sp)
  80fb64:	d809883a 	mov	r4,sp
  80fb68:	880b883a 	mov	r5,r17
  80fb6c:	dc000904 	addi	r16,sp,36
  80fb70:	d8c00115 	stw	r3,4(sp)
  80fb74:	d8800015 	stw	r2,0(sp)
  80fb78:	d9800215 	stw	r6,8(sp)
  80fb7c:	dfc01015 	stw	ra,64(sp)
  80fb80:	d9c00315 	stw	r7,12(sp)
  80fb84:	08107f80 	call	8107f8 <__unpack_d>
  80fb88:	d9000204 	addi	r4,sp,8
  80fb8c:	800b883a 	mov	r5,r16
  80fb90:	08107f80 	call	8107f8 <__unpack_d>
  80fb94:	d8800417 	ldw	r2,16(sp)
  80fb98:	00c00044 	movi	r3,1
  80fb9c:	01bfffc4 	movi	r6,-1
  80fba0:	1880062e 	bgeu	r3,r2,80fbbc <__gtdf2+0x70>
  80fba4:	d8800917 	ldw	r2,36(sp)
  80fba8:	8809883a 	mov	r4,r17
  80fbac:	800b883a 	mov	r5,r16
  80fbb0:	1880022e 	bgeu	r3,r2,80fbbc <__gtdf2+0x70>
  80fbb4:	08109300 	call	810930 <__fpcmp_parts_d>
  80fbb8:	100d883a 	mov	r6,r2
  80fbbc:	3005883a 	mov	r2,r6
  80fbc0:	dfc01017 	ldw	ra,64(sp)
  80fbc4:	dc400f17 	ldw	r17,60(sp)
  80fbc8:	dc000e17 	ldw	r16,56(sp)
  80fbcc:	dec01104 	addi	sp,sp,68
  80fbd0:	f800283a 	ret

0080fbd4 <__gedf2>:
  80fbd4:	deffef04 	addi	sp,sp,-68
  80fbd8:	dc400f15 	stw	r17,60(sp)
  80fbdc:	dc400404 	addi	r17,sp,16
  80fbe0:	2005883a 	mov	r2,r4
  80fbe4:	2807883a 	mov	r3,r5
  80fbe8:	dc000e15 	stw	r16,56(sp)
  80fbec:	d809883a 	mov	r4,sp
  80fbf0:	880b883a 	mov	r5,r17
  80fbf4:	dc000904 	addi	r16,sp,36
  80fbf8:	d8c00115 	stw	r3,4(sp)
  80fbfc:	d8800015 	stw	r2,0(sp)
  80fc00:	d9800215 	stw	r6,8(sp)
  80fc04:	dfc01015 	stw	ra,64(sp)
  80fc08:	d9c00315 	stw	r7,12(sp)
  80fc0c:	08107f80 	call	8107f8 <__unpack_d>
  80fc10:	d9000204 	addi	r4,sp,8
  80fc14:	800b883a 	mov	r5,r16
  80fc18:	08107f80 	call	8107f8 <__unpack_d>
  80fc1c:	d8800417 	ldw	r2,16(sp)
  80fc20:	00c00044 	movi	r3,1
  80fc24:	01bfffc4 	movi	r6,-1
  80fc28:	1880062e 	bgeu	r3,r2,80fc44 <__gedf2+0x70>
  80fc2c:	d8800917 	ldw	r2,36(sp)
  80fc30:	8809883a 	mov	r4,r17
  80fc34:	800b883a 	mov	r5,r16
  80fc38:	1880022e 	bgeu	r3,r2,80fc44 <__gedf2+0x70>
  80fc3c:	08109300 	call	810930 <__fpcmp_parts_d>
  80fc40:	100d883a 	mov	r6,r2
  80fc44:	3005883a 	mov	r2,r6
  80fc48:	dfc01017 	ldw	ra,64(sp)
  80fc4c:	dc400f17 	ldw	r17,60(sp)
  80fc50:	dc000e17 	ldw	r16,56(sp)
  80fc54:	dec01104 	addi	sp,sp,68
  80fc58:	f800283a 	ret

0080fc5c <__ltdf2>:
  80fc5c:	deffef04 	addi	sp,sp,-68
  80fc60:	dc400f15 	stw	r17,60(sp)
  80fc64:	dc400404 	addi	r17,sp,16
  80fc68:	2005883a 	mov	r2,r4
  80fc6c:	2807883a 	mov	r3,r5
  80fc70:	dc000e15 	stw	r16,56(sp)
  80fc74:	d809883a 	mov	r4,sp
  80fc78:	880b883a 	mov	r5,r17
  80fc7c:	dc000904 	addi	r16,sp,36
  80fc80:	d8c00115 	stw	r3,4(sp)
  80fc84:	d8800015 	stw	r2,0(sp)
  80fc88:	d9800215 	stw	r6,8(sp)
  80fc8c:	dfc01015 	stw	ra,64(sp)
  80fc90:	d9c00315 	stw	r7,12(sp)
  80fc94:	08107f80 	call	8107f8 <__unpack_d>
  80fc98:	d9000204 	addi	r4,sp,8
  80fc9c:	800b883a 	mov	r5,r16
  80fca0:	08107f80 	call	8107f8 <__unpack_d>
  80fca4:	d8800417 	ldw	r2,16(sp)
  80fca8:	00c00044 	movi	r3,1
  80fcac:	180d883a 	mov	r6,r3
  80fcb0:	1880062e 	bgeu	r3,r2,80fccc <__ltdf2+0x70>
  80fcb4:	d8800917 	ldw	r2,36(sp)
  80fcb8:	8809883a 	mov	r4,r17
  80fcbc:	800b883a 	mov	r5,r16
  80fcc0:	1880022e 	bgeu	r3,r2,80fccc <__ltdf2+0x70>
  80fcc4:	08109300 	call	810930 <__fpcmp_parts_d>
  80fcc8:	100d883a 	mov	r6,r2
  80fccc:	3005883a 	mov	r2,r6
  80fcd0:	dfc01017 	ldw	ra,64(sp)
  80fcd4:	dc400f17 	ldw	r17,60(sp)
  80fcd8:	dc000e17 	ldw	r16,56(sp)
  80fcdc:	dec01104 	addi	sp,sp,68
  80fce0:	f800283a 	ret

0080fce4 <__ledf2>:
  80fce4:	deffef04 	addi	sp,sp,-68
  80fce8:	dc400f15 	stw	r17,60(sp)
  80fcec:	dc400404 	addi	r17,sp,16
  80fcf0:	2005883a 	mov	r2,r4
  80fcf4:	2807883a 	mov	r3,r5
  80fcf8:	dc000e15 	stw	r16,56(sp)
  80fcfc:	d809883a 	mov	r4,sp
  80fd00:	880b883a 	mov	r5,r17
  80fd04:	dc000904 	addi	r16,sp,36
  80fd08:	d8c00115 	stw	r3,4(sp)
  80fd0c:	d8800015 	stw	r2,0(sp)
  80fd10:	d9800215 	stw	r6,8(sp)
  80fd14:	dfc01015 	stw	ra,64(sp)
  80fd18:	d9c00315 	stw	r7,12(sp)
  80fd1c:	08107f80 	call	8107f8 <__unpack_d>
  80fd20:	d9000204 	addi	r4,sp,8
  80fd24:	800b883a 	mov	r5,r16
  80fd28:	08107f80 	call	8107f8 <__unpack_d>
  80fd2c:	d8800417 	ldw	r2,16(sp)
  80fd30:	00c00044 	movi	r3,1
  80fd34:	180d883a 	mov	r6,r3
  80fd38:	1880062e 	bgeu	r3,r2,80fd54 <__ledf2+0x70>
  80fd3c:	d8800917 	ldw	r2,36(sp)
  80fd40:	8809883a 	mov	r4,r17
  80fd44:	800b883a 	mov	r5,r16
  80fd48:	1880022e 	bgeu	r3,r2,80fd54 <__ledf2+0x70>
  80fd4c:	08109300 	call	810930 <__fpcmp_parts_d>
  80fd50:	100d883a 	mov	r6,r2
  80fd54:	3005883a 	mov	r2,r6
  80fd58:	dfc01017 	ldw	ra,64(sp)
  80fd5c:	dc400f17 	ldw	r17,60(sp)
  80fd60:	dc000e17 	ldw	r16,56(sp)
  80fd64:	dec01104 	addi	sp,sp,68
  80fd68:	f800283a 	ret

0080fd6c <__floatsidf>:
  80fd6c:	2006d7fa 	srli	r3,r4,31
  80fd70:	defff604 	addi	sp,sp,-40
  80fd74:	008000c4 	movi	r2,3
  80fd78:	dfc00915 	stw	ra,36(sp)
  80fd7c:	dcc00815 	stw	r19,32(sp)
  80fd80:	dc800715 	stw	r18,28(sp)
  80fd84:	dc400615 	stw	r17,24(sp)
  80fd88:	dc000515 	stw	r16,20(sp)
  80fd8c:	d8800015 	stw	r2,0(sp)
  80fd90:	d8c00115 	stw	r3,4(sp)
  80fd94:	20000f1e 	bne	r4,zero,80fdd4 <__floatsidf+0x68>
  80fd98:	00800084 	movi	r2,2
  80fd9c:	d8800015 	stw	r2,0(sp)
  80fda0:	d809883a 	mov	r4,sp
  80fda4:	08104e40 	call	8104e4 <__pack_d>
  80fda8:	1009883a 	mov	r4,r2
  80fdac:	180b883a 	mov	r5,r3
  80fdb0:	2005883a 	mov	r2,r4
  80fdb4:	2807883a 	mov	r3,r5
  80fdb8:	dfc00917 	ldw	ra,36(sp)
  80fdbc:	dcc00817 	ldw	r19,32(sp)
  80fdc0:	dc800717 	ldw	r18,28(sp)
  80fdc4:	dc400617 	ldw	r17,24(sp)
  80fdc8:	dc000517 	ldw	r16,20(sp)
  80fdcc:	dec00a04 	addi	sp,sp,40
  80fdd0:	f800283a 	ret
  80fdd4:	00800f04 	movi	r2,60
  80fdd8:	1807003a 	cmpeq	r3,r3,zero
  80fddc:	d8800215 	stw	r2,8(sp)
  80fde0:	18001126 	beq	r3,zero,80fe28 <__floatsidf+0xbc>
  80fde4:	0027883a 	mov	r19,zero
  80fde8:	2025883a 	mov	r18,r4
  80fdec:	d9000315 	stw	r4,12(sp)
  80fdf0:	dcc00415 	stw	r19,16(sp)
  80fdf4:	08102c80 	call	8102c8 <__clzsi2>
  80fdf8:	11000744 	addi	r4,r2,29
  80fdfc:	013fe80e 	bge	zero,r4,80fda0 <__floatsidf+0x34>
  80fe00:	10bfff44 	addi	r2,r2,-3
  80fe04:	10000c16 	blt	r2,zero,80fe38 <__floatsidf+0xcc>
  80fe08:	90a2983a 	sll	r17,r18,r2
  80fe0c:	0021883a 	mov	r16,zero
  80fe10:	d8800217 	ldw	r2,8(sp)
  80fe14:	dc400415 	stw	r17,16(sp)
  80fe18:	dc000315 	stw	r16,12(sp)
  80fe1c:	1105c83a 	sub	r2,r2,r4
  80fe20:	d8800215 	stw	r2,8(sp)
  80fe24:	003fde06 	br	80fda0 <__floatsidf+0x34>
  80fe28:	00a00034 	movhi	r2,32768
  80fe2c:	20800a26 	beq	r4,r2,80fe58 <__floatsidf+0xec>
  80fe30:	0109c83a 	sub	r4,zero,r4
  80fe34:	003feb06 	br	80fde4 <__floatsidf+0x78>
  80fe38:	9006d07a 	srli	r3,r18,1
  80fe3c:	008007c4 	movi	r2,31
  80fe40:	1105c83a 	sub	r2,r2,r4
  80fe44:	1886d83a 	srl	r3,r3,r2
  80fe48:	9922983a 	sll	r17,r19,r4
  80fe4c:	9120983a 	sll	r16,r18,r4
  80fe50:	1c62b03a 	or	r17,r3,r17
  80fe54:	003fee06 	br	80fe10 <__floatsidf+0xa4>
  80fe58:	0009883a 	mov	r4,zero
  80fe5c:	01707834 	movhi	r5,49632
  80fe60:	003fd306 	br	80fdb0 <__floatsidf+0x44>

0080fe64 <__fixdfsi>:
  80fe64:	defff804 	addi	sp,sp,-32
  80fe68:	2005883a 	mov	r2,r4
  80fe6c:	2807883a 	mov	r3,r5
  80fe70:	d809883a 	mov	r4,sp
  80fe74:	d9400204 	addi	r5,sp,8
  80fe78:	d8c00115 	stw	r3,4(sp)
  80fe7c:	d8800015 	stw	r2,0(sp)
  80fe80:	dfc00715 	stw	ra,28(sp)
  80fe84:	08107f80 	call	8107f8 <__unpack_d>
  80fe88:	d8c00217 	ldw	r3,8(sp)
  80fe8c:	00800084 	movi	r2,2
  80fe90:	1880051e 	bne	r3,r2,80fea8 <__fixdfsi+0x44>
  80fe94:	0007883a 	mov	r3,zero
  80fe98:	1805883a 	mov	r2,r3
  80fe9c:	dfc00717 	ldw	ra,28(sp)
  80fea0:	dec00804 	addi	sp,sp,32
  80fea4:	f800283a 	ret
  80fea8:	00800044 	movi	r2,1
  80feac:	10fff92e 	bgeu	r2,r3,80fe94 <__fixdfsi+0x30>
  80feb0:	00800104 	movi	r2,4
  80feb4:	18800426 	beq	r3,r2,80fec8 <__fixdfsi+0x64>
  80feb8:	d8c00417 	ldw	r3,16(sp)
  80febc:	183ff516 	blt	r3,zero,80fe94 <__fixdfsi+0x30>
  80fec0:	00800784 	movi	r2,30
  80fec4:	10c0080e 	bge	r2,r3,80fee8 <__fixdfsi+0x84>
  80fec8:	d8800317 	ldw	r2,12(sp)
  80fecc:	1000121e 	bne	r2,zero,80ff18 <__fixdfsi+0xb4>
  80fed0:	00e00034 	movhi	r3,32768
  80fed4:	18ffffc4 	addi	r3,r3,-1
  80fed8:	1805883a 	mov	r2,r3
  80fedc:	dfc00717 	ldw	ra,28(sp)
  80fee0:	dec00804 	addi	sp,sp,32
  80fee4:	f800283a 	ret
  80fee8:	00800f04 	movi	r2,60
  80feec:	10d1c83a 	sub	r8,r2,r3
  80fef0:	40bff804 	addi	r2,r8,-32
  80fef4:	d9800517 	ldw	r6,20(sp)
  80fef8:	d9c00617 	ldw	r7,24(sp)
  80fefc:	10000816 	blt	r2,zero,80ff20 <__fixdfsi+0xbc>
  80ff00:	3888d83a 	srl	r4,r7,r2
  80ff04:	d8800317 	ldw	r2,12(sp)
  80ff08:	2007883a 	mov	r3,r4
  80ff0c:	103fe226 	beq	r2,zero,80fe98 <__fixdfsi+0x34>
  80ff10:	0107c83a 	sub	r3,zero,r4
  80ff14:	003fe006 	br	80fe98 <__fixdfsi+0x34>
  80ff18:	00e00034 	movhi	r3,32768
  80ff1c:	003fde06 	br	80fe98 <__fixdfsi+0x34>
  80ff20:	39c7883a 	add	r3,r7,r7
  80ff24:	008007c4 	movi	r2,31
  80ff28:	1205c83a 	sub	r2,r2,r8
  80ff2c:	1886983a 	sll	r3,r3,r2
  80ff30:	3208d83a 	srl	r4,r6,r8
  80ff34:	1908b03a 	or	r4,r3,r4
  80ff38:	003ff206 	br	80ff04 <__fixdfsi+0xa0>

0080ff3c <__truncdfsf2>:
  80ff3c:	defff804 	addi	sp,sp,-32
  80ff40:	2005883a 	mov	r2,r4
  80ff44:	2807883a 	mov	r3,r5
  80ff48:	d809883a 	mov	r4,sp
  80ff4c:	d9400204 	addi	r5,sp,8
  80ff50:	d8c00115 	stw	r3,4(sp)
  80ff54:	d8800015 	stw	r2,0(sp)
  80ff58:	dfc00715 	stw	ra,28(sp)
  80ff5c:	08107f80 	call	8107f8 <__unpack_d>
  80ff60:	d9c00517 	ldw	r7,20(sp)
  80ff64:	da000617 	ldw	r8,24(sp)
  80ff68:	02d00034 	movhi	r11,16384
  80ff6c:	5affffc4 	addi	r11,r11,-1
  80ff70:	3812d7ba 	srli	r9,r7,30
  80ff74:	401a90ba 	slli	r13,r8,2
  80ff78:	3ac4703a 	and	r2,r7,r11
  80ff7c:	0007883a 	mov	r3,zero
  80ff80:	6a52b03a 	or	r9,r13,r9
  80ff84:	10c4b03a 	or	r2,r2,r3
  80ff88:	d9000217 	ldw	r4,8(sp)
  80ff8c:	d9400317 	ldw	r5,12(sp)
  80ff90:	d9800417 	ldw	r6,16(sp)
  80ff94:	480f883a 	mov	r7,r9
  80ff98:	10000126 	beq	r2,zero,80ffa0 <__truncdfsf2+0x64>
  80ff9c:	49c00054 	ori	r7,r9,1
  80ffa0:	08104b80 	call	8104b8 <__make_fp>
  80ffa4:	dfc00717 	ldw	ra,28(sp)
  80ffa8:	dec00804 	addi	sp,sp,32
  80ffac:	f800283a 	ret

0080ffb0 <__floatunsidf>:
  80ffb0:	defff204 	addi	sp,sp,-56
  80ffb4:	dfc00d15 	stw	ra,52(sp)
  80ffb8:	ddc00c15 	stw	r23,48(sp)
  80ffbc:	dd800b15 	stw	r22,44(sp)
  80ffc0:	dd400a15 	stw	r21,40(sp)
  80ffc4:	dd000915 	stw	r20,36(sp)
  80ffc8:	dcc00815 	stw	r19,32(sp)
  80ffcc:	dc800715 	stw	r18,28(sp)
  80ffd0:	dc400615 	stw	r17,24(sp)
  80ffd4:	dc000515 	stw	r16,20(sp)
  80ffd8:	d8000115 	stw	zero,4(sp)
  80ffdc:	20000f1e 	bne	r4,zero,81001c <__floatunsidf+0x6c>
  80ffe0:	00800084 	movi	r2,2
  80ffe4:	d8800015 	stw	r2,0(sp)
  80ffe8:	d809883a 	mov	r4,sp
  80ffec:	08104e40 	call	8104e4 <__pack_d>
  80fff0:	dfc00d17 	ldw	ra,52(sp)
  80fff4:	ddc00c17 	ldw	r23,48(sp)
  80fff8:	dd800b17 	ldw	r22,44(sp)
  80fffc:	dd400a17 	ldw	r21,40(sp)
  810000:	dd000917 	ldw	r20,36(sp)
  810004:	dcc00817 	ldw	r19,32(sp)
  810008:	dc800717 	ldw	r18,28(sp)
  81000c:	dc400617 	ldw	r17,24(sp)
  810010:	dc000517 	ldw	r16,20(sp)
  810014:	dec00e04 	addi	sp,sp,56
  810018:	f800283a 	ret
  81001c:	008000c4 	movi	r2,3
  810020:	00c00f04 	movi	r3,60
  810024:	002f883a 	mov	r23,zero
  810028:	202d883a 	mov	r22,r4
  81002c:	d8800015 	stw	r2,0(sp)
  810030:	d8c00215 	stw	r3,8(sp)
  810034:	d9000315 	stw	r4,12(sp)
  810038:	ddc00415 	stw	r23,16(sp)
  81003c:	08102c80 	call	8102c8 <__clzsi2>
  810040:	12400744 	addi	r9,r2,29
  810044:	48000b16 	blt	r9,zero,810074 <__floatunsidf+0xc4>
  810048:	483fe726 	beq	r9,zero,80ffe8 <__floatunsidf+0x38>
  81004c:	10bfff44 	addi	r2,r2,-3
  810050:	10002e16 	blt	r2,zero,81010c <__floatunsidf+0x15c>
  810054:	b0a2983a 	sll	r17,r22,r2
  810058:	0021883a 	mov	r16,zero
  81005c:	d8800217 	ldw	r2,8(sp)
  810060:	dc400415 	stw	r17,16(sp)
  810064:	dc000315 	stw	r16,12(sp)
  810068:	1245c83a 	sub	r2,r2,r9
  81006c:	d8800215 	stw	r2,8(sp)
  810070:	003fdd06 	br	80ffe8 <__floatunsidf+0x38>
  810074:	0255c83a 	sub	r10,zero,r9
  810078:	51bff804 	addi	r6,r10,-32
  81007c:	30001b16 	blt	r6,zero,8100ec <__floatunsidf+0x13c>
  810080:	b9a8d83a 	srl	r20,r23,r6
  810084:	002b883a 	mov	r21,zero
  810088:	000f883a 	mov	r7,zero
  81008c:	01000044 	movi	r4,1
  810090:	0011883a 	mov	r8,zero
  810094:	30002516 	blt	r6,zero,81012c <__floatunsidf+0x17c>
  810098:	21a6983a 	sll	r19,r4,r6
  81009c:	0025883a 	mov	r18,zero
  8100a0:	00bfffc4 	movi	r2,-1
  8100a4:	9089883a 	add	r4,r18,r2
  8100a8:	988b883a 	add	r5,r19,r2
  8100ac:	248d803a 	cmpltu	r6,r4,r18
  8100b0:	314b883a 	add	r5,r6,r5
  8100b4:	b104703a 	and	r2,r22,r4
  8100b8:	b946703a 	and	r3,r23,r5
  8100bc:	10c4b03a 	or	r2,r2,r3
  8100c0:	10000226 	beq	r2,zero,8100cc <__floatunsidf+0x11c>
  8100c4:	01c00044 	movi	r7,1
  8100c8:	0011883a 	mov	r8,zero
  8100cc:	d9000217 	ldw	r4,8(sp)
  8100d0:	a1c4b03a 	or	r2,r20,r7
  8100d4:	aa06b03a 	or	r3,r21,r8
  8100d8:	2249c83a 	sub	r4,r4,r9
  8100dc:	d8c00415 	stw	r3,16(sp)
  8100e0:	d9000215 	stw	r4,8(sp)
  8100e4:	d8800315 	stw	r2,12(sp)
  8100e8:	003fbf06 	br	80ffe8 <__floatunsidf+0x38>
  8100ec:	bdc7883a 	add	r3,r23,r23
  8100f0:	008007c4 	movi	r2,31
  8100f4:	1285c83a 	sub	r2,r2,r10
  8100f8:	1886983a 	sll	r3,r3,r2
  8100fc:	b2a8d83a 	srl	r20,r22,r10
  810100:	baaad83a 	srl	r21,r23,r10
  810104:	1d28b03a 	or	r20,r3,r20
  810108:	003fdf06 	br	810088 <__floatunsidf+0xd8>
  81010c:	b006d07a 	srli	r3,r22,1
  810110:	008007c4 	movi	r2,31
  810114:	1245c83a 	sub	r2,r2,r9
  810118:	1886d83a 	srl	r3,r3,r2
  81011c:	ba62983a 	sll	r17,r23,r9
  810120:	b260983a 	sll	r16,r22,r9
  810124:	1c62b03a 	or	r17,r3,r17
  810128:	003fcc06 	br	81005c <__floatunsidf+0xac>
  81012c:	2006d07a 	srli	r3,r4,1
  810130:	008007c4 	movi	r2,31
  810134:	1285c83a 	sub	r2,r2,r10
  810138:	18a6d83a 	srl	r19,r3,r2
  81013c:	22a4983a 	sll	r18,r4,r10
  810140:	003fd706 	br	8100a0 <__floatunsidf+0xf0>

00810144 <udivmodsi4>:
  810144:	29001b2e 	bgeu	r5,r4,8101b4 <udivmodsi4+0x70>
  810148:	28001a16 	blt	r5,zero,8101b4 <udivmodsi4+0x70>
  81014c:	00800044 	movi	r2,1
  810150:	0007883a 	mov	r3,zero
  810154:	01c007c4 	movi	r7,31
  810158:	00000306 	br	810168 <udivmodsi4+0x24>
  81015c:	19c01326 	beq	r3,r7,8101ac <udivmodsi4+0x68>
  810160:	18c00044 	addi	r3,r3,1
  810164:	28000416 	blt	r5,zero,810178 <udivmodsi4+0x34>
  810168:	294b883a 	add	r5,r5,r5
  81016c:	1085883a 	add	r2,r2,r2
  810170:	293ffa36 	bltu	r5,r4,81015c <udivmodsi4+0x18>
  810174:	10000d26 	beq	r2,zero,8101ac <udivmodsi4+0x68>
  810178:	0007883a 	mov	r3,zero
  81017c:	21400236 	bltu	r4,r5,810188 <udivmodsi4+0x44>
  810180:	2149c83a 	sub	r4,r4,r5
  810184:	1886b03a 	or	r3,r3,r2
  810188:	1004d07a 	srli	r2,r2,1
  81018c:	280ad07a 	srli	r5,r5,1
  810190:	103ffa1e 	bne	r2,zero,81017c <udivmodsi4+0x38>
  810194:	30000226 	beq	r6,zero,8101a0 <udivmodsi4+0x5c>
  810198:	2005883a 	mov	r2,r4
  81019c:	f800283a 	ret
  8101a0:	1809883a 	mov	r4,r3
  8101a4:	2005883a 	mov	r2,r4
  8101a8:	f800283a 	ret
  8101ac:	0007883a 	mov	r3,zero
  8101b0:	003ff806 	br	810194 <udivmodsi4+0x50>
  8101b4:	00800044 	movi	r2,1
  8101b8:	0007883a 	mov	r3,zero
  8101bc:	003fef06 	br	81017c <udivmodsi4+0x38>

008101c0 <__divsi3>:
  8101c0:	defffe04 	addi	sp,sp,-8
  8101c4:	dc000015 	stw	r16,0(sp)
  8101c8:	dfc00115 	stw	ra,4(sp)
  8101cc:	0021883a 	mov	r16,zero
  8101d0:	20000c16 	blt	r4,zero,810204 <__divsi3+0x44>
  8101d4:	000d883a 	mov	r6,zero
  8101d8:	28000e16 	blt	r5,zero,810214 <__divsi3+0x54>
  8101dc:	08101440 	call	810144 <udivmodsi4>
  8101e0:	1007883a 	mov	r3,r2
  8101e4:	8005003a 	cmpeq	r2,r16,zero
  8101e8:	1000011e 	bne	r2,zero,8101f0 <__divsi3+0x30>
  8101ec:	00c7c83a 	sub	r3,zero,r3
  8101f0:	1805883a 	mov	r2,r3
  8101f4:	dfc00117 	ldw	ra,4(sp)
  8101f8:	dc000017 	ldw	r16,0(sp)
  8101fc:	dec00204 	addi	sp,sp,8
  810200:	f800283a 	ret
  810204:	0109c83a 	sub	r4,zero,r4
  810208:	04000044 	movi	r16,1
  81020c:	000d883a 	mov	r6,zero
  810210:	283ff20e 	bge	r5,zero,8101dc <__divsi3+0x1c>
  810214:	014bc83a 	sub	r5,zero,r5
  810218:	8021003a 	cmpeq	r16,r16,zero
  81021c:	003fef06 	br	8101dc <__divsi3+0x1c>

00810220 <__modsi3>:
  810220:	deffff04 	addi	sp,sp,-4
  810224:	dfc00015 	stw	ra,0(sp)
  810228:	01800044 	movi	r6,1
  81022c:	2807883a 	mov	r3,r5
  810230:	20000416 	blt	r4,zero,810244 <__modsi3+0x24>
  810234:	28000c16 	blt	r5,zero,810268 <__modsi3+0x48>
  810238:	dfc00017 	ldw	ra,0(sp)
  81023c:	dec00104 	addi	sp,sp,4
  810240:	08101441 	jmpi	810144 <udivmodsi4>
  810244:	0109c83a 	sub	r4,zero,r4
  810248:	28000b16 	blt	r5,zero,810278 <__modsi3+0x58>
  81024c:	180b883a 	mov	r5,r3
  810250:	01800044 	movi	r6,1
  810254:	08101440 	call	810144 <udivmodsi4>
  810258:	0085c83a 	sub	r2,zero,r2
  81025c:	dfc00017 	ldw	ra,0(sp)
  810260:	dec00104 	addi	sp,sp,4
  810264:	f800283a 	ret
  810268:	014bc83a 	sub	r5,zero,r5
  81026c:	dfc00017 	ldw	ra,0(sp)
  810270:	dec00104 	addi	sp,sp,4
  810274:	08101441 	jmpi	810144 <udivmodsi4>
  810278:	0147c83a 	sub	r3,zero,r5
  81027c:	003ff306 	br	81024c <__modsi3+0x2c>

00810280 <__udivsi3>:
  810280:	000d883a 	mov	r6,zero
  810284:	08101441 	jmpi	810144 <udivmodsi4>

00810288 <__umodsi3>:
  810288:	01800044 	movi	r6,1
  81028c:	08101441 	jmpi	810144 <udivmodsi4>

00810290 <__mulsi3>:
  810290:	20000a26 	beq	r4,zero,8102bc <__mulsi3+0x2c>
  810294:	0007883a 	mov	r3,zero
  810298:	2080004c 	andi	r2,r4,1
  81029c:	1005003a 	cmpeq	r2,r2,zero
  8102a0:	2008d07a 	srli	r4,r4,1
  8102a4:	1000011e 	bne	r2,zero,8102ac <__mulsi3+0x1c>
  8102a8:	1947883a 	add	r3,r3,r5
  8102ac:	294b883a 	add	r5,r5,r5
  8102b0:	203ff91e 	bne	r4,zero,810298 <__mulsi3+0x8>
  8102b4:	1805883a 	mov	r2,r3
  8102b8:	f800283a 	ret
  8102bc:	0007883a 	mov	r3,zero
  8102c0:	1805883a 	mov	r2,r3
  8102c4:	f800283a 	ret

008102c8 <__clzsi2>:
  8102c8:	00bfffd4 	movui	r2,65535
  8102cc:	11000e36 	bltu	r2,r4,810308 <__clzsi2+0x40>
  8102d0:	00803fc4 	movi	r2,255
  8102d4:	01400204 	movi	r5,8
  8102d8:	0007883a 	mov	r3,zero
  8102dc:	11001036 	bltu	r2,r4,810320 <__clzsi2+0x58>
  8102e0:	000b883a 	mov	r5,zero
  8102e4:	20c6d83a 	srl	r3,r4,r3
  8102e8:	00802074 	movhi	r2,129
  8102ec:	10948904 	addi	r2,r2,21028
  8102f0:	1887883a 	add	r3,r3,r2
  8102f4:	18800003 	ldbu	r2,0(r3)
  8102f8:	00c00804 	movi	r3,32
  8102fc:	2885883a 	add	r2,r5,r2
  810300:	1885c83a 	sub	r2,r3,r2
  810304:	f800283a 	ret
  810308:	01400404 	movi	r5,16
  81030c:	00804034 	movhi	r2,256
  810310:	10bfffc4 	addi	r2,r2,-1
  810314:	2807883a 	mov	r3,r5
  810318:	113ff22e 	bgeu	r2,r4,8102e4 <__clzsi2+0x1c>
  81031c:	01400604 	movi	r5,24
  810320:	2807883a 	mov	r3,r5
  810324:	20c6d83a 	srl	r3,r4,r3
  810328:	00802074 	movhi	r2,129
  81032c:	10948904 	addi	r2,r2,21028
  810330:	1887883a 	add	r3,r3,r2
  810334:	18800003 	ldbu	r2,0(r3)
  810338:	00c00804 	movi	r3,32
  81033c:	2885883a 	add	r2,r5,r2
  810340:	1885c83a 	sub	r2,r3,r2
  810344:	f800283a 	ret

00810348 <__unpack_f>:
  810348:	21800017 	ldw	r6,0(r4)
  81034c:	00c02034 	movhi	r3,128
  810350:	18ffffc4 	addi	r3,r3,-1
  810354:	3004d5fa 	srli	r2,r6,23
  810358:	3008d7fa 	srli	r4,r6,31
  81035c:	30ce703a 	and	r7,r6,r3
  810360:	10c03fcc 	andi	r3,r2,255
  810364:	29000115 	stw	r4,4(r5)
  810368:	1800131e 	bne	r3,zero,8103b8 <__unpack_f+0x70>
  81036c:	38000f26 	beq	r7,zero,8103ac <__unpack_f+0x64>
  810370:	380691fa 	slli	r3,r7,7
  810374:	01bfe084 	movi	r6,-126
  810378:	008000c4 	movi	r2,3
  81037c:	01100034 	movhi	r4,16384
  810380:	213fffc4 	addi	r4,r4,-1
  810384:	28800015 	stw	r2,0(r5)
  810388:	29800215 	stw	r6,8(r5)
  81038c:	20c00536 	bltu	r4,r3,8103a4 <__unpack_f+0x5c>
  810390:	3005883a 	mov	r2,r6
  810394:	18c7883a 	add	r3,r3,r3
  810398:	10bfffc4 	addi	r2,r2,-1
  81039c:	20fffd2e 	bgeu	r4,r3,810394 <__unpack_f+0x4c>
  8103a0:	28800215 	stw	r2,8(r5)
  8103a4:	28c00315 	stw	r3,12(r5)
  8103a8:	f800283a 	ret
  8103ac:	00800084 	movi	r2,2
  8103b0:	28800015 	stw	r2,0(r5)
  8103b4:	f800283a 	ret
  8103b8:	00803fc4 	movi	r2,255
  8103bc:	18800826 	beq	r3,r2,8103e0 <__unpack_f+0x98>
  8103c0:	380491fa 	slli	r2,r7,7
  8103c4:	18ffe044 	addi	r3,r3,-127
  8103c8:	28c00215 	stw	r3,8(r5)
  8103cc:	10900034 	orhi	r2,r2,16384
  8103d0:	28800315 	stw	r2,12(r5)
  8103d4:	008000c4 	movi	r2,3
  8103d8:	28800015 	stw	r2,0(r5)
  8103dc:	f800283a 	ret
  8103e0:	3800031e 	bne	r7,zero,8103f0 <__unpack_f+0xa8>
  8103e4:	00800104 	movi	r2,4
  8103e8:	28800015 	stw	r2,0(r5)
  8103ec:	f800283a 	ret
  8103f0:	3080042c 	andhi	r2,r6,16
  8103f4:	10000426 	beq	r2,zero,810408 <__unpack_f+0xc0>
  8103f8:	00800044 	movi	r2,1
  8103fc:	28800015 	stw	r2,0(r5)
  810400:	29c00315 	stw	r7,12(r5)
  810404:	f800283a 	ret
  810408:	28000015 	stw	zero,0(r5)
  81040c:	003ffc06 	br	810400 <__unpack_f+0xb8>

00810410 <__fpcmp_parts_f>:
  810410:	21800017 	ldw	r6,0(r4)
  810414:	00c00044 	movi	r3,1
  810418:	19800a2e 	bgeu	r3,r6,810444 <__fpcmp_parts_f+0x34>
  81041c:	28800017 	ldw	r2,0(r5)
  810420:	1880082e 	bgeu	r3,r2,810444 <__fpcmp_parts_f+0x34>
  810424:	00c00104 	movi	r3,4
  810428:	30c01e26 	beq	r6,r3,8104a4 <__fpcmp_parts_f+0x94>
  81042c:	10c01a26 	beq	r2,r3,810498 <__fpcmp_parts_f+0x88>
  810430:	00c00084 	movi	r3,2
  810434:	30c00526 	beq	r6,r3,81044c <__fpcmp_parts_f+0x3c>
  810438:	10c0071e 	bne	r2,r3,810458 <__fpcmp_parts_f+0x48>
  81043c:	20800117 	ldw	r2,4(r4)
  810440:	1000091e 	bne	r2,zero,810468 <__fpcmp_parts_f+0x58>
  810444:	00800044 	movi	r2,1
  810448:	f800283a 	ret
  81044c:	10c0121e 	bne	r2,r3,810498 <__fpcmp_parts_f+0x88>
  810450:	0005883a 	mov	r2,zero
  810454:	f800283a 	ret
  810458:	20c00117 	ldw	r3,4(r4)
  81045c:	28800117 	ldw	r2,4(r5)
  810460:	18800326 	beq	r3,r2,810470 <__fpcmp_parts_f+0x60>
  810464:	183ff726 	beq	r3,zero,810444 <__fpcmp_parts_f+0x34>
  810468:	00bfffc4 	movi	r2,-1
  81046c:	f800283a 	ret
  810470:	21800217 	ldw	r6,8(r4)
  810474:	28800217 	ldw	r2,8(r5)
  810478:	11bffa16 	blt	r2,r6,810464 <__fpcmp_parts_f+0x54>
  81047c:	30800416 	blt	r6,r2,810490 <__fpcmp_parts_f+0x80>
  810480:	21000317 	ldw	r4,12(r4)
  810484:	29400317 	ldw	r5,12(r5)
  810488:	293ff636 	bltu	r5,r4,810464 <__fpcmp_parts_f+0x54>
  81048c:	217ff02e 	bgeu	r4,r5,810450 <__fpcmp_parts_f+0x40>
  810490:	183fec1e 	bne	r3,zero,810444 <__fpcmp_parts_f+0x34>
  810494:	003ff406 	br	810468 <__fpcmp_parts_f+0x58>
  810498:	28800117 	ldw	r2,4(r5)
  81049c:	103fe91e 	bne	r2,zero,810444 <__fpcmp_parts_f+0x34>
  8104a0:	003ff106 	br	810468 <__fpcmp_parts_f+0x58>
  8104a4:	11bfe51e 	bne	r2,r6,81043c <__fpcmp_parts_f+0x2c>
  8104a8:	28c00117 	ldw	r3,4(r5)
  8104ac:	20800117 	ldw	r2,4(r4)
  8104b0:	1885c83a 	sub	r2,r3,r2
  8104b4:	f800283a 	ret

008104b8 <__make_fp>:
  8104b8:	defffb04 	addi	sp,sp,-20
  8104bc:	d9000015 	stw	r4,0(sp)
  8104c0:	d809883a 	mov	r4,sp
  8104c4:	dfc00415 	stw	ra,16(sp)
  8104c8:	d9400115 	stw	r5,4(sp)
  8104cc:	d9800215 	stw	r6,8(sp)
  8104d0:	d9c00315 	stw	r7,12(sp)
  8104d4:	08109f80 	call	8109f8 <__pack_f>
  8104d8:	dfc00417 	ldw	ra,16(sp)
  8104dc:	dec00504 	addi	sp,sp,20
  8104e0:	f800283a 	ret

008104e4 <__pack_d>:
  8104e4:	20c00017 	ldw	r3,0(r4)
  8104e8:	defffd04 	addi	sp,sp,-12
  8104ec:	dc000015 	stw	r16,0(sp)
  8104f0:	dc800215 	stw	r18,8(sp)
  8104f4:	dc400115 	stw	r17,4(sp)
  8104f8:	00800044 	movi	r2,1
  8104fc:	22000317 	ldw	r8,12(r4)
  810500:	001f883a 	mov	r15,zero
  810504:	22400417 	ldw	r9,16(r4)
  810508:	24000117 	ldw	r16,4(r4)
  81050c:	10c0552e 	bgeu	r2,r3,810664 <__pack_d+0x180>
  810510:	00800104 	movi	r2,4
  810514:	18804f26 	beq	r3,r2,810654 <__pack_d+0x170>
  810518:	00800084 	movi	r2,2
  81051c:	18800226 	beq	r3,r2,810528 <__pack_d+0x44>
  810520:	4244b03a 	or	r2,r8,r9
  810524:	10001a1e 	bne	r2,zero,810590 <__pack_d+0xac>
  810528:	000d883a 	mov	r6,zero
  81052c:	000f883a 	mov	r7,zero
  810530:	0011883a 	mov	r8,zero
  810534:	00800434 	movhi	r2,16
  810538:	10bfffc4 	addi	r2,r2,-1
  81053c:	301d883a 	mov	r14,r6
  810540:	3884703a 	and	r2,r7,r2
  810544:	400a953a 	slli	r5,r8,20
  810548:	79bffc2c 	andhi	r6,r15,65520
  81054c:	308cb03a 	or	r6,r6,r2
  810550:	00e00434 	movhi	r3,32784
  810554:	18ffffc4 	addi	r3,r3,-1
  810558:	800497fa 	slli	r2,r16,31
  81055c:	30c6703a 	and	r3,r6,r3
  810560:	1946b03a 	or	r3,r3,r5
  810564:	01600034 	movhi	r5,32768
  810568:	297fffc4 	addi	r5,r5,-1
  81056c:	194a703a 	and	r5,r3,r5
  810570:	288ab03a 	or	r5,r5,r2
  810574:	2807883a 	mov	r3,r5
  810578:	7005883a 	mov	r2,r14
  81057c:	dc800217 	ldw	r18,8(sp)
  810580:	dc400117 	ldw	r17,4(sp)
  810584:	dc000017 	ldw	r16,0(sp)
  810588:	dec00304 	addi	sp,sp,12
  81058c:	f800283a 	ret
  810590:	21000217 	ldw	r4,8(r4)
  810594:	00bf0084 	movi	r2,-1022
  810598:	20803f16 	blt	r4,r2,810698 <__pack_d+0x1b4>
  81059c:	0080ffc4 	movi	r2,1023
  8105a0:	11002c16 	blt	r2,r4,810654 <__pack_d+0x170>
  8105a4:	00803fc4 	movi	r2,255
  8105a8:	408c703a 	and	r6,r8,r2
  8105ac:	00802004 	movi	r2,128
  8105b0:	0007883a 	mov	r3,zero
  8105b4:	000f883a 	mov	r7,zero
  8105b8:	2280ffc4 	addi	r10,r4,1023
  8105bc:	30801e26 	beq	r6,r2,810638 <__pack_d+0x154>
  8105c0:	00801fc4 	movi	r2,127
  8105c4:	4089883a 	add	r4,r8,r2
  8105c8:	220d803a 	cmpltu	r6,r4,r8
  8105cc:	324d883a 	add	r6,r6,r9
  8105d0:	2011883a 	mov	r8,r4
  8105d4:	3013883a 	mov	r9,r6
  8105d8:	00880034 	movhi	r2,8192
  8105dc:	10bfffc4 	addi	r2,r2,-1
  8105e0:	12400d36 	bltu	r2,r9,810618 <__pack_d+0x134>
  8105e4:	4804963a 	slli	r2,r9,24
  8105e8:	400cd23a 	srli	r6,r8,8
  8105ec:	480ed23a 	srli	r7,r9,8
  8105f0:	013fffc4 	movi	r4,-1
  8105f4:	118cb03a 	or	r6,r2,r6
  8105f8:	01400434 	movhi	r5,16
  8105fc:	297fffc4 	addi	r5,r5,-1
  810600:	3104703a 	and	r2,r6,r4
  810604:	3946703a 	and	r3,r7,r5
  810608:	5201ffcc 	andi	r8,r10,2047
  81060c:	100d883a 	mov	r6,r2
  810610:	180f883a 	mov	r7,r3
  810614:	003fc706 	br	810534 <__pack_d+0x50>
  810618:	480897fa 	slli	r4,r9,31
  81061c:	4004d07a 	srli	r2,r8,1
  810620:	4806d07a 	srli	r3,r9,1
  810624:	52800044 	addi	r10,r10,1
  810628:	2084b03a 	or	r2,r4,r2
  81062c:	1011883a 	mov	r8,r2
  810630:	1813883a 	mov	r9,r3
  810634:	003feb06 	br	8105e4 <__pack_d+0x100>
  810638:	383fe11e 	bne	r7,zero,8105c0 <__pack_d+0xdc>
  81063c:	01004004 	movi	r4,256
  810640:	4104703a 	and	r2,r8,r4
  810644:	10c4b03a 	or	r2,r2,r3
  810648:	103fe326 	beq	r2,zero,8105d8 <__pack_d+0xf4>
  81064c:	3005883a 	mov	r2,r6
  810650:	003fdc06 	br	8105c4 <__pack_d+0xe0>
  810654:	000d883a 	mov	r6,zero
  810658:	000f883a 	mov	r7,zero
  81065c:	0201ffc4 	movi	r8,2047
  810660:	003fb406 	br	810534 <__pack_d+0x50>
  810664:	0005883a 	mov	r2,zero
  810668:	00c00234 	movhi	r3,8
  81066c:	408cb03a 	or	r6,r8,r2
  810670:	48ceb03a 	or	r7,r9,r3
  810674:	013fffc4 	movi	r4,-1
  810678:	01400434 	movhi	r5,16
  81067c:	297fffc4 	addi	r5,r5,-1
  810680:	3104703a 	and	r2,r6,r4
  810684:	3946703a 	and	r3,r7,r5
  810688:	100d883a 	mov	r6,r2
  81068c:	180f883a 	mov	r7,r3
  810690:	0201ffc4 	movi	r8,2047
  810694:	003fa706 	br	810534 <__pack_d+0x50>
  810698:	1109c83a 	sub	r4,r2,r4
  81069c:	00800e04 	movi	r2,56
  8106a0:	11004316 	blt	r2,r4,8107b0 <__pack_d+0x2cc>
  8106a4:	21fff804 	addi	r7,r4,-32
  8106a8:	38004516 	blt	r7,zero,8107c0 <__pack_d+0x2dc>
  8106ac:	49d8d83a 	srl	r12,r9,r7
  8106b0:	001b883a 	mov	r13,zero
  8106b4:	0023883a 	mov	r17,zero
  8106b8:	01400044 	movi	r5,1
  8106bc:	0025883a 	mov	r18,zero
  8106c0:	38004716 	blt	r7,zero,8107e0 <__pack_d+0x2fc>
  8106c4:	29d6983a 	sll	r11,r5,r7
  8106c8:	0015883a 	mov	r10,zero
  8106cc:	00bfffc4 	movi	r2,-1
  8106d0:	5089883a 	add	r4,r10,r2
  8106d4:	588b883a 	add	r5,r11,r2
  8106d8:	228d803a 	cmpltu	r6,r4,r10
  8106dc:	314b883a 	add	r5,r6,r5
  8106e0:	4104703a 	and	r2,r8,r4
  8106e4:	4946703a 	and	r3,r9,r5
  8106e8:	10c4b03a 	or	r2,r2,r3
  8106ec:	10000226 	beq	r2,zero,8106f8 <__pack_d+0x214>
  8106f0:	04400044 	movi	r17,1
  8106f4:	0025883a 	mov	r18,zero
  8106f8:	00803fc4 	movi	r2,255
  8106fc:	644eb03a 	or	r7,r12,r17
  810700:	3892703a 	and	r9,r7,r2
  810704:	00802004 	movi	r2,128
  810708:	6c90b03a 	or	r8,r13,r18
  81070c:	0015883a 	mov	r10,zero
  810710:	48801626 	beq	r9,r2,81076c <__pack_d+0x288>
  810714:	01001fc4 	movi	r4,127
  810718:	3905883a 	add	r2,r7,r4
  81071c:	11cd803a 	cmpltu	r6,r2,r7
  810720:	320d883a 	add	r6,r6,r8
  810724:	100f883a 	mov	r7,r2
  810728:	00840034 	movhi	r2,4096
  81072c:	10bfffc4 	addi	r2,r2,-1
  810730:	3011883a 	mov	r8,r6
  810734:	0007883a 	mov	r3,zero
  810738:	11801b36 	bltu	r2,r6,8107a8 <__pack_d+0x2c4>
  81073c:	4004963a 	slli	r2,r8,24
  810740:	3808d23a 	srli	r4,r7,8
  810744:	400ad23a 	srli	r5,r8,8
  810748:	1813883a 	mov	r9,r3
  81074c:	1108b03a 	or	r4,r2,r4
  810750:	00bfffc4 	movi	r2,-1
  810754:	00c00434 	movhi	r3,16
  810758:	18ffffc4 	addi	r3,r3,-1
  81075c:	208c703a 	and	r6,r4,r2
  810760:	28ce703a 	and	r7,r5,r3
  810764:	4a01ffcc 	andi	r8,r9,2047
  810768:	003f7206 	br	810534 <__pack_d+0x50>
  81076c:	503fe91e 	bne	r10,zero,810714 <__pack_d+0x230>
  810770:	01004004 	movi	r4,256
  810774:	3904703a 	and	r2,r7,r4
  810778:	0007883a 	mov	r3,zero
  81077c:	10c4b03a 	or	r2,r2,r3
  810780:	10000626 	beq	r2,zero,81079c <__pack_d+0x2b8>
  810784:	3a45883a 	add	r2,r7,r9
  810788:	11cd803a 	cmpltu	r6,r2,r7
  81078c:	320d883a 	add	r6,r6,r8
  810790:	100f883a 	mov	r7,r2
  810794:	3011883a 	mov	r8,r6
  810798:	0007883a 	mov	r3,zero
  81079c:	00840034 	movhi	r2,4096
  8107a0:	10bfffc4 	addi	r2,r2,-1
  8107a4:	123fe52e 	bgeu	r2,r8,81073c <__pack_d+0x258>
  8107a8:	00c00044 	movi	r3,1
  8107ac:	003fe306 	br	81073c <__pack_d+0x258>
  8107b0:	0009883a 	mov	r4,zero
  8107b4:	0013883a 	mov	r9,zero
  8107b8:	000b883a 	mov	r5,zero
  8107bc:	003fe406 	br	810750 <__pack_d+0x26c>
  8107c0:	4a47883a 	add	r3,r9,r9
  8107c4:	008007c4 	movi	r2,31
  8107c8:	1105c83a 	sub	r2,r2,r4
  8107cc:	1886983a 	sll	r3,r3,r2
  8107d0:	4118d83a 	srl	r12,r8,r4
  8107d4:	491ad83a 	srl	r13,r9,r4
  8107d8:	1b18b03a 	or	r12,r3,r12
  8107dc:	003fb506 	br	8106b4 <__pack_d+0x1d0>
  8107e0:	2806d07a 	srli	r3,r5,1
  8107e4:	008007c4 	movi	r2,31
  8107e8:	1105c83a 	sub	r2,r2,r4
  8107ec:	1896d83a 	srl	r11,r3,r2
  8107f0:	2914983a 	sll	r10,r5,r4
  8107f4:	003fb506 	br	8106cc <__pack_d+0x1e8>

008107f8 <__unpack_d>:
  8107f8:	20c00117 	ldw	r3,4(r4)
  8107fc:	22400017 	ldw	r9,0(r4)
  810800:	00800434 	movhi	r2,16
  810804:	10bfffc4 	addi	r2,r2,-1
  810808:	1808d53a 	srli	r4,r3,20
  81080c:	180cd7fa 	srli	r6,r3,31
  810810:	1894703a 	and	r10,r3,r2
  810814:	2201ffcc 	andi	r8,r4,2047
  810818:	281b883a 	mov	r13,r5
  81081c:	4817883a 	mov	r11,r9
  810820:	29800115 	stw	r6,4(r5)
  810824:	5019883a 	mov	r12,r10
  810828:	40001e1e 	bne	r8,zero,8108a4 <__unpack_d+0xac>
  81082c:	4a84b03a 	or	r2,r9,r10
  810830:	10001926 	beq	r2,zero,810898 <__unpack_d+0xa0>
  810834:	4804d63a 	srli	r2,r9,24
  810838:	500c923a 	slli	r6,r10,8
  81083c:	013f0084 	movi	r4,-1022
  810840:	00c40034 	movhi	r3,4096
  810844:	18ffffc4 	addi	r3,r3,-1
  810848:	118cb03a 	or	r6,r2,r6
  81084c:	008000c4 	movi	r2,3
  810850:	480a923a 	slli	r5,r9,8
  810854:	68800015 	stw	r2,0(r13)
  810858:	69000215 	stw	r4,8(r13)
  81085c:	19800b36 	bltu	r3,r6,81088c <__unpack_d+0x94>
  810860:	200f883a 	mov	r7,r4
  810864:	1811883a 	mov	r8,r3
  810868:	2945883a 	add	r2,r5,r5
  81086c:	1149803a 	cmpltu	r4,r2,r5
  810870:	3187883a 	add	r3,r6,r6
  810874:	20c9883a 	add	r4,r4,r3
  810878:	100b883a 	mov	r5,r2
  81087c:	200d883a 	mov	r6,r4
  810880:	39ffffc4 	addi	r7,r7,-1
  810884:	413ff82e 	bgeu	r8,r4,810868 <__unpack_d+0x70>
  810888:	69c00215 	stw	r7,8(r13)
  81088c:	69800415 	stw	r6,16(r13)
  810890:	69400315 	stw	r5,12(r13)
  810894:	f800283a 	ret
  810898:	00800084 	movi	r2,2
  81089c:	28800015 	stw	r2,0(r5)
  8108a0:	f800283a 	ret
  8108a4:	0081ffc4 	movi	r2,2047
  8108a8:	40800f26 	beq	r8,r2,8108e8 <__unpack_d+0xf0>
  8108ac:	480cd63a 	srli	r6,r9,24
  8108b0:	5006923a 	slli	r3,r10,8
  8108b4:	4804923a 	slli	r2,r9,8
  8108b8:	0009883a 	mov	r4,zero
  8108bc:	30c6b03a 	or	r3,r6,r3
  8108c0:	01440034 	movhi	r5,4096
  8108c4:	110cb03a 	or	r6,r2,r4
  8108c8:	423f0044 	addi	r8,r8,-1023
  8108cc:	194eb03a 	or	r7,r3,r5
  8108d0:	008000c4 	movi	r2,3
  8108d4:	69c00415 	stw	r7,16(r13)
  8108d8:	6a000215 	stw	r8,8(r13)
  8108dc:	68800015 	stw	r2,0(r13)
  8108e0:	69800315 	stw	r6,12(r13)
  8108e4:	f800283a 	ret
  8108e8:	4a84b03a 	or	r2,r9,r10
  8108ec:	1000031e 	bne	r2,zero,8108fc <__unpack_d+0x104>
  8108f0:	00800104 	movi	r2,4
  8108f4:	28800015 	stw	r2,0(r5)
  8108f8:	f800283a 	ret
  8108fc:	0009883a 	mov	r4,zero
  810900:	01400234 	movhi	r5,8
  810904:	4904703a 	and	r2,r9,r4
  810908:	5146703a 	and	r3,r10,r5
  81090c:	10c4b03a 	or	r2,r2,r3
  810910:	10000526 	beq	r2,zero,810928 <__unpack_d+0x130>
  810914:	00800044 	movi	r2,1
  810918:	68800015 	stw	r2,0(r13)
  81091c:	6b000415 	stw	r12,16(r13)
  810920:	6ac00315 	stw	r11,12(r13)
  810924:	f800283a 	ret
  810928:	68000015 	stw	zero,0(r13)
  81092c:	003ffb06 	br	81091c <__unpack_d+0x124>

00810930 <__fpcmp_parts_d>:
  810930:	21800017 	ldw	r6,0(r4)
  810934:	00c00044 	movi	r3,1
  810938:	19800a2e 	bgeu	r3,r6,810964 <__fpcmp_parts_d+0x34>
  81093c:	28800017 	ldw	r2,0(r5)
  810940:	1880082e 	bgeu	r3,r2,810964 <__fpcmp_parts_d+0x34>
  810944:	00c00104 	movi	r3,4
  810948:	30c02626 	beq	r6,r3,8109e4 <__fpcmp_parts_d+0xb4>
  81094c:	10c02226 	beq	r2,r3,8109d8 <__fpcmp_parts_d+0xa8>
  810950:	00c00084 	movi	r3,2
  810954:	30c00526 	beq	r6,r3,81096c <__fpcmp_parts_d+0x3c>
  810958:	10c0071e 	bne	r2,r3,810978 <__fpcmp_parts_d+0x48>
  81095c:	20800117 	ldw	r2,4(r4)
  810960:	1000091e 	bne	r2,zero,810988 <__fpcmp_parts_d+0x58>
  810964:	00800044 	movi	r2,1
  810968:	f800283a 	ret
  81096c:	10c01a1e 	bne	r2,r3,8109d8 <__fpcmp_parts_d+0xa8>
  810970:	0005883a 	mov	r2,zero
  810974:	f800283a 	ret
  810978:	22000117 	ldw	r8,4(r4)
  81097c:	28800117 	ldw	r2,4(r5)
  810980:	40800326 	beq	r8,r2,810990 <__fpcmp_parts_d+0x60>
  810984:	403ff726 	beq	r8,zero,810964 <__fpcmp_parts_d+0x34>
  810988:	00bfffc4 	movi	r2,-1
  81098c:	f800283a 	ret
  810990:	20c00217 	ldw	r3,8(r4)
  810994:	28800217 	ldw	r2,8(r5)
  810998:	10fffa16 	blt	r2,r3,810984 <__fpcmp_parts_d+0x54>
  81099c:	18800916 	blt	r3,r2,8109c4 <__fpcmp_parts_d+0x94>
  8109a0:	21c00417 	ldw	r7,16(r4)
  8109a4:	28c00417 	ldw	r3,16(r5)
  8109a8:	21800317 	ldw	r6,12(r4)
  8109ac:	28800317 	ldw	r2,12(r5)
  8109b0:	19fff436 	bltu	r3,r7,810984 <__fpcmp_parts_d+0x54>
  8109b4:	38c00526 	beq	r7,r3,8109cc <__fpcmp_parts_d+0x9c>
  8109b8:	38c00236 	bltu	r7,r3,8109c4 <__fpcmp_parts_d+0x94>
  8109bc:	19ffec1e 	bne	r3,r7,810970 <__fpcmp_parts_d+0x40>
  8109c0:	30bfeb2e 	bgeu	r6,r2,810970 <__fpcmp_parts_d+0x40>
  8109c4:	403fe71e 	bne	r8,zero,810964 <__fpcmp_parts_d+0x34>
  8109c8:	003fef06 	br	810988 <__fpcmp_parts_d+0x58>
  8109cc:	11bffa2e 	bgeu	r2,r6,8109b8 <__fpcmp_parts_d+0x88>
  8109d0:	403fe426 	beq	r8,zero,810964 <__fpcmp_parts_d+0x34>
  8109d4:	003fec06 	br	810988 <__fpcmp_parts_d+0x58>
  8109d8:	28800117 	ldw	r2,4(r5)
  8109dc:	103fe11e 	bne	r2,zero,810964 <__fpcmp_parts_d+0x34>
  8109e0:	003fe906 	br	810988 <__fpcmp_parts_d+0x58>
  8109e4:	11bfdd1e 	bne	r2,r6,81095c <__fpcmp_parts_d+0x2c>
  8109e8:	28c00117 	ldw	r3,4(r5)
  8109ec:	20800117 	ldw	r2,4(r4)
  8109f0:	1885c83a 	sub	r2,r3,r2
  8109f4:	f800283a 	ret

008109f8 <__pack_f>:
  8109f8:	20c00017 	ldw	r3,0(r4)
  8109fc:	01c00044 	movi	r7,1
  810a00:	21800317 	ldw	r6,12(r4)
  810a04:	21400117 	ldw	r5,4(r4)
  810a08:	38c02d2e 	bgeu	r7,r3,810ac0 <__pack_f+0xc8>
  810a0c:	00800104 	movi	r2,4
  810a10:	18802826 	beq	r3,r2,810ab4 <__pack_f+0xbc>
  810a14:	00800084 	movi	r2,2
  810a18:	18800126 	beq	r3,r2,810a20 <__pack_f+0x28>
  810a1c:	3000101e 	bne	r6,zero,810a60 <__pack_f+0x68>
  810a20:	000d883a 	mov	r6,zero
  810a24:	0007883a 	mov	r3,zero
  810a28:	19003fcc 	andi	r4,r3,255
  810a2c:	200895fa 	slli	r4,r4,23
  810a30:	00c02034 	movhi	r3,128
  810a34:	18ffffc4 	addi	r3,r3,-1
  810a38:	30c6703a 	and	r3,r6,r3
  810a3c:	10a0002c 	andhi	r2,r2,32768
  810a40:	10c4b03a 	or	r2,r2,r3
  810a44:	280a97fa 	slli	r5,r5,31
  810a48:	1104b03a 	or	r2,r2,r4
  810a4c:	00e00034 	movhi	r3,32768
  810a50:	18ffffc4 	addi	r3,r3,-1
  810a54:	10c4703a 	and	r2,r2,r3
  810a58:	1144b03a 	or	r2,r2,r5
  810a5c:	f800283a 	ret
  810a60:	21000217 	ldw	r4,8(r4)
  810a64:	00bfe084 	movi	r2,-126
  810a68:	20801b16 	blt	r4,r2,810ad8 <__pack_f+0xe0>
  810a6c:	00801fc4 	movi	r2,127
  810a70:	11001016 	blt	r2,r4,810ab4 <__pack_f+0xbc>
  810a74:	308e703a 	and	r7,r6,r2
  810a78:	2087883a 	add	r3,r4,r2
  810a7c:	00801004 	movi	r2,64
  810a80:	38800526 	beq	r7,r2,810a98 <__pack_f+0xa0>
  810a84:	31800fc4 	addi	r6,r6,63
  810a88:	30000716 	blt	r6,zero,810aa8 <__pack_f+0xb0>
  810a8c:	300490ba 	slli	r2,r6,2
  810a90:	100cd27a 	srli	r6,r2,9
  810a94:	003fe406 	br	810a28 <__pack_f+0x30>
  810a98:	3080200c 	andi	r2,r6,128
  810a9c:	103ffa26 	beq	r2,zero,810a88 <__pack_f+0x90>
  810aa0:	31cd883a 	add	r6,r6,r7
  810aa4:	003ff806 	br	810a88 <__pack_f+0x90>
  810aa8:	300cd07a 	srli	r6,r6,1
  810aac:	18c00044 	addi	r3,r3,1
  810ab0:	003ff606 	br	810a8c <__pack_f+0x94>
  810ab4:	000d883a 	mov	r6,zero
  810ab8:	00ffffc4 	movi	r3,-1
  810abc:	003fda06 	br	810a28 <__pack_f+0x30>
  810ac0:	31800434 	orhi	r6,r6,16
  810ac4:	00802034 	movhi	r2,128
  810ac8:	10bfffc4 	addi	r2,r2,-1
  810acc:	308c703a 	and	r6,r6,r2
  810ad0:	00ffffc4 	movi	r3,-1
  810ad4:	003fd406 	br	810a28 <__pack_f+0x30>
  810ad8:	1109c83a 	sub	r4,r2,r4
  810adc:	00800644 	movi	r2,25
  810ae0:	11001216 	blt	r2,r4,810b2c <__pack_f+0x134>
  810ae4:	3904983a 	sll	r2,r7,r4
  810ae8:	3106d83a 	srl	r3,r6,r4
  810aec:	10bfffc4 	addi	r2,r2,-1
  810af0:	3084703a 	and	r2,r6,r2
  810af4:	1004c03a 	cmpne	r2,r2,zero
  810af8:	1886b03a 	or	r3,r3,r2
  810afc:	19001fcc 	andi	r4,r3,127
  810b00:	00801004 	movi	r2,64
  810b04:	20800c26 	beq	r4,r2,810b38 <__pack_f+0x140>
  810b08:	18c00fc4 	addi	r3,r3,63
  810b0c:	00900034 	movhi	r2,16384
  810b10:	10bfffc4 	addi	r2,r2,-1
  810b14:	180cd1fa 	srli	r6,r3,7
  810b18:	10c7803a 	cmpltu	r3,r2,r3
  810b1c:	00802034 	movhi	r2,128
  810b20:	10bfffc4 	addi	r2,r2,-1
  810b24:	308c703a 	and	r6,r6,r2
  810b28:	003fbf06 	br	810a28 <__pack_f+0x30>
  810b2c:	0007883a 	mov	r3,zero
  810b30:	000d883a 	mov	r6,zero
  810b34:	003ff906 	br	810b1c <__pack_f+0x124>
  810b38:	1880200c 	andi	r2,r3,128
  810b3c:	10000126 	beq	r2,zero,810b44 <__pack_f+0x14c>
  810b40:	1907883a 	add	r3,r3,r4
  810b44:	180cd1fa 	srli	r6,r3,7
  810b48:	00900034 	movhi	r2,16384
  810b4c:	10bfffc4 	addi	r2,r2,-1
  810b50:	10c7803a 	cmpltu	r3,r2,r3
  810b54:	003ff106 	br	810b1c <__pack_f+0x124>

00810b58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810b58:	defff804 	addi	sp,sp,-32
  810b5c:	dfc00715 	stw	ra,28(sp)
  810b60:	df000615 	stw	fp,24(sp)
  810b64:	df000604 	addi	fp,sp,24
  810b68:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810b6c:	e0bffc17 	ldw	r2,-16(fp)
  810b70:	1004803a 	cmplt	r2,r2,zero
  810b74:	1000091e 	bne	r2,zero,810b9c <close+0x44>
  810b78:	e13ffc17 	ldw	r4,-16(fp)
  810b7c:	01400304 	movi	r5,12
  810b80:	08102900 	call	810290 <__mulsi3>
  810b84:	1007883a 	mov	r3,r2
  810b88:	00802074 	movhi	r2,129
  810b8c:	1096f804 	addi	r2,r2,23520
  810b90:	1887883a 	add	r3,r3,r2
  810b94:	e0ffff15 	stw	r3,-4(fp)
  810b98:	00000106 	br	810ba0 <close+0x48>
  810b9c:	e03fff15 	stw	zero,-4(fp)
  810ba0:	e0bfff17 	ldw	r2,-4(fp)
  810ba4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  810ba8:	e0bffb17 	ldw	r2,-20(fp)
  810bac:	1005003a 	cmpeq	r2,r2,zero
  810bb0:	10001d1e 	bne	r2,zero,810c28 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810bb4:	e0bffb17 	ldw	r2,-20(fp)
  810bb8:	10800017 	ldw	r2,0(r2)
  810bbc:	10800417 	ldw	r2,16(r2)
  810bc0:	1005003a 	cmpeq	r2,r2,zero
  810bc4:	1000071e 	bne	r2,zero,810be4 <close+0x8c>
  810bc8:	e0bffb17 	ldw	r2,-20(fp)
  810bcc:	10800017 	ldw	r2,0(r2)
  810bd0:	10800417 	ldw	r2,16(r2)
  810bd4:	e13ffb17 	ldw	r4,-20(fp)
  810bd8:	103ee83a 	callr	r2
  810bdc:	e0bffe15 	stw	r2,-8(fp)
  810be0:	00000106 	br	810be8 <close+0x90>
  810be4:	e03ffe15 	stw	zero,-8(fp)
  810be8:	e0bffe17 	ldw	r2,-8(fp)
  810bec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  810bf0:	e13ffc17 	ldw	r4,-16(fp)
  810bf4:	08119600 	call	811960 <alt_release_fd>
    if (rval < 0)
  810bf8:	e0bffa17 	ldw	r2,-24(fp)
  810bfc:	1004403a 	cmpge	r2,r2,zero
  810c00:	1000071e 	bne	r2,zero,810c20 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  810c04:	0810c580 	call	810c58 <alt_get_errno>
  810c08:	e0fffa17 	ldw	r3,-24(fp)
  810c0c:	00c7c83a 	sub	r3,zero,r3
  810c10:	10c00015 	stw	r3,0(r2)
      return -1;
  810c14:	00bfffc4 	movi	r2,-1
  810c18:	e0bffd15 	stw	r2,-12(fp)
  810c1c:	00000806 	br	810c40 <close+0xe8>
    }
    return 0;
  810c20:	e03ffd15 	stw	zero,-12(fp)
  810c24:	00000606 	br	810c40 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810c28:	0810c580 	call	810c58 <alt_get_errno>
  810c2c:	1007883a 	mov	r3,r2
  810c30:	00801444 	movi	r2,81
  810c34:	18800015 	stw	r2,0(r3)
    return -1;
  810c38:	00bfffc4 	movi	r2,-1
  810c3c:	e0bffd15 	stw	r2,-12(fp)
  810c40:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  810c44:	e037883a 	mov	sp,fp
  810c48:	dfc00117 	ldw	ra,4(sp)
  810c4c:	df000017 	ldw	fp,0(sp)
  810c50:	dec00204 	addi	sp,sp,8
  810c54:	f800283a 	ret

00810c58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810c58:	defffd04 	addi	sp,sp,-12
  810c5c:	dfc00215 	stw	ra,8(sp)
  810c60:	df000115 	stw	fp,4(sp)
  810c64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810c68:	00802074 	movhi	r2,129
  810c6c:	109bc404 	addi	r2,r2,28432
  810c70:	10800017 	ldw	r2,0(r2)
  810c74:	1005003a 	cmpeq	r2,r2,zero
  810c78:	1000061e 	bne	r2,zero,810c94 <alt_get_errno+0x3c>
  810c7c:	00802074 	movhi	r2,129
  810c80:	109bc404 	addi	r2,r2,28432
  810c84:	10800017 	ldw	r2,0(r2)
  810c88:	103ee83a 	callr	r2
  810c8c:	e0bfff15 	stw	r2,-4(fp)
  810c90:	00000306 	br	810ca0 <alt_get_errno+0x48>
  810c94:	008020b4 	movhi	r2,130
  810c98:	10a2bf04 	addi	r2,r2,-29956
  810c9c:	e0bfff15 	stw	r2,-4(fp)
  810ca0:	e0bfff17 	ldw	r2,-4(fp)
}
  810ca4:	e037883a 	mov	sp,fp
  810ca8:	dfc00117 	ldw	ra,4(sp)
  810cac:	df000017 	ldw	fp,0(sp)
  810cb0:	dec00204 	addi	sp,sp,8
  810cb4:	f800283a 	ret

00810cb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810cb8:	defffc04 	addi	sp,sp,-16
  810cbc:	df000315 	stw	fp,12(sp)
  810cc0:	df000304 	addi	fp,sp,12
  810cc4:	e13ffd15 	stw	r4,-12(fp)
  810cc8:	e17ffe15 	stw	r5,-8(fp)
  810ccc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  810cd0:	e0bfff17 	ldw	r2,-4(fp)
}
  810cd4:	e037883a 	mov	sp,fp
  810cd8:	df000017 	ldw	fp,0(sp)
  810cdc:	dec00104 	addi	sp,sp,4
  810ce0:	f800283a 	ret

00810ce4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810ce4:	defff904 	addi	sp,sp,-28
  810ce8:	dfc00615 	stw	ra,24(sp)
  810cec:	df000515 	stw	fp,20(sp)
  810cf0:	df000504 	addi	fp,sp,20
  810cf4:	e13ffc15 	stw	r4,-16(fp)
  810cf8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810cfc:	e0bffc17 	ldw	r2,-16(fp)
  810d00:	1004803a 	cmplt	r2,r2,zero
  810d04:	1000091e 	bne	r2,zero,810d2c <fstat+0x48>
  810d08:	e13ffc17 	ldw	r4,-16(fp)
  810d0c:	01400304 	movi	r5,12
  810d10:	08102900 	call	810290 <__mulsi3>
  810d14:	1007883a 	mov	r3,r2
  810d18:	00802074 	movhi	r2,129
  810d1c:	1096f804 	addi	r2,r2,23520
  810d20:	1887883a 	add	r3,r3,r2
  810d24:	e0ffff15 	stw	r3,-4(fp)
  810d28:	00000106 	br	810d30 <fstat+0x4c>
  810d2c:	e03fff15 	stw	zero,-4(fp)
  810d30:	e0bfff17 	ldw	r2,-4(fp)
  810d34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810d38:	e0bffb17 	ldw	r2,-20(fp)
  810d3c:	1005003a 	cmpeq	r2,r2,zero
  810d40:	1000121e 	bne	r2,zero,810d8c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  810d44:	e0bffb17 	ldw	r2,-20(fp)
  810d48:	10800017 	ldw	r2,0(r2)
  810d4c:	10800817 	ldw	r2,32(r2)
  810d50:	1005003a 	cmpeq	r2,r2,zero
  810d54:	1000081e 	bne	r2,zero,810d78 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  810d58:	e0bffb17 	ldw	r2,-20(fp)
  810d5c:	10800017 	ldw	r2,0(r2)
  810d60:	10800817 	ldw	r2,32(r2)
  810d64:	e13ffb17 	ldw	r4,-20(fp)
  810d68:	e17ffd17 	ldw	r5,-12(fp)
  810d6c:	103ee83a 	callr	r2
  810d70:	e0bffe15 	stw	r2,-8(fp)
  810d74:	00000b06 	br	810da4 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  810d78:	e0fffd17 	ldw	r3,-12(fp)
  810d7c:	00880004 	movi	r2,8192
  810d80:	18800115 	stw	r2,4(r3)
      return 0;
  810d84:	e03ffe15 	stw	zero,-8(fp)
  810d88:	00000606 	br	810da4 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810d8c:	0810dbc0 	call	810dbc <alt_get_errno>
  810d90:	1007883a 	mov	r3,r2
  810d94:	00801444 	movi	r2,81
  810d98:	18800015 	stw	r2,0(r3)
    return -1;
  810d9c:	00bfffc4 	movi	r2,-1
  810da0:	e0bffe15 	stw	r2,-8(fp)
  810da4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810da8:	e037883a 	mov	sp,fp
  810dac:	dfc00117 	ldw	ra,4(sp)
  810db0:	df000017 	ldw	fp,0(sp)
  810db4:	dec00204 	addi	sp,sp,8
  810db8:	f800283a 	ret

00810dbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810dbc:	defffd04 	addi	sp,sp,-12
  810dc0:	dfc00215 	stw	ra,8(sp)
  810dc4:	df000115 	stw	fp,4(sp)
  810dc8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810dcc:	00802074 	movhi	r2,129
  810dd0:	109bc404 	addi	r2,r2,28432
  810dd4:	10800017 	ldw	r2,0(r2)
  810dd8:	1005003a 	cmpeq	r2,r2,zero
  810ddc:	1000061e 	bne	r2,zero,810df8 <alt_get_errno+0x3c>
  810de0:	00802074 	movhi	r2,129
  810de4:	109bc404 	addi	r2,r2,28432
  810de8:	10800017 	ldw	r2,0(r2)
  810dec:	103ee83a 	callr	r2
  810df0:	e0bfff15 	stw	r2,-4(fp)
  810df4:	00000306 	br	810e04 <alt_get_errno+0x48>
  810df8:	008020b4 	movhi	r2,130
  810dfc:	10a2bf04 	addi	r2,r2,-29956
  810e00:	e0bfff15 	stw	r2,-4(fp)
  810e04:	e0bfff17 	ldw	r2,-4(fp)
}
  810e08:	e037883a 	mov	sp,fp
  810e0c:	dfc00117 	ldw	ra,4(sp)
  810e10:	df000017 	ldw	fp,0(sp)
  810e14:	dec00204 	addi	sp,sp,8
  810e18:	f800283a 	ret

00810e1c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810e1c:	defff904 	addi	sp,sp,-28
  810e20:	dfc00615 	stw	ra,24(sp)
  810e24:	df000515 	stw	fp,20(sp)
  810e28:	df000504 	addi	fp,sp,20
  810e2c:	e13ffc15 	stw	r4,-16(fp)
  810e30:	e17ffd15 	stw	r5,-12(fp)
  810e34:	e1bffe15 	stw	r6,-8(fp)
  810e38:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810e3c:	e0800217 	ldw	r2,8(fp)
  810e40:	d8800015 	stw	r2,0(sp)
  810e44:	e13ffc17 	ldw	r4,-16(fp)
  810e48:	e17ffd17 	ldw	r5,-12(fp)
  810e4c:	e1bffe17 	ldw	r6,-8(fp)
  810e50:	e1ffff17 	ldw	r7,-4(fp)
  810e54:	0810ff00 	call	810ff0 <alt_iic_isr_register>
}  
  810e58:	e037883a 	mov	sp,fp
  810e5c:	dfc00117 	ldw	ra,4(sp)
  810e60:	df000017 	ldw	fp,0(sp)
  810e64:	dec00204 	addi	sp,sp,8
  810e68:	f800283a 	ret

00810e6c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810e6c:	defff904 	addi	sp,sp,-28
  810e70:	df000615 	stw	fp,24(sp)
  810e74:	df000604 	addi	fp,sp,24
  810e78:	e13ffe15 	stw	r4,-8(fp)
  810e7c:	e17fff15 	stw	r5,-4(fp)
  810e80:	e0bfff17 	ldw	r2,-4(fp)
  810e84:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e88:	0005303a 	rdctl	r2,status
  810e8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e90:	e0fffb17 	ldw	r3,-20(fp)
  810e94:	00bfff84 	movi	r2,-2
  810e98:	1884703a 	and	r2,r3,r2
  810e9c:	1001703a 	wrctl	status,r2
  
  return context;
  810ea0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810ea4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  810ea8:	e0fffc17 	ldw	r3,-16(fp)
  810eac:	00800044 	movi	r2,1
  810eb0:	10c4983a 	sll	r2,r2,r3
  810eb4:	1007883a 	mov	r3,r2
  810eb8:	008020b4 	movhi	r2,130
  810ebc:	10a2c604 	addi	r2,r2,-29928
  810ec0:	10800017 	ldw	r2,0(r2)
  810ec4:	1886b03a 	or	r3,r3,r2
  810ec8:	008020b4 	movhi	r2,130
  810ecc:	10a2c604 	addi	r2,r2,-29928
  810ed0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810ed4:	008020b4 	movhi	r2,130
  810ed8:	10a2c604 	addi	r2,r2,-29928
  810edc:	10800017 	ldw	r2,0(r2)
  810ee0:	100170fa 	wrctl	ienable,r2
  810ee4:	e0bffd17 	ldw	r2,-12(fp)
  810ee8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810eec:	e0bffa17 	ldw	r2,-24(fp)
  810ef0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810ef4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  810ef8:	e037883a 	mov	sp,fp
  810efc:	df000017 	ldw	fp,0(sp)
  810f00:	dec00104 	addi	sp,sp,4
  810f04:	f800283a 	ret

00810f08 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  810f08:	defff904 	addi	sp,sp,-28
  810f0c:	df000615 	stw	fp,24(sp)
  810f10:	df000604 	addi	fp,sp,24
  810f14:	e13ffe15 	stw	r4,-8(fp)
  810f18:	e17fff15 	stw	r5,-4(fp)
  810f1c:	e0bfff17 	ldw	r2,-4(fp)
  810f20:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810f24:	0005303a 	rdctl	r2,status
  810f28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810f2c:	e0fffb17 	ldw	r3,-20(fp)
  810f30:	00bfff84 	movi	r2,-2
  810f34:	1884703a 	and	r2,r3,r2
  810f38:	1001703a 	wrctl	status,r2
  
  return context;
  810f3c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810f40:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  810f44:	e0fffc17 	ldw	r3,-16(fp)
  810f48:	00800044 	movi	r2,1
  810f4c:	10c4983a 	sll	r2,r2,r3
  810f50:	0084303a 	nor	r2,zero,r2
  810f54:	1007883a 	mov	r3,r2
  810f58:	008020b4 	movhi	r2,130
  810f5c:	10a2c604 	addi	r2,r2,-29928
  810f60:	10800017 	ldw	r2,0(r2)
  810f64:	1886703a 	and	r3,r3,r2
  810f68:	008020b4 	movhi	r2,130
  810f6c:	10a2c604 	addi	r2,r2,-29928
  810f70:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810f74:	008020b4 	movhi	r2,130
  810f78:	10a2c604 	addi	r2,r2,-29928
  810f7c:	10800017 	ldw	r2,0(r2)
  810f80:	100170fa 	wrctl	ienable,r2
  810f84:	e0bffd17 	ldw	r2,-12(fp)
  810f88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f8c:	e0bffa17 	ldw	r2,-24(fp)
  810f90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810f94:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  810f98:	e037883a 	mov	sp,fp
  810f9c:	df000017 	ldw	fp,0(sp)
  810fa0:	dec00104 	addi	sp,sp,4
  810fa4:	f800283a 	ret

00810fa8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  810fa8:	defffc04 	addi	sp,sp,-16
  810fac:	df000315 	stw	fp,12(sp)
  810fb0:	df000304 	addi	fp,sp,12
  810fb4:	e13ffe15 	stw	r4,-8(fp)
  810fb8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810fbc:	000530fa 	rdctl	r2,ienable
  810fc0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  810fc4:	e0ffff17 	ldw	r3,-4(fp)
  810fc8:	00800044 	movi	r2,1
  810fcc:	10c4983a 	sll	r2,r2,r3
  810fd0:	1007883a 	mov	r3,r2
  810fd4:	e0bffd17 	ldw	r2,-12(fp)
  810fd8:	1884703a 	and	r2,r3,r2
  810fdc:	1004c03a 	cmpne	r2,r2,zero
}
  810fe0:	e037883a 	mov	sp,fp
  810fe4:	df000017 	ldw	fp,0(sp)
  810fe8:	dec00104 	addi	sp,sp,4
  810fec:	f800283a 	ret

00810ff0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810ff0:	defff404 	addi	sp,sp,-48
  810ff4:	dfc00b15 	stw	ra,44(sp)
  810ff8:	df000a15 	stw	fp,40(sp)
  810ffc:	df000a04 	addi	fp,sp,40
  811000:	e13ffb15 	stw	r4,-20(fp)
  811004:	e17ffc15 	stw	r5,-16(fp)
  811008:	e1bffd15 	stw	r6,-12(fp)
  81100c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  811010:	00bffa84 	movi	r2,-22
  811014:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811018:	e0bffc17 	ldw	r2,-16(fp)
  81101c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811020:	e0bff917 	ldw	r2,-28(fp)
  811024:	10800808 	cmpgei	r2,r2,32
  811028:	1000291e 	bne	r2,zero,8110d0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81102c:	0005303a 	rdctl	r2,status
  811030:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811034:	e0fff717 	ldw	r3,-36(fp)
  811038:	00bfff84 	movi	r2,-2
  81103c:	1884703a 	and	r2,r3,r2
  811040:	1001703a 	wrctl	status,r2
  
  return context;
  811044:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811048:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81104c:	e0bff917 	ldw	r2,-28(fp)
  811050:	00c020b4 	movhi	r3,130
  811054:	18e31604 	addi	r3,r3,-29608
  811058:	100490fa 	slli	r2,r2,3
  81105c:	10c7883a 	add	r3,r2,r3
  811060:	e0bffd17 	ldw	r2,-12(fp)
  811064:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  811068:	e0bff917 	ldw	r2,-28(fp)
  81106c:	00c020b4 	movhi	r3,130
  811070:	18e31604 	addi	r3,r3,-29608
  811074:	100490fa 	slli	r2,r2,3
  811078:	10c5883a 	add	r2,r2,r3
  81107c:	10c00104 	addi	r3,r2,4
  811080:	e0bffe17 	ldw	r2,-8(fp)
  811084:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  811088:	e0bffd17 	ldw	r2,-12(fp)
  81108c:	1005003a 	cmpeq	r2,r2,zero
  811090:	1000051e 	bne	r2,zero,8110a8 <alt_iic_isr_register+0xb8>
  811094:	e17ff917 	ldw	r5,-28(fp)
  811098:	e13ffb17 	ldw	r4,-20(fp)
  81109c:	0810e6c0 	call	810e6c <alt_ic_irq_enable>
  8110a0:	e0bfff15 	stw	r2,-4(fp)
  8110a4:	00000406 	br	8110b8 <alt_iic_isr_register+0xc8>
  8110a8:	e17ff917 	ldw	r5,-28(fp)
  8110ac:	e13ffb17 	ldw	r4,-20(fp)
  8110b0:	0810f080 	call	810f08 <alt_ic_irq_disable>
  8110b4:	e0bfff15 	stw	r2,-4(fp)
  8110b8:	e0bfff17 	ldw	r2,-4(fp)
  8110bc:	e0bffa15 	stw	r2,-24(fp)
  8110c0:	e0bff817 	ldw	r2,-32(fp)
  8110c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110c8:	e0bff617 	ldw	r2,-40(fp)
  8110cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8110d0:	e0bffa17 	ldw	r2,-24(fp)
}
  8110d4:	e037883a 	mov	sp,fp
  8110d8:	dfc00117 	ldw	ra,4(sp)
  8110dc:	df000017 	ldw	fp,0(sp)
  8110e0:	dec00204 	addi	sp,sp,8
  8110e4:	f800283a 	ret

008110e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8110e8:	deffeb04 	addi	sp,sp,-84
  8110ec:	dfc01415 	stw	ra,80(sp)
  8110f0:	df001315 	stw	fp,76(sp)
  8110f4:	df001304 	addi	fp,sp,76
  8110f8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8110fc:	e0bffd17 	ldw	r2,-12(fp)
  811100:	1004803a 	cmplt	r2,r2,zero
  811104:	1000091e 	bne	r2,zero,81112c <isatty+0x44>
  811108:	e13ffd17 	ldw	r4,-12(fp)
  81110c:	01400304 	movi	r5,12
  811110:	08102900 	call	810290 <__mulsi3>
  811114:	1007883a 	mov	r3,r2
  811118:	00802074 	movhi	r2,129
  81111c:	1096f804 	addi	r2,r2,23520
  811120:	1887883a 	add	r3,r3,r2
  811124:	e0ffff15 	stw	r3,-4(fp)
  811128:	00000106 	br	811130 <isatty+0x48>
  81112c:	e03fff15 	stw	zero,-4(fp)
  811130:	e0bfff17 	ldw	r2,-4(fp)
  811134:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  811138:	e0bfed17 	ldw	r2,-76(fp)
  81113c:	1005003a 	cmpeq	r2,r2,zero
  811140:	10000f1e 	bne	r2,zero,811180 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  811144:	e0bfed17 	ldw	r2,-76(fp)
  811148:	10800017 	ldw	r2,0(r2)
  81114c:	10800817 	ldw	r2,32(r2)
  811150:	1004c03a 	cmpne	r2,r2,zero
  811154:	1000031e 	bne	r2,zero,811164 <isatty+0x7c>
    {
      return 1;
  811158:	00800044 	movi	r2,1
  81115c:	e0bffe15 	stw	r2,-8(fp)
  811160:	00000c06 	br	811194 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  811164:	e17fee04 	addi	r5,fp,-72
  811168:	e13ffd17 	ldw	r4,-12(fp)
  81116c:	0810ce40 	call	810ce4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  811170:	e0bfef17 	ldw	r2,-68(fp)
  811174:	10880020 	cmpeqi	r2,r2,8192
  811178:	e0bffe15 	stw	r2,-8(fp)
  81117c:	00000506 	br	811194 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811180:	08111ac0 	call	8111ac <alt_get_errno>
  811184:	1007883a 	mov	r3,r2
  811188:	00801444 	movi	r2,81
  81118c:	18800015 	stw	r2,0(r3)
    return 0;
  811190:	e03ffe15 	stw	zero,-8(fp)
  811194:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811198:	e037883a 	mov	sp,fp
  81119c:	dfc00117 	ldw	ra,4(sp)
  8111a0:	df000017 	ldw	fp,0(sp)
  8111a4:	dec00204 	addi	sp,sp,8
  8111a8:	f800283a 	ret

008111ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8111ac:	defffd04 	addi	sp,sp,-12
  8111b0:	dfc00215 	stw	ra,8(sp)
  8111b4:	df000115 	stw	fp,4(sp)
  8111b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8111bc:	00802074 	movhi	r2,129
  8111c0:	109bc404 	addi	r2,r2,28432
  8111c4:	10800017 	ldw	r2,0(r2)
  8111c8:	1005003a 	cmpeq	r2,r2,zero
  8111cc:	1000061e 	bne	r2,zero,8111e8 <alt_get_errno+0x3c>
  8111d0:	00802074 	movhi	r2,129
  8111d4:	109bc404 	addi	r2,r2,28432
  8111d8:	10800017 	ldw	r2,0(r2)
  8111dc:	103ee83a 	callr	r2
  8111e0:	e0bfff15 	stw	r2,-4(fp)
  8111e4:	00000306 	br	8111f4 <alt_get_errno+0x48>
  8111e8:	008020b4 	movhi	r2,130
  8111ec:	10a2bf04 	addi	r2,r2,-29956
  8111f0:	e0bfff15 	stw	r2,-4(fp)
  8111f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8111f8:	e037883a 	mov	sp,fp
  8111fc:	dfc00117 	ldw	ra,4(sp)
  811200:	df000017 	ldw	fp,0(sp)
  811204:	dec00204 	addi	sp,sp,8
  811208:	f800283a 	ret

0081120c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  81120c:	defffe04 	addi	sp,sp,-8
  811210:	dfc00115 	stw	ra,4(sp)
  811214:	df000015 	stw	fp,0(sp)
  811218:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  81121c:	01002074 	movhi	r4,129
  811220:	211bca04 	addi	r4,r4,28456
  811224:	01402074 	movhi	r5,129
  811228:	2954db04 	addi	r5,r5,21356
  81122c:	01802074 	movhi	r6,129
  811230:	319bca04 	addi	r6,r6,28456
  811234:	081128c0 	call	81128c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  811238:	01002034 	movhi	r4,128
  81123c:	21000804 	addi	r4,r4,32
  811240:	01402034 	movhi	r5,128
  811244:	29400804 	addi	r5,r5,32
  811248:	01802034 	movhi	r6,128
  81124c:	31806d04 	addi	r6,r6,436
  811250:	081128c0 	call	81128c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  811254:	01002074 	movhi	r4,129
  811258:	21120904 	addi	r4,r4,18468
  81125c:	01402074 	movhi	r5,129
  811260:	29520904 	addi	r5,r5,18468
  811264:	01802074 	movhi	r6,129
  811268:	3194db04 	addi	r6,r6,21356
  81126c:	081128c0 	call	81128c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  811270:	0813b5c0 	call	813b5c <alt_dcache_flush_all>
  alt_icache_flush_all();
  811274:	0813fd80 	call	813fd8 <alt_icache_flush_all>
}
  811278:	e037883a 	mov	sp,fp
  81127c:	dfc00117 	ldw	ra,4(sp)
  811280:	df000017 	ldw	fp,0(sp)
  811284:	dec00204 	addi	sp,sp,8
  811288:	f800283a 	ret

0081128c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  81128c:	defffc04 	addi	sp,sp,-16
  811290:	df000315 	stw	fp,12(sp)
  811294:	df000304 	addi	fp,sp,12
  811298:	e13ffd15 	stw	r4,-12(fp)
  81129c:	e17ffe15 	stw	r5,-8(fp)
  8112a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8112a4:	e0fffe17 	ldw	r3,-8(fp)
  8112a8:	e0bffd17 	ldw	r2,-12(fp)
  8112ac:	18800e26 	beq	r3,r2,8112e8 <alt_load_section+0x5c>
  {
    while( to != end )
  8112b0:	00000a06 	br	8112dc <alt_load_section+0x50>
    {
      *to++ = *from++;
  8112b4:	e0bffd17 	ldw	r2,-12(fp)
  8112b8:	10c00017 	ldw	r3,0(r2)
  8112bc:	e0bffe17 	ldw	r2,-8(fp)
  8112c0:	10c00015 	stw	r3,0(r2)
  8112c4:	e0bffe17 	ldw	r2,-8(fp)
  8112c8:	10800104 	addi	r2,r2,4
  8112cc:	e0bffe15 	stw	r2,-8(fp)
  8112d0:	e0bffd17 	ldw	r2,-12(fp)
  8112d4:	10800104 	addi	r2,r2,4
  8112d8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8112dc:	e0fffe17 	ldw	r3,-8(fp)
  8112e0:	e0bfff17 	ldw	r2,-4(fp)
  8112e4:	18bff31e 	bne	r3,r2,8112b4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8112e8:	e037883a 	mov	sp,fp
  8112ec:	df000017 	ldw	fp,0(sp)
  8112f0:	dec00104 	addi	sp,sp,4
  8112f4:	f800283a 	ret

008112f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8112f8:	defff804 	addi	sp,sp,-32
  8112fc:	dfc00715 	stw	ra,28(sp)
  811300:	df000615 	stw	fp,24(sp)
  811304:	df000604 	addi	fp,sp,24
  811308:	e13ffc15 	stw	r4,-16(fp)
  81130c:	e17ffd15 	stw	r5,-12(fp)
  811310:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  811314:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811318:	e0bffc17 	ldw	r2,-16(fp)
  81131c:	1004803a 	cmplt	r2,r2,zero
  811320:	1000091e 	bne	r2,zero,811348 <lseek+0x50>
  811324:	e13ffc17 	ldw	r4,-16(fp)
  811328:	01400304 	movi	r5,12
  81132c:	08102900 	call	810290 <__mulsi3>
  811330:	1007883a 	mov	r3,r2
  811334:	00802074 	movhi	r2,129
  811338:	1096f804 	addi	r2,r2,23520
  81133c:	1887883a 	add	r3,r3,r2
  811340:	e0ffff15 	stw	r3,-4(fp)
  811344:	00000106 	br	81134c <lseek+0x54>
  811348:	e03fff15 	stw	zero,-4(fp)
  81134c:	e0bfff17 	ldw	r2,-4(fp)
  811350:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  811354:	e0bffb17 	ldw	r2,-20(fp)
  811358:	1005003a 	cmpeq	r2,r2,zero
  81135c:	1000111e 	bne	r2,zero,8113a4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  811360:	e0bffb17 	ldw	r2,-20(fp)
  811364:	10800017 	ldw	r2,0(r2)
  811368:	10800717 	ldw	r2,28(r2)
  81136c:	1005003a 	cmpeq	r2,r2,zero
  811370:	1000091e 	bne	r2,zero,811398 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  811374:	e0bffb17 	ldw	r2,-20(fp)
  811378:	10800017 	ldw	r2,0(r2)
  81137c:	10800717 	ldw	r2,28(r2)
  811380:	e13ffb17 	ldw	r4,-20(fp)
  811384:	e17ffd17 	ldw	r5,-12(fp)
  811388:	e1bffe17 	ldw	r6,-8(fp)
  81138c:	103ee83a 	callr	r2
  811390:	e0bffa15 	stw	r2,-24(fp)
  811394:	00000506 	br	8113ac <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  811398:	00bfde84 	movi	r2,-134
  81139c:	e0bffa15 	stw	r2,-24(fp)
  8113a0:	00000206 	br	8113ac <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  8113a4:	00bfebc4 	movi	r2,-81
  8113a8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8113ac:	e0bffa17 	ldw	r2,-24(fp)
  8113b0:	1004403a 	cmpge	r2,r2,zero
  8113b4:	1000071e 	bne	r2,zero,8113d4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  8113b8:	08113ec0 	call	8113ec <alt_get_errno>
  8113bc:	1007883a 	mov	r3,r2
  8113c0:	e0bffa17 	ldw	r2,-24(fp)
  8113c4:	0085c83a 	sub	r2,zero,r2
  8113c8:	18800015 	stw	r2,0(r3)
    rc = -1;
  8113cc:	00bfffc4 	movi	r2,-1
  8113d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8113d4:	e0bffa17 	ldw	r2,-24(fp)
}
  8113d8:	e037883a 	mov	sp,fp
  8113dc:	dfc00117 	ldw	ra,4(sp)
  8113e0:	df000017 	ldw	fp,0(sp)
  8113e4:	dec00204 	addi	sp,sp,8
  8113e8:	f800283a 	ret

008113ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8113ec:	defffd04 	addi	sp,sp,-12
  8113f0:	dfc00215 	stw	ra,8(sp)
  8113f4:	df000115 	stw	fp,4(sp)
  8113f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8113fc:	00802074 	movhi	r2,129
  811400:	109bc404 	addi	r2,r2,28432
  811404:	10800017 	ldw	r2,0(r2)
  811408:	1005003a 	cmpeq	r2,r2,zero
  81140c:	1000061e 	bne	r2,zero,811428 <alt_get_errno+0x3c>
  811410:	00802074 	movhi	r2,129
  811414:	109bc404 	addi	r2,r2,28432
  811418:	10800017 	ldw	r2,0(r2)
  81141c:	103ee83a 	callr	r2
  811420:	e0bfff15 	stw	r2,-4(fp)
  811424:	00000306 	br	811434 <alt_get_errno+0x48>
  811428:	008020b4 	movhi	r2,130
  81142c:	10a2bf04 	addi	r2,r2,-29956
  811430:	e0bfff15 	stw	r2,-4(fp)
  811434:	e0bfff17 	ldw	r2,-4(fp)
}
  811438:	e037883a 	mov	sp,fp
  81143c:	dfc00117 	ldw	ra,4(sp)
  811440:	df000017 	ldw	fp,0(sp)
  811444:	dec00204 	addi	sp,sp,8
  811448:	f800283a 	ret

0081144c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81144c:	defffd04 	addi	sp,sp,-12
  811450:	dfc00215 	stw	ra,8(sp)
  811454:	df000115 	stw	fp,4(sp)
  811458:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81145c:	0009883a 	mov	r4,zero
  811460:	0811c480 	call	811c48 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  811464:	0811c7c0 	call	811c7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  811468:	01002074 	movhi	r4,129
  81146c:	2114cc04 	addi	r4,r4,21296
  811470:	01402074 	movhi	r5,129
  811474:	2954cc04 	addi	r5,r5,21296
  811478:	01802074 	movhi	r6,129
  81147c:	3194cc04 	addi	r6,r6,21296
  811480:	08140e00 	call	8140e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  811484:	0813c8c0 	call	813c8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  811488:	01002074 	movhi	r4,129
  81148c:	210f3c04 	addi	r4,r4,15600
  811490:	08143ac0 	call	8143ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  811494:	d1270f17 	ldw	r4,-25540(gp)
  811498:	d1671017 	ldw	r5,-25536(gp)
  81149c:	d1a71117 	ldw	r6,-25532(gp)
  8114a0:	0800db00 	call	800db0 <main>
  8114a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8114a8:	01000044 	movi	r4,1
  8114ac:	0810b580 	call	810b58 <close>
  exit (result);
  8114b0:	e13fff17 	ldw	r4,-4(fp)
  8114b4:	08143c00 	call	8143c0 <exit>

008114b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8114b8:	defffe04 	addi	sp,sp,-8
  8114bc:	df000115 	stw	fp,4(sp)
  8114c0:	df000104 	addi	fp,sp,4
  8114c4:	e13fff15 	stw	r4,-4(fp)
}
  8114c8:	e037883a 	mov	sp,fp
  8114cc:	df000017 	ldw	fp,0(sp)
  8114d0:	dec00104 	addi	sp,sp,4
  8114d4:	f800283a 	ret

008114d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8114d8:	defffe04 	addi	sp,sp,-8
  8114dc:	df000115 	stw	fp,4(sp)
  8114e0:	df000104 	addi	fp,sp,4
  8114e4:	e13fff15 	stw	r4,-4(fp)
}
  8114e8:	e037883a 	mov	sp,fp
  8114ec:	df000017 	ldw	fp,0(sp)
  8114f0:	dec00104 	addi	sp,sp,4
  8114f4:	f800283a 	ret

008114f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8114f8:	defffa04 	addi	sp,sp,-24
  8114fc:	dfc00515 	stw	ra,20(sp)
  811500:	df000415 	stw	fp,16(sp)
  811504:	dc000315 	stw	r16,12(sp)
  811508:	df000304 	addi	fp,sp,12
  81150c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  811510:	e0bffe17 	ldw	r2,-8(fp)
  811514:	10800217 	ldw	r2,8(r2)
  811518:	10d00034 	orhi	r3,r2,16384
  81151c:	e0bffe17 	ldw	r2,-8(fp)
  811520:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811524:	e03ffd15 	stw	zero,-12(fp)
  811528:	00002306 	br	8115b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81152c:	e13ffd17 	ldw	r4,-12(fp)
  811530:	04002074 	movhi	r16,129
  811534:	8416f804 	addi	r16,r16,23520
  811538:	01400304 	movi	r5,12
  81153c:	08102900 	call	810290 <__mulsi3>
  811540:	1405883a 	add	r2,r2,r16
  811544:	10c00017 	ldw	r3,0(r2)
  811548:	e0bffe17 	ldw	r2,-8(fp)
  81154c:	10800017 	ldw	r2,0(r2)
  811550:	1880161e 	bne	r3,r2,8115ac <alt_file_locked+0xb4>
  811554:	e13ffd17 	ldw	r4,-12(fp)
  811558:	04002074 	movhi	r16,129
  81155c:	8416f804 	addi	r16,r16,23520
  811560:	01400304 	movi	r5,12
  811564:	08102900 	call	810290 <__mulsi3>
  811568:	1405883a 	add	r2,r2,r16
  81156c:	10800204 	addi	r2,r2,8
  811570:	10800017 	ldw	r2,0(r2)
  811574:	1004403a 	cmpge	r2,r2,zero
  811578:	10000c1e 	bne	r2,zero,8115ac <alt_file_locked+0xb4>
  81157c:	e13ffd17 	ldw	r4,-12(fp)
  811580:	01400304 	movi	r5,12
  811584:	08102900 	call	810290 <__mulsi3>
  811588:	1007883a 	mov	r3,r2
  81158c:	00802074 	movhi	r2,129
  811590:	1096f804 	addi	r2,r2,23520
  811594:	1887883a 	add	r3,r3,r2
  811598:	e0bffe17 	ldw	r2,-8(fp)
  81159c:	18800326 	beq	r3,r2,8115ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8115a0:	00bffcc4 	movi	r2,-13
  8115a4:	e0bfff15 	stw	r2,-4(fp)
  8115a8:	00000a06 	br	8115d4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8115ac:	e0bffd17 	ldw	r2,-12(fp)
  8115b0:	10800044 	addi	r2,r2,1
  8115b4:	e0bffd15 	stw	r2,-12(fp)
  8115b8:	00802074 	movhi	r2,129
  8115bc:	109bc304 	addi	r2,r2,28428
  8115c0:	10800017 	ldw	r2,0(r2)
  8115c4:	1007883a 	mov	r3,r2
  8115c8:	e0bffd17 	ldw	r2,-12(fp)
  8115cc:	18bfd72e 	bgeu	r3,r2,81152c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8115d0:	e03fff15 	stw	zero,-4(fp)
  8115d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8115d8:	e037883a 	mov	sp,fp
  8115dc:	dfc00217 	ldw	ra,8(sp)
  8115e0:	df000117 	ldw	fp,4(sp)
  8115e4:	dc000017 	ldw	r16,0(sp)
  8115e8:	dec00304 	addi	sp,sp,12
  8115ec:	f800283a 	ret

008115f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8115f0:	defff404 	addi	sp,sp,-48
  8115f4:	dfc00b15 	stw	ra,44(sp)
  8115f8:	df000a15 	stw	fp,40(sp)
  8115fc:	df000a04 	addi	fp,sp,40
  811600:	e13ffb15 	stw	r4,-20(fp)
  811604:	e17ffc15 	stw	r5,-16(fp)
  811608:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81160c:	00bfffc4 	movi	r2,-1
  811610:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  811614:	00bffb44 	movi	r2,-19
  811618:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81161c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811620:	e13ffb17 	ldw	r4,-20(fp)
  811624:	01402074 	movhi	r5,129
  811628:	295bc104 	addi	r5,r5,28420
  81162c:	0813d540 	call	813d54 <alt_find_dev>
  811630:	e0bffa15 	stw	r2,-24(fp)
  811634:	e0bffa17 	ldw	r2,-24(fp)
  811638:	1004c03a 	cmpne	r2,r2,zero
  81163c:	1000051e 	bne	r2,zero,811654 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811640:	e13ffb17 	ldw	r4,-20(fp)
  811644:	0813de80 	call	813de8 <alt_find_file>
  811648:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81164c:	00800044 	movi	r2,1
  811650:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811654:	e0bffa17 	ldw	r2,-24(fp)
  811658:	1005003a 	cmpeq	r2,r2,zero
  81165c:	1000311e 	bne	r2,zero,811724 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811660:	e13ffa17 	ldw	r4,-24(fp)
  811664:	0813f080 	call	813f08 <alt_get_fd>
  811668:	e0bff815 	stw	r2,-32(fp)
  81166c:	e0bff817 	ldw	r2,-32(fp)
  811670:	1004403a 	cmpge	r2,r2,zero
  811674:	1000031e 	bne	r2,zero,811684 <open+0x94>
    {
      status = index;
  811678:	e0bff817 	ldw	r2,-32(fp)
  81167c:	e0bff715 	stw	r2,-36(fp)
  811680:	00002a06 	br	81172c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811684:	e13ff817 	ldw	r4,-32(fp)
  811688:	01400304 	movi	r5,12
  81168c:	08102900 	call	810290 <__mulsi3>
  811690:	1007883a 	mov	r3,r2
  811694:	00802074 	movhi	r2,129
  811698:	1096f804 	addi	r2,r2,23520
  81169c:	1885883a 	add	r2,r3,r2
  8116a0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8116a4:	e0fffc17 	ldw	r3,-16(fp)
  8116a8:	00900034 	movhi	r2,16384
  8116ac:	10bfffc4 	addi	r2,r2,-1
  8116b0:	1886703a 	and	r3,r3,r2
  8116b4:	e0bff917 	ldw	r2,-28(fp)
  8116b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8116bc:	e0bff617 	ldw	r2,-40(fp)
  8116c0:	1004c03a 	cmpne	r2,r2,zero
  8116c4:	1000061e 	bne	r2,zero,8116e0 <open+0xf0>
  8116c8:	e13ff917 	ldw	r4,-28(fp)
  8116cc:	08114f80 	call	8114f8 <alt_file_locked>
  8116d0:	e0bff715 	stw	r2,-36(fp)
  8116d4:	e0bff717 	ldw	r2,-36(fp)
  8116d8:	1004803a 	cmplt	r2,r2,zero
  8116dc:	1000131e 	bne	r2,zero,81172c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8116e0:	e0bffa17 	ldw	r2,-24(fp)
  8116e4:	10800317 	ldw	r2,12(r2)
  8116e8:	1005003a 	cmpeq	r2,r2,zero
  8116ec:	1000091e 	bne	r2,zero,811714 <open+0x124>
  8116f0:	e0bffa17 	ldw	r2,-24(fp)
  8116f4:	10800317 	ldw	r2,12(r2)
  8116f8:	e13ff917 	ldw	r4,-28(fp)
  8116fc:	e17ffb17 	ldw	r5,-20(fp)
  811700:	e1bffc17 	ldw	r6,-16(fp)
  811704:	e1fffd17 	ldw	r7,-12(fp)
  811708:	103ee83a 	callr	r2
  81170c:	e0bfff15 	stw	r2,-4(fp)
  811710:	00000106 	br	811718 <open+0x128>
  811714:	e03fff15 	stw	zero,-4(fp)
  811718:	e0bfff17 	ldw	r2,-4(fp)
  81171c:	e0bff715 	stw	r2,-36(fp)
  811720:	00000206 	br	81172c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811724:	00bffb44 	movi	r2,-19
  811728:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81172c:	e0bff717 	ldw	r2,-36(fp)
  811730:	1004403a 	cmpge	r2,r2,zero
  811734:	1000091e 	bne	r2,zero,81175c <open+0x16c>
  {
    alt_release_fd (index);  
  811738:	e13ff817 	ldw	r4,-32(fp)
  81173c:	08119600 	call	811960 <alt_release_fd>
    ALT_ERRNO = -status;
  811740:	081177c0 	call	81177c <alt_get_errno>
  811744:	e0fff717 	ldw	r3,-36(fp)
  811748:	00c7c83a 	sub	r3,zero,r3
  81174c:	10c00015 	stw	r3,0(r2)
    return -1;
  811750:	00bfffc4 	movi	r2,-1
  811754:	e0bffe15 	stw	r2,-8(fp)
  811758:	00000206 	br	811764 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  81175c:	e0bff817 	ldw	r2,-32(fp)
  811760:	e0bffe15 	stw	r2,-8(fp)
  811764:	e0bffe17 	ldw	r2,-8(fp)
}
  811768:	e037883a 	mov	sp,fp
  81176c:	dfc00117 	ldw	ra,4(sp)
  811770:	df000017 	ldw	fp,0(sp)
  811774:	dec00204 	addi	sp,sp,8
  811778:	f800283a 	ret

0081177c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81177c:	defffd04 	addi	sp,sp,-12
  811780:	dfc00215 	stw	ra,8(sp)
  811784:	df000115 	stw	fp,4(sp)
  811788:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81178c:	00802074 	movhi	r2,129
  811790:	109bc404 	addi	r2,r2,28432
  811794:	10800017 	ldw	r2,0(r2)
  811798:	1005003a 	cmpeq	r2,r2,zero
  81179c:	1000061e 	bne	r2,zero,8117b8 <alt_get_errno+0x3c>
  8117a0:	00802074 	movhi	r2,129
  8117a4:	109bc404 	addi	r2,r2,28432
  8117a8:	10800017 	ldw	r2,0(r2)
  8117ac:	103ee83a 	callr	r2
  8117b0:	e0bfff15 	stw	r2,-4(fp)
  8117b4:	00000306 	br	8117c4 <alt_get_errno+0x48>
  8117b8:	008020b4 	movhi	r2,130
  8117bc:	10a2bf04 	addi	r2,r2,-29956
  8117c0:	e0bfff15 	stw	r2,-4(fp)
  8117c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8117c8:	e037883a 	mov	sp,fp
  8117cc:	dfc00117 	ldw	ra,4(sp)
  8117d0:	df000017 	ldw	fp,0(sp)
  8117d4:	dec00204 	addi	sp,sp,8
  8117d8:	f800283a 	ret

008117dc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8117dc:	defff704 	addi	sp,sp,-36
  8117e0:	dfc00815 	stw	ra,32(sp)
  8117e4:	df000715 	stw	fp,28(sp)
  8117e8:	df000704 	addi	fp,sp,28
  8117ec:	e13ffb15 	stw	r4,-20(fp)
  8117f0:	e17ffc15 	stw	r5,-16(fp)
  8117f4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8117f8:	e0bffb17 	ldw	r2,-20(fp)
  8117fc:	1004803a 	cmplt	r2,r2,zero
  811800:	1000091e 	bne	r2,zero,811828 <read+0x4c>
  811804:	e13ffb17 	ldw	r4,-20(fp)
  811808:	01400304 	movi	r5,12
  81180c:	08102900 	call	810290 <__mulsi3>
  811810:	1007883a 	mov	r3,r2
  811814:	00802074 	movhi	r2,129
  811818:	1096f804 	addi	r2,r2,23520
  81181c:	1887883a 	add	r3,r3,r2
  811820:	e0ffff15 	stw	r3,-4(fp)
  811824:	00000106 	br	81182c <read+0x50>
  811828:	e03fff15 	stw	zero,-4(fp)
  81182c:	e0bfff17 	ldw	r2,-4(fp)
  811830:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811834:	e0bffa17 	ldw	r2,-24(fp)
  811838:	1005003a 	cmpeq	r2,r2,zero
  81183c:	1000241e 	bne	r2,zero,8118d0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811840:	e0bffa17 	ldw	r2,-24(fp)
  811844:	10800217 	ldw	r2,8(r2)
  811848:	108000cc 	andi	r2,r2,3
  81184c:	10800060 	cmpeqi	r2,r2,1
  811850:	10001a1e 	bne	r2,zero,8118bc <read+0xe0>
  811854:	e0bffa17 	ldw	r2,-24(fp)
  811858:	10800017 	ldw	r2,0(r2)
  81185c:	10800517 	ldw	r2,20(r2)
  811860:	1005003a 	cmpeq	r2,r2,zero
  811864:	1000151e 	bne	r2,zero,8118bc <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811868:	e0bffa17 	ldw	r2,-24(fp)
  81186c:	10800017 	ldw	r2,0(r2)
  811870:	10800517 	ldw	r2,20(r2)
  811874:	e17ffc17 	ldw	r5,-16(fp)
  811878:	e1bffd17 	ldw	r6,-12(fp)
  81187c:	e13ffa17 	ldw	r4,-24(fp)
  811880:	103ee83a 	callr	r2
  811884:	e0bff915 	stw	r2,-28(fp)
  811888:	e0bff917 	ldw	r2,-28(fp)
  81188c:	1004403a 	cmpge	r2,r2,zero
  811890:	1000071e 	bne	r2,zero,8118b0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  811894:	08119000 	call	811900 <alt_get_errno>
  811898:	e0fff917 	ldw	r3,-28(fp)
  81189c:	00c7c83a 	sub	r3,zero,r3
  8118a0:	10c00015 	stw	r3,0(r2)
          return -1;
  8118a4:	00bfffc4 	movi	r2,-1
  8118a8:	e0bffe15 	stw	r2,-8(fp)
  8118ac:	00000e06 	br	8118e8 <read+0x10c>
        }
        return rval;
  8118b0:	e0bff917 	ldw	r2,-28(fp)
  8118b4:	e0bffe15 	stw	r2,-8(fp)
  8118b8:	00000b06 	br	8118e8 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8118bc:	08119000 	call	811900 <alt_get_errno>
  8118c0:	1007883a 	mov	r3,r2
  8118c4:	00800344 	movi	r2,13
  8118c8:	18800015 	stw	r2,0(r3)
  8118cc:	00000406 	br	8118e0 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8118d0:	08119000 	call	811900 <alt_get_errno>
  8118d4:	1007883a 	mov	r3,r2
  8118d8:	00801444 	movi	r2,81
  8118dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8118e0:	00bfffc4 	movi	r2,-1
  8118e4:	e0bffe15 	stw	r2,-8(fp)
  8118e8:	e0bffe17 	ldw	r2,-8(fp)
}
  8118ec:	e037883a 	mov	sp,fp
  8118f0:	dfc00117 	ldw	ra,4(sp)
  8118f4:	df000017 	ldw	fp,0(sp)
  8118f8:	dec00204 	addi	sp,sp,8
  8118fc:	f800283a 	ret

00811900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811900:	defffd04 	addi	sp,sp,-12
  811904:	dfc00215 	stw	ra,8(sp)
  811908:	df000115 	stw	fp,4(sp)
  81190c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811910:	00802074 	movhi	r2,129
  811914:	109bc404 	addi	r2,r2,28432
  811918:	10800017 	ldw	r2,0(r2)
  81191c:	1005003a 	cmpeq	r2,r2,zero
  811920:	1000061e 	bne	r2,zero,81193c <alt_get_errno+0x3c>
  811924:	00802074 	movhi	r2,129
  811928:	109bc404 	addi	r2,r2,28432
  81192c:	10800017 	ldw	r2,0(r2)
  811930:	103ee83a 	callr	r2
  811934:	e0bfff15 	stw	r2,-4(fp)
  811938:	00000306 	br	811948 <alt_get_errno+0x48>
  81193c:	008020b4 	movhi	r2,130
  811940:	10a2bf04 	addi	r2,r2,-29956
  811944:	e0bfff15 	stw	r2,-4(fp)
  811948:	e0bfff17 	ldw	r2,-4(fp)
}
  81194c:	e037883a 	mov	sp,fp
  811950:	dfc00117 	ldw	ra,4(sp)
  811954:	df000017 	ldw	fp,0(sp)
  811958:	dec00204 	addi	sp,sp,8
  81195c:	f800283a 	ret

00811960 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  811960:	defffc04 	addi	sp,sp,-16
  811964:	dfc00315 	stw	ra,12(sp)
  811968:	df000215 	stw	fp,8(sp)
  81196c:	dc000115 	stw	r16,4(sp)
  811970:	df000104 	addi	fp,sp,4
  811974:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  811978:	e0bfff17 	ldw	r2,-4(fp)
  81197c:	108000d0 	cmplti	r2,r2,3
  811980:	10000f1e 	bne	r2,zero,8119c0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  811984:	e13fff17 	ldw	r4,-4(fp)
  811988:	04002074 	movhi	r16,129
  81198c:	8416f804 	addi	r16,r16,23520
  811990:	01400304 	movi	r5,12
  811994:	08102900 	call	810290 <__mulsi3>
  811998:	1405883a 	add	r2,r2,r16
  81199c:	10800204 	addi	r2,r2,8
  8119a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8119a4:	e13fff17 	ldw	r4,-4(fp)
  8119a8:	04002074 	movhi	r16,129
  8119ac:	8416f804 	addi	r16,r16,23520
  8119b0:	01400304 	movi	r5,12
  8119b4:	08102900 	call	810290 <__mulsi3>
  8119b8:	1405883a 	add	r2,r2,r16
  8119bc:	10000015 	stw	zero,0(r2)
  }
}
  8119c0:	e037883a 	mov	sp,fp
  8119c4:	dfc00217 	ldw	ra,8(sp)
  8119c8:	df000117 	ldw	fp,4(sp)
  8119cc:	dc000017 	ldw	r16,0(sp)
  8119d0:	dec00304 	addi	sp,sp,12
  8119d4:	f800283a 	ret

008119d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8119d8:	defff804 	addi	sp,sp,-32
  8119dc:	df000715 	stw	fp,28(sp)
  8119e0:	df000704 	addi	fp,sp,28
  8119e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8119e8:	0005303a 	rdctl	r2,status
  8119ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119f0:	e0fffb17 	ldw	r3,-20(fp)
  8119f4:	00bfff84 	movi	r2,-2
  8119f8:	1884703a 	and	r2,r3,r2
  8119fc:	1001703a 	wrctl	status,r2
  
  return context;
  811a00:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811a04:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811a08:	d0a00e17 	ldw	r2,-32712(gp)
  811a0c:	10c000c4 	addi	r3,r2,3
  811a10:	00bfff04 	movi	r2,-4
  811a14:	1884703a 	and	r2,r3,r2
  811a18:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811a1c:	d0e00e17 	ldw	r3,-32712(gp)
  811a20:	e0bffe17 	ldw	r2,-8(fp)
  811a24:	1887883a 	add	r3,r3,r2
  811a28:	00804034 	movhi	r2,256
  811a2c:	10800004 	addi	r2,r2,0
  811a30:	10c0072e 	bgeu	r2,r3,811a50 <sbrk+0x78>
  811a34:	e0bffd17 	ldw	r2,-12(fp)
  811a38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a3c:	e0bffa17 	ldw	r2,-24(fp)
  811a40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811a44:	00bfffc4 	movi	r2,-1
  811a48:	e0bfff15 	stw	r2,-4(fp)
  811a4c:	00000c06 	br	811a80 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  811a50:	d0a00e17 	ldw	r2,-32712(gp)
  811a54:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811a58:	d0e00e17 	ldw	r3,-32712(gp)
  811a5c:	e0bffe17 	ldw	r2,-8(fp)
  811a60:	1885883a 	add	r2,r3,r2
  811a64:	d0a00e15 	stw	r2,-32712(gp)
  811a68:	e0bffd17 	ldw	r2,-12(fp)
  811a6c:	e0bff915 	stw	r2,-28(fp)
  811a70:	e0bff917 	ldw	r2,-28(fp)
  811a74:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  811a78:	e0bffc17 	ldw	r2,-16(fp)
  811a7c:	e0bfff15 	stw	r2,-4(fp)
  811a80:	e0bfff17 	ldw	r2,-4(fp)
} 
  811a84:	e037883a 	mov	sp,fp
  811a88:	df000017 	ldw	fp,0(sp)
  811a8c:	dec00104 	addi	sp,sp,4
  811a90:	f800283a 	ret

00811a94 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  811a94:	defffd04 	addi	sp,sp,-12
  811a98:	dfc00215 	stw	ra,8(sp)
  811a9c:	df000115 	stw	fp,4(sp)
  811aa0:	df000104 	addi	fp,sp,4
  811aa4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  811aa8:	e13fff17 	ldw	r4,-4(fp)
  811aac:	0813a000 	call	813a00 <alt_busy_sleep>
}
  811ab0:	e037883a 	mov	sp,fp
  811ab4:	dfc00117 	ldw	ra,4(sp)
  811ab8:	df000017 	ldw	fp,0(sp)
  811abc:	dec00204 	addi	sp,sp,8
  811ac0:	f800283a 	ret

00811ac4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811ac4:	defff704 	addi	sp,sp,-36
  811ac8:	dfc00815 	stw	ra,32(sp)
  811acc:	df000715 	stw	fp,28(sp)
  811ad0:	df000704 	addi	fp,sp,28
  811ad4:	e13ffb15 	stw	r4,-20(fp)
  811ad8:	e17ffc15 	stw	r5,-16(fp)
  811adc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811ae0:	e0bffb17 	ldw	r2,-20(fp)
  811ae4:	1004803a 	cmplt	r2,r2,zero
  811ae8:	1000091e 	bne	r2,zero,811b10 <write+0x4c>
  811aec:	e13ffb17 	ldw	r4,-20(fp)
  811af0:	01400304 	movi	r5,12
  811af4:	08102900 	call	810290 <__mulsi3>
  811af8:	1007883a 	mov	r3,r2
  811afc:	00802074 	movhi	r2,129
  811b00:	1096f804 	addi	r2,r2,23520
  811b04:	1887883a 	add	r3,r3,r2
  811b08:	e0ffff15 	stw	r3,-4(fp)
  811b0c:	00000106 	br	811b14 <write+0x50>
  811b10:	e03fff15 	stw	zero,-4(fp)
  811b14:	e0bfff17 	ldw	r2,-4(fp)
  811b18:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811b1c:	e0bffa17 	ldw	r2,-24(fp)
  811b20:	1005003a 	cmpeq	r2,r2,zero
  811b24:	1000241e 	bne	r2,zero,811bb8 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  811b28:	e0bffa17 	ldw	r2,-24(fp)
  811b2c:	10800217 	ldw	r2,8(r2)
  811b30:	108000cc 	andi	r2,r2,3
  811b34:	1005003a 	cmpeq	r2,r2,zero
  811b38:	10001a1e 	bne	r2,zero,811ba4 <write+0xe0>
  811b3c:	e0bffa17 	ldw	r2,-24(fp)
  811b40:	10800017 	ldw	r2,0(r2)
  811b44:	10800617 	ldw	r2,24(r2)
  811b48:	1005003a 	cmpeq	r2,r2,zero
  811b4c:	1000151e 	bne	r2,zero,811ba4 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  811b50:	e0bffa17 	ldw	r2,-24(fp)
  811b54:	10800017 	ldw	r2,0(r2)
  811b58:	10800617 	ldw	r2,24(r2)
  811b5c:	e17ffc17 	ldw	r5,-16(fp)
  811b60:	e1bffd17 	ldw	r6,-12(fp)
  811b64:	e13ffa17 	ldw	r4,-24(fp)
  811b68:	103ee83a 	callr	r2
  811b6c:	e0bff915 	stw	r2,-28(fp)
  811b70:	e0bff917 	ldw	r2,-28(fp)
  811b74:	1004403a 	cmpge	r2,r2,zero
  811b78:	1000071e 	bne	r2,zero,811b98 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  811b7c:	0811be80 	call	811be8 <alt_get_errno>
  811b80:	e0fff917 	ldw	r3,-28(fp)
  811b84:	00c7c83a 	sub	r3,zero,r3
  811b88:	10c00015 	stw	r3,0(r2)
        return -1;
  811b8c:	00bfffc4 	movi	r2,-1
  811b90:	e0bffe15 	stw	r2,-8(fp)
  811b94:	00000e06 	br	811bd0 <write+0x10c>
      }
      return rval;
  811b98:	e0bff917 	ldw	r2,-28(fp)
  811b9c:	e0bffe15 	stw	r2,-8(fp)
  811ba0:	00000b06 	br	811bd0 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  811ba4:	0811be80 	call	811be8 <alt_get_errno>
  811ba8:	1007883a 	mov	r3,r2
  811bac:	00800344 	movi	r2,13
  811bb0:	18800015 	stw	r2,0(r3)
  811bb4:	00000406 	br	811bc8 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  811bb8:	0811be80 	call	811be8 <alt_get_errno>
  811bbc:	1007883a 	mov	r3,r2
  811bc0:	00801444 	movi	r2,81
  811bc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811bc8:	00bfffc4 	movi	r2,-1
  811bcc:	e0bffe15 	stw	r2,-8(fp)
  811bd0:	e0bffe17 	ldw	r2,-8(fp)
}
  811bd4:	e037883a 	mov	sp,fp
  811bd8:	dfc00117 	ldw	ra,4(sp)
  811bdc:	df000017 	ldw	fp,0(sp)
  811be0:	dec00204 	addi	sp,sp,8
  811be4:	f800283a 	ret

00811be8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811be8:	defffd04 	addi	sp,sp,-12
  811bec:	dfc00215 	stw	ra,8(sp)
  811bf0:	df000115 	stw	fp,4(sp)
  811bf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811bf8:	00802074 	movhi	r2,129
  811bfc:	109bc404 	addi	r2,r2,28432
  811c00:	10800017 	ldw	r2,0(r2)
  811c04:	1005003a 	cmpeq	r2,r2,zero
  811c08:	1000061e 	bne	r2,zero,811c24 <alt_get_errno+0x3c>
  811c0c:	00802074 	movhi	r2,129
  811c10:	109bc404 	addi	r2,r2,28432
  811c14:	10800017 	ldw	r2,0(r2)
  811c18:	103ee83a 	callr	r2
  811c1c:	e0bfff15 	stw	r2,-4(fp)
  811c20:	00000306 	br	811c30 <alt_get_errno+0x48>
  811c24:	008020b4 	movhi	r2,130
  811c28:	10a2bf04 	addi	r2,r2,-29956
  811c2c:	e0bfff15 	stw	r2,-4(fp)
  811c30:	e0bfff17 	ldw	r2,-4(fp)
}
  811c34:	e037883a 	mov	sp,fp
  811c38:	dfc00117 	ldw	ra,4(sp)
  811c3c:	df000017 	ldw	fp,0(sp)
  811c40:	dec00204 	addi	sp,sp,8
  811c44:	f800283a 	ret

00811c48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  811c48:	defffd04 	addi	sp,sp,-12
  811c4c:	dfc00215 	stw	ra,8(sp)
  811c50:	df000115 	stw	fp,4(sp)
  811c54:	df000104 	addi	fp,sp,4
  811c58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  811c5c:	08142fc0 	call	8142fc <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  811c60:	00800044 	movi	r2,1
  811c64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  811c68:	e037883a 	mov	sp,fp
  811c6c:	dfc00117 	ldw	ra,4(sp)
  811c70:	df000017 	ldw	fp,0(sp)
  811c74:	dec00204 	addi	sp,sp,8
  811c78:	f800283a 	ret

00811c7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811c7c:	defffe04 	addi	sp,sp,-8
  811c80:	dfc00115 	stw	ra,4(sp)
  811c84:	df000015 	stw	fp,0(sp)
  811c88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  811c8c:	01004034 	movhi	r4,256
  811c90:	21040004 	addi	r4,r4,4096
  811c94:	000b883a 	mov	r5,zero
  811c98:	01800084 	movi	r6,2
  811c9c:	01c0fa04 	movi	r7,1000
  811ca0:	081381c0 	call	81381c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  811ca4:	01002074 	movhi	r4,129
  811ca8:	21176204 	addi	r4,r4,23944
  811cac:	000b883a 	mov	r5,zero
  811cb0:	000d883a 	mov	r6,zero
  811cb4:	0811e700 	call	811e70 <altera_avalon_jtag_uart_init>
  811cb8:	01002074 	movhi	r4,129
  811cbc:	21175804 	addi	r4,r4,23904
  811cc0:	0811cf00 	call	811cf0 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  811cc4:	01002074 	movhi	r4,129
  811cc8:	211b7a04 	addi	r4,r4,28136
  811ccc:	08136180 	call	813618 <altera_avalon_lcd_16207_init>
  811cd0:	01002074 	movhi	r4,129
  811cd4:	211b7004 	addi	r4,r4,28096
  811cd8:	0811cf00 	call	811cf0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
  811cdc:	e037883a 	mov	sp,fp
  811ce0:	dfc00117 	ldw	ra,4(sp)
  811ce4:	df000017 	ldw	fp,0(sp)
  811ce8:	dec00204 	addi	sp,sp,8
  811cec:	f800283a 	ret

00811cf0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  811cf0:	defffd04 	addi	sp,sp,-12
  811cf4:	dfc00215 	stw	ra,8(sp)
  811cf8:	df000115 	stw	fp,4(sp)
  811cfc:	df000104 	addi	fp,sp,4
  811d00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  811d04:	e13fff17 	ldw	r4,-4(fp)
  811d08:	01402074 	movhi	r5,129
  811d0c:	295bc104 	addi	r5,r5,28420
  811d10:	0813b780 	call	813b78 <alt_dev_llist_insert>
}
  811d14:	e037883a 	mov	sp,fp
  811d18:	dfc00117 	ldw	ra,4(sp)
  811d1c:	df000017 	ldw	fp,0(sp)
  811d20:	dec00204 	addi	sp,sp,8
  811d24:	f800283a 	ret

00811d28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811d28:	defffa04 	addi	sp,sp,-24
  811d2c:	dfc00515 	stw	ra,20(sp)
  811d30:	df000415 	stw	fp,16(sp)
  811d34:	df000404 	addi	fp,sp,16
  811d38:	e13ffd15 	stw	r4,-12(fp)
  811d3c:	e17ffe15 	stw	r5,-8(fp)
  811d40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811d44:	e0bffd17 	ldw	r2,-12(fp)
  811d48:	10800017 	ldw	r2,0(r2)
  811d4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811d50:	e0bffc17 	ldw	r2,-16(fp)
  811d54:	11000a04 	addi	r4,r2,40
  811d58:	e0bffd17 	ldw	r2,-12(fp)
  811d5c:	11c00217 	ldw	r7,8(r2)
  811d60:	e17ffe17 	ldw	r5,-8(fp)
  811d64:	e1bfff17 	ldw	r6,-4(fp)
  811d68:	08123700 	call	812370 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811d6c:	e037883a 	mov	sp,fp
  811d70:	dfc00117 	ldw	ra,4(sp)
  811d74:	df000017 	ldw	fp,0(sp)
  811d78:	dec00204 	addi	sp,sp,8
  811d7c:	f800283a 	ret

00811d80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811d80:	defffa04 	addi	sp,sp,-24
  811d84:	dfc00515 	stw	ra,20(sp)
  811d88:	df000415 	stw	fp,16(sp)
  811d8c:	df000404 	addi	fp,sp,16
  811d90:	e13ffd15 	stw	r4,-12(fp)
  811d94:	e17ffe15 	stw	r5,-8(fp)
  811d98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811d9c:	e0bffd17 	ldw	r2,-12(fp)
  811da0:	10800017 	ldw	r2,0(r2)
  811da4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811da8:	e0bffc17 	ldw	r2,-16(fp)
  811dac:	11000a04 	addi	r4,r2,40
  811db0:	e0bffd17 	ldw	r2,-12(fp)
  811db4:	11c00217 	ldw	r7,8(r2)
  811db8:	e17ffe17 	ldw	r5,-8(fp)
  811dbc:	e1bfff17 	ldw	r6,-4(fp)
  811dc0:	08125940 	call	812594 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811dc4:	e037883a 	mov	sp,fp
  811dc8:	dfc00117 	ldw	ra,4(sp)
  811dcc:	df000017 	ldw	fp,0(sp)
  811dd0:	dec00204 	addi	sp,sp,8
  811dd4:	f800283a 	ret

00811dd8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  811dd8:	defffc04 	addi	sp,sp,-16
  811ddc:	dfc00315 	stw	ra,12(sp)
  811de0:	df000215 	stw	fp,8(sp)
  811de4:	df000204 	addi	fp,sp,8
  811de8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811dec:	e0bfff17 	ldw	r2,-4(fp)
  811df0:	10800017 	ldw	r2,0(r2)
  811df4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  811df8:	e0bffe17 	ldw	r2,-8(fp)
  811dfc:	11000a04 	addi	r4,r2,40
  811e00:	e0bfff17 	ldw	r2,-4(fp)
  811e04:	11400217 	ldw	r5,8(r2)
  811e08:	08122080 	call	812208 <altera_avalon_jtag_uart_close>
}
  811e0c:	e037883a 	mov	sp,fp
  811e10:	dfc00117 	ldw	ra,4(sp)
  811e14:	df000017 	ldw	fp,0(sp)
  811e18:	dec00204 	addi	sp,sp,8
  811e1c:	f800283a 	ret

00811e20 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811e20:	defffa04 	addi	sp,sp,-24
  811e24:	dfc00515 	stw	ra,20(sp)
  811e28:	df000415 	stw	fp,16(sp)
  811e2c:	df000404 	addi	fp,sp,16
  811e30:	e13ffd15 	stw	r4,-12(fp)
  811e34:	e17ffe15 	stw	r5,-8(fp)
  811e38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811e3c:	e0bffd17 	ldw	r2,-12(fp)
  811e40:	10800017 	ldw	r2,0(r2)
  811e44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811e48:	e0bffc17 	ldw	r2,-16(fp)
  811e4c:	11000a04 	addi	r4,r2,40
  811e50:	e17ffe17 	ldw	r5,-8(fp)
  811e54:	e1bfff17 	ldw	r6,-4(fp)
  811e58:	081227c0 	call	81227c <altera_avalon_jtag_uart_ioctl>
}
  811e5c:	e037883a 	mov	sp,fp
  811e60:	dfc00117 	ldw	ra,4(sp)
  811e64:	df000017 	ldw	fp,0(sp)
  811e68:	dec00204 	addi	sp,sp,8
  811e6c:	f800283a 	ret

00811e70 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811e70:	defffa04 	addi	sp,sp,-24
  811e74:	dfc00515 	stw	ra,20(sp)
  811e78:	df000415 	stw	fp,16(sp)
  811e7c:	df000404 	addi	fp,sp,16
  811e80:	e13ffd15 	stw	r4,-12(fp)
  811e84:	e17ffe15 	stw	r5,-8(fp)
  811e88:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811e8c:	e0fffd17 	ldw	r3,-12(fp)
  811e90:	00800044 	movi	r2,1
  811e94:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811e98:	e0bffd17 	ldw	r2,-12(fp)
  811e9c:	10800017 	ldw	r2,0(r2)
  811ea0:	11000104 	addi	r4,r2,4
  811ea4:	e0bffd17 	ldw	r2,-12(fp)
  811ea8:	10800817 	ldw	r2,32(r2)
  811eac:	1007883a 	mov	r3,r2
  811eb0:	2005883a 	mov	r2,r4
  811eb4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811eb8:	e13ffe17 	ldw	r4,-8(fp)
  811ebc:	e17fff17 	ldw	r5,-4(fp)
  811ec0:	d8000015 	stw	zero,0(sp)
  811ec4:	01802074 	movhi	r6,129
  811ec8:	3187cc04 	addi	r6,r6,7984
  811ecc:	e1fffd17 	ldw	r7,-12(fp)
  811ed0:	0810e1c0 	call	810e1c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811ed4:	e0bffd17 	ldw	r2,-12(fp)
  811ed8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811edc:	e0bffd17 	ldw	r2,-12(fp)
  811ee0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811ee4:	008020b4 	movhi	r2,130
  811ee8:	10a2ca04 	addi	r2,r2,-29912
  811eec:	10800017 	ldw	r2,0(r2)
  811ef0:	100b883a 	mov	r5,r2
  811ef4:	01802074 	movhi	r6,129
  811ef8:	31885604 	addi	r6,r6,8536
  811efc:	e1fffd17 	ldw	r7,-12(fp)
  811f00:	08138ac0 	call	8138ac <alt_alarm_start>
  811f04:	1004403a 	cmpge	r2,r2,zero
  811f08:	1000041e 	bne	r2,zero,811f1c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811f0c:	e0fffd17 	ldw	r3,-12(fp)
  811f10:	00a00034 	movhi	r2,32768
  811f14:	10bfffc4 	addi	r2,r2,-1
  811f18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811f1c:	e037883a 	mov	sp,fp
  811f20:	dfc00117 	ldw	ra,4(sp)
  811f24:	df000017 	ldw	fp,0(sp)
  811f28:	dec00204 	addi	sp,sp,8
  811f2c:	f800283a 	ret

00811f30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811f30:	defff804 	addi	sp,sp,-32
  811f34:	df000715 	stw	fp,28(sp)
  811f38:	df000704 	addi	fp,sp,28
  811f3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811f40:	e0bfff17 	ldw	r2,-4(fp)
  811f44:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  811f48:	e0bffe17 	ldw	r2,-8(fp)
  811f4c:	10800017 	ldw	r2,0(r2)
  811f50:	e0bffd15 	stw	r2,-12(fp)
  811f54:	00000006 	br	811f58 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811f58:	e0bffd17 	ldw	r2,-12(fp)
  811f5c:	10800104 	addi	r2,r2,4
  811f60:	10800037 	ldwio	r2,0(r2)
  811f64:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811f68:	e0bffc17 	ldw	r2,-16(fp)
  811f6c:	1080c00c 	andi	r2,r2,768
  811f70:	1005003a 	cmpeq	r2,r2,zero
  811f74:	1000741e 	bne	r2,zero,812148 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811f78:	e0bffc17 	ldw	r2,-16(fp)
  811f7c:	1080400c 	andi	r2,r2,256
  811f80:	1005003a 	cmpeq	r2,r2,zero
  811f84:	1000351e 	bne	r2,zero,81205c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811f88:	00800074 	movhi	r2,1
  811f8c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811f90:	e0bffe17 	ldw	r2,-8(fp)
  811f94:	10800a17 	ldw	r2,40(r2)
  811f98:	10800044 	addi	r2,r2,1
  811f9c:	1081ffcc 	andi	r2,r2,2047
  811fa0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  811fa4:	e0bffe17 	ldw	r2,-8(fp)
  811fa8:	10c00b17 	ldw	r3,44(r2)
  811fac:	e0bffa17 	ldw	r2,-24(fp)
  811fb0:	18801626 	beq	r3,r2,81200c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811fb4:	e0bffd17 	ldw	r2,-12(fp)
  811fb8:	10800037 	ldwio	r2,0(r2)
  811fbc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811fc0:	e0bffb17 	ldw	r2,-20(fp)
  811fc4:	10a0000c 	andi	r2,r2,32768
  811fc8:	1005003a 	cmpeq	r2,r2,zero
  811fcc:	10000f1e 	bne	r2,zero,81200c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811fd0:	e0bffe17 	ldw	r2,-8(fp)
  811fd4:	10c00a17 	ldw	r3,40(r2)
  811fd8:	e0bffb17 	ldw	r2,-20(fp)
  811fdc:	1009883a 	mov	r4,r2
  811fe0:	e0bffe17 	ldw	r2,-8(fp)
  811fe4:	1885883a 	add	r2,r3,r2
  811fe8:	10800e04 	addi	r2,r2,56
  811fec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811ff0:	e0bffe17 	ldw	r2,-8(fp)
  811ff4:	10800a17 	ldw	r2,40(r2)
  811ff8:	10800044 	addi	r2,r2,1
  811ffc:	10c1ffcc 	andi	r3,r2,2047
  812000:	e0bffe17 	ldw	r2,-8(fp)
  812004:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  812008:	003fe106 	br	811f90 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81200c:	e0bffb17 	ldw	r2,-20(fp)
  812010:	10bfffec 	andhi	r2,r2,65535
  812014:	1005003a 	cmpeq	r2,r2,zero
  812018:	1000101e 	bne	r2,zero,81205c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81201c:	e0bffe17 	ldw	r2,-8(fp)
  812020:	10c00817 	ldw	r3,32(r2)
  812024:	00bfff84 	movi	r2,-2
  812028:	1886703a 	and	r3,r3,r2
  81202c:	e0bffe17 	ldw	r2,-8(fp)
  812030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  812034:	e0bffd17 	ldw	r2,-12(fp)
  812038:	11000104 	addi	r4,r2,4
  81203c:	e0bffe17 	ldw	r2,-8(fp)
  812040:	10800817 	ldw	r2,32(r2)
  812044:	1007883a 	mov	r3,r2
  812048:	2005883a 	mov	r2,r4
  81204c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812050:	e0bffd17 	ldw	r2,-12(fp)
  812054:	10800104 	addi	r2,r2,4
  812058:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81205c:	e0bffc17 	ldw	r2,-16(fp)
  812060:	1080800c 	andi	r2,r2,512
  812064:	1005003a 	cmpeq	r2,r2,zero
  812068:	103fbb1e 	bne	r2,zero,811f58 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81206c:	e0bffc17 	ldw	r2,-16(fp)
  812070:	10bfffec 	andhi	r2,r2,65535
  812074:	1004d43a 	srli	r2,r2,16
  812078:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81207c:	00001506 	br	8120d4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  812080:	e13ffd17 	ldw	r4,-12(fp)
  812084:	e0bffe17 	ldw	r2,-8(fp)
  812088:	10c00d17 	ldw	r3,52(r2)
  81208c:	e0bffe17 	ldw	r2,-8(fp)
  812090:	1885883a 	add	r2,r3,r2
  812094:	10820e04 	addi	r2,r2,2104
  812098:	10800003 	ldbu	r2,0(r2)
  81209c:	10c03fcc 	andi	r3,r2,255
  8120a0:	18c0201c 	xori	r3,r3,128
  8120a4:	18ffe004 	addi	r3,r3,-128
  8120a8:	2005883a 	mov	r2,r4
  8120ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8120b0:	e0bffe17 	ldw	r2,-8(fp)
  8120b4:	10800d17 	ldw	r2,52(r2)
  8120b8:	10800044 	addi	r2,r2,1
  8120bc:	10c1ffcc 	andi	r3,r2,2047
  8120c0:	e0bffe17 	ldw	r2,-8(fp)
  8120c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8120c8:	e0bff917 	ldw	r2,-28(fp)
  8120cc:	10bfffc4 	addi	r2,r2,-1
  8120d0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8120d4:	e0bff917 	ldw	r2,-28(fp)
  8120d8:	1005003a 	cmpeq	r2,r2,zero
  8120dc:	1000051e 	bne	r2,zero,8120f4 <altera_avalon_jtag_uart_irq+0x1c4>
  8120e0:	e0bffe17 	ldw	r2,-8(fp)
  8120e4:	10c00d17 	ldw	r3,52(r2)
  8120e8:	e0bffe17 	ldw	r2,-8(fp)
  8120ec:	10800c17 	ldw	r2,48(r2)
  8120f0:	18bfe31e 	bne	r3,r2,812080 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8120f4:	e0bff917 	ldw	r2,-28(fp)
  8120f8:	1005003a 	cmpeq	r2,r2,zero
  8120fc:	103f961e 	bne	r2,zero,811f58 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812100:	e0bffe17 	ldw	r2,-8(fp)
  812104:	10c00817 	ldw	r3,32(r2)
  812108:	00bfff44 	movi	r2,-3
  81210c:	1886703a 	and	r3,r3,r2
  812110:	e0bffe17 	ldw	r2,-8(fp)
  812114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812118:	e0bffe17 	ldw	r2,-8(fp)
  81211c:	10800017 	ldw	r2,0(r2)
  812120:	11000104 	addi	r4,r2,4
  812124:	e0bffe17 	ldw	r2,-8(fp)
  812128:	10800817 	ldw	r2,32(r2)
  81212c:	1007883a 	mov	r3,r2
  812130:	2005883a 	mov	r2,r4
  812134:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812138:	e0bffd17 	ldw	r2,-12(fp)
  81213c:	10800104 	addi	r2,r2,4
  812140:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  812144:	003f8406 	br	811f58 <altera_avalon_jtag_uart_irq+0x28>
}
  812148:	e037883a 	mov	sp,fp
  81214c:	df000017 	ldw	fp,0(sp)
  812150:	dec00104 	addi	sp,sp,4
  812154:	f800283a 	ret

00812158 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  812158:	defffc04 	addi	sp,sp,-16
  81215c:	df000315 	stw	fp,12(sp)
  812160:	df000304 	addi	fp,sp,12
  812164:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  812168:	e0bfff17 	ldw	r2,-4(fp)
  81216c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  812170:	e0bffe17 	ldw	r2,-8(fp)
  812174:	10800017 	ldw	r2,0(r2)
  812178:	10800104 	addi	r2,r2,4
  81217c:	10800037 	ldwio	r2,0(r2)
  812180:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  812184:	e0bffd17 	ldw	r2,-12(fp)
  812188:	1081000c 	andi	r2,r2,1024
  81218c:	1005003a 	cmpeq	r2,r2,zero
  812190:	10000c1e 	bne	r2,zero,8121c4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  812194:	e0bffe17 	ldw	r2,-8(fp)
  812198:	10800017 	ldw	r2,0(r2)
  81219c:	11000104 	addi	r4,r2,4
  8121a0:	e0bffe17 	ldw	r2,-8(fp)
  8121a4:	10800817 	ldw	r2,32(r2)
  8121a8:	10810014 	ori	r2,r2,1024
  8121ac:	1007883a 	mov	r3,r2
  8121b0:	2005883a 	mov	r2,r4
  8121b4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8121b8:	e0bffe17 	ldw	r2,-8(fp)
  8121bc:	10000915 	stw	zero,36(r2)
  8121c0:	00000a06 	br	8121ec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8121c4:	e0bffe17 	ldw	r2,-8(fp)
  8121c8:	10c00917 	ldw	r3,36(r2)
  8121cc:	00a00034 	movhi	r2,32768
  8121d0:	10bfff04 	addi	r2,r2,-4
  8121d4:	10c00536 	bltu	r2,r3,8121ec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  8121d8:	e0bffe17 	ldw	r2,-8(fp)
  8121dc:	10800917 	ldw	r2,36(r2)
  8121e0:	10c00044 	addi	r3,r2,1
  8121e4:	e0bffe17 	ldw	r2,-8(fp)
  8121e8:	10c00915 	stw	r3,36(r2)
  8121ec:	008020b4 	movhi	r2,130
  8121f0:	10a2ca04 	addi	r2,r2,-29912
  8121f4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8121f8:	e037883a 	mov	sp,fp
  8121fc:	df000017 	ldw	fp,0(sp)
  812200:	dec00104 	addi	sp,sp,4
  812204:	f800283a 	ret

00812208 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  812208:	defffc04 	addi	sp,sp,-16
  81220c:	df000315 	stw	fp,12(sp)
  812210:	df000304 	addi	fp,sp,12
  812214:	e13ffd15 	stw	r4,-12(fp)
  812218:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81221c:	00000706 	br	81223c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  812220:	e0bffe17 	ldw	r2,-8(fp)
  812224:	1090000c 	andi	r2,r2,16384
  812228:	1005003a 	cmpeq	r2,r2,zero
  81222c:	1000031e 	bne	r2,zero,81223c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  812230:	00bffd44 	movi	r2,-11
  812234:	e0bfff15 	stw	r2,-4(fp)
  812238:	00000b06 	br	812268 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81223c:	e0bffd17 	ldw	r2,-12(fp)
  812240:	10c00d17 	ldw	r3,52(r2)
  812244:	e0bffd17 	ldw	r2,-12(fp)
  812248:	10800c17 	ldw	r2,48(r2)
  81224c:	18800526 	beq	r3,r2,812264 <altera_avalon_jtag_uart_close+0x5c>
  812250:	e0bffd17 	ldw	r2,-12(fp)
  812254:	10c00917 	ldw	r3,36(r2)
  812258:	e0bffd17 	ldw	r2,-12(fp)
  81225c:	10800117 	ldw	r2,4(r2)
  812260:	18bfef36 	bltu	r3,r2,812220 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  812264:	e03fff15 	stw	zero,-4(fp)
  812268:	e0bfff17 	ldw	r2,-4(fp)
}
  81226c:	e037883a 	mov	sp,fp
  812270:	df000017 	ldw	fp,0(sp)
  812274:	dec00104 	addi	sp,sp,4
  812278:	f800283a 	ret

0081227c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81227c:	defff804 	addi	sp,sp,-32
  812280:	df000715 	stw	fp,28(sp)
  812284:	df000704 	addi	fp,sp,28
  812288:	e13ffb15 	stw	r4,-20(fp)
  81228c:	e17ffc15 	stw	r5,-16(fp)
  812290:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  812294:	00bff9c4 	movi	r2,-25
  812298:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  81229c:	e0bffc17 	ldw	r2,-16(fp)
  8122a0:	e0bfff15 	stw	r2,-4(fp)
  8122a4:	e0ffff17 	ldw	r3,-4(fp)
  8122a8:	189a8060 	cmpeqi	r2,r3,27137
  8122ac:	1000041e 	bne	r2,zero,8122c0 <altera_avalon_jtag_uart_ioctl+0x44>
  8122b0:	e0ffff17 	ldw	r3,-4(fp)
  8122b4:	189a80a0 	cmpeqi	r2,r3,27138
  8122b8:	10001b1e 	bne	r2,zero,812328 <altera_avalon_jtag_uart_ioctl+0xac>
  8122bc:	00002706 	br	81235c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8122c0:	e0bffb17 	ldw	r2,-20(fp)
  8122c4:	10c00117 	ldw	r3,4(r2)
  8122c8:	00a00034 	movhi	r2,32768
  8122cc:	10bfffc4 	addi	r2,r2,-1
  8122d0:	18802226 	beq	r3,r2,81235c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  8122d4:	e0bffd17 	ldw	r2,-12(fp)
  8122d8:	10800017 	ldw	r2,0(r2)
  8122dc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8122e0:	e0bff917 	ldw	r2,-28(fp)
  8122e4:	10800090 	cmplti	r2,r2,2
  8122e8:	1000071e 	bne	r2,zero,812308 <altera_avalon_jtag_uart_ioctl+0x8c>
  8122ec:	e0fff917 	ldw	r3,-28(fp)
  8122f0:	00a00034 	movhi	r2,32768
  8122f4:	10bfffc4 	addi	r2,r2,-1
  8122f8:	18800326 	beq	r3,r2,812308 <altera_avalon_jtag_uart_ioctl+0x8c>
  8122fc:	e0bff917 	ldw	r2,-28(fp)
  812300:	e0bffe15 	stw	r2,-8(fp)
  812304:	00000306 	br	812314 <altera_avalon_jtag_uart_ioctl+0x98>
  812308:	00e00034 	movhi	r3,32768
  81230c:	18ffff84 	addi	r3,r3,-2
  812310:	e0fffe15 	stw	r3,-8(fp)
  812314:	e0bffb17 	ldw	r2,-20(fp)
  812318:	e0fffe17 	ldw	r3,-8(fp)
  81231c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  812320:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  812324:	00000d06 	br	81235c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  812328:	e0bffb17 	ldw	r2,-20(fp)
  81232c:	10c00117 	ldw	r3,4(r2)
  812330:	00a00034 	movhi	r2,32768
  812334:	10bfffc4 	addi	r2,r2,-1
  812338:	18800826 	beq	r3,r2,81235c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81233c:	e13ffd17 	ldw	r4,-12(fp)
  812340:	e0bffb17 	ldw	r2,-20(fp)
  812344:	10c00917 	ldw	r3,36(r2)
  812348:	e0bffb17 	ldw	r2,-20(fp)
  81234c:	10800117 	ldw	r2,4(r2)
  812350:	1885803a 	cmpltu	r2,r3,r2
  812354:	20800015 	stw	r2,0(r4)
      rc = 0;
  812358:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  81235c:	e0bffa17 	ldw	r2,-24(fp)
}
  812360:	e037883a 	mov	sp,fp
  812364:	df000017 	ldw	fp,0(sp)
  812368:	dec00104 	addi	sp,sp,4
  81236c:	f800283a 	ret

00812370 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  812370:	defff204 	addi	sp,sp,-56
  812374:	dfc00d15 	stw	ra,52(sp)
  812378:	df000c15 	stw	fp,48(sp)
  81237c:	df000c04 	addi	fp,sp,48
  812380:	e13ffb15 	stw	r4,-20(fp)
  812384:	e17ffc15 	stw	r5,-16(fp)
  812388:	e1bffd15 	stw	r6,-12(fp)
  81238c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  812390:	e0bffc17 	ldw	r2,-16(fp)
  812394:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812398:	00004806 	br	8124bc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81239c:	e0bffb17 	ldw	r2,-20(fp)
  8123a0:	10800a17 	ldw	r2,40(r2)
  8123a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8123a8:	e0bffb17 	ldw	r2,-20(fp)
  8123ac:	10800b17 	ldw	r2,44(r2)
  8123b0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  8123b4:	e0fff717 	ldw	r3,-36(fp)
  8123b8:	e0bff617 	ldw	r2,-40(fp)
  8123bc:	18800536 	bltu	r3,r2,8123d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8123c0:	e0bff717 	ldw	r2,-36(fp)
  8123c4:	e0fff617 	ldw	r3,-40(fp)
  8123c8:	10c5c83a 	sub	r2,r2,r3
  8123cc:	e0bff815 	stw	r2,-32(fp)
  8123d0:	00000406 	br	8123e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8123d4:	00820004 	movi	r2,2048
  8123d8:	e0fff617 	ldw	r3,-40(fp)
  8123dc:	10c5c83a 	sub	r2,r2,r3
  8123e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8123e4:	e0bff817 	ldw	r2,-32(fp)
  8123e8:	1005003a 	cmpeq	r2,r2,zero
  8123ec:	10001f1e 	bne	r2,zero,81246c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  8123f0:	e0fffd17 	ldw	r3,-12(fp)
  8123f4:	e0bff817 	ldw	r2,-32(fp)
  8123f8:	1880022e 	bgeu	r3,r2,812404 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  8123fc:	e0bffd17 	ldw	r2,-12(fp)
  812400:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  812404:	e0bffb17 	ldw	r2,-20(fp)
  812408:	10c00e04 	addi	r3,r2,56
  81240c:	e0bff617 	ldw	r2,-40(fp)
  812410:	1887883a 	add	r3,r3,r2
  812414:	e0bffa17 	ldw	r2,-24(fp)
  812418:	1009883a 	mov	r4,r2
  81241c:	180b883a 	mov	r5,r3
  812420:	e1bff817 	ldw	r6,-32(fp)
  812424:	0808f4c0 	call	808f4c <memcpy>
      ptr   += n;
  812428:	e0fff817 	ldw	r3,-32(fp)
  81242c:	e0bffa17 	ldw	r2,-24(fp)
  812430:	10c5883a 	add	r2,r2,r3
  812434:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  812438:	e0fffd17 	ldw	r3,-12(fp)
  81243c:	e0bff817 	ldw	r2,-32(fp)
  812440:	1885c83a 	sub	r2,r3,r2
  812444:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812448:	e0fff617 	ldw	r3,-40(fp)
  81244c:	e0bff817 	ldw	r2,-32(fp)
  812450:	1885883a 	add	r2,r3,r2
  812454:	10c1ffcc 	andi	r3,r2,2047
  812458:	e0bffb17 	ldw	r2,-20(fp)
  81245c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  812460:	e0bffd17 	ldw	r2,-12(fp)
  812464:	10800048 	cmpgei	r2,r2,1
  812468:	103fcc1e 	bne	r2,zero,81239c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81246c:	e0fffa17 	ldw	r3,-24(fp)
  812470:	e0bffc17 	ldw	r2,-16(fp)
  812474:	1880141e 	bne	r3,r2,8124c8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  812478:	e0bffe17 	ldw	r2,-8(fp)
  81247c:	1090000c 	andi	r2,r2,16384
  812480:	1004c03a 	cmpne	r2,r2,zero
  812484:	1000101e 	bne	r2,zero,8124c8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812488:	e0bffb17 	ldw	r2,-20(fp)
  81248c:	10c00a17 	ldw	r3,40(r2)
  812490:	e0bff717 	ldw	r2,-36(fp)
  812494:	1880051e 	bne	r3,r2,8124ac <altera_avalon_jtag_uart_read+0x13c>
  812498:	e0bffb17 	ldw	r2,-20(fp)
  81249c:	10c00917 	ldw	r3,36(r2)
  8124a0:	e0bffb17 	ldw	r2,-20(fp)
  8124a4:	10800117 	ldw	r2,4(r2)
  8124a8:	18bff736 	bltu	r3,r2,812488 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8124ac:	e0bffb17 	ldw	r2,-20(fp)
  8124b0:	10c00a17 	ldw	r3,40(r2)
  8124b4:	e0bff717 	ldw	r2,-36(fp)
  8124b8:	18800326 	beq	r3,r2,8124c8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8124bc:	e0bffd17 	ldw	r2,-12(fp)
  8124c0:	10800048 	cmpgei	r2,r2,1
  8124c4:	103fb51e 	bne	r2,zero,81239c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8124c8:	e0fffa17 	ldw	r3,-24(fp)
  8124cc:	e0bffc17 	ldw	r2,-16(fp)
  8124d0:	18801926 	beq	r3,r2,812538 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8124d4:	0005303a 	rdctl	r2,status
  8124d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8124dc:	e0fff517 	ldw	r3,-44(fp)
  8124e0:	00bfff84 	movi	r2,-2
  8124e4:	1884703a 	and	r2,r3,r2
  8124e8:	1001703a 	wrctl	status,r2
  
  return context;
  8124ec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8124f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8124f4:	e0bffb17 	ldw	r2,-20(fp)
  8124f8:	10800817 	ldw	r2,32(r2)
  8124fc:	10c00054 	ori	r3,r2,1
  812500:	e0bffb17 	ldw	r2,-20(fp)
  812504:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812508:	e0bffb17 	ldw	r2,-20(fp)
  81250c:	10800017 	ldw	r2,0(r2)
  812510:	11000104 	addi	r4,r2,4
  812514:	e0bffb17 	ldw	r2,-20(fp)
  812518:	10800817 	ldw	r2,32(r2)
  81251c:	1007883a 	mov	r3,r2
  812520:	2005883a 	mov	r2,r4
  812524:	10c00035 	stwio	r3,0(r2)
  812528:	e0bff917 	ldw	r2,-28(fp)
  81252c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812530:	e0bff417 	ldw	r2,-48(fp)
  812534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  812538:	e0fffa17 	ldw	r3,-24(fp)
  81253c:	e0bffc17 	ldw	r2,-16(fp)
  812540:	18800526 	beq	r3,r2,812558 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  812544:	e0fffa17 	ldw	r3,-24(fp)
  812548:	e0bffc17 	ldw	r2,-16(fp)
  81254c:	1887c83a 	sub	r3,r3,r2
  812550:	e0ffff15 	stw	r3,-4(fp)
  812554:	00000906 	br	81257c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  812558:	e0bffe17 	ldw	r2,-8(fp)
  81255c:	1090000c 	andi	r2,r2,16384
  812560:	1005003a 	cmpeq	r2,r2,zero
  812564:	1000031e 	bne	r2,zero,812574 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  812568:	00bffd44 	movi	r2,-11
  81256c:	e0bfff15 	stw	r2,-4(fp)
  812570:	00000206 	br	81257c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812574:	00bffec4 	movi	r2,-5
  812578:	e0bfff15 	stw	r2,-4(fp)
  81257c:	e0bfff17 	ldw	r2,-4(fp)
}
  812580:	e037883a 	mov	sp,fp
  812584:	dfc00117 	ldw	ra,4(sp)
  812588:	df000017 	ldw	fp,0(sp)
  81258c:	dec00204 	addi	sp,sp,8
  812590:	f800283a 	ret

00812594 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812594:	defff204 	addi	sp,sp,-56
  812598:	dfc00d15 	stw	ra,52(sp)
  81259c:	df000c15 	stw	fp,48(sp)
  8125a0:	df000c04 	addi	fp,sp,48
  8125a4:	e13ffb15 	stw	r4,-20(fp)
  8125a8:	e17ffc15 	stw	r5,-16(fp)
  8125ac:	e1bffd15 	stw	r6,-12(fp)
  8125b0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8125b4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8125b8:	e0bffc17 	ldw	r2,-16(fp)
  8125bc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8125c0:	00003a06 	br	8126ac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8125c4:	e0bffb17 	ldw	r2,-20(fp)
  8125c8:	10800c17 	ldw	r2,48(r2)
  8125cc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  8125d0:	e0bffb17 	ldw	r2,-20(fp)
  8125d4:	10800d17 	ldw	r2,52(r2)
  8125d8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  8125dc:	e0fffa17 	ldw	r3,-24(fp)
  8125e0:	e0bff917 	ldw	r2,-28(fp)
  8125e4:	1880062e 	bgeu	r3,r2,812600 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8125e8:	e0fff917 	ldw	r3,-28(fp)
  8125ec:	e0bffa17 	ldw	r2,-24(fp)
  8125f0:	1885c83a 	sub	r2,r3,r2
  8125f4:	10bfffc4 	addi	r2,r2,-1
  8125f8:	e0bff815 	stw	r2,-32(fp)
  8125fc:	00000c06 	br	812630 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  812600:	e0bff917 	ldw	r2,-28(fp)
  812604:	1005003a 	cmpeq	r2,r2,zero
  812608:	1000051e 	bne	r2,zero,812620 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81260c:	00820004 	movi	r2,2048
  812610:	e0fffa17 	ldw	r3,-24(fp)
  812614:	10c5c83a 	sub	r2,r2,r3
  812618:	e0bff815 	stw	r2,-32(fp)
  81261c:	00000406 	br	812630 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  812620:	0081ffc4 	movi	r2,2047
  812624:	e0fffa17 	ldw	r3,-24(fp)
  812628:	10c5c83a 	sub	r2,r2,r3
  81262c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812630:	e0bff817 	ldw	r2,-32(fp)
  812634:	1005003a 	cmpeq	r2,r2,zero
  812638:	10001f1e 	bne	r2,zero,8126b8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  81263c:	e0fffd17 	ldw	r3,-12(fp)
  812640:	e0bff817 	ldw	r2,-32(fp)
  812644:	1880022e 	bgeu	r3,r2,812650 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  812648:	e0bffd17 	ldw	r2,-12(fp)
  81264c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  812650:	e0bffb17 	ldw	r2,-20(fp)
  812654:	10c20e04 	addi	r3,r2,2104
  812658:	e0bffa17 	ldw	r2,-24(fp)
  81265c:	1885883a 	add	r2,r3,r2
  812660:	e0fffc17 	ldw	r3,-16(fp)
  812664:	1009883a 	mov	r4,r2
  812668:	180b883a 	mov	r5,r3
  81266c:	e1bff817 	ldw	r6,-32(fp)
  812670:	0808f4c0 	call	808f4c <memcpy>
      ptr   += n;
  812674:	e0fff817 	ldw	r3,-32(fp)
  812678:	e0bffc17 	ldw	r2,-16(fp)
  81267c:	10c5883a 	add	r2,r2,r3
  812680:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  812684:	e0fffd17 	ldw	r3,-12(fp)
  812688:	e0bff817 	ldw	r2,-32(fp)
  81268c:	1885c83a 	sub	r2,r3,r2
  812690:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812694:	e0fffa17 	ldw	r3,-24(fp)
  812698:	e0bff817 	ldw	r2,-32(fp)
  81269c:	1885883a 	add	r2,r3,r2
  8126a0:	10c1ffcc 	andi	r3,r2,2047
  8126a4:	e0bffb17 	ldw	r2,-20(fp)
  8126a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8126ac:	e0bffd17 	ldw	r2,-12(fp)
  8126b0:	10800048 	cmpgei	r2,r2,1
  8126b4:	103fc31e 	bne	r2,zero,8125c4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8126b8:	0005303a 	rdctl	r2,status
  8126bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8126c0:	e0fff517 	ldw	r3,-44(fp)
  8126c4:	00bfff84 	movi	r2,-2
  8126c8:	1884703a 	and	r2,r3,r2
  8126cc:	1001703a 	wrctl	status,r2
  
  return context;
  8126d0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8126d4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8126d8:	e0bffb17 	ldw	r2,-20(fp)
  8126dc:	10800817 	ldw	r2,32(r2)
  8126e0:	10c00094 	ori	r3,r2,2
  8126e4:	e0bffb17 	ldw	r2,-20(fp)
  8126e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8126ec:	e0bffb17 	ldw	r2,-20(fp)
  8126f0:	10800017 	ldw	r2,0(r2)
  8126f4:	11000104 	addi	r4,r2,4
  8126f8:	e0bffb17 	ldw	r2,-20(fp)
  8126fc:	10800817 	ldw	r2,32(r2)
  812700:	1007883a 	mov	r3,r2
  812704:	2005883a 	mov	r2,r4
  812708:	10c00035 	stwio	r3,0(r2)
  81270c:	e0bff717 	ldw	r2,-36(fp)
  812710:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812714:	e0bff417 	ldw	r2,-48(fp)
  812718:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81271c:	e0bffd17 	ldw	r2,-12(fp)
  812720:	10800050 	cmplti	r2,r2,1
  812724:	1000111e 	bne	r2,zero,81276c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  812728:	e0bffe17 	ldw	r2,-8(fp)
  81272c:	1090000c 	andi	r2,r2,16384
  812730:	1004c03a 	cmpne	r2,r2,zero
  812734:	1000101e 	bne	r2,zero,812778 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  812738:	e0bffb17 	ldw	r2,-20(fp)
  81273c:	10c00d17 	ldw	r3,52(r2)
  812740:	e0bff917 	ldw	r2,-28(fp)
  812744:	1880051e 	bne	r3,r2,81275c <altera_avalon_jtag_uart_write+0x1c8>
  812748:	e0bffb17 	ldw	r2,-20(fp)
  81274c:	10c00917 	ldw	r3,36(r2)
  812750:	e0bffb17 	ldw	r2,-20(fp)
  812754:	10800117 	ldw	r2,4(r2)
  812758:	18bff736 	bltu	r3,r2,812738 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81275c:	e0bffb17 	ldw	r2,-20(fp)
  812760:	10c00d17 	ldw	r3,52(r2)
  812764:	e0bff917 	ldw	r2,-28(fp)
  812768:	18800326 	beq	r3,r2,812778 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  81276c:	e0bffd17 	ldw	r2,-12(fp)
  812770:	10800048 	cmpgei	r2,r2,1
  812774:	103fcd1e 	bne	r2,zero,8126ac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  812778:	e0fffc17 	ldw	r3,-16(fp)
  81277c:	e0bff617 	ldw	r2,-40(fp)
  812780:	18800526 	beq	r3,r2,812798 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  812784:	e0fffc17 	ldw	r3,-16(fp)
  812788:	e0bff617 	ldw	r2,-40(fp)
  81278c:	1887c83a 	sub	r3,r3,r2
  812790:	e0ffff15 	stw	r3,-4(fp)
  812794:	00000906 	br	8127bc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  812798:	e0bffe17 	ldw	r2,-8(fp)
  81279c:	1090000c 	andi	r2,r2,16384
  8127a0:	1005003a 	cmpeq	r2,r2,zero
  8127a4:	1000031e 	bne	r2,zero,8127b4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8127a8:	00bffd44 	movi	r2,-11
  8127ac:	e0bfff15 	stw	r2,-4(fp)
  8127b0:	00000206 	br	8127bc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  8127b4:	00bffec4 	movi	r2,-5
  8127b8:	e0bfff15 	stw	r2,-4(fp)
  8127bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8127c0:	e037883a 	mov	sp,fp
  8127c4:	dfc00117 	ldw	ra,4(sp)
  8127c8:	df000017 	ldw	fp,0(sp)
  8127cc:	dec00204 	addi	sp,sp,8
  8127d0:	f800283a 	ret

008127d4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8127d4:	defffa04 	addi	sp,sp,-24
  8127d8:	dfc00515 	stw	ra,20(sp)
  8127dc:	df000415 	stw	fp,16(sp)
  8127e0:	df000404 	addi	fp,sp,16
  8127e4:	e13ffe15 	stw	r4,-8(fp)
  8127e8:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8127ec:	e0bffe17 	ldw	r2,-8(fp)
  8127f0:	10800017 	ldw	r2,0(r2)
  8127f4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8127f8:	008003f4 	movhi	r2,15
  8127fc:	10909004 	addi	r2,r2,16960
  812800:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812804:	e0bffe17 	ldw	r2,-8(fp)
  812808:	10800803 	ldbu	r2,32(r2)
  81280c:	10803fcc 	andi	r2,r2,255
  812810:	1080201c 	xori	r2,r2,128
  812814:	10bfe004 	addi	r2,r2,-128
  812818:	1004c03a 	cmpne	r2,r2,zero
  81281c:	1000161e 	bne	r2,zero,812878 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812820:	00000a06 	br	81284c <lcd_write_command+0x78>
    if (--i == 0)
  812824:	e0bffc17 	ldw	r2,-16(fp)
  812828:	10bfffc4 	addi	r2,r2,-1
  81282c:	e0bffc15 	stw	r2,-16(fp)
  812830:	e0bffc17 	ldw	r2,-16(fp)
  812834:	1004c03a 	cmpne	r2,r2,zero
  812838:	1000041e 	bne	r2,zero,81284c <lcd_write_command+0x78>
    {
      sp->broken = 1;
  81283c:	e0fffe17 	ldw	r3,-8(fp)
  812840:	00800044 	movi	r2,1
  812844:	18800805 	stb	r2,32(r3)
      return;
  812848:	00000b06 	br	812878 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81284c:	e0bffd17 	ldw	r2,-12(fp)
  812850:	10800104 	addi	r2,r2,4
  812854:	10800037 	ldwio	r2,0(r2)
  812858:	1080200c 	andi	r2,r2,128
  81285c:	1004c03a 	cmpne	r2,r2,zero
  812860:	103ff01e 	bne	r2,zero,812824 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812864:	01001904 	movi	r4,100
  812868:	0811a940 	call	811a94 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  81286c:	e0bffd17 	ldw	r2,-12(fp)
  812870:	e0ffff03 	ldbu	r3,-4(fp)
  812874:	10c00035 	stwio	r3,0(r2)
}
  812878:	e037883a 	mov	sp,fp
  81287c:	dfc00117 	ldw	ra,4(sp)
  812880:	df000017 	ldw	fp,0(sp)
  812884:	dec00204 	addi	sp,sp,8
  812888:	f800283a 	ret

0081288c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  81288c:	defffa04 	addi	sp,sp,-24
  812890:	dfc00515 	stw	ra,20(sp)
  812894:	df000415 	stw	fp,16(sp)
  812898:	df000404 	addi	fp,sp,16
  81289c:	e13ffe15 	stw	r4,-8(fp)
  8128a0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8128a4:	e0bffe17 	ldw	r2,-8(fp)
  8128a8:	10800017 	ldw	r2,0(r2)
  8128ac:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8128b0:	008003f4 	movhi	r2,15
  8128b4:	10909004 	addi	r2,r2,16960
  8128b8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8128bc:	e0bffe17 	ldw	r2,-8(fp)
  8128c0:	10800803 	ldbu	r2,32(r2)
  8128c4:	10803fcc 	andi	r2,r2,255
  8128c8:	1080201c 	xori	r2,r2,128
  8128cc:	10bfe004 	addi	r2,r2,-128
  8128d0:	1004c03a 	cmpne	r2,r2,zero
  8128d4:	10001d1e 	bne	r2,zero,81294c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8128d8:	00000a06 	br	812904 <lcd_write_data+0x78>
    if (--i == 0)
  8128dc:	e0bffc17 	ldw	r2,-16(fp)
  8128e0:	10bfffc4 	addi	r2,r2,-1
  8128e4:	e0bffc15 	stw	r2,-16(fp)
  8128e8:	e0bffc17 	ldw	r2,-16(fp)
  8128ec:	1004c03a 	cmpne	r2,r2,zero
  8128f0:	1000041e 	bne	r2,zero,812904 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8128f4:	e0fffe17 	ldw	r3,-8(fp)
  8128f8:	00800044 	movi	r2,1
  8128fc:	18800805 	stb	r2,32(r3)
      return;
  812900:	00001206 	br	81294c <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812904:	e0bffd17 	ldw	r2,-12(fp)
  812908:	10800104 	addi	r2,r2,4
  81290c:	10800037 	ldwio	r2,0(r2)
  812910:	1080200c 	andi	r2,r2,128
  812914:	1004c03a 	cmpne	r2,r2,zero
  812918:	103ff01e 	bne	r2,zero,8128dc <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81291c:	01001904 	movi	r4,100
  812920:	0811a940 	call	811a94 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  812924:	e0bffd17 	ldw	r2,-12(fp)
  812928:	10800204 	addi	r2,r2,8
  81292c:	e0ffff03 	ldbu	r3,-4(fp)
  812930:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  812934:	e0bffe17 	ldw	r2,-8(fp)
  812938:	108008c3 	ldbu	r2,35(r2)
  81293c:	10800044 	addi	r2,r2,1
  812940:	1007883a 	mov	r3,r2
  812944:	e0bffe17 	ldw	r2,-8(fp)
  812948:	10c008c5 	stb	r3,35(r2)
}
  81294c:	e037883a 	mov	sp,fp
  812950:	dfc00117 	ldw	ra,4(sp)
  812954:	df000017 	ldw	fp,0(sp)
  812958:	dec00204 	addi	sp,sp,8
  81295c:	f800283a 	ret

00812960 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  812960:	defffb04 	addi	sp,sp,-20
  812964:	dfc00415 	stw	ra,16(sp)
  812968:	df000315 	stw	fp,12(sp)
  81296c:	dc000215 	stw	r16,8(sp)
  812970:	df000204 	addi	fp,sp,8
  812974:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  812978:	e13fff17 	ldw	r4,-4(fp)
  81297c:	01400044 	movi	r5,1
  812980:	08127d40 	call	8127d4 <lcd_write_command>

  sp->x = 0;
  812984:	e0bfff17 	ldw	r2,-4(fp)
  812988:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  81298c:	e0bfff17 	ldw	r2,-4(fp)
  812990:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  812994:	e0bfff17 	ldw	r2,-4(fp)
  812998:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81299c:	e03ffe15 	stw	zero,-8(fp)
  8129a0:	00001c06 	br	812a14 <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8129a4:	e13ffe17 	ldw	r4,-8(fp)
  8129a8:	014018c4 	movi	r5,99
  8129ac:	08102900 	call	810290 <__mulsi3>
  8129b0:	10c01004 	addi	r3,r2,64
  8129b4:	e0bfff17 	ldw	r2,-4(fp)
  8129b8:	1889883a 	add	r4,r3,r2
  8129bc:	01400804 	movi	r5,32
  8129c0:	01801444 	movi	r6,81
  8129c4:	0802b400 	call	802b40 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8129c8:	e13ffe17 	ldw	r4,-8(fp)
  8129cc:	014018c4 	movi	r5,99
  8129d0:	08102900 	call	810290 <__mulsi3>
  8129d4:	10c00c04 	addi	r3,r2,48
  8129d8:	e0bfff17 	ldw	r2,-4(fp)
  8129dc:	1889883a 	add	r4,r3,r2
  8129e0:	01400804 	movi	r5,32
  8129e4:	01800404 	movi	r6,16
  8129e8:	0802b400 	call	802b40 <memset>
    sp->line[y].width = 0;
  8129ec:	e13ffe17 	ldw	r4,-8(fp)
  8129f0:	e43fff17 	ldw	r16,-4(fp)
  8129f4:	014018c4 	movi	r5,99
  8129f8:	08102900 	call	810290 <__mulsi3>
  8129fc:	1405883a 	add	r2,r2,r16
  812a00:	10802404 	addi	r2,r2,144
  812a04:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812a08:	e0bffe17 	ldw	r2,-8(fp)
  812a0c:	10800044 	addi	r2,r2,1
  812a10:	e0bffe15 	stw	r2,-8(fp)
  812a14:	e0bffe17 	ldw	r2,-8(fp)
  812a18:	10800090 	cmplti	r2,r2,2
  812a1c:	103fe11e 	bne	r2,zero,8129a4 <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  812a20:	e037883a 	mov	sp,fp
  812a24:	dfc00217 	ldw	ra,8(sp)
  812a28:	df000117 	ldw	fp,4(sp)
  812a2c:	dc000017 	ldw	r16,0(sp)
  812a30:	dec00304 	addi	sp,sp,12
  812a34:	f800283a 	ret

00812a38 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  812a38:	defff404 	addi	sp,sp,-48
  812a3c:	dfc00b15 	stw	ra,44(sp)
  812a40:	df000a15 	stw	fp,40(sp)
  812a44:	dc800915 	stw	r18,36(sp)
  812a48:	dc400815 	stw	r17,32(sp)
  812a4c:	dc000715 	stw	r16,28(sp)
  812a50:	df000704 	addi	fp,sp,28
  812a54:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812a58:	e0bfff17 	ldw	r2,-4(fp)
  812a5c:	10800943 	ldbu	r2,37(r2)
  812a60:	10803fcc 	andi	r2,r2,255
  812a64:	1080201c 	xori	r2,r2,128
  812a68:	10bfe004 	addi	r2,r2,-128
  812a6c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812a70:	e03ffe15 	stw	zero,-8(fp)
  812a74:	00006a06 	br	812c20 <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
  812a78:	e13ffe17 	ldw	r4,-8(fp)
  812a7c:	e43fff17 	ldw	r16,-4(fp)
  812a80:	014018c4 	movi	r5,99
  812a84:	08102900 	call	810290 <__mulsi3>
  812a88:	1405883a 	add	r2,r2,r16
  812a8c:	10802404 	addi	r2,r2,144
  812a90:	10800043 	ldbu	r2,1(r2)
  812a94:	10803fcc 	andi	r2,r2,255
  812a98:	1080201c 	xori	r2,r2,128
  812a9c:	10bfe004 	addi	r2,r2,-128
  812aa0:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  812aa4:	e13ffe17 	ldw	r4,-8(fp)
  812aa8:	e43fff17 	ldw	r16,-4(fp)
  812aac:	014018c4 	movi	r5,99
  812ab0:	08102900 	call	810290 <__mulsi3>
  812ab4:	1405883a 	add	r2,r2,r16
  812ab8:	10802404 	addi	r2,r2,144
  812abc:	10800083 	ldbu	r2,2(r2)
  812ac0:	11003fcc 	andi	r4,r2,255
  812ac4:	e17ffc17 	ldw	r5,-16(fp)
  812ac8:	08102900 	call	810290 <__mulsi3>
  812acc:	1005d23a 	srai	r2,r2,8
  812ad0:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  812ad4:	e0fffa17 	ldw	r3,-24(fp)
  812ad8:	e0bffb17 	ldw	r2,-20(fp)
  812adc:	18800116 	blt	r3,r2,812ae4 <lcd_repaint_screen+0xac>
      offset = 0;
  812ae0:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812ae4:	e03ffd15 	stw	zero,-12(fp)
  812ae8:	00004706 	br	812c08 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  812aec:	e47ffe17 	ldw	r17,-8(fp)
  812af0:	e0fffd17 	ldw	r3,-12(fp)
  812af4:	e0bffa17 	ldw	r2,-24(fp)
  812af8:	1889883a 	add	r4,r3,r2
  812afc:	e17ffb17 	ldw	r5,-20(fp)
  812b00:	08102200 	call	810220 <__modsi3>
  812b04:	1025883a 	mov	r18,r2
  812b08:	e43fff17 	ldw	r16,-4(fp)
  812b0c:	8809883a 	mov	r4,r17
  812b10:	014018c4 	movi	r5,99
  812b14:	08102900 	call	810290 <__mulsi3>
  812b18:	1405883a 	add	r2,r2,r16
  812b1c:	1485883a 	add	r2,r2,r18
  812b20:	10801004 	addi	r2,r2,64
  812b24:	10800003 	ldbu	r2,0(r2)
  812b28:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  812b2c:	e13ffe17 	ldw	r4,-8(fp)
  812b30:	e47ffd17 	ldw	r17,-12(fp)
  812b34:	e43fff17 	ldw	r16,-4(fp)
  812b38:	014018c4 	movi	r5,99
  812b3c:	08102900 	call	810290 <__mulsi3>
  812b40:	1405883a 	add	r2,r2,r16
  812b44:	1445883a 	add	r2,r2,r17
  812b48:	10800c04 	addi	r2,r2,48
  812b4c:	10800003 	ldbu	r2,0(r2)
  812b50:	10c03fcc 	andi	r3,r2,255
  812b54:	18c0201c 	xori	r3,r3,128
  812b58:	18ffe004 	addi	r3,r3,-128
  812b5c:	e0bff947 	ldb	r2,-27(fp)
  812b60:	18802626 	beq	r3,r2,812bfc <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
  812b64:	e0fffe17 	ldw	r3,-8(fp)
  812b68:	d0a00f04 	addi	r2,gp,-32708
  812b6c:	1885883a 	add	r2,r3,r2
  812b70:	10800003 	ldbu	r2,0(r2)
  812b74:	1007883a 	mov	r3,r2
  812b78:	e0bffd17 	ldw	r2,-12(fp)
  812b7c:	1885883a 	add	r2,r3,r2
  812b80:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  812b84:	e0fff903 	ldbu	r3,-28(fp)
  812b88:	e0bfff17 	ldw	r2,-4(fp)
  812b8c:	108008c3 	ldbu	r2,35(r2)
  812b90:	10803fcc 	andi	r2,r2,255
  812b94:	1080201c 	xori	r2,r2,128
  812b98:	10bfe004 	addi	r2,r2,-128
  812b9c:	18800926 	beq	r3,r2,812bc4 <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  812ba0:	e0fff903 	ldbu	r3,-28(fp)
  812ba4:	00bfe004 	movi	r2,-128
  812ba8:	1884b03a 	or	r2,r3,r2
  812bac:	11403fcc 	andi	r5,r2,255
  812bb0:	e13fff17 	ldw	r4,-4(fp)
  812bb4:	08127d40 	call	8127d4 <lcd_write_command>
          sp->address = address;
  812bb8:	e0fff903 	ldbu	r3,-28(fp)
  812bbc:	e0bfff17 	ldw	r2,-4(fp)
  812bc0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  812bc4:	e0bff943 	ldbu	r2,-27(fp)
  812bc8:	11403fcc 	andi	r5,r2,255
  812bcc:	e13fff17 	ldw	r4,-4(fp)
  812bd0:	081288c0 	call	81288c <lcd_write_data>
        sp->line[y].visible[x] = c;
  812bd4:	e13ffe17 	ldw	r4,-8(fp)
  812bd8:	e47ffd17 	ldw	r17,-12(fp)
  812bdc:	e43fff17 	ldw	r16,-4(fp)
  812be0:	014018c4 	movi	r5,99
  812be4:	08102900 	call	810290 <__mulsi3>
  812be8:	1405883a 	add	r2,r2,r16
  812bec:	1445883a 	add	r2,r2,r17
  812bf0:	10c00c04 	addi	r3,r2,48
  812bf4:	e0bff943 	ldbu	r2,-27(fp)
  812bf8:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812bfc:	e0bffd17 	ldw	r2,-12(fp)
  812c00:	10800044 	addi	r2,r2,1
  812c04:	e0bffd15 	stw	r2,-12(fp)
  812c08:	e0bffd17 	ldw	r2,-12(fp)
  812c0c:	10800410 	cmplti	r2,r2,16
  812c10:	103fb61e 	bne	r2,zero,812aec <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812c14:	e0bffe17 	ldw	r2,-8(fp)
  812c18:	10800044 	addi	r2,r2,1
  812c1c:	e0bffe15 	stw	r2,-8(fp)
  812c20:	e0bffe17 	ldw	r2,-8(fp)
  812c24:	10800090 	cmplti	r2,r2,2
  812c28:	103f931e 	bne	r2,zero,812a78 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  812c2c:	e037883a 	mov	sp,fp
  812c30:	dfc00417 	ldw	ra,16(sp)
  812c34:	df000317 	ldw	fp,12(sp)
  812c38:	dc800217 	ldw	r18,8(sp)
  812c3c:	dc400117 	ldw	r17,4(sp)
  812c40:	dc000017 	ldw	r16,0(sp)
  812c44:	dec00504 	addi	sp,sp,20
  812c48:	f800283a 	ret

00812c4c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  812c4c:	defffb04 	addi	sp,sp,-20
  812c50:	dfc00415 	stw	ra,16(sp)
  812c54:	df000315 	stw	fp,12(sp)
  812c58:	dc000215 	stw	r16,8(sp)
  812c5c:	df000204 	addi	fp,sp,8
  812c60:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812c64:	e03ffe15 	stw	zero,-8(fp)
  812c68:	00002106 	br	812cf0 <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812c6c:	e0bffe17 	ldw	r2,-8(fp)
  812c70:	10800048 	cmpgei	r2,r2,1
  812c74:	1000121e 	bne	r2,zero,812cc0 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  812c78:	e13ffe17 	ldw	r4,-8(fp)
  812c7c:	014018c4 	movi	r5,99
  812c80:	08102900 	call	810290 <__mulsi3>
  812c84:	10c01004 	addi	r3,r2,64
  812c88:	e0bfff17 	ldw	r2,-4(fp)
  812c8c:	18a1883a 	add	r16,r3,r2
  812c90:	e0bffe17 	ldw	r2,-8(fp)
  812c94:	11000044 	addi	r4,r2,1
  812c98:	014018c4 	movi	r5,99
  812c9c:	08102900 	call	810290 <__mulsi3>
  812ca0:	10c01004 	addi	r3,r2,64
  812ca4:	e0bfff17 	ldw	r2,-4(fp)
  812ca8:	1885883a 	add	r2,r3,r2
  812cac:	8009883a 	mov	r4,r16
  812cb0:	100b883a 	mov	r5,r2
  812cb4:	01801404 	movi	r6,80
  812cb8:	0808f4c0 	call	808f4c <memcpy>
  812cbc:	00000906 	br	812ce4 <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  812cc0:	e13ffe17 	ldw	r4,-8(fp)
  812cc4:	014018c4 	movi	r5,99
  812cc8:	08102900 	call	810290 <__mulsi3>
  812ccc:	10c01004 	addi	r3,r2,64
  812cd0:	e0bfff17 	ldw	r2,-4(fp)
  812cd4:	1889883a 	add	r4,r3,r2
  812cd8:	01400804 	movi	r5,32
  812cdc:	01801404 	movi	r6,80
  812ce0:	0802b400 	call	802b40 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812ce4:	e0bffe17 	ldw	r2,-8(fp)
  812ce8:	10800044 	addi	r2,r2,1
  812cec:	e0bffe15 	stw	r2,-8(fp)
  812cf0:	e0bffe17 	ldw	r2,-8(fp)
  812cf4:	10800090 	cmplti	r2,r2,2
  812cf8:	103fdc1e 	bne	r2,zero,812c6c <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  812cfc:	e0bfff17 	ldw	r2,-4(fp)
  812d00:	10800883 	ldbu	r2,34(r2)
  812d04:	10bfffc4 	addi	r2,r2,-1
  812d08:	1007883a 	mov	r3,r2
  812d0c:	e0bfff17 	ldw	r2,-4(fp)
  812d10:	10c00885 	stb	r3,34(r2)
}
  812d14:	e037883a 	mov	sp,fp
  812d18:	dfc00217 	ldw	ra,8(sp)
  812d1c:	df000117 	ldw	fp,4(sp)
  812d20:	dc000017 	ldw	r16,0(sp)
  812d24:	dec00304 	addi	sp,sp,12
  812d28:	f800283a 	ret

00812d2c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812d2c:	defff804 	addi	sp,sp,-32
  812d30:	dfc00715 	stw	ra,28(sp)
  812d34:	df000615 	stw	fp,24(sp)
  812d38:	df000604 	addi	fp,sp,24
  812d3c:	e13ffd15 	stw	r4,-12(fp)
  812d40:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  812d44:	e03ffc15 	stw	zero,-16(fp)
  812d48:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  812d4c:	e0bffd17 	ldw	r2,-12(fp)
  812d50:	10800a03 	ldbu	r2,40(r2)
  812d54:	10803fcc 	andi	r2,r2,255
  812d58:	1080201c 	xori	r2,r2,128
  812d5c:	10bfe004 	addi	r2,r2,-128
  812d60:	108016d8 	cmpnei	r2,r2,91
  812d64:	10004d1e 	bne	r2,zero,812e9c <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
  812d68:	e0bffd17 	ldw	r2,-12(fp)
  812d6c:	10800a04 	addi	r2,r2,40
  812d70:	10800044 	addi	r2,r2,1
  812d74:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  812d78:	00000f06 	br	812db8 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  812d7c:	e13ffc17 	ldw	r4,-16(fp)
  812d80:	01400284 	movi	r5,10
  812d84:	08102900 	call	810290 <__mulsi3>
  812d88:	1007883a 	mov	r3,r2
  812d8c:	e0bffa17 	ldw	r2,-24(fp)
  812d90:	10800003 	ldbu	r2,0(r2)
  812d94:	10803fcc 	andi	r2,r2,255
  812d98:	1080201c 	xori	r2,r2,128
  812d9c:	10bfe004 	addi	r2,r2,-128
  812da0:	1885883a 	add	r2,r3,r2
  812da4:	10bff404 	addi	r2,r2,-48
  812da8:	e0bffc15 	stw	r2,-16(fp)
  812dac:	e0bffa17 	ldw	r2,-24(fp)
  812db0:	10800044 	addi	r2,r2,1
  812db4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  812db8:	e0bffa17 	ldw	r2,-24(fp)
  812dbc:	10800003 	ldbu	r2,0(r2)
  812dc0:	10803fcc 	andi	r2,r2,255
  812dc4:	1080201c 	xori	r2,r2,128
  812dc8:	10bfe004 	addi	r2,r2,-128
  812dcc:	1007883a 	mov	r3,r2
  812dd0:	00802074 	movhi	r2,129
  812dd4:	109bbc04 	addi	r2,r2,28400
  812dd8:	10800017 	ldw	r2,0(r2)
  812ddc:	1885883a 	add	r2,r3,r2
  812de0:	10800003 	ldbu	r2,0(r2)
  812de4:	10803fcc 	andi	r2,r2,255
  812de8:	1080010c 	andi	r2,r2,4
  812dec:	1004c03a 	cmpne	r2,r2,zero
  812df0:	103fe21e 	bne	r2,zero,812d7c <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  812df4:	e0bffa17 	ldw	r2,-24(fp)
  812df8:	10800003 	ldbu	r2,0(r2)
  812dfc:	10803fcc 	andi	r2,r2,255
  812e00:	1080201c 	xori	r2,r2,128
  812e04:	10bfe004 	addi	r2,r2,-128
  812e08:	10800ed8 	cmpnei	r2,r2,59
  812e0c:	1000251e 	bne	r2,zero,812ea4 <lcd_handle_escape+0x178>
    {
      ptr++;
  812e10:	e0bffa17 	ldw	r2,-24(fp)
  812e14:	10800044 	addi	r2,r2,1
  812e18:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  812e1c:	00000f06 	br	812e5c <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812e20:	e13ffb17 	ldw	r4,-20(fp)
  812e24:	01400284 	movi	r5,10
  812e28:	08102900 	call	810290 <__mulsi3>
  812e2c:	1007883a 	mov	r3,r2
  812e30:	e0bffa17 	ldw	r2,-24(fp)
  812e34:	10800003 	ldbu	r2,0(r2)
  812e38:	10803fcc 	andi	r2,r2,255
  812e3c:	1080201c 	xori	r2,r2,128
  812e40:	10bfe004 	addi	r2,r2,-128
  812e44:	1885883a 	add	r2,r3,r2
  812e48:	10bff404 	addi	r2,r2,-48
  812e4c:	e0bffb15 	stw	r2,-20(fp)
  812e50:	e0bffa17 	ldw	r2,-24(fp)
  812e54:	10800044 	addi	r2,r2,1
  812e58:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  812e5c:	e0bffa17 	ldw	r2,-24(fp)
  812e60:	10800003 	ldbu	r2,0(r2)
  812e64:	10803fcc 	andi	r2,r2,255
  812e68:	1080201c 	xori	r2,r2,128
  812e6c:	10bfe004 	addi	r2,r2,-128
  812e70:	1007883a 	mov	r3,r2
  812e74:	00802074 	movhi	r2,129
  812e78:	109bbc04 	addi	r2,r2,28400
  812e7c:	10800017 	ldw	r2,0(r2)
  812e80:	1885883a 	add	r2,r3,r2
  812e84:	10800003 	ldbu	r2,0(r2)
  812e88:	10803fcc 	andi	r2,r2,255
  812e8c:	1080010c 	andi	r2,r2,4
  812e90:	1004c03a 	cmpne	r2,r2,zero
  812e94:	103fe21e 	bne	r2,zero,812e20 <lcd_handle_escape+0xf4>
  812e98:	00000206 	br	812ea4 <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  812e9c:	00bfffc4 	movi	r2,-1
  812ea0:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  812ea4:	e0bffe07 	ldb	r2,-8(fp)
  812ea8:	e0bfff15 	stw	r2,-4(fp)
  812eac:	e0ffff17 	ldw	r3,-4(fp)
  812eb0:	188012a0 	cmpeqi	r2,r3,74
  812eb4:	10002f1e 	bne	r2,zero,812f74 <lcd_handle_escape+0x248>
  812eb8:	e0ffff17 	ldw	r3,-4(fp)
  812ebc:	188012c8 	cmpgei	r2,r3,75
  812ec0:	1000041e 	bne	r2,zero,812ed4 <lcd_handle_escape+0x1a8>
  812ec4:	e0ffff17 	ldw	r3,-4(fp)
  812ec8:	18801220 	cmpeqi	r2,r3,72
  812ecc:	1000081e 	bne	r2,zero,812ef0 <lcd_handle_escape+0x1c4>
  812ed0:	00004a06 	br	812ffc <lcd_handle_escape+0x2d0>
  812ed4:	e0ffff17 	ldw	r3,-4(fp)
  812ed8:	188012e0 	cmpeqi	r2,r3,75
  812edc:	10002b1e 	bne	r2,zero,812f8c <lcd_handle_escape+0x260>
  812ee0:	e0ffff17 	ldw	r3,-4(fp)
  812ee4:	188019a0 	cmpeqi	r2,r3,102
  812ee8:	1000011e 	bne	r2,zero,812ef0 <lcd_handle_escape+0x1c4>
  812eec:	00004306 	br	812ffc <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812ef0:	e0bffb17 	ldw	r2,-20(fp)
  812ef4:	10800050 	cmplti	r2,r2,1
  812ef8:	1000051e 	bne	r2,zero,812f10 <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
  812efc:	e0bffb17 	ldw	r2,-20(fp)
  812f00:	10bfffc4 	addi	r2,r2,-1
  812f04:	1007883a 	mov	r3,r2
  812f08:	e0bffd17 	ldw	r2,-12(fp)
  812f0c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812f10:	e0bffc17 	ldw	r2,-16(fp)
  812f14:	10800050 	cmplti	r2,r2,1
  812f18:	1000381e 	bne	r2,zero,812ffc <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
  812f1c:	e0bffc17 	ldw	r2,-16(fp)
  812f20:	10bfffc4 	addi	r2,r2,-1
  812f24:	1007883a 	mov	r3,r2
  812f28:	e0bffd17 	ldw	r2,-12(fp)
  812f2c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812f30:	e0bffd17 	ldw	r2,-12(fp)
  812f34:	10800883 	ldbu	r2,34(r2)
  812f38:	10803fcc 	andi	r2,r2,255
  812f3c:	10800170 	cmpltui	r2,r2,5
  812f40:	1000061e 	bne	r2,zero,812f5c <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
  812f44:	e0fffd17 	ldw	r3,-12(fp)
  812f48:	00800104 	movi	r2,4
  812f4c:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  812f50:	00000206 	br	812f5c <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
  812f54:	e13ffd17 	ldw	r4,-12(fp)
  812f58:	0812c4c0 	call	812c4c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812f5c:	e0bffd17 	ldw	r2,-12(fp)
  812f60:	10800883 	ldbu	r2,34(r2)
  812f64:	10803fcc 	andi	r2,r2,255
  812f68:	108000e8 	cmpgeui	r2,r2,3
  812f6c:	103ff91e 	bne	r2,zero,812f54 <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
  812f70:	00002206 	br	812ffc <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812f74:	e0bffc17 	ldw	r2,-16(fp)
  812f78:	10800098 	cmpnei	r2,r2,2
  812f7c:	10001f1e 	bne	r2,zero,812ffc <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
  812f80:	e13ffd17 	ldw	r4,-12(fp)
  812f84:	08129600 	call	812960 <lcd_clear_screen>
    break;
  812f88:	00001c06 	br	812ffc <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812f8c:	e0bffc17 	ldw	r2,-16(fp)
  812f90:	10800048 	cmpgei	r2,r2,1
  812f94:	1000191e 	bne	r2,zero,812ffc <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812f98:	e0bffd17 	ldw	r2,-12(fp)
  812f9c:	10800843 	ldbu	r2,33(r2)
  812fa0:	10803fcc 	andi	r2,r2,255
  812fa4:	10801428 	cmpgeui	r2,r2,80
  812fa8:	1000141e 	bne	r2,zero,812ffc <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812fac:	e0bffd17 	ldw	r2,-12(fp)
  812fb0:	10800883 	ldbu	r2,34(r2)
  812fb4:	11003fcc 	andi	r4,r2,255
  812fb8:	014018c4 	movi	r5,99
  812fbc:	08102900 	call	810290 <__mulsi3>
  812fc0:	10c01004 	addi	r3,r2,64
  812fc4:	e0bffd17 	ldw	r2,-12(fp)
  812fc8:	1887883a 	add	r3,r3,r2
  812fcc:	e0bffd17 	ldw	r2,-12(fp)
  812fd0:	10800843 	ldbu	r2,33(r2)
  812fd4:	10803fcc 	andi	r2,r2,255
  812fd8:	1889883a 	add	r4,r3,r2
  812fdc:	e0bffd17 	ldw	r2,-12(fp)
  812fe0:	10800843 	ldbu	r2,33(r2)
  812fe4:	10c03fcc 	andi	r3,r2,255
  812fe8:	00801404 	movi	r2,80
  812fec:	10c5c83a 	sub	r2,r2,r3
  812ff0:	100d883a 	mov	r6,r2
  812ff4:	01400804 	movi	r5,32
  812ff8:	0802b400 	call	802b40 <memset>
    }
    break;
  }
}
  812ffc:	e037883a 	mov	sp,fp
  813000:	dfc00117 	ldw	ra,4(sp)
  813004:	df000017 	ldw	fp,0(sp)
  813008:	dec00204 	addi	sp,sp,8
  81300c:	f800283a 	ret

00813010 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  813010:	defff004 	addi	sp,sp,-64
  813014:	dfc00f15 	stw	ra,60(sp)
  813018:	df000e15 	stw	fp,56(sp)
  81301c:	dc800d15 	stw	r18,52(sp)
  813020:	dc400c15 	stw	r17,48(sp)
  813024:	dc000b15 	stw	r16,44(sp)
  813028:	df000b04 	addi	fp,sp,44
  81302c:	e13ffc15 	stw	r4,-16(fp)
  813030:	e17ffd15 	stw	r5,-12(fp)
  813034:	e1bffe15 	stw	r6,-8(fp)
  813038:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  81303c:	e0bffe17 	ldw	r2,-8(fp)
  813040:	1007883a 	mov	r3,r2
  813044:	e0bffd17 	ldw	r2,-12(fp)
  813048:	10c5883a 	add	r2,r2,r3
  81304c:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  813050:	e0fffc17 	ldw	r3,-16(fp)
  813054:	00800044 	movi	r2,1
  813058:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  81305c:	0000a306 	br	8132ec <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
  813060:	e0bffd17 	ldw	r2,-12(fp)
  813064:	10800003 	ldbu	r2,0(r2)
  813068:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  81306c:	e0bffc17 	ldw	r2,-16(fp)
  813070:	10800903 	ldbu	r2,36(r2)
  813074:	10803fcc 	andi	r2,r2,255
  813078:	1080201c 	xori	r2,r2,128
  81307c:	10bfe004 	addi	r2,r2,-128
  813080:	1004803a 	cmplt	r2,r2,zero
  813084:	10003b1e 	bne	r2,zero,813174 <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
  813088:	e0bffc17 	ldw	r2,-16(fp)
  81308c:	10800903 	ldbu	r2,36(r2)
  813090:	10803fcc 	andi	r2,r2,255
  813094:	1080201c 	xori	r2,r2,128
  813098:	10bfe004 	addi	r2,r2,-128
  81309c:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8130a0:	e0bff717 	ldw	r2,-36(fp)
  8130a4:	1004c03a 	cmpne	r2,r2,zero
  8130a8:	1000031e 	bne	r2,zero,8130b8 <altera_avalon_lcd_16207_write+0xa8>
  8130ac:	e0bff807 	ldb	r2,-32(fp)
  8130b0:	108016d8 	cmpnei	r2,r2,91
  8130b4:	1000111e 	bne	r2,zero,8130fc <altera_avalon_lcd_16207_write+0xec>
  8130b8:	e0bff717 	ldw	r2,-36(fp)
  8130bc:	1005003a 	cmpeq	r2,r2,zero
  8130c0:	10001a1e 	bne	r2,zero,81312c <altera_avalon_lcd_16207_write+0x11c>
  8130c4:	e0bff807 	ldb	r2,-32(fp)
  8130c8:	1007883a 	mov	r3,r2
  8130cc:	00802074 	movhi	r2,129
  8130d0:	109bbc04 	addi	r2,r2,28400
  8130d4:	10800017 	ldw	r2,0(r2)
  8130d8:	1885883a 	add	r2,r3,r2
  8130dc:	10800003 	ldbu	r2,0(r2)
  8130e0:	10803fcc 	andi	r2,r2,255
  8130e4:	1080010c 	andi	r2,r2,4
  8130e8:	1004c03a 	cmpne	r2,r2,zero
  8130ec:	10000f1e 	bne	r2,zero,81312c <altera_avalon_lcd_16207_write+0x11c>
  8130f0:	e0bff807 	ldb	r2,-32(fp)
  8130f4:	10800ee0 	cmpeqi	r2,r2,59
  8130f8:	10000c1e 	bne	r2,zero,81312c <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  8130fc:	e0fff717 	ldw	r3,-36(fp)
  813100:	e0bffc17 	ldw	r2,-16(fp)
  813104:	1885883a 	add	r2,r3,r2
  813108:	10800a04 	addi	r2,r2,40
  81310c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  813110:	e17ff807 	ldb	r5,-32(fp)
  813114:	e13ffc17 	ldw	r4,-16(fp)
  813118:	0812d2c0 	call	812d2c <lcd_handle_escape>

        sp->esccount = -1;
  81311c:	e0fffc17 	ldw	r3,-16(fp)
  813120:	00bfffc4 	movi	r2,-1
  813124:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  813128:	00006d06 	br	8132e0 <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  81312c:	e0bffc17 	ldw	r2,-16(fp)
  813130:	10800903 	ldbu	r2,36(r2)
  813134:	10803fcc 	andi	r2,r2,255
  813138:	108001e8 	cmpgeui	r2,r2,7
  81313c:	1000681e 	bne	r2,zero,8132e0 <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
  813140:	e0fff717 	ldw	r3,-36(fp)
  813144:	e0bffc17 	ldw	r2,-16(fp)
  813148:	1885883a 	add	r2,r3,r2
  81314c:	10c00a04 	addi	r3,r2,40
  813150:	e0bff803 	ldbu	r2,-32(fp)
  813154:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  813158:	e0bffc17 	ldw	r2,-16(fp)
  81315c:	10800903 	ldbu	r2,36(r2)
  813160:	10800044 	addi	r2,r2,1
  813164:	1007883a 	mov	r3,r2
  813168:	e0bffc17 	ldw	r2,-16(fp)
  81316c:	10c00905 	stb	r3,36(r2)
  813170:	00005b06 	br	8132e0 <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
  813174:	e0bff807 	ldb	r2,-32(fp)
  813178:	108006d8 	cmpnei	r2,r2,27
  81317c:	1000031e 	bne	r2,zero,81318c <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
  813180:	e0bffc17 	ldw	r2,-16(fp)
  813184:	10000905 	stb	zero,36(r2)
  813188:	00005506 	br	8132e0 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
  81318c:	e0bff807 	ldb	r2,-32(fp)
  813190:	10800358 	cmpnei	r2,r2,13
  813194:	1000031e 	bne	r2,zero,8131a4 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
  813198:	e0bffc17 	ldw	r2,-16(fp)
  81319c:	10000845 	stb	zero,33(r2)
  8131a0:	00004f06 	br	8132e0 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
  8131a4:	e0bff807 	ldb	r2,-32(fp)
  8131a8:	10800298 	cmpnei	r2,r2,10
  8131ac:	1000101e 	bne	r2,zero,8131f0 <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
  8131b0:	e0bffc17 	ldw	r2,-16(fp)
  8131b4:	10000845 	stb	zero,33(r2)
      sp->y++;
  8131b8:	e0bffc17 	ldw	r2,-16(fp)
  8131bc:	10800883 	ldbu	r2,34(r2)
  8131c0:	10800044 	addi	r2,r2,1
  8131c4:	1007883a 	mov	r3,r2
  8131c8:	e0bffc17 	ldw	r2,-16(fp)
  8131cc:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8131d0:	e0bffc17 	ldw	r2,-16(fp)
  8131d4:	10800883 	ldbu	r2,34(r2)
  8131d8:	10803fcc 	andi	r2,r2,255
  8131dc:	108000f0 	cmpltui	r2,r2,3
  8131e0:	10003f1e 	bne	r2,zero,8132e0 <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
  8131e4:	e13ffc17 	ldw	r4,-16(fp)
  8131e8:	0812c4c0 	call	812c4c <lcd_scroll_up>
  8131ec:	00003c06 	br	8132e0 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
  8131f0:	e0bff807 	ldb	r2,-32(fp)
  8131f4:	10800218 	cmpnei	r2,r2,8
  8131f8:	10000c1e 	bne	r2,zero,81322c <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
  8131fc:	e0bffc17 	ldw	r2,-16(fp)
  813200:	10800843 	ldbu	r2,33(r2)
  813204:	10803fcc 	andi	r2,r2,255
  813208:	1005003a 	cmpeq	r2,r2,zero
  81320c:	1000341e 	bne	r2,zero,8132e0 <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
  813210:	e0bffc17 	ldw	r2,-16(fp)
  813214:	10800843 	ldbu	r2,33(r2)
  813218:	10bfffc4 	addi	r2,r2,-1
  81321c:	1007883a 	mov	r3,r2
  813220:	e0bffc17 	ldw	r2,-16(fp)
  813224:	10c00845 	stb	r3,33(r2)
  813228:	00002d06 	br	8132e0 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
  81322c:	e0bff807 	ldb	r2,-32(fp)
  813230:	1007883a 	mov	r3,r2
  813234:	00802074 	movhi	r2,129
  813238:	109bbc04 	addi	r2,r2,28400
  81323c:	10800017 	ldw	r2,0(r2)
  813240:	1885883a 	add	r2,r3,r2
  813244:	10800003 	ldbu	r2,0(r2)
  813248:	10803fcc 	andi	r2,r2,255
  81324c:	1080201c 	xori	r2,r2,128
  813250:	10bfe004 	addi	r2,r2,-128
  813254:	108025cc 	andi	r2,r2,151
  813258:	1005003a 	cmpeq	r2,r2,zero
  81325c:	1000201e 	bne	r2,zero,8132e0 <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  813260:	e0bffc17 	ldw	r2,-16(fp)
  813264:	10800883 	ldbu	r2,34(r2)
  813268:	10803fcc 	andi	r2,r2,255
  81326c:	108000b0 	cmpltui	r2,r2,2
  813270:	1000021e 	bne	r2,zero,81327c <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
  813274:	e13ffc17 	ldw	r4,-16(fp)
  813278:	0812c4c0 	call	812c4c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81327c:	e0bffc17 	ldw	r2,-16(fp)
  813280:	10800843 	ldbu	r2,33(r2)
  813284:	10803fcc 	andi	r2,r2,255
  813288:	10801428 	cmpgeui	r2,r2,80
  81328c:	10000e1e 	bne	r2,zero,8132c8 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
  813290:	e0bffc17 	ldw	r2,-16(fp)
  813294:	10800883 	ldbu	r2,34(r2)
  813298:	11003fcc 	andi	r4,r2,255
  81329c:	e0bffc17 	ldw	r2,-16(fp)
  8132a0:	10800843 	ldbu	r2,33(r2)
  8132a4:	14403fcc 	andi	r17,r2,255
  8132a8:	e43ffc17 	ldw	r16,-16(fp)
  8132ac:	014018c4 	movi	r5,99
  8132b0:	08102900 	call	810290 <__mulsi3>
  8132b4:	1405883a 	add	r2,r2,r16
  8132b8:	1445883a 	add	r2,r2,r17
  8132bc:	10c01004 	addi	r3,r2,64
  8132c0:	e0bff803 	ldbu	r2,-32(fp)
  8132c4:	18800005 	stb	r2,0(r3)

      sp->x++;
  8132c8:	e0bffc17 	ldw	r2,-16(fp)
  8132cc:	10800843 	ldbu	r2,33(r2)
  8132d0:	10800044 	addi	r2,r2,1
  8132d4:	1007883a 	mov	r3,r2
  8132d8:	e0bffc17 	ldw	r2,-16(fp)
  8132dc:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8132e0:	e0bffd17 	ldw	r2,-12(fp)
  8132e4:	10800044 	addi	r2,r2,1
  8132e8:	e0bffd15 	stw	r2,-12(fp)
  8132ec:	e0fffd17 	ldw	r3,-12(fp)
  8132f0:	e0bffb17 	ldw	r2,-20(fp)
  8132f4:	18bf5a36 	bltu	r3,r2,813060 <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8132f8:	00800404 	movi	r2,16
  8132fc:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813300:	e03ffa15 	stw	zero,-24(fp)
  813304:	00003906 	br	8133ec <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  813308:	00801404 	movi	r2,80
  81330c:	e0bff615 	stw	r2,-40(fp)
  813310:	00001206 	br	81335c <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
  813314:	e13ffa17 	ldw	r4,-24(fp)
  813318:	e0bff617 	ldw	r2,-40(fp)
  81331c:	147fffc4 	addi	r17,r2,-1
  813320:	e43ffc17 	ldw	r16,-16(fp)
  813324:	014018c4 	movi	r5,99
  813328:	08102900 	call	810290 <__mulsi3>
  81332c:	1405883a 	add	r2,r2,r16
  813330:	1445883a 	add	r2,r2,r17
  813334:	10801004 	addi	r2,r2,64
  813338:	10800003 	ldbu	r2,0(r2)
  81333c:	10803fcc 	andi	r2,r2,255
  813340:	1080201c 	xori	r2,r2,128
  813344:	10bfe004 	addi	r2,r2,-128
  813348:	10800818 	cmpnei	r2,r2,32
  81334c:	1000061e 	bne	r2,zero,813368 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  813350:	e0bff617 	ldw	r2,-40(fp)
  813354:	10bfffc4 	addi	r2,r2,-1
  813358:	e0bff615 	stw	r2,-40(fp)
  81335c:	e0bff617 	ldw	r2,-40(fp)
  813360:	10800048 	cmpgei	r2,r2,1
  813364:	103feb1e 	bne	r2,zero,813314 <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  813368:	e0bff617 	ldw	r2,-40(fp)
  81336c:	10800448 	cmpgei	r2,r2,17
  813370:	1000031e 	bne	r2,zero,813380 <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
  813374:	00800404 	movi	r2,16
  813378:	e0bff615 	stw	r2,-40(fp)
  81337c:	00000306 	br	81338c <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
  813380:	e0bff617 	ldw	r2,-40(fp)
  813384:	10800044 	addi	r2,r2,1
  813388:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  81338c:	e13ffa17 	ldw	r4,-24(fp)
  813390:	e0bff617 	ldw	r2,-40(fp)
  813394:	1023883a 	mov	r17,r2
  813398:	e43ffc17 	ldw	r16,-16(fp)
  81339c:	014018c4 	movi	r5,99
  8133a0:	08102900 	call	810290 <__mulsi3>
  8133a4:	1405883a 	add	r2,r2,r16
  8133a8:	10802404 	addi	r2,r2,144
  8133ac:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
  8133b0:	e0fff917 	ldw	r3,-28(fp)
  8133b4:	e0bff617 	ldw	r2,-40(fp)
  8133b8:	1880020e 	bge	r3,r2,8133c4 <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
  8133bc:	e0bff617 	ldw	r2,-40(fp)
  8133c0:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8133c4:	e13ffa17 	ldw	r4,-24(fp)
  8133c8:	e43ffc17 	ldw	r16,-16(fp)
  8133cc:	014018c4 	movi	r5,99
  8133d0:	08102900 	call	810290 <__mulsi3>
  8133d4:	1405883a 	add	r2,r2,r16
  8133d8:	10802404 	addi	r2,r2,144
  8133dc:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8133e0:	e0bffa17 	ldw	r2,-24(fp)
  8133e4:	10800044 	addi	r2,r2,1
  8133e8:	e0bffa15 	stw	r2,-24(fp)
  8133ec:	e0bffa17 	ldw	r2,-24(fp)
  8133f0:	10800090 	cmplti	r2,r2,2
  8133f4:	103fc41e 	bne	r2,zero,813308 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8133f8:	e0bff917 	ldw	r2,-28(fp)
  8133fc:	10800448 	cmpgei	r2,r2,17
  813400:	1000031e 	bne	r2,zero,813410 <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
  813404:	e0bffc17 	ldw	r2,-16(fp)
  813408:	10000985 	stb	zero,38(r2)
  81340c:	00003106 	br	8134d4 <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
  813410:	e0bff917 	ldw	r2,-28(fp)
  813414:	1085883a 	add	r2,r2,r2
  813418:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  81341c:	e0bff917 	ldw	r2,-28(fp)
  813420:	1007883a 	mov	r3,r2
  813424:	e0bffc17 	ldw	r2,-16(fp)
  813428:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81342c:	e03ffa15 	stw	zero,-24(fp)
  813430:	00002506 	br	8134c8 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  813434:	e13ffa17 	ldw	r4,-24(fp)
  813438:	e43ffc17 	ldw	r16,-16(fp)
  81343c:	014018c4 	movi	r5,99
  813440:	08102900 	call	810290 <__mulsi3>
  813444:	1405883a 	add	r2,r2,r16
  813448:	10802404 	addi	r2,r2,144
  81344c:	10800043 	ldbu	r2,1(r2)
  813450:	10803fcc 	andi	r2,r2,255
  813454:	1080201c 	xori	r2,r2,128
  813458:	10bfe004 	addi	r2,r2,-128
  81345c:	10800450 	cmplti	r2,r2,17
  813460:	1000161e 	bne	r2,zero,8134bc <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  813464:	e4bffa17 	ldw	r18,-24(fp)
  813468:	e13ffa17 	ldw	r4,-24(fp)
  81346c:	e43ffc17 	ldw	r16,-16(fp)
  813470:	014018c4 	movi	r5,99
  813474:	08102900 	call	810290 <__mulsi3>
  813478:	1405883a 	add	r2,r2,r16
  81347c:	10802404 	addi	r2,r2,144
  813480:	10800043 	ldbu	r2,1(r2)
  813484:	10803fcc 	andi	r2,r2,255
  813488:	1080201c 	xori	r2,r2,128
  81348c:	10bfe004 	addi	r2,r2,-128
  813490:	1008923a 	slli	r4,r2,8
  813494:	e17ff917 	ldw	r5,-28(fp)
  813498:	08101c00 	call	8101c0 <__divsi3>
  81349c:	1023883a 	mov	r17,r2
  8134a0:	e43ffc17 	ldw	r16,-16(fp)
  8134a4:	9009883a 	mov	r4,r18
  8134a8:	014018c4 	movi	r5,99
  8134ac:	08102900 	call	810290 <__mulsi3>
  8134b0:	1405883a 	add	r2,r2,r16
  8134b4:	10802404 	addi	r2,r2,144
  8134b8:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8134bc:	e0bffa17 	ldw	r2,-24(fp)
  8134c0:	10800044 	addi	r2,r2,1
  8134c4:	e0bffa15 	stw	r2,-24(fp)
  8134c8:	e0bffa17 	ldw	r2,-24(fp)
  8134cc:	10800090 	cmplti	r2,r2,2
  8134d0:	103fd81e 	bne	r2,zero,813434 <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8134d4:	e0bffc17 	ldw	r2,-16(fp)
  8134d8:	10800943 	ldbu	r2,37(r2)
  8134dc:	10803fcc 	andi	r2,r2,255
  8134e0:	1080201c 	xori	r2,r2,128
  8134e4:	10bfe004 	addi	r2,r2,-128
  8134e8:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  8134ec:	e13ffc17 	ldw	r4,-16(fp)
  8134f0:	0812a380 	call	812a38 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8134f4:	e0bffc17 	ldw	r2,-16(fp)
  8134f8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8134fc:	e0bffc17 	ldw	r2,-16(fp)
  813500:	10800943 	ldbu	r2,37(r2)
  813504:	10c03fcc 	andi	r3,r2,255
  813508:	18c0201c 	xori	r3,r3,128
  81350c:	18ffe004 	addi	r3,r3,-128
  813510:	e0bff517 	ldw	r2,-44(fp)
  813514:	18800426 	beq	r3,r2,813528 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  813518:	e0fffc17 	ldw	r3,-16(fp)
  81351c:	00800044 	movi	r2,1
  813520:	188009c5 	stb	r2,39(r3)
  }
  813524:	003feb06 	br	8134d4 <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  813528:	e0bffe17 	ldw	r2,-8(fp)
}
  81352c:	e037883a 	mov	sp,fp
  813530:	dfc00417 	ldw	ra,16(sp)
  813534:	df000317 	ldw	fp,12(sp)
  813538:	dc800217 	ldw	r18,8(sp)
  81353c:	dc400117 	ldw	r17,4(sp)
  813540:	dc000017 	ldw	r16,0(sp)
  813544:	dec00504 	addi	sp,sp,20
  813548:	f800283a 	ret

0081354c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  81354c:	defffc04 	addi	sp,sp,-16
  813550:	dfc00315 	stw	ra,12(sp)
  813554:	df000215 	stw	fp,8(sp)
  813558:	df000204 	addi	fp,sp,8
  81355c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  813560:	e0bfff17 	ldw	r2,-4(fp)
  813564:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  813568:	e0bffe17 	ldw	r2,-8(fp)
  81356c:	10800943 	ldbu	r2,37(r2)
  813570:	10803fcc 	andi	r2,r2,255
  813574:	1080201c 	xori	r2,r2,128
  813578:	10bfe004 	addi	r2,r2,-128
  81357c:	10c00044 	addi	r3,r2,1
  813580:	e0bffe17 	ldw	r2,-8(fp)
  813584:	10800983 	ldbu	r2,38(r2)
  813588:	10803fcc 	andi	r2,r2,255
  81358c:	1080201c 	xori	r2,r2,128
  813590:	10bfe004 	addi	r2,r2,-128
  813594:	18800316 	blt	r3,r2,8135a4 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  813598:	e0bffe17 	ldw	r2,-8(fp)
  81359c:	10000945 	stb	zero,37(r2)
  8135a0:	00000606 	br	8135bc <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8135a4:	e0bffe17 	ldw	r2,-8(fp)
  8135a8:	10800943 	ldbu	r2,37(r2)
  8135ac:	10800044 	addi	r2,r2,1
  8135b0:	1007883a 	mov	r3,r2
  8135b4:	e0bffe17 	ldw	r2,-8(fp)
  8135b8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8135bc:	e0bffe17 	ldw	r2,-8(fp)
  8135c0:	10800983 	ldbu	r2,38(r2)
  8135c4:	10803fcc 	andi	r2,r2,255
  8135c8:	1080201c 	xori	r2,r2,128
  8135cc:	10bfe004 	addi	r2,r2,-128
  8135d0:	10800050 	cmplti	r2,r2,1
  8135d4:	1000091e 	bne	r2,zero,8135fc <alt_lcd_16207_timeout+0xb0>
  8135d8:	e0bffe17 	ldw	r2,-8(fp)
  8135dc:	108009c3 	ldbu	r2,39(r2)
  8135e0:	10803fcc 	andi	r2,r2,255
  8135e4:	1080201c 	xori	r2,r2,128
  8135e8:	10bfe004 	addi	r2,r2,-128
  8135ec:	1004c03a 	cmpne	r2,r2,zero
  8135f0:	1000021e 	bne	r2,zero,8135fc <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  8135f4:	e13ffe17 	ldw	r4,-8(fp)
  8135f8:	0812a380 	call	812a38 <lcd_repaint_screen>

  return sp->period;
  8135fc:	e0bffe17 	ldw	r2,-8(fp)
  813600:	10800717 	ldw	r2,28(r2)
}
  813604:	e037883a 	mov	sp,fp
  813608:	dfc00117 	ldw	ra,4(sp)
  81360c:	df000017 	ldw	fp,0(sp)
  813610:	dec00204 	addi	sp,sp,8
  813614:	f800283a 	ret

00813618 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  813618:	defffc04 	addi	sp,sp,-16
  81361c:	dfc00315 	stw	ra,12(sp)
  813620:	df000215 	stw	fp,8(sp)
  813624:	df000204 	addi	fp,sp,8
  813628:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  81362c:	e0bfff17 	ldw	r2,-4(fp)
  813630:	10800017 	ldw	r2,0(r2)
  813634:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  813638:	e0bfff17 	ldw	r2,-4(fp)
  81363c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  813640:	010ea604 	movi	r4,15000
  813644:	0811a940 	call	811a94 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813648:	e0bffe17 	ldw	r2,-8(fp)
  81364c:	1007883a 	mov	r3,r2
  813650:	00800c04 	movi	r2,48
  813654:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  813658:	01040104 	movi	r4,4100
  81365c:	0811a940 	call	811a94 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813660:	e0bffe17 	ldw	r2,-8(fp)
  813664:	1007883a 	mov	r3,r2
  813668:	00800c04 	movi	r2,48
  81366c:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  813670:	0100fa04 	movi	r4,1000
  813674:	0811a940 	call	811a94 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813678:	e0bffe17 	ldw	r2,-8(fp)
  81367c:	1007883a 	mov	r3,r2
  813680:	00800c04 	movi	r2,48
  813684:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  813688:	e13fff17 	ldw	r4,-4(fp)
  81368c:	01400e04 	movi	r5,56
  813690:	08127d40 	call	8127d4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  813694:	e13fff17 	ldw	r4,-4(fp)
  813698:	01400204 	movi	r5,8
  81369c:	08127d40 	call	8127d4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8136a0:	e13fff17 	ldw	r4,-4(fp)
  8136a4:	08129600 	call	812960 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8136a8:	e13fff17 	ldw	r4,-4(fp)
  8136ac:	01400184 	movi	r5,6
  8136b0:	08127d40 	call	8127d4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8136b4:	e13fff17 	ldw	r4,-4(fp)
  8136b8:	01400304 	movi	r5,12
  8136bc:	08127d40 	call	8127d4 <lcd_write_command>

  sp->esccount = -1;
  8136c0:	e0ffff17 	ldw	r3,-4(fp)
  8136c4:	00bfffc4 	movi	r2,-1
  8136c8:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8136cc:	e0bfff17 	ldw	r2,-4(fp)
  8136d0:	11000a04 	addi	r4,r2,40
  8136d4:	000b883a 	mov	r5,zero
  8136d8:	01800204 	movi	r6,8
  8136dc:	0802b400 	call	802b40 <memset>

  sp->scrollpos = 0;
  8136e0:	e0bfff17 	ldw	r2,-4(fp)
  8136e4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8136e8:	e0bfff17 	ldw	r2,-4(fp)
  8136ec:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8136f0:	e0bfff17 	ldw	r2,-4(fp)
  8136f4:	100009c5 	stb	zero,39(r2)
  8136f8:	008020b4 	movhi	r2,130
  8136fc:	10a2ca04 	addi	r2,r2,-29912
  813700:	10800017 	ldw	r2,0(r2)
  813704:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  813708:	01400284 	movi	r5,10
  81370c:	08102800 	call	810280 <__udivsi3>
  813710:	1007883a 	mov	r3,r2
  813714:	e0bfff17 	ldw	r2,-4(fp)
  813718:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  81371c:	e0bfff17 	ldw	r2,-4(fp)
  813720:	11000104 	addi	r4,r2,4
  813724:	e0bfff17 	ldw	r2,-4(fp)
  813728:	10800717 	ldw	r2,28(r2)
  81372c:	100b883a 	mov	r5,r2
  813730:	01802074 	movhi	r6,129
  813734:	318d5304 	addi	r6,r6,13644
  813738:	e1ffff17 	ldw	r7,-4(fp)
  81373c:	08138ac0 	call	8138ac <alt_alarm_start>
}
  813740:	e037883a 	mov	sp,fp
  813744:	dfc00117 	ldw	ra,4(sp)
  813748:	df000017 	ldw	fp,0(sp)
  81374c:	dec00204 	addi	sp,sp,8
  813750:	f800283a 	ret

00813754 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813754:	defffa04 	addi	sp,sp,-24
  813758:	dfc00515 	stw	ra,20(sp)
  81375c:	df000415 	stw	fp,16(sp)
  813760:	df000404 	addi	fp,sp,16
  813764:	e13ffd15 	stw	r4,-12(fp)
  813768:	e17ffe15 	stw	r5,-8(fp)
  81376c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  813770:	e0bffd17 	ldw	r2,-12(fp)
  813774:	10800017 	ldw	r2,0(r2)
  813778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81377c:	e0bffc17 	ldw	r2,-16(fp)
  813780:	11000a04 	addi	r4,r2,40
  813784:	e0bffd17 	ldw	r2,-12(fp)
  813788:	11c00217 	ldw	r7,8(r2)
  81378c:	e17ffe17 	ldw	r5,-8(fp)
  813790:	e1bfff17 	ldw	r6,-4(fp)
  813794:	08130100 	call	813010 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  813798:	e037883a 	mov	sp,fp
  81379c:	dfc00117 	ldw	ra,4(sp)
  8137a0:	df000017 	ldw	fp,0(sp)
  8137a4:	dec00204 	addi	sp,sp,8
  8137a8:	f800283a 	ret

008137ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8137ac:	defffa04 	addi	sp,sp,-24
  8137b0:	dfc00515 	stw	ra,20(sp)
  8137b4:	df000415 	stw	fp,16(sp)
  8137b8:	df000404 	addi	fp,sp,16
  8137bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8137c0:	e0bfff17 	ldw	r2,-4(fp)
  8137c4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8137c8:	e0bfff17 	ldw	r2,-4(fp)
  8137cc:	10800104 	addi	r2,r2,4
  8137d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137d4:	0005303a 	rdctl	r2,status
  8137d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137dc:	e0fffd17 	ldw	r3,-12(fp)
  8137e0:	00bfff84 	movi	r2,-2
  8137e4:	1884703a 	and	r2,r3,r2
  8137e8:	1001703a 	wrctl	status,r2
  
  return context;
  8137ec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8137f0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8137f4:	08141f00 	call	8141f0 <alt_tick>
  8137f8:	e0bffe17 	ldw	r2,-8(fp)
  8137fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813800:	e0bffc17 	ldw	r2,-16(fp)
  813804:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813808:	e037883a 	mov	sp,fp
  81380c:	dfc00117 	ldw	ra,4(sp)
  813810:	df000017 	ldw	fp,0(sp)
  813814:	dec00204 	addi	sp,sp,8
  813818:	f800283a 	ret

0081381c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81381c:	defff804 	addi	sp,sp,-32
  813820:	dfc00715 	stw	ra,28(sp)
  813824:	df000615 	stw	fp,24(sp)
  813828:	df000604 	addi	fp,sp,24
  81382c:	e13ffc15 	stw	r4,-16(fp)
  813830:	e17ffd15 	stw	r5,-12(fp)
  813834:	e1bffe15 	stw	r6,-8(fp)
  813838:	e1ffff15 	stw	r7,-4(fp)
  81383c:	e0bfff17 	ldw	r2,-4(fp)
  813840:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813844:	008020b4 	movhi	r2,130
  813848:	10a2ca04 	addi	r2,r2,-29912
  81384c:	10800017 	ldw	r2,0(r2)
  813850:	1004c03a 	cmpne	r2,r2,zero
  813854:	1000041e 	bne	r2,zero,813868 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813858:	00c020b4 	movhi	r3,130
  81385c:	18e2ca04 	addi	r3,r3,-29912
  813860:	e0bffb17 	ldw	r2,-20(fp)
  813864:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813868:	e0bffc17 	ldw	r2,-16(fp)
  81386c:	10800104 	addi	r2,r2,4
  813870:	1007883a 	mov	r3,r2
  813874:	008001c4 	movi	r2,7
  813878:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  81387c:	d8000015 	stw	zero,0(sp)
  813880:	e13ffd17 	ldw	r4,-12(fp)
  813884:	e17ffe17 	ldw	r5,-8(fp)
  813888:	01802074 	movhi	r6,129
  81388c:	318deb04 	addi	r6,r6,14252
  813890:	e1fffc17 	ldw	r7,-16(fp)
  813894:	0810e1c0 	call	810e1c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  813898:	e037883a 	mov	sp,fp
  81389c:	dfc00117 	ldw	ra,4(sp)
  8138a0:	df000017 	ldw	fp,0(sp)
  8138a4:	dec00204 	addi	sp,sp,8
  8138a8:	f800283a 	ret

008138ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8138ac:	defff404 	addi	sp,sp,-48
  8138b0:	df000b15 	stw	fp,44(sp)
  8138b4:	df000b04 	addi	fp,sp,44
  8138b8:	e13ffb15 	stw	r4,-20(fp)
  8138bc:	e17ffc15 	stw	r5,-16(fp)
  8138c0:	e1bffd15 	stw	r6,-12(fp)
  8138c4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8138c8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8138cc:	008020b4 	movhi	r2,130
  8138d0:	10a2ca04 	addi	r2,r2,-29912
  8138d4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8138d8:	1005003a 	cmpeq	r2,r2,zero
  8138dc:	1000411e 	bne	r2,zero,8139e4 <alt_alarm_start+0x138>
  {
    if (alarm)
  8138e0:	e0bffb17 	ldw	r2,-20(fp)
  8138e4:	1005003a 	cmpeq	r2,r2,zero
  8138e8:	10003b1e 	bne	r2,zero,8139d8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8138ec:	e0fffb17 	ldw	r3,-20(fp)
  8138f0:	e0bffd17 	ldw	r2,-12(fp)
  8138f4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8138f8:	e0fffb17 	ldw	r3,-20(fp)
  8138fc:	e0bffe17 	ldw	r2,-8(fp)
  813900:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813904:	0005303a 	rdctl	r2,status
  813908:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81390c:	e0fff817 	ldw	r3,-32(fp)
  813910:	00bfff84 	movi	r2,-2
  813914:	1884703a 	and	r2,r3,r2
  813918:	1001703a 	wrctl	status,r2
  
  return context;
  81391c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  813920:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813924:	008020b4 	movhi	r2,130
  813928:	10a2cb04 	addi	r2,r2,-29908
  81392c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  813930:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  813934:	e0fffc17 	ldw	r3,-16(fp)
  813938:	e0bff917 	ldw	r2,-28(fp)
  81393c:	1885883a 	add	r2,r3,r2
  813940:	10c00044 	addi	r3,r2,1
  813944:	e0bffb17 	ldw	r2,-20(fp)
  813948:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81394c:	e0bffb17 	ldw	r2,-20(fp)
  813950:	10c00217 	ldw	r3,8(r2)
  813954:	e0bff917 	ldw	r2,-28(fp)
  813958:	1880042e 	bgeu	r3,r2,81396c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81395c:	e0fffb17 	ldw	r3,-20(fp)
  813960:	00800044 	movi	r2,1
  813964:	18800405 	stb	r2,16(r3)
  813968:	00000206 	br	813974 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81396c:	e0bffb17 	ldw	r2,-20(fp)
  813970:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  813974:	e0fffb17 	ldw	r3,-20(fp)
  813978:	00802074 	movhi	r2,129
  81397c:	109bc804 	addi	r2,r2,28448
  813980:	e0bff615 	stw	r2,-40(fp)
  813984:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813988:	e0fff717 	ldw	r3,-36(fp)
  81398c:	e0bff617 	ldw	r2,-40(fp)
  813990:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813994:	e0bff617 	ldw	r2,-40(fp)
  813998:	10c00017 	ldw	r3,0(r2)
  81399c:	e0bff717 	ldw	r2,-36(fp)
  8139a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8139a4:	e0bff617 	ldw	r2,-40(fp)
  8139a8:	10c00017 	ldw	r3,0(r2)
  8139ac:	e0bff717 	ldw	r2,-36(fp)
  8139b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8139b4:	e0fff617 	ldw	r3,-40(fp)
  8139b8:	e0bff717 	ldw	r2,-36(fp)
  8139bc:	18800015 	stw	r2,0(r3)
  8139c0:	e0bffa17 	ldw	r2,-24(fp)
  8139c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8139c8:	e0bff517 	ldw	r2,-44(fp)
  8139cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8139d0:	e03fff15 	stw	zero,-4(fp)
  8139d4:	00000506 	br	8139ec <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8139d8:	00bffa84 	movi	r2,-22
  8139dc:	e0bfff15 	stw	r2,-4(fp)
  8139e0:	00000206 	br	8139ec <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8139e4:	00bfde84 	movi	r2,-134
  8139e8:	e0bfff15 	stw	r2,-4(fp)
  8139ec:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8139f0:	e037883a 	mov	sp,fp
  8139f4:	df000017 	ldw	fp,0(sp)
  8139f8:	dec00104 	addi	sp,sp,4
  8139fc:	f800283a 	ret

00813a00 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  813a00:	defffa04 	addi	sp,sp,-24
  813a04:	dfc00515 	stw	ra,20(sp)
  813a08:	df000415 	stw	fp,16(sp)
  813a0c:	df000404 	addi	fp,sp,16
  813a10:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  813a14:	008000c4 	movi	r2,3
  813a18:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  813a1c:	e13ffc17 	ldw	r4,-16(fp)
  813a20:	014003f4 	movhi	r5,15
  813a24:	29509004 	addi	r5,r5,16960
  813a28:	08102900 	call	810290 <__mulsi3>
  813a2c:	100b883a 	mov	r5,r2
  813a30:	0100bef4 	movhi	r4,763
  813a34:	213c2004 	addi	r4,r4,-3968
  813a38:	08102800 	call	810280 <__udivsi3>
  813a3c:	100b883a 	mov	r5,r2
  813a40:	01200034 	movhi	r4,32768
  813a44:	213fffc4 	addi	r4,r4,-1
  813a48:	08102800 	call	810280 <__udivsi3>
  813a4c:	100b883a 	mov	r5,r2
  813a50:	e13fff17 	ldw	r4,-4(fp)
  813a54:	08102800 	call	810280 <__udivsi3>
  813a58:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  813a5c:	e0bffd17 	ldw	r2,-12(fp)
  813a60:	1005003a 	cmpeq	r2,r2,zero
  813a64:	10002a1e 	bne	r2,zero,813b10 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  813a68:	e03ffe15 	stw	zero,-8(fp)
  813a6c:	00001706 	br	813acc <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  813a70:	00a00034 	movhi	r2,32768
  813a74:	10bfffc4 	addi	r2,r2,-1
  813a78:	10bfffc4 	addi	r2,r2,-1
  813a7c:	103ffe1e 	bne	r2,zero,813a78 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  813a80:	e13ffc17 	ldw	r4,-16(fp)
  813a84:	014003f4 	movhi	r5,15
  813a88:	29509004 	addi	r5,r5,16960
  813a8c:	08102900 	call	810290 <__mulsi3>
  813a90:	100b883a 	mov	r5,r2
  813a94:	0100bef4 	movhi	r4,763
  813a98:	213c2004 	addi	r4,r4,-3968
  813a9c:	08102800 	call	810280 <__udivsi3>
  813aa0:	100b883a 	mov	r5,r2
  813aa4:	01200034 	movhi	r4,32768
  813aa8:	213fffc4 	addi	r4,r4,-1
  813aac:	08102800 	call	810280 <__udivsi3>
  813ab0:	1007883a 	mov	r3,r2
  813ab4:	e0bfff17 	ldw	r2,-4(fp)
  813ab8:	10c5c83a 	sub	r2,r2,r3
  813abc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  813ac0:	e0bffe17 	ldw	r2,-8(fp)
  813ac4:	10800044 	addi	r2,r2,1
  813ac8:	e0bffe15 	stw	r2,-8(fp)
  813acc:	e0fffe17 	ldw	r3,-8(fp)
  813ad0:	e0bffd17 	ldw	r2,-12(fp)
  813ad4:	18bfe616 	blt	r3,r2,813a70 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  813ad8:	e13ffc17 	ldw	r4,-16(fp)
  813adc:	014003f4 	movhi	r5,15
  813ae0:	29509004 	addi	r5,r5,16960
  813ae4:	08102900 	call	810290 <__mulsi3>
  813ae8:	100b883a 	mov	r5,r2
  813aec:	0100bef4 	movhi	r4,763
  813af0:	213c2004 	addi	r4,r4,-3968
  813af4:	08102800 	call	810280 <__udivsi3>
  813af8:	1009883a 	mov	r4,r2
  813afc:	e17fff17 	ldw	r5,-4(fp)
  813b00:	08102900 	call	810290 <__mulsi3>
  813b04:	10bfffc4 	addi	r2,r2,-1
  813b08:	103ffe1e 	bne	r2,zero,813b04 <alt_busy_sleep+0x104>
  813b0c:	00000d06 	br	813b44 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  813b10:	e13ffc17 	ldw	r4,-16(fp)
  813b14:	014003f4 	movhi	r5,15
  813b18:	29509004 	addi	r5,r5,16960
  813b1c:	08102900 	call	810290 <__mulsi3>
  813b20:	100b883a 	mov	r5,r2
  813b24:	0100bef4 	movhi	r4,763
  813b28:	213c2004 	addi	r4,r4,-3968
  813b2c:	08102800 	call	810280 <__udivsi3>
  813b30:	1009883a 	mov	r4,r2
  813b34:	e17fff17 	ldw	r5,-4(fp)
  813b38:	08102900 	call	810290 <__mulsi3>
  813b3c:	10bfffc4 	addi	r2,r2,-1
  813b40:	00bffe16 	blt	zero,r2,813b3c <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  813b44:	0005883a 	mov	r2,zero
}
  813b48:	e037883a 	mov	sp,fp
  813b4c:	dfc00117 	ldw	ra,4(sp)
  813b50:	df000017 	ldw	fp,0(sp)
  813b54:	dec00204 	addi	sp,sp,8
  813b58:	f800283a 	ret

00813b5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813b5c:	deffff04 	addi	sp,sp,-4
  813b60:	df000015 	stw	fp,0(sp)
  813b64:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813b68:	e037883a 	mov	sp,fp
  813b6c:	df000017 	ldw	fp,0(sp)
  813b70:	dec00104 	addi	sp,sp,4
  813b74:	f800283a 	ret

00813b78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813b78:	defff904 	addi	sp,sp,-28
  813b7c:	dfc00615 	stw	ra,24(sp)
  813b80:	df000515 	stw	fp,20(sp)
  813b84:	df000504 	addi	fp,sp,20
  813b88:	e13ffd15 	stw	r4,-12(fp)
  813b8c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813b90:	e0bffd17 	ldw	r2,-12(fp)
  813b94:	1005003a 	cmpeq	r2,r2,zero
  813b98:	1000041e 	bne	r2,zero,813bac <alt_dev_llist_insert+0x34>
  813b9c:	e0bffd17 	ldw	r2,-12(fp)
  813ba0:	10800217 	ldw	r2,8(r2)
  813ba4:	1004c03a 	cmpne	r2,r2,zero
  813ba8:	1000071e 	bne	r2,zero,813bc8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813bac:	0813c2c0 	call	813c2c <alt_get_errno>
  813bb0:	1007883a 	mov	r3,r2
  813bb4:	00800584 	movi	r2,22
  813bb8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813bbc:	00bffa84 	movi	r2,-22
  813bc0:	e0bfff15 	stw	r2,-4(fp)
  813bc4:	00001306 	br	813c14 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813bc8:	e0fffd17 	ldw	r3,-12(fp)
  813bcc:	e0bffe17 	ldw	r2,-8(fp)
  813bd0:	e0bffb15 	stw	r2,-20(fp)
  813bd4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813bd8:	e0fffc17 	ldw	r3,-16(fp)
  813bdc:	e0bffb17 	ldw	r2,-20(fp)
  813be0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813be4:	e0bffb17 	ldw	r2,-20(fp)
  813be8:	10c00017 	ldw	r3,0(r2)
  813bec:	e0bffc17 	ldw	r2,-16(fp)
  813bf0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813bf4:	e0bffb17 	ldw	r2,-20(fp)
  813bf8:	10c00017 	ldw	r3,0(r2)
  813bfc:	e0bffc17 	ldw	r2,-16(fp)
  813c00:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813c04:	e0fffb17 	ldw	r3,-20(fp)
  813c08:	e0bffc17 	ldw	r2,-16(fp)
  813c0c:	18800015 	stw	r2,0(r3)

  return 0;  
  813c10:	e03fff15 	stw	zero,-4(fp)
  813c14:	e0bfff17 	ldw	r2,-4(fp)
}
  813c18:	e037883a 	mov	sp,fp
  813c1c:	dfc00117 	ldw	ra,4(sp)
  813c20:	df000017 	ldw	fp,0(sp)
  813c24:	dec00204 	addi	sp,sp,8
  813c28:	f800283a 	ret

00813c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813c2c:	defffd04 	addi	sp,sp,-12
  813c30:	dfc00215 	stw	ra,8(sp)
  813c34:	df000115 	stw	fp,4(sp)
  813c38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813c3c:	00802074 	movhi	r2,129
  813c40:	109bc404 	addi	r2,r2,28432
  813c44:	10800017 	ldw	r2,0(r2)
  813c48:	1005003a 	cmpeq	r2,r2,zero
  813c4c:	1000061e 	bne	r2,zero,813c68 <alt_get_errno+0x3c>
  813c50:	00802074 	movhi	r2,129
  813c54:	109bc404 	addi	r2,r2,28432
  813c58:	10800017 	ldw	r2,0(r2)
  813c5c:	103ee83a 	callr	r2
  813c60:	e0bfff15 	stw	r2,-4(fp)
  813c64:	00000306 	br	813c74 <alt_get_errno+0x48>
  813c68:	008020b4 	movhi	r2,130
  813c6c:	10a2bf04 	addi	r2,r2,-29956
  813c70:	e0bfff15 	stw	r2,-4(fp)
  813c74:	e0bfff17 	ldw	r2,-4(fp)
}
  813c78:	e037883a 	mov	sp,fp
  813c7c:	dfc00117 	ldw	ra,4(sp)
  813c80:	df000017 	ldw	fp,0(sp)
  813c84:	dec00204 	addi	sp,sp,8
  813c88:	f800283a 	ret

00813c8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813c8c:	defffd04 	addi	sp,sp,-12
  813c90:	dfc00215 	stw	ra,8(sp)
  813c94:	df000115 	stw	fp,4(sp)
  813c98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813c9c:	00bfff04 	movi	r2,-4
  813ca0:	00c02074 	movhi	r3,129
  813ca4:	18d20904 	addi	r3,r3,18468
  813ca8:	1885883a 	add	r2,r3,r2
  813cac:	e0bfff15 	stw	r2,-4(fp)
  813cb0:	00000606 	br	813ccc <_do_ctors+0x40>
        (*ctor) (); 
  813cb4:	e0bfff17 	ldw	r2,-4(fp)
  813cb8:	10800017 	ldw	r2,0(r2)
  813cbc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813cc0:	e0bfff17 	ldw	r2,-4(fp)
  813cc4:	10bfff04 	addi	r2,r2,-4
  813cc8:	e0bfff15 	stw	r2,-4(fp)
  813ccc:	e0ffff17 	ldw	r3,-4(fp)
  813cd0:	00802074 	movhi	r2,129
  813cd4:	10920804 	addi	r2,r2,18464
  813cd8:	18bff62e 	bgeu	r3,r2,813cb4 <_do_ctors+0x28>
        (*ctor) (); 
}
  813cdc:	e037883a 	mov	sp,fp
  813ce0:	dfc00117 	ldw	ra,4(sp)
  813ce4:	df000017 	ldw	fp,0(sp)
  813ce8:	dec00204 	addi	sp,sp,8
  813cec:	f800283a 	ret

00813cf0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813cf0:	defffd04 	addi	sp,sp,-12
  813cf4:	dfc00215 	stw	ra,8(sp)
  813cf8:	df000115 	stw	fp,4(sp)
  813cfc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813d00:	00bfff04 	movi	r2,-4
  813d04:	00c02074 	movhi	r3,129
  813d08:	18d20904 	addi	r3,r3,18468
  813d0c:	1885883a 	add	r2,r3,r2
  813d10:	e0bfff15 	stw	r2,-4(fp)
  813d14:	00000606 	br	813d30 <_do_dtors+0x40>
        (*dtor) (); 
  813d18:	e0bfff17 	ldw	r2,-4(fp)
  813d1c:	10800017 	ldw	r2,0(r2)
  813d20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813d24:	e0bfff17 	ldw	r2,-4(fp)
  813d28:	10bfff04 	addi	r2,r2,-4
  813d2c:	e0bfff15 	stw	r2,-4(fp)
  813d30:	e0ffff17 	ldw	r3,-4(fp)
  813d34:	00802074 	movhi	r2,129
  813d38:	10920904 	addi	r2,r2,18468
  813d3c:	18bff62e 	bgeu	r3,r2,813d18 <_do_dtors+0x28>
        (*dtor) (); 
}
  813d40:	e037883a 	mov	sp,fp
  813d44:	dfc00117 	ldw	ra,4(sp)
  813d48:	df000017 	ldw	fp,0(sp)
  813d4c:	dec00204 	addi	sp,sp,8
  813d50:	f800283a 	ret

00813d54 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813d54:	defff904 	addi	sp,sp,-28
  813d58:	dfc00615 	stw	ra,24(sp)
  813d5c:	df000515 	stw	fp,20(sp)
  813d60:	df000504 	addi	fp,sp,20
  813d64:	e13ffd15 	stw	r4,-12(fp)
  813d68:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813d6c:	e0bffe17 	ldw	r2,-8(fp)
  813d70:	10800017 	ldw	r2,0(r2)
  813d74:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813d78:	e13ffd17 	ldw	r4,-12(fp)
  813d7c:	08032b00 	call	8032b0 <strlen>
  813d80:	10800044 	addi	r2,r2,1
  813d84:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813d88:	00000d06 	br	813dc0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813d8c:	e0bffc17 	ldw	r2,-16(fp)
  813d90:	11000217 	ldw	r4,8(r2)
  813d94:	e1bffb17 	ldw	r6,-20(fp)
  813d98:	e17ffd17 	ldw	r5,-12(fp)
  813d9c:	08143f80 	call	8143f8 <memcmp>
  813da0:	1004c03a 	cmpne	r2,r2,zero
  813da4:	1000031e 	bne	r2,zero,813db4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813da8:	e0bffc17 	ldw	r2,-16(fp)
  813dac:	e0bfff15 	stw	r2,-4(fp)
  813db0:	00000706 	br	813dd0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813db4:	e0bffc17 	ldw	r2,-16(fp)
  813db8:	10800017 	ldw	r2,0(r2)
  813dbc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813dc0:	e0fffe17 	ldw	r3,-8(fp)
  813dc4:	e0bffc17 	ldw	r2,-16(fp)
  813dc8:	10fff01e 	bne	r2,r3,813d8c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813dcc:	e03fff15 	stw	zero,-4(fp)
  813dd0:	e0bfff17 	ldw	r2,-4(fp)
}
  813dd4:	e037883a 	mov	sp,fp
  813dd8:	dfc00117 	ldw	ra,4(sp)
  813ddc:	df000017 	ldw	fp,0(sp)
  813de0:	dec00204 	addi	sp,sp,8
  813de4:	f800283a 	ret

00813de8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813de8:	defffa04 	addi	sp,sp,-24
  813dec:	dfc00515 	stw	ra,20(sp)
  813df0:	df000415 	stw	fp,16(sp)
  813df4:	df000404 	addi	fp,sp,16
  813df8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813dfc:	00802074 	movhi	r2,129
  813e00:	109bbf04 	addi	r2,r2,28412
  813e04:	10800017 	ldw	r2,0(r2)
  813e08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813e0c:	00003306 	br	813edc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813e10:	e0bffd17 	ldw	r2,-12(fp)
  813e14:	11000217 	ldw	r4,8(r2)
  813e18:	08032b00 	call	8032b0 <strlen>
  813e1c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813e20:	e0bffd17 	ldw	r2,-12(fp)
  813e24:	10c00217 	ldw	r3,8(r2)
  813e28:	e0bffc17 	ldw	r2,-16(fp)
  813e2c:	1885883a 	add	r2,r3,r2
  813e30:	10bfffc4 	addi	r2,r2,-1
  813e34:	10800003 	ldbu	r2,0(r2)
  813e38:	10803fcc 	andi	r2,r2,255
  813e3c:	1080201c 	xori	r2,r2,128
  813e40:	10bfe004 	addi	r2,r2,-128
  813e44:	10800bd8 	cmpnei	r2,r2,47
  813e48:	1000031e 	bne	r2,zero,813e58 <alt_find_file+0x70>
    {
      len -= 1;
  813e4c:	e0bffc17 	ldw	r2,-16(fp)
  813e50:	10bfffc4 	addi	r2,r2,-1
  813e54:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813e58:	e0bffc17 	ldw	r2,-16(fp)
  813e5c:	1007883a 	mov	r3,r2
  813e60:	e0bffe17 	ldw	r2,-8(fp)
  813e64:	1885883a 	add	r2,r3,r2
  813e68:	10800003 	ldbu	r2,0(r2)
  813e6c:	10803fcc 	andi	r2,r2,255
  813e70:	1080201c 	xori	r2,r2,128
  813e74:	10bfe004 	addi	r2,r2,-128
  813e78:	10800be0 	cmpeqi	r2,r2,47
  813e7c:	10000a1e 	bne	r2,zero,813ea8 <alt_find_file+0xc0>
  813e80:	e0bffc17 	ldw	r2,-16(fp)
  813e84:	1007883a 	mov	r3,r2
  813e88:	e0bffe17 	ldw	r2,-8(fp)
  813e8c:	1885883a 	add	r2,r3,r2
  813e90:	10800003 	ldbu	r2,0(r2)
  813e94:	10803fcc 	andi	r2,r2,255
  813e98:	1080201c 	xori	r2,r2,128
  813e9c:	10bfe004 	addi	r2,r2,-128
  813ea0:	1004c03a 	cmpne	r2,r2,zero
  813ea4:	10000a1e 	bne	r2,zero,813ed0 <alt_find_file+0xe8>
  813ea8:	e0bffd17 	ldw	r2,-12(fp)
  813eac:	11000217 	ldw	r4,8(r2)
  813eb0:	e1bffc17 	ldw	r6,-16(fp)
  813eb4:	e17ffe17 	ldw	r5,-8(fp)
  813eb8:	08143f80 	call	8143f8 <memcmp>
  813ebc:	1004c03a 	cmpne	r2,r2,zero
  813ec0:	1000031e 	bne	r2,zero,813ed0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813ec4:	e0bffd17 	ldw	r2,-12(fp)
  813ec8:	e0bfff15 	stw	r2,-4(fp)
  813ecc:	00000806 	br	813ef0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  813ed0:	e0bffd17 	ldw	r2,-12(fp)
  813ed4:	10800017 	ldw	r2,0(r2)
  813ed8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813edc:	00c02074 	movhi	r3,129
  813ee0:	18dbbf04 	addi	r3,r3,28412
  813ee4:	e0bffd17 	ldw	r2,-12(fp)
  813ee8:	10ffc91e 	bne	r2,r3,813e10 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813eec:	e03fff15 	stw	zero,-4(fp)
  813ef0:	e0bfff17 	ldw	r2,-4(fp)
}
  813ef4:	e037883a 	mov	sp,fp
  813ef8:	dfc00117 	ldw	ra,4(sp)
  813efc:	df000017 	ldw	fp,0(sp)
  813f00:	dec00204 	addi	sp,sp,8
  813f04:	f800283a 	ret

00813f08 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813f08:	defffa04 	addi	sp,sp,-24
  813f0c:	dfc00515 	stw	ra,20(sp)
  813f10:	df000415 	stw	fp,16(sp)
  813f14:	dc000315 	stw	r16,12(sp)
  813f18:	df000304 	addi	fp,sp,12
  813f1c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813f20:	00bffa04 	movi	r2,-24
  813f24:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813f28:	e03ffe15 	stw	zero,-8(fp)
  813f2c:	00002006 	br	813fb0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  813f30:	e13ffe17 	ldw	r4,-8(fp)
  813f34:	04002074 	movhi	r16,129
  813f38:	8416f804 	addi	r16,r16,23520
  813f3c:	01400304 	movi	r5,12
  813f40:	08102900 	call	810290 <__mulsi3>
  813f44:	1405883a 	add	r2,r2,r16
  813f48:	10800017 	ldw	r2,0(r2)
  813f4c:	1004c03a 	cmpne	r2,r2,zero
  813f50:	1000141e 	bne	r2,zero,813fa4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  813f54:	e13ffe17 	ldw	r4,-8(fp)
  813f58:	04002074 	movhi	r16,129
  813f5c:	8416f804 	addi	r16,r16,23520
  813f60:	01400304 	movi	r5,12
  813f64:	08102900 	call	810290 <__mulsi3>
  813f68:	1407883a 	add	r3,r2,r16
  813f6c:	e0bfff17 	ldw	r2,-4(fp)
  813f70:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  813f74:	00802074 	movhi	r2,129
  813f78:	109bc304 	addi	r2,r2,28428
  813f7c:	10c00017 	ldw	r3,0(r2)
  813f80:	e0bffe17 	ldw	r2,-8(fp)
  813f84:	1880040e 	bge	r3,r2,813f98 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  813f88:	00c02074 	movhi	r3,129
  813f8c:	18dbc304 	addi	r3,r3,28428
  813f90:	e0bffe17 	ldw	r2,-8(fp)
  813f94:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  813f98:	e0bffe17 	ldw	r2,-8(fp)
  813f9c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  813fa0:	00000606 	br	813fbc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813fa4:	e0bffe17 	ldw	r2,-8(fp)
  813fa8:	10800044 	addi	r2,r2,1
  813fac:	e0bffe15 	stw	r2,-8(fp)
  813fb0:	e0bffe17 	ldw	r2,-8(fp)
  813fb4:	10800810 	cmplti	r2,r2,32
  813fb8:	103fdd1e 	bne	r2,zero,813f30 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813fbc:	e0bffd17 	ldw	r2,-12(fp)
}
  813fc0:	e037883a 	mov	sp,fp
  813fc4:	dfc00217 	ldw	ra,8(sp)
  813fc8:	df000117 	ldw	fp,4(sp)
  813fcc:	dc000017 	ldw	r16,0(sp)
  813fd0:	dec00304 	addi	sp,sp,12
  813fd4:	f800283a 	ret

00813fd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  813fd8:	defffe04 	addi	sp,sp,-8
  813fdc:	dfc00115 	stw	ra,4(sp)
  813fe0:	df000015 	stw	fp,0(sp)
  813fe4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  813fe8:	0009883a 	mov	r4,zero
  813fec:	01440004 	movi	r5,4096
  813ff0:	081431c0 	call	81431c <alt_icache_flush>
#endif
}
  813ff4:	e037883a 	mov	sp,fp
  813ff8:	dfc00117 	ldw	ra,4(sp)
  813ffc:	df000017 	ldw	fp,0(sp)
  814000:	dec00204 	addi	sp,sp,8
  814004:	f800283a 	ret

00814008 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814008:	defff804 	addi	sp,sp,-32
  81400c:	dfc00715 	stw	ra,28(sp)
  814010:	df000615 	stw	fp,24(sp)
  814014:	dc000515 	stw	r16,20(sp)
  814018:	df000504 	addi	fp,sp,20
  81401c:	e13ffc15 	stw	r4,-16(fp)
  814020:	e17ffd15 	stw	r5,-12(fp)
  814024:	e1bffe15 	stw	r6,-8(fp)
  814028:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81402c:	e13ffd17 	ldw	r4,-12(fp)
  814030:	e17ffe17 	ldw	r5,-8(fp)
  814034:	e1bfff17 	ldw	r6,-4(fp)
  814038:	08115f00 	call	8115f0 <open>
  81403c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814040:	e0bffb17 	ldw	r2,-20(fp)
  814044:	1004803a 	cmplt	r2,r2,zero
  814048:	10001f1e 	bne	r2,zero,8140c8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81404c:	e13ffb17 	ldw	r4,-20(fp)
  814050:	04002074 	movhi	r16,129
  814054:	8416f804 	addi	r16,r16,23520
  814058:	01400304 	movi	r5,12
  81405c:	08102900 	call	810290 <__mulsi3>
  814060:	1405883a 	add	r2,r2,r16
  814064:	10c00017 	ldw	r3,0(r2)
  814068:	e0bffc17 	ldw	r2,-16(fp)
  81406c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814070:	e13ffb17 	ldw	r4,-20(fp)
  814074:	04002074 	movhi	r16,129
  814078:	8416f804 	addi	r16,r16,23520
  81407c:	01400304 	movi	r5,12
  814080:	08102900 	call	810290 <__mulsi3>
  814084:	1405883a 	add	r2,r2,r16
  814088:	10800104 	addi	r2,r2,4
  81408c:	10c00017 	ldw	r3,0(r2)
  814090:	e0bffc17 	ldw	r2,-16(fp)
  814094:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  814098:	e13ffb17 	ldw	r4,-20(fp)
  81409c:	04002074 	movhi	r16,129
  8140a0:	8416f804 	addi	r16,r16,23520
  8140a4:	01400304 	movi	r5,12
  8140a8:	08102900 	call	810290 <__mulsi3>
  8140ac:	1405883a 	add	r2,r2,r16
  8140b0:	10800204 	addi	r2,r2,8
  8140b4:	10c00017 	ldw	r3,0(r2)
  8140b8:	e0bffc17 	ldw	r2,-16(fp)
  8140bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8140c0:	e13ffb17 	ldw	r4,-20(fp)
  8140c4:	08119600 	call	811960 <alt_release_fd>
  }
} 
  8140c8:	e037883a 	mov	sp,fp
  8140cc:	dfc00217 	ldw	ra,8(sp)
  8140d0:	df000117 	ldw	fp,4(sp)
  8140d4:	dc000017 	ldw	r16,0(sp)
  8140d8:	dec00304 	addi	sp,sp,12
  8140dc:	f800283a 	ret

008140e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8140e0:	defffb04 	addi	sp,sp,-20
  8140e4:	dfc00415 	stw	ra,16(sp)
  8140e8:	df000315 	stw	fp,12(sp)
  8140ec:	df000304 	addi	fp,sp,12
  8140f0:	e13ffd15 	stw	r4,-12(fp)
  8140f4:	e17ffe15 	stw	r5,-8(fp)
  8140f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8140fc:	01002074 	movhi	r4,129
  814100:	2116fb04 	addi	r4,r4,23532
  814104:	e17ffd17 	ldw	r5,-12(fp)
  814108:	01800044 	movi	r6,1
  81410c:	01c07fc4 	movi	r7,511
  814110:	08140080 	call	814008 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814114:	01002074 	movhi	r4,129
  814118:	2116f804 	addi	r4,r4,23520
  81411c:	e17ffe17 	ldw	r5,-8(fp)
  814120:	000d883a 	mov	r6,zero
  814124:	01c07fc4 	movi	r7,511
  814128:	08140080 	call	814008 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81412c:	01002074 	movhi	r4,129
  814130:	2116fe04 	addi	r4,r4,23544
  814134:	e17fff17 	ldw	r5,-4(fp)
  814138:	01800044 	movi	r6,1
  81413c:	01c07fc4 	movi	r7,511
  814140:	08140080 	call	814008 <alt_open_fd>
}  
  814144:	e037883a 	mov	sp,fp
  814148:	dfc00117 	ldw	ra,4(sp)
  81414c:	df000017 	ldw	fp,0(sp)
  814150:	dec00204 	addi	sp,sp,8
  814154:	f800283a 	ret

00814158 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  814158:	defffa04 	addi	sp,sp,-24
  81415c:	df000515 	stw	fp,20(sp)
  814160:	df000504 	addi	fp,sp,20
  814164:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814168:	0005303a 	rdctl	r2,status
  81416c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814170:	e0fffd17 	ldw	r3,-12(fp)
  814174:	00bfff84 	movi	r2,-2
  814178:	1884703a 	and	r2,r3,r2
  81417c:	1001703a 	wrctl	status,r2
  
  return context;
  814180:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  814184:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  814188:	e0bfff17 	ldw	r2,-4(fp)
  81418c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  814190:	e0bffc17 	ldw	r2,-16(fp)
  814194:	10c00017 	ldw	r3,0(r2)
  814198:	e0bffc17 	ldw	r2,-16(fp)
  81419c:	10800117 	ldw	r2,4(r2)
  8141a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8141a4:	e0bffc17 	ldw	r2,-16(fp)
  8141a8:	10c00117 	ldw	r3,4(r2)
  8141ac:	e0bffc17 	ldw	r2,-16(fp)
  8141b0:	10800017 	ldw	r2,0(r2)
  8141b4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8141b8:	e0fffc17 	ldw	r3,-16(fp)
  8141bc:	e0bffc17 	ldw	r2,-16(fp)
  8141c0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8141c4:	e0fffc17 	ldw	r3,-16(fp)
  8141c8:	e0bffc17 	ldw	r2,-16(fp)
  8141cc:	18800015 	stw	r2,0(r3)
  8141d0:	e0bffe17 	ldw	r2,-8(fp)
  8141d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8141d8:	e0bffb17 	ldw	r2,-20(fp)
  8141dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8141e0:	e037883a 	mov	sp,fp
  8141e4:	df000017 	ldw	fp,0(sp)
  8141e8:	dec00104 	addi	sp,sp,4
  8141ec:	f800283a 	ret

008141f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8141f0:	defffb04 	addi	sp,sp,-20
  8141f4:	dfc00415 	stw	ra,16(sp)
  8141f8:	df000315 	stw	fp,12(sp)
  8141fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  814200:	d0a01017 	ldw	r2,-32704(gp)
  814204:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  814208:	d0a71317 	ldw	r2,-25524(gp)
  81420c:	10800044 	addi	r2,r2,1
  814210:	d0a71315 	stw	r2,-25524(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814214:	00003106 	br	8142dc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  814218:	e0bffe17 	ldw	r2,-8(fp)
  81421c:	10800017 	ldw	r2,0(r2)
  814220:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  814224:	e0bffe17 	ldw	r2,-8(fp)
  814228:	10800403 	ldbu	r2,16(r2)
  81422c:	10803fcc 	andi	r2,r2,255
  814230:	1005003a 	cmpeq	r2,r2,zero
  814234:	1000051e 	bne	r2,zero,81424c <alt_tick+0x5c>
  814238:	d0a71317 	ldw	r2,-25524(gp)
  81423c:	1004c03a 	cmpne	r2,r2,zero
  814240:	1000021e 	bne	r2,zero,81424c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  814244:	e0bffe17 	ldw	r2,-8(fp)
  814248:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81424c:	e0bffe17 	ldw	r2,-8(fp)
  814250:	10c00217 	ldw	r3,8(r2)
  814254:	d0a71317 	ldw	r2,-25524(gp)
  814258:	10c01e36 	bltu	r2,r3,8142d4 <alt_tick+0xe4>
  81425c:	e0bffe17 	ldw	r2,-8(fp)
  814260:	10800403 	ldbu	r2,16(r2)
  814264:	10803fcc 	andi	r2,r2,255
  814268:	1004c03a 	cmpne	r2,r2,zero
  81426c:	1000191e 	bne	r2,zero,8142d4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  814270:	e0bffe17 	ldw	r2,-8(fp)
  814274:	10c00317 	ldw	r3,12(r2)
  814278:	e0bffe17 	ldw	r2,-8(fp)
  81427c:	11000517 	ldw	r4,20(r2)
  814280:	183ee83a 	callr	r3
  814284:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  814288:	e0bffd17 	ldw	r2,-12(fp)
  81428c:	1004c03a 	cmpne	r2,r2,zero
  814290:	1000031e 	bne	r2,zero,8142a0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  814294:	e13ffe17 	ldw	r4,-8(fp)
  814298:	08141580 	call	814158 <alt_alarm_stop>
  81429c:	00000d06 	br	8142d4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8142a0:	e0bffe17 	ldw	r2,-8(fp)
  8142a4:	10c00217 	ldw	r3,8(r2)
  8142a8:	e0bffd17 	ldw	r2,-12(fp)
  8142ac:	1887883a 	add	r3,r3,r2
  8142b0:	e0bffe17 	ldw	r2,-8(fp)
  8142b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8142b8:	e0bffe17 	ldw	r2,-8(fp)
  8142bc:	10c00217 	ldw	r3,8(r2)
  8142c0:	d0a71317 	ldw	r2,-25524(gp)
  8142c4:	1880032e 	bgeu	r3,r2,8142d4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8142c8:	e0fffe17 	ldw	r3,-8(fp)
  8142cc:	00800044 	movi	r2,1
  8142d0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8142d4:	e0bfff17 	ldw	r2,-4(fp)
  8142d8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8142dc:	d0e01004 	addi	r3,gp,-32704
  8142e0:	e0bffe17 	ldw	r2,-8(fp)
  8142e4:	10ffcc1e 	bne	r2,r3,814218 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8142e8:	e037883a 	mov	sp,fp
  8142ec:	dfc00117 	ldw	ra,4(sp)
  8142f0:	df000017 	ldw	fp,0(sp)
  8142f4:	dec00204 	addi	sp,sp,8
  8142f8:	f800283a 	ret

008142fc <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  8142fc:	deffff04 	addi	sp,sp,-4
  814300:	df000015 	stw	fp,0(sp)
  814304:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814308:	000170fa 	wrctl	ienable,zero
}
  81430c:	e037883a 	mov	sp,fp
  814310:	df000017 	ldw	fp,0(sp)
  814314:	dec00104 	addi	sp,sp,4
  814318:	f800283a 	ret

0081431c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81431c:	defffb04 	addi	sp,sp,-20
  814320:	df000415 	stw	fp,16(sp)
  814324:	df000404 	addi	fp,sp,16
  814328:	e13ffe15 	stw	r4,-8(fp)
  81432c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814330:	e0bfff17 	ldw	r2,-4(fp)
  814334:	10840070 	cmpltui	r2,r2,4097
  814338:	1000021e 	bne	r2,zero,814344 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81433c:	00840004 	movi	r2,4096
  814340:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814344:	e0fffe17 	ldw	r3,-8(fp)
  814348:	e0bfff17 	ldw	r2,-4(fp)
  81434c:	1885883a 	add	r2,r3,r2
  814350:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814354:	e0bffe17 	ldw	r2,-8(fp)
  814358:	e0bffd15 	stw	r2,-12(fp)
  81435c:	00000506 	br	814374 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814360:	e0bffd17 	ldw	r2,-12(fp)
  814364:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814368:	e0bffd17 	ldw	r2,-12(fp)
  81436c:	10800804 	addi	r2,r2,32
  814370:	e0bffd15 	stw	r2,-12(fp)
  814374:	e0fffd17 	ldw	r3,-12(fp)
  814378:	e0bffc17 	ldw	r2,-16(fp)
  81437c:	18bff836 	bltu	r3,r2,814360 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814380:	e0bffe17 	ldw	r2,-8(fp)
  814384:	108007cc 	andi	r2,r2,31
  814388:	1005003a 	cmpeq	r2,r2,zero
  81438c:	1000021e 	bne	r2,zero,814398 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814390:	e0bffd17 	ldw	r2,-12(fp)
  814394:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814398:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81439c:	e037883a 	mov	sp,fp
  8143a0:	df000017 	ldw	fp,0(sp)
  8143a4:	dec00104 	addi	sp,sp,4
  8143a8:	f800283a 	ret

008143ac <atexit>:
  8143ac:	200b883a 	mov	r5,r4
  8143b0:	000d883a 	mov	r6,zero
  8143b4:	0009883a 	mov	r4,zero
  8143b8:	000f883a 	mov	r7,zero
  8143bc:	081446c1 	jmpi	81446c <__register_exitproc>

008143c0 <exit>:
  8143c0:	defffe04 	addi	sp,sp,-8
  8143c4:	000b883a 	mov	r5,zero
  8143c8:	dc000015 	stw	r16,0(sp)
  8143cc:	dfc00115 	stw	ra,4(sp)
  8143d0:	2021883a 	mov	r16,r4
  8143d4:	08145a40 	call	8145a4 <__call_exitprocs>
  8143d8:	00802074 	movhi	r2,129
  8143dc:	109bb904 	addi	r2,r2,28388
  8143e0:	11000017 	ldw	r4,0(r2)
  8143e4:	20800f17 	ldw	r2,60(r4)
  8143e8:	10000126 	beq	r2,zero,8143f0 <exit+0x30>
  8143ec:	103ee83a 	callr	r2
  8143f0:	8009883a 	mov	r4,r16
  8143f4:	08147940 	call	814794 <_exit>

008143f8 <memcmp>:
  8143f8:	00c000c4 	movi	r3,3
  8143fc:	1980032e 	bgeu	r3,r6,81440c <memcmp+0x14>
  814400:	2144b03a 	or	r2,r4,r5
  814404:	10c4703a 	and	r2,r2,r3
  814408:	10000f26 	beq	r2,zero,814448 <memcmp+0x50>
  81440c:	31ffffc4 	addi	r7,r6,-1
  814410:	3000061e 	bne	r6,zero,81442c <memcmp+0x34>
  814414:	00000a06 	br	814440 <memcmp+0x48>
  814418:	39ffffc4 	addi	r7,r7,-1
  81441c:	00bfffc4 	movi	r2,-1
  814420:	21000044 	addi	r4,r4,1
  814424:	29400044 	addi	r5,r5,1
  814428:	38800526 	beq	r7,r2,814440 <memcmp+0x48>
  81442c:	20c00003 	ldbu	r3,0(r4)
  814430:	28800003 	ldbu	r2,0(r5)
  814434:	18bff826 	beq	r3,r2,814418 <memcmp+0x20>
  814438:	1885c83a 	sub	r2,r3,r2
  81443c:	f800283a 	ret
  814440:	0005883a 	mov	r2,zero
  814444:	f800283a 	ret
  814448:	180f883a 	mov	r7,r3
  81444c:	20c00017 	ldw	r3,0(r4)
  814450:	28800017 	ldw	r2,0(r5)
  814454:	18bfed1e 	bne	r3,r2,81440c <memcmp+0x14>
  814458:	31bfff04 	addi	r6,r6,-4
  81445c:	21000104 	addi	r4,r4,4
  814460:	29400104 	addi	r5,r5,4
  814464:	39bff936 	bltu	r7,r6,81444c <memcmp+0x54>
  814468:	003fe806 	br	81440c <memcmp+0x14>

0081446c <__register_exitproc>:
  81446c:	defffa04 	addi	sp,sp,-24
  814470:	00802074 	movhi	r2,129
  814474:	109bb904 	addi	r2,r2,28388
  814478:	dc000015 	stw	r16,0(sp)
  81447c:	14000017 	ldw	r16,0(r2)
  814480:	dd000415 	stw	r20,16(sp)
  814484:	2829883a 	mov	r20,r5
  814488:	81405217 	ldw	r5,328(r16)
  81448c:	dcc00315 	stw	r19,12(sp)
  814490:	dc800215 	stw	r18,8(sp)
  814494:	dc400115 	stw	r17,4(sp)
  814498:	dfc00515 	stw	ra,20(sp)
  81449c:	2023883a 	mov	r17,r4
  8144a0:	3027883a 	mov	r19,r6
  8144a4:	3825883a 	mov	r18,r7
  8144a8:	28002526 	beq	r5,zero,814540 <__register_exitproc+0xd4>
  8144ac:	29000117 	ldw	r4,4(r5)
  8144b0:	008007c4 	movi	r2,31
  8144b4:	11002716 	blt	r2,r4,814554 <__register_exitproc+0xe8>
  8144b8:	8800101e 	bne	r17,zero,8144fc <__register_exitproc+0x90>
  8144bc:	2105883a 	add	r2,r4,r4
  8144c0:	1085883a 	add	r2,r2,r2
  8144c4:	20c00044 	addi	r3,r4,1
  8144c8:	1145883a 	add	r2,r2,r5
  8144cc:	0009883a 	mov	r4,zero
  8144d0:	15000215 	stw	r20,8(r2)
  8144d4:	28c00115 	stw	r3,4(r5)
  8144d8:	2005883a 	mov	r2,r4
  8144dc:	dfc00517 	ldw	ra,20(sp)
  8144e0:	dd000417 	ldw	r20,16(sp)
  8144e4:	dcc00317 	ldw	r19,12(sp)
  8144e8:	dc800217 	ldw	r18,8(sp)
  8144ec:	dc400117 	ldw	r17,4(sp)
  8144f0:	dc000017 	ldw	r16,0(sp)
  8144f4:	dec00604 	addi	sp,sp,24
  8144f8:	f800283a 	ret
  8144fc:	29802204 	addi	r6,r5,136
  814500:	00800044 	movi	r2,1
  814504:	110e983a 	sll	r7,r2,r4
  814508:	30c04017 	ldw	r3,256(r6)
  81450c:	2105883a 	add	r2,r4,r4
  814510:	1085883a 	add	r2,r2,r2
  814514:	1185883a 	add	r2,r2,r6
  814518:	19c6b03a 	or	r3,r3,r7
  81451c:	14802015 	stw	r18,128(r2)
  814520:	14c00015 	stw	r19,0(r2)
  814524:	00800084 	movi	r2,2
  814528:	30c04015 	stw	r3,256(r6)
  81452c:	88bfe31e 	bne	r17,r2,8144bc <__register_exitproc+0x50>
  814530:	30804117 	ldw	r2,260(r6)
  814534:	11c4b03a 	or	r2,r2,r7
  814538:	30804115 	stw	r2,260(r6)
  81453c:	003fdf06 	br	8144bc <__register_exitproc+0x50>
  814540:	008020b4 	movhi	r2,130
  814544:	10a35604 	addi	r2,r2,-29352
  814548:	100b883a 	mov	r5,r2
  81454c:	80805215 	stw	r2,328(r16)
  814550:	003fd606 	br	8144ac <__register_exitproc+0x40>
  814554:	00800034 	movhi	r2,0
  814558:	10800004 	addi	r2,r2,0
  81455c:	1000021e 	bne	r2,zero,814568 <__register_exitproc+0xfc>
  814560:	013fffc4 	movi	r4,-1
  814564:	003fdc06 	br	8144d8 <__register_exitproc+0x6c>
  814568:	01006404 	movi	r4,400
  81456c:	103ee83a 	callr	r2
  814570:	1007883a 	mov	r3,r2
  814574:	103ffa26 	beq	r2,zero,814560 <__register_exitproc+0xf4>
  814578:	80805217 	ldw	r2,328(r16)
  81457c:	180b883a 	mov	r5,r3
  814580:	18000115 	stw	zero,4(r3)
  814584:	18800015 	stw	r2,0(r3)
  814588:	80c05215 	stw	r3,328(r16)
  81458c:	18006215 	stw	zero,392(r3)
  814590:	18006315 	stw	zero,396(r3)
  814594:	0009883a 	mov	r4,zero
  814598:	883fc826 	beq	r17,zero,8144bc <__register_exitproc+0x50>
  81459c:	003fd706 	br	8144fc <__register_exitproc+0x90>

008145a0 <register_fini>:
  8145a0:	f800283a 	ret

008145a4 <__call_exitprocs>:
  8145a4:	00802074 	movhi	r2,129
  8145a8:	109bb904 	addi	r2,r2,28388
  8145ac:	10800017 	ldw	r2,0(r2)
  8145b0:	defff304 	addi	sp,sp,-52
  8145b4:	df000b15 	stw	fp,44(sp)
  8145b8:	d8800115 	stw	r2,4(sp)
  8145bc:	00800034 	movhi	r2,0
  8145c0:	10800004 	addi	r2,r2,0
  8145c4:	1005003a 	cmpeq	r2,r2,zero
  8145c8:	d8800215 	stw	r2,8(sp)
  8145cc:	d8800117 	ldw	r2,4(sp)
  8145d0:	dd400815 	stw	r21,32(sp)
  8145d4:	dd000715 	stw	r20,28(sp)
  8145d8:	10805204 	addi	r2,r2,328
  8145dc:	dfc00c15 	stw	ra,48(sp)
  8145e0:	ddc00a15 	stw	r23,40(sp)
  8145e4:	dd800915 	stw	r22,36(sp)
  8145e8:	dcc00615 	stw	r19,24(sp)
  8145ec:	dc800515 	stw	r18,20(sp)
  8145f0:	dc400415 	stw	r17,16(sp)
  8145f4:	dc000315 	stw	r16,12(sp)
  8145f8:	282b883a 	mov	r21,r5
  8145fc:	2039883a 	mov	fp,r4
  814600:	d8800015 	stw	r2,0(sp)
  814604:	2829003a 	cmpeq	r20,r5,zero
  814608:	d8800117 	ldw	r2,4(sp)
  81460c:	14405217 	ldw	r17,328(r2)
  814610:	88001026 	beq	r17,zero,814654 <__call_exitprocs+0xb0>
  814614:	ddc00017 	ldw	r23,0(sp)
  814618:	88800117 	ldw	r2,4(r17)
  81461c:	8c802204 	addi	r18,r17,136
  814620:	143fffc4 	addi	r16,r2,-1
  814624:	80000916 	blt	r16,zero,81464c <__call_exitprocs+0xa8>
  814628:	05bfffc4 	movi	r22,-1
  81462c:	a000151e 	bne	r20,zero,814684 <__call_exitprocs+0xe0>
  814630:	8409883a 	add	r4,r16,r16
  814634:	2105883a 	add	r2,r4,r4
  814638:	1485883a 	add	r2,r2,r18
  81463c:	10c02017 	ldw	r3,128(r2)
  814640:	a8c01126 	beq	r21,r3,814688 <__call_exitprocs+0xe4>
  814644:	843fffc4 	addi	r16,r16,-1
  814648:	85bff81e 	bne	r16,r22,81462c <__call_exitprocs+0x88>
  81464c:	d8800217 	ldw	r2,8(sp)
  814650:	10003126 	beq	r2,zero,814718 <__call_exitprocs+0x174>
  814654:	dfc00c17 	ldw	ra,48(sp)
  814658:	df000b17 	ldw	fp,44(sp)
  81465c:	ddc00a17 	ldw	r23,40(sp)
  814660:	dd800917 	ldw	r22,36(sp)
  814664:	dd400817 	ldw	r21,32(sp)
  814668:	dd000717 	ldw	r20,28(sp)
  81466c:	dcc00617 	ldw	r19,24(sp)
  814670:	dc800517 	ldw	r18,20(sp)
  814674:	dc400417 	ldw	r17,16(sp)
  814678:	dc000317 	ldw	r16,12(sp)
  81467c:	dec00d04 	addi	sp,sp,52
  814680:	f800283a 	ret
  814684:	8409883a 	add	r4,r16,r16
  814688:	88c00117 	ldw	r3,4(r17)
  81468c:	2105883a 	add	r2,r4,r4
  814690:	1445883a 	add	r2,r2,r17
  814694:	18ffffc4 	addi	r3,r3,-1
  814698:	11800217 	ldw	r6,8(r2)
  81469c:	1c001526 	beq	r3,r16,8146f4 <__call_exitprocs+0x150>
  8146a0:	10000215 	stw	zero,8(r2)
  8146a4:	303fe726 	beq	r6,zero,814644 <__call_exitprocs+0xa0>
  8146a8:	00c00044 	movi	r3,1
  8146ac:	1c06983a 	sll	r3,r3,r16
  8146b0:	90804017 	ldw	r2,256(r18)
  8146b4:	8cc00117 	ldw	r19,4(r17)
  8146b8:	1884703a 	and	r2,r3,r2
  8146bc:	10001426 	beq	r2,zero,814710 <__call_exitprocs+0x16c>
  8146c0:	90804117 	ldw	r2,260(r18)
  8146c4:	1884703a 	and	r2,r3,r2
  8146c8:	10000c1e 	bne	r2,zero,8146fc <__call_exitprocs+0x158>
  8146cc:	2105883a 	add	r2,r4,r4
  8146d0:	1485883a 	add	r2,r2,r18
  8146d4:	11400017 	ldw	r5,0(r2)
  8146d8:	e009883a 	mov	r4,fp
  8146dc:	303ee83a 	callr	r6
  8146e0:	88800117 	ldw	r2,4(r17)
  8146e4:	98bfc81e 	bne	r19,r2,814608 <__call_exitprocs+0x64>
  8146e8:	b8800017 	ldw	r2,0(r23)
  8146ec:	147fd526 	beq	r2,r17,814644 <__call_exitprocs+0xa0>
  8146f0:	003fc506 	br	814608 <__call_exitprocs+0x64>
  8146f4:	8c000115 	stw	r16,4(r17)
  8146f8:	003fea06 	br	8146a4 <__call_exitprocs+0x100>
  8146fc:	2105883a 	add	r2,r4,r4
  814700:	1485883a 	add	r2,r2,r18
  814704:	11000017 	ldw	r4,0(r2)
  814708:	303ee83a 	callr	r6
  81470c:	003ff406 	br	8146e0 <__call_exitprocs+0x13c>
  814710:	303ee83a 	callr	r6
  814714:	003ff206 	br	8146e0 <__call_exitprocs+0x13c>
  814718:	88800117 	ldw	r2,4(r17)
  81471c:	1000081e 	bne	r2,zero,814740 <__call_exitprocs+0x19c>
  814720:	89000017 	ldw	r4,0(r17)
  814724:	20000726 	beq	r4,zero,814744 <__call_exitprocs+0x1a0>
  814728:	b9000015 	stw	r4,0(r23)
  81472c:	8809883a 	mov	r4,r17
  814730:	00000000 	call	0 <__reset-0x800000>
  814734:	bc400017 	ldw	r17,0(r23)
  814738:	883fb71e 	bne	r17,zero,814618 <__call_exitprocs+0x74>
  81473c:	003fc506 	br	814654 <__call_exitprocs+0xb0>
  814740:	89000017 	ldw	r4,0(r17)
  814744:	882f883a 	mov	r23,r17
  814748:	2023883a 	mov	r17,r4
  81474c:	883fb21e 	bne	r17,zero,814618 <__call_exitprocs+0x74>
  814750:	003fc006 	br	814654 <__call_exitprocs+0xb0>

00814754 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814754:	defffd04 	addi	sp,sp,-12
  814758:	df000215 	stw	fp,8(sp)
  81475c:	df000204 	addi	fp,sp,8
  814760:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814764:	e0bfff17 	ldw	r2,-4(fp)
  814768:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81476c:	e0bffe17 	ldw	r2,-8(fp)
  814770:	1005003a 	cmpeq	r2,r2,zero
  814774:	1000021e 	bne	r2,zero,814780 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814778:	002af070 	cmpltui	zero,zero,43969
  81477c:	00000106 	br	814784 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814780:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814784:	e037883a 	mov	sp,fp
  814788:	df000017 	ldw	fp,0(sp)
  81478c:	dec00104 	addi	sp,sp,4
  814790:	f800283a 	ret

00814794 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814794:	defffd04 	addi	sp,sp,-12
  814798:	dfc00215 	stw	ra,8(sp)
  81479c:	df000115 	stw	fp,4(sp)
  8147a0:	df000104 	addi	fp,sp,4
  8147a4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8147a8:	e13fff17 	ldw	r4,-4(fp)
  8147ac:	08147540 	call	814754 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8147b0:	003fff06 	br	8147b0 <_exit+0x1c>
  8147b4:	00000010 	cmplti	zero,zero,0
  8147b8:	00000000 	call	0 <__reset-0x800000>
  8147bc:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  8147c0:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  8147c4:	001b0c0b 	ldhu	zero,27696(zero)
  8147c8:	00000028 	cmpgeui	zero,zero,0
  8147cc:	00000018 	cmpnei	zero,zero,0
  8147d0:	0080e0e8 	cmpgeui	r2,zero,899
  8147d4:	0000066c 	andhi	zero,zero,25
  8147d8:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  8147dc:	910a9074 	orhi	r4,r18,10817
  8147e0:	94089209 	0x94089209
  8147e4:	97049606 	br	815a40 <__malloc_av_+0x2c4>
  8147e8:	93019f03 	ldbu	r12,1660(r18)
  8147ec:	9c059507 	ldb	r16,5716(r19)
  8147f0:	00000002 	0x2
  8147f4:	00000028 	cmpgeui	zero,zero,0
  8147f8:	00000044 	movi	zero,1
  8147fc:	0080e754 	movui	r2,925
  814800:	00000660 	cmpeqi	zero,zero,25
  814804:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  814808:	92099170 	cmpltui	r8,r18,9797
  81480c:	96069408 	cmpgei	et,r18,6736
  814810:	9c039704 	addi	r16,r19,3676
  814814:	90019f02 	0x90019f02
  814818:	9507930a 	0x9507930a
  81481c:	00000005 	stb	zero,0(zero)
  814820:	008145a0 	cmpeqi	r2,zero,1302
